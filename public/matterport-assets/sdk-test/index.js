/*! For license information please see index.js.LICENSE.txt */
(()=>{"use strict";var e,t,n={448:(e,t,n)=>{var r=n(294),a=n(840);function l(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var i=new Set,o={};function s(e,t){c(e,t),c(e+"Capture",t)}function c(e,t){for(o[e]=t,e=0;e<t.length;e++)i.add(t[e])}var u=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),d=Object.prototype.hasOwnProperty,f=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,p={},h={};function g(e,t,n,r,a,l,i){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=a,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=l,this.removeEmptyString=i}var m={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){m[e]=new g(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];m[t]=new g(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){m[e]=new g(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){m[e]=new g(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){m[e]=new g(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){m[e]=new g(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){m[e]=new g(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){m[e]=new g(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){m[e]=new g(e,5,!1,e.toLowerCase(),null,!1,!1)}));var v=/[\-:]([a-z])/g;function b(e){return e[1].toUpperCase()}function y(e,t,n,r){var a=m.hasOwnProperty(t)?m[t]:null;(null!==a?0!==a.type:r||!(2<t.length)||"o"!==t[0]&&"O"!==t[0]||"n"!==t[1]&&"N"!==t[1])&&(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,a,r)&&(n=null),r||null===a?function(e){return!!d.call(h,e)||!d.call(p,e)&&(f.test(e)?h[e]=!0:(p[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):a.mustUseProperty?e[a.propertyName]=null===n?3!==a.type&&"":n:(t=a.attributeName,r=a.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(a=a.type)||4===a&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(v,b);m[t]=new g(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(v,b);m[t]=new g(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(v,b);m[t]=new g(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){m[e]=new g(e,1,!1,e.toLowerCase(),null,!1,!1)})),m.xlinkHref=new g("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){m[e]=new g(e,1,!1,e.toLowerCase(),null,!0,!0)}));var x=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,k=Symbol.for("react.element"),j=Symbol.for("react.portal"),E=Symbol.for("react.fragment"),w=Symbol.for("react.strict_mode"),T=Symbol.for("react.profiler"),S=Symbol.for("react.provider"),C=Symbol.for("react.context"),O=Symbol.for("react.forward_ref"),N=Symbol.for("react.suspense"),I=Symbol.for("react.suspense_list"),R=Symbol.for("react.memo"),P=Symbol.for("react.lazy");Symbol.for("react.scope"),Symbol.for("react.debug_trace_mode");var L=Symbol.for("react.offscreen");Symbol.for("react.legacy_hidden"),Symbol.for("react.cache"),Symbol.for("react.tracing_marker");var A=Symbol.iterator;function _(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=A&&e[A]||e["@@iterator"])?e:null}var F,M=Object.assign;function D(e){if(void 0===F)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);F=t&&t[1]||""}return"\n"+F+e}var z=!1;function B(e,t){if(!e||z)return"";z=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var r=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){r=e}e.call(t.prototype)}else{try{throw Error()}catch(e){r=e}e()}}catch(t){if(t&&r&&"string"==typeof t.stack){for(var a=t.stack.split("\n"),l=r.stack.split("\n"),i=a.length-1,o=l.length-1;1<=i&&0<=o&&a[i]!==l[o];)o--;for(;1<=i&&0<=o;i--,o--)if(a[i]!==l[o]){if(1!==i||1!==o)do{if(i--,0>--o||a[i]!==l[o]){var s="\n"+a[i].replace(" at new "," at ");return e.displayName&&s.includes("<anonymous>")&&(s=s.replace("<anonymous>",e.displayName)),s}}while(1<=i&&0<=o);break}}}finally{z=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?D(e):""}function U(e){switch(e.tag){case 5:return D(e.type);case 16:return D("Lazy");case 13:return D("Suspense");case 19:return D("SuspenseList");case 0:case 2:case 15:return e=B(e.type,!1);case 11:return e=B(e.type.render,!1);case 1:return e=B(e.type,!0);default:return""}}function H(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case E:return"Fragment";case j:return"Portal";case T:return"Profiler";case w:return"StrictMode";case N:return"Suspense";case I:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case C:return(e.displayName||"Context")+".Consumer";case S:return(e._context.displayName||"Context")+".Provider";case O:var t=e.render;return(e=e.displayName)||(e=""!==(e=t.displayName||t.name||"")?"ForwardRef("+e+")":"ForwardRef"),e;case R:return null!==(t=e.displayName||null)?t:H(e.type)||"Memo";case P:t=e._payload,e=e._init;try{return H(e(t))}catch(e){}}return null}function V(e){var t=e.type;switch(e.tag){case 24:return"Cache";case 9:return(t.displayName||"Context")+".Consumer";case 10:return(t._context.displayName||"Context")+".Provider";case 18:return"DehydratedFragment";case 11:return e=(e=t.render).displayName||e.name||"",t.displayName||(""!==e?"ForwardRef("+e+")":"ForwardRef");case 7:return"Fragment";case 5:return t;case 4:return"Portal";case 3:return"Root";case 6:return"Text";case 16:return H(t);case 8:return t===w?"StrictMode":"Mode";case 22:return"Offscreen";case 12:return"Profiler";case 21:return"Scope";case 13:return"Suspense";case 19:return"SuspenseList";case 25:return"TracingMarker";case 1:case 0:case 17:case 2:case 14:case 15:if("function"==typeof t)return t.displayName||t.name||null;if("string"==typeof t)return t}return null}function W(e){switch(typeof e){case"boolean":case"number":case"string":case"undefined":case"object":return e;default:return""}}function $(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function G(e){e._valueTracker||(e._valueTracker=function(e){var t=$(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var a=n.get,l=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return a.call(this)},set:function(e){r=""+e,l.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function K(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=$(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function Q(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function Y(e,t){var n=t.checked;return M({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function X(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=W(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function q(e,t){null!=(t=t.checked)&&y(e,"checked",t,!1)}function J(e,t){q(e,t);var n=W(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?ee(e,t.type,n):t.hasOwnProperty("defaultValue")&&ee(e,t.type,W(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function Z(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function ee(e,t,n){"number"===t&&Q(e.ownerDocument)===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}var te=Array.isArray;function ne(e,t,n,r){if(e=e.options,t){t={};for(var a=0;a<n.length;a++)t["$"+n[a]]=!0;for(n=0;n<e.length;n++)a=t.hasOwnProperty("$"+e[n].value),e[n].selected!==a&&(e[n].selected=a),a&&r&&(e[n].defaultSelected=!0)}else{for(n=""+W(n),t=null,a=0;a<e.length;a++){if(e[a].value===n)return e[a].selected=!0,void(r&&(e[a].defaultSelected=!0));null!==t||e[a].disabled||(t=e[a])}null!==t&&(t.selected=!0)}}function re(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(l(91));return M({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function ae(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(l(92));if(te(n)){if(1<n.length)throw Error(l(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:W(n)}}function le(e,t){var n=W(t.value),r=W(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function ie(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}function oe(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function se(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?oe(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var ce,ue,de=(ue=function(e,t){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=t;else{for((ce=ce||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=ce.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction((function(){return ue(e,t)}))}:ue);function fe(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var pe={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},he=["Webkit","ms","Moz","O"];function ge(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||pe.hasOwnProperty(e)&&pe[e]?(""+t).trim():t+"px"}function me(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),a=ge(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,a):e[n]=a}}Object.keys(pe).forEach((function(e){he.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),pe[t]=pe[e]}))}));var ve=M({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function be(e,t){if(t){if(ve[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(l(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(l(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(l(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(l(62))}}function ye(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var xe=null;function ke(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var je=null,Ee=null,we=null;function Te(e){if(e=pa(e)){if("function"!=typeof je)throw Error(l(280));var t=e.stateNode;t&&(t=ga(t),je(e.stateNode,e.type,t))}}function Se(e){Ee?we?we.push(e):we=[e]:Ee=e}function Ce(){if(Ee){var e=Ee,t=we;if(we=Ee=null,Te(e),t)for(e=0;e<t.length;e++)Te(t[e])}}function Oe(e,t){return e(t)}function Ne(){}var Ie=!1;function Re(e,t,n){if(Ie)return e(t,n);Ie=!0;try{return Oe(e,t,n)}finally{Ie=!1,(null!==Ee||null!==we)&&(Ne(),Ce())}}function Pe(e,t){var n=e.stateNode;if(null===n)return null;var r=ga(n);if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(l(231,t,typeof n));return n}var Le=!1;if(u)try{var Ae={};Object.defineProperty(Ae,"passive",{get:function(){Le=!0}}),window.addEventListener("test",Ae,Ae),window.removeEventListener("test",Ae,Ae)}catch(ue){Le=!1}function _e(e,t,n,r,a,l,i,o,s){var c=Array.prototype.slice.call(arguments,3);try{t.apply(n,c)}catch(e){this.onError(e)}}var Fe=!1,Me=null,De=!1,ze=null,Be={onError:function(e){Fe=!0,Me=e}};function Ue(e,t,n,r,a,l,i,o,s){Fe=!1,Me=null,_e.apply(Be,arguments)}function He(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(4098&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function Ve(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&(null!==(e=e.alternate)&&(t=e.memoizedState)),null!==t)return t.dehydrated}return null}function We(e){if(He(e)!==e)throw Error(l(188))}function $e(e){return null!==(e=function(e){var t=e.alternate;if(!t){if(null===(t=He(e)))throw Error(l(188));return t!==e?null:e}for(var n=e,r=t;;){var a=n.return;if(null===a)break;var i=a.alternate;if(null===i){if(null!==(r=a.return)){n=r;continue}break}if(a.child===i.child){for(i=a.child;i;){if(i===n)return We(a),e;if(i===r)return We(a),t;i=i.sibling}throw Error(l(188))}if(n.return!==r.return)n=a,r=i;else{for(var o=!1,s=a.child;s;){if(s===n){o=!0,n=a,r=i;break}if(s===r){o=!0,r=a,n=i;break}s=s.sibling}if(!o){for(s=i.child;s;){if(s===n){o=!0,n=i,r=a;break}if(s===r){o=!0,r=i,n=a;break}s=s.sibling}if(!o)throw Error(l(189))}}if(n.alternate!==r)throw Error(l(190))}if(3!==n.tag)throw Error(l(188));return n.stateNode.current===n?e:t}(e))?Ge(e):null}function Ge(e){if(5===e.tag||6===e.tag)return e;for(e=e.child;null!==e;){var t=Ge(e);if(null!==t)return t;e=e.sibling}return null}var Ke=a.unstable_scheduleCallback,Qe=a.unstable_cancelCallback,Ye=a.unstable_shouldYield,Xe=a.unstable_requestPaint,qe=a.unstable_now,Je=a.unstable_getCurrentPriorityLevel,Ze=a.unstable_ImmediatePriority,et=a.unstable_UserBlockingPriority,tt=a.unstable_NormalPriority,nt=a.unstable_LowPriority,rt=a.unstable_IdlePriority,at=null,lt=null;var it=Math.clz32?Math.clz32:function(e){return 0===(e>>>=0)?32:31-(ot(e)/st|0)|0},ot=Math.log,st=Math.LN2;var ct=64,ut=4194304;function dt(e){switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return 4194240&e;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return 130023424&e;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;default:return e}}function ft(e,t){var n=e.pendingLanes;if(0===n)return 0;var r=0,a=e.suspendedLanes,l=e.pingedLanes,i=268435455&n;if(0!==i){var o=i&~a;0!==o?r=dt(o):0!==(l&=i)&&(r=dt(l))}else 0!==(i=n&~a)?r=dt(i):0!==l&&(r=dt(l));if(0===r)return 0;if(0!==t&&t!==r&&0==(t&a)&&((a=r&-r)>=(l=t&-t)||16===a&&0!=(4194240&l)))return t;if(0!=(4&r)&&(r|=16&n),0!==(t=e.entangledLanes))for(e=e.entanglements,t&=r;0<t;)a=1<<(n=31-it(t)),r|=e[n],t&=~a;return r}function pt(e,t){switch(e){case 1:case 2:case 4:return t+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return t+5e3;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return-1;case 134217728:case 268435456:case 536870912:case 1073741824:default:return-1}}function ht(e){return 0!==(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function gt(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function mt(e,t,n){e.pendingLanes|=t,536870912!==t&&(e.suspendedLanes=0,e.pingedLanes=0),(e=e.eventTimes)[t=31-it(t)]=n}function vt(e,t){var n=e.entangledLanes|=t;for(e=e.entanglements;n;){var r=31-it(n),a=1<<r;a&t|e[r]&t&&(e[r]|=t),n&=~a}}var bt=0;function yt(e){return 1<(e&=-e)?4<e?0!=(268435455&e)?16:536870912:4:1}var xt,kt,jt,Et,wt,Tt=!1,St=[],Ct=null,Ot=null,Nt=null,It=new Map,Rt=new Map,Pt=[],Lt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function At(e,t){switch(e){case"focusin":case"focusout":Ct=null;break;case"dragenter":case"dragleave":Ot=null;break;case"mouseover":case"mouseout":Nt=null;break;case"pointerover":case"pointerout":It.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":Rt.delete(t.pointerId)}}function _t(e,t,n,r,a,l){return null===e||e.nativeEvent!==l?(e={blockedOn:t,domEventName:n,eventSystemFlags:r,nativeEvent:l,targetContainers:[a]},null!==t&&(null!==(t=pa(t))&&kt(t)),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==a&&-1===t.indexOf(a)&&t.push(a),e)}function Ft(e){var t=fa(e.target);if(null!==t){var n=He(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=Ve(n)))return e.blockedOn=t,void wt(e.priority,(function(){jt(n)}))}else if(3===t&&n.stateNode.current.memoizedState.isDehydrated)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function Mt(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=Kt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n)return null!==(t=pa(n))&&kt(t),e.blockedOn=n,!1;var r=new(n=e.nativeEvent).constructor(n.type,n);xe=r,n.target.dispatchEvent(r),xe=null,t.shift()}return!0}function Dt(e,t,n){Mt(e)&&n.delete(t)}function zt(){Tt=!1,null!==Ct&&Mt(Ct)&&(Ct=null),null!==Ot&&Mt(Ot)&&(Ot=null),null!==Nt&&Mt(Nt)&&(Nt=null),It.forEach(Dt),Rt.forEach(Dt)}function Bt(e,t){e.blockedOn===t&&(e.blockedOn=null,Tt||(Tt=!0,a.unstable_scheduleCallback(a.unstable_NormalPriority,zt)))}function Ut(e){function t(t){return Bt(t,e)}if(0<St.length){Bt(St[0],e);for(var n=1;n<St.length;n++){var r=St[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==Ct&&Bt(Ct,e),null!==Ot&&Bt(Ot,e),null!==Nt&&Bt(Nt,e),It.forEach(t),Rt.forEach(t),n=0;n<Pt.length;n++)(r=Pt[n]).blockedOn===e&&(r.blockedOn=null);for(;0<Pt.length&&null===(n=Pt[0]).blockedOn;)Ft(n),null===n.blockedOn&&Pt.shift()}var Ht=x.ReactCurrentBatchConfig;function Vt(e,t,n,r){var a=bt,l=Ht.transition;Ht.transition=null;try{bt=1,$t(e,t,n,r)}finally{bt=a,Ht.transition=l}}function Wt(e,t,n,r){var a=bt,l=Ht.transition;Ht.transition=null;try{bt=4,$t(e,t,n,r)}finally{bt=a,Ht.transition=l}}function $t(e,t,n,r){var a=Kt(e,t,n,r);if(null===a)zr(e,t,r,Gt,n),At(e,r);else if(function(e,t,n,r,a){switch(t){case"focusin":return Ct=_t(Ct,e,t,n,r,a),!0;case"dragenter":return Ot=_t(Ot,e,t,n,r,a),!0;case"mouseover":return Nt=_t(Nt,e,t,n,r,a),!0;case"pointerover":var l=a.pointerId;return It.set(l,_t(It.get(l)||null,e,t,n,r,a)),!0;case"gotpointercapture":return l=a.pointerId,Rt.set(l,_t(Rt.get(l)||null,e,t,n,r,a)),!0}return!1}(a,e,t,n,r))r.stopPropagation();else if(At(e,r),4&t&&-1<Lt.indexOf(e)){for(;null!==a;){var l=pa(a);if(null!==l&&xt(l),null===(l=Kt(e,t,n,r))&&zr(e,t,r,Gt,n),l===a)break;a=l}null!==a&&r.stopPropagation()}else zr(e,t,r,null,n)}var Gt=null;function Kt(e,t,n,r){if(Gt=null,null!==(e=fa(e=ke(r))))if(null===(t=He(e)))e=null;else if(13===(n=t.tag)){if(null!==(e=Ve(t)))return e;e=null}else if(3===n){if(t.stateNode.current.memoizedState.isDehydrated)return 3===t.tag?t.stateNode.containerInfo:null;e=null}else t!==e&&(e=null);return Gt=e,null}function Qt(e){switch(e){case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 1;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"toggle":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 4;case"message":switch(Je()){case Ze:return 1;case et:return 4;case tt:case nt:return 16;case rt:return 536870912;default:return 16}default:return 16}}var Yt=null,Xt=null,qt=null;function Jt(){if(qt)return qt;var e,t,n=Xt,r=n.length,a="value"in Yt?Yt.value:Yt.textContent,l=a.length;for(e=0;e<r&&n[e]===a[e];e++);var i=r-e;for(t=1;t<=i&&n[r-t]===a[l-t];t++);return qt=a.slice(e,1<t?1-t:void 0)}function Zt(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function en(){return!0}function tn(){return!1}function nn(e){function t(t,n,r,a,l){for(var i in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=a,this.target=l,this.currentTarget=null,e)e.hasOwnProperty(i)&&(t=e[i],this[i]=t?t(a):a[i]);return this.isDefaultPrevented=(null!=a.defaultPrevented?a.defaultPrevented:!1===a.returnValue)?en:tn,this.isPropagationStopped=tn,this}return M(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=en)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=en)},persist:function(){},isPersistent:en}),t}var rn,an,ln,on={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},sn=nn(on),cn=M({},on,{view:0,detail:0}),un=nn(cn),dn=M({},cn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:jn,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==ln&&(ln&&"mousemove"===e.type?(rn=e.screenX-ln.screenX,an=e.screenY-ln.screenY):an=rn=0,ln=e),rn)},movementY:function(e){return"movementY"in e?e.movementY:an}}),fn=nn(dn),pn=nn(M({},dn,{dataTransfer:0})),hn=nn(M({},cn,{relatedTarget:0})),gn=nn(M({},on,{animationName:0,elapsedTime:0,pseudoElement:0})),mn=nn(M({},on,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}})),vn=nn(M({},on,{data:0})),bn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},yn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},xn={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function kn(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=xn[e])&&!!t[e]}function jn(){return kn}var En=nn(M({},cn,{key:function(e){if(e.key){var t=bn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=Zt(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?yn[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:jn,charCode:function(e){return"keypress"===e.type?Zt(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?Zt(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}})),wn=nn(M({},dn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),Tn=nn(M({},cn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:jn})),Sn=nn(M({},on,{propertyName:0,elapsedTime:0,pseudoElement:0})),Cn=nn(M({},dn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0})),On=[9,13,27,32],Nn=u&&"CompositionEvent"in window,In=null;u&&"documentMode"in document&&(In=document.documentMode);var Rn=u&&"TextEvent"in window&&!In,Pn=u&&(!Nn||In&&8<In&&11>=In),Ln=String.fromCharCode(32),An=!1;function _n(e,t){switch(e){case"keyup":return-1!==On.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Fn(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Mn=!1;var Dn={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function zn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Dn[e.type]:"textarea"===t}function Bn(e,t,n,r){Se(r),0<(t=Ur(t,"onChange")).length&&(n=new sn("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var Un=null,Hn=null;function Vn(e){Lr(e,0)}function Wn(e){if(K(ha(e)))return e}function $n(e,t){if("change"===e)return t}var Gn=!1;if(u){var Kn;if(u){var Qn="oninput"in document;if(!Qn){var Yn=document.createElement("div");Yn.setAttribute("oninput","return;"),Qn="function"==typeof Yn.oninput}Kn=Qn}else Kn=!1;Gn=Kn&&(!document.documentMode||9<document.documentMode)}function Xn(){Un&&(Un.detachEvent("onpropertychange",qn),Hn=Un=null)}function qn(e){if("value"===e.propertyName&&Wn(Hn)){var t=[];Bn(t,Hn,e,ke(e)),Re(Vn,t)}}function Jn(e,t,n){"focusin"===e?(Xn(),Hn=n,(Un=t).attachEvent("onpropertychange",qn)):"focusout"===e&&Xn()}function Zn(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Wn(Hn)}function er(e,t){if("click"===e)return Wn(t)}function tr(e,t){if("input"===e||"change"===e)return Wn(t)}var nr="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t};function rr(e,t){if(nr(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++){var a=n[r];if(!d.call(t,a)||!nr(e[a],t[a]))return!1}return!0}function ar(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function lr(e,t){var n,r=ar(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=ar(r)}}function ir(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?ir(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function or(){for(var e=window,t=Q();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=Q((e=t.contentWindow).document)}return t}function sr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}function cr(e){var t=or(),n=e.focusedElem,r=e.selectionRange;if(t!==n&&n&&n.ownerDocument&&ir(n.ownerDocument.documentElement,n)){if(null!==r&&sr(n))if(t=r.start,void 0===(e=r.end)&&(e=t),"selectionStart"in n)n.selectionStart=t,n.selectionEnd=Math.min(e,n.value.length);else if((e=(t=n.ownerDocument||document)&&t.defaultView||window).getSelection){e=e.getSelection();var a=n.textContent.length,l=Math.min(r.start,a);r=void 0===r.end?l:Math.min(r.end,a),!e.extend&&l>r&&(a=r,r=l,l=a),a=lr(n,l);var i=lr(n,r);a&&i&&(1!==e.rangeCount||e.anchorNode!==a.node||e.anchorOffset!==a.offset||e.focusNode!==i.node||e.focusOffset!==i.offset)&&((t=t.createRange()).setStart(a.node,a.offset),e.removeAllRanges(),l>r?(e.addRange(t),e.extend(i.node,i.offset)):(t.setEnd(i.node,i.offset),e.addRange(t)))}for(t=[],e=n;e=e.parentNode;)1===e.nodeType&&t.push({element:e,left:e.scrollLeft,top:e.scrollTop});for("function"==typeof n.focus&&n.focus(),n=0;n<t.length;n++)(e=t[n]).element.scrollLeft=e.left,e.element.scrollTop=e.top}}var ur=u&&"documentMode"in document&&11>=document.documentMode,dr=null,fr=null,pr=null,hr=!1;function gr(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;hr||null==dr||dr!==Q(r)||("selectionStart"in(r=dr)&&sr(r)?r={start:r.selectionStart,end:r.selectionEnd}:r={anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},pr&&rr(pr,r)||(pr=r,0<(r=Ur(fr,"onSelect")).length&&(t=new sn("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=dr)))}function mr(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var vr={animationend:mr("Animation","AnimationEnd"),animationiteration:mr("Animation","AnimationIteration"),animationstart:mr("Animation","AnimationStart"),transitionend:mr("Transition","TransitionEnd")},br={},yr={};function xr(e){if(br[e])return br[e];if(!vr[e])return e;var t,n=vr[e];for(t in n)if(n.hasOwnProperty(t)&&t in yr)return br[e]=n[t];return e}u&&(yr=document.createElement("div").style,"AnimationEvent"in window||(delete vr.animationend.animation,delete vr.animationiteration.animation,delete vr.animationstart.animation),"TransitionEvent"in window||delete vr.transitionend.transition);var kr=xr("animationend"),jr=xr("animationiteration"),Er=xr("animationstart"),wr=xr("transitionend"),Tr=new Map,Sr="abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");function Cr(e,t){Tr.set(e,t),s(t,[e])}for(var Or=0;Or<Sr.length;Or++){var Nr=Sr[Or];Cr(Nr.toLowerCase(),"on"+(Nr[0].toUpperCase()+Nr.slice(1)))}Cr(kr,"onAnimationEnd"),Cr(jr,"onAnimationIteration"),Cr(Er,"onAnimationStart"),Cr("dblclick","onDoubleClick"),Cr("focusin","onFocus"),Cr("focusout","onBlur"),Cr(wr,"onTransitionEnd"),c("onMouseEnter",["mouseout","mouseover"]),c("onMouseLeave",["mouseout","mouseover"]),c("onPointerEnter",["pointerout","pointerover"]),c("onPointerLeave",["pointerout","pointerover"]),s("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),s("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),s("onBeforeInput",["compositionend","keypress","textInput","paste"]),s("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),s("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),s("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Ir="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Rr=new Set("cancel close invalid load scroll toggle".split(" ").concat(Ir));function Pr(e,t,n){var r=e.type||"unknown-event";e.currentTarget=n,function(e,t,n,r,a,i,o,s,c){if(Ue.apply(this,arguments),Fe){if(!Fe)throw Error(l(198));var u=Me;Fe=!1,Me=null,De||(De=!0,ze=u)}}(r,t,void 0,e),e.currentTarget=null}function Lr(e,t){t=0!=(4&t);for(var n=0;n<e.length;n++){var r=e[n],a=r.event;r=r.listeners;e:{var l=void 0;if(t)for(var i=r.length-1;0<=i;i--){var o=r[i],s=o.instance,c=o.currentTarget;if(o=o.listener,s!==l&&a.isPropagationStopped())break e;Pr(a,o,c),l=s}else for(i=0;i<r.length;i++){if(s=(o=r[i]).instance,c=o.currentTarget,o=o.listener,s!==l&&a.isPropagationStopped())break e;Pr(a,o,c),l=s}}}if(De)throw e=ze,De=!1,ze=null,e}function Ar(e,t){var n=t[ca];void 0===n&&(n=t[ca]=new Set);var r=e+"__bubble";n.has(r)||(Dr(t,e,2,!1),n.add(r))}function _r(e,t,n){var r=0;t&&(r|=4),Dr(n,e,r,t)}var Fr="_reactListening"+Math.random().toString(36).slice(2);function Mr(e){if(!e[Fr]){e[Fr]=!0,i.forEach((function(t){"selectionchange"!==t&&(Rr.has(t)||_r(t,!1,e),_r(t,!0,e))}));var t=9===e.nodeType?e:e.ownerDocument;null===t||t[Fr]||(t[Fr]=!0,_r("selectionchange",!1,t))}}function Dr(e,t,n,r){switch(Qt(t)){case 1:var a=Vt;break;case 4:a=Wt;break;default:a=$t}n=a.bind(null,t,n,e),a=void 0,!Le||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(a=!0),r?void 0!==a?e.addEventListener(t,n,{capture:!0,passive:a}):e.addEventListener(t,n,!0):void 0!==a?e.addEventListener(t,n,{passive:a}):e.addEventListener(t,n,!1)}function zr(e,t,n,r,a){var l=r;if(0==(1&t)&&0==(2&t)&&null!==r)e:for(;;){if(null===r)return;var i=r.tag;if(3===i||4===i){var o=r.stateNode.containerInfo;if(o===a||8===o.nodeType&&o.parentNode===a)break;if(4===i)for(i=r.return;null!==i;){var s=i.tag;if((3===s||4===s)&&((s=i.stateNode.containerInfo)===a||8===s.nodeType&&s.parentNode===a))return;i=i.return}for(;null!==o;){if(null===(i=fa(o)))return;if(5===(s=i.tag)||6===s){r=l=i;continue e}o=o.parentNode}}r=r.return}Re((function(){var r=l,a=ke(n),i=[];e:{var o=Tr.get(e);if(void 0!==o){var s=sn,c=e;switch(e){case"keypress":if(0===Zt(n))break e;case"keydown":case"keyup":s=En;break;case"focusin":c="focus",s=hn;break;case"focusout":c="blur",s=hn;break;case"beforeblur":case"afterblur":s=hn;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":s=fn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":s=pn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":s=Tn;break;case kr:case jr:case Er:s=gn;break;case wr:s=Sn;break;case"scroll":s=un;break;case"wheel":s=Cn;break;case"copy":case"cut":case"paste":s=mn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":s=wn}var u=0!=(4&t),d=!u&&"scroll"===e,f=u?null!==o?o+"Capture":null:o;u=[];for(var p,h=r;null!==h;){var g=(p=h).stateNode;if(5===p.tag&&null!==g&&(p=g,null!==f&&(null!=(g=Pe(h,f))&&u.push(Br(h,g,p)))),d)break;h=h.return}0<u.length&&(o=new s(o,c,null,n,a),i.push({event:o,listeners:u}))}}if(0==(7&t)){if(s="mouseout"===e||"pointerout"===e,(!(o="mouseover"===e||"pointerover"===e)||n===xe||!(c=n.relatedTarget||n.fromElement)||!fa(c)&&!c[sa])&&(s||o)&&(o=a.window===a?a:(o=a.ownerDocument)?o.defaultView||o.parentWindow:window,s?(s=r,null!==(c=(c=n.relatedTarget||n.toElement)?fa(c):null)&&(c!==(d=He(c))||5!==c.tag&&6!==c.tag)&&(c=null)):(s=null,c=r),s!==c)){if(u=fn,g="onMouseLeave",f="onMouseEnter",h="mouse","pointerout"!==e&&"pointerover"!==e||(u=wn,g="onPointerLeave",f="onPointerEnter",h="pointer"),d=null==s?o:ha(s),p=null==c?o:ha(c),(o=new u(g,h+"leave",s,n,a)).target=d,o.relatedTarget=p,g=null,fa(a)===r&&((u=new u(f,h+"enter",c,n,a)).target=p,u.relatedTarget=d,g=u),d=g,s&&c)e:{for(f=c,h=0,p=u=s;p;p=Hr(p))h++;for(p=0,g=f;g;g=Hr(g))p++;for(;0<h-p;)u=Hr(u),h--;for(;0<p-h;)f=Hr(f),p--;for(;h--;){if(u===f||null!==f&&u===f.alternate)break e;u=Hr(u),f=Hr(f)}u=null}else u=null;null!==s&&Vr(i,o,s,u,!1),null!==c&&null!==d&&Vr(i,d,c,u,!0)}if("select"===(s=(o=r?ha(r):window).nodeName&&o.nodeName.toLowerCase())||"input"===s&&"file"===o.type)var m=$n;else if(zn(o))if(Gn)m=tr;else{m=Zn;var v=Jn}else(s=o.nodeName)&&"input"===s.toLowerCase()&&("checkbox"===o.type||"radio"===o.type)&&(m=er);switch(m&&(m=m(e,r))?Bn(i,m,n,a):(v&&v(e,o,r),"focusout"===e&&(v=o._wrapperState)&&v.controlled&&"number"===o.type&&ee(o,"number",o.value)),v=r?ha(r):window,e){case"focusin":(zn(v)||"true"===v.contentEditable)&&(dr=v,fr=r,pr=null);break;case"focusout":pr=fr=dr=null;break;case"mousedown":hr=!0;break;case"contextmenu":case"mouseup":case"dragend":hr=!1,gr(i,n,a);break;case"selectionchange":if(ur)break;case"keydown":case"keyup":gr(i,n,a)}var b;if(Nn)e:{switch(e){case"compositionstart":var y="onCompositionStart";break e;case"compositionend":y="onCompositionEnd";break e;case"compositionupdate":y="onCompositionUpdate";break e}y=void 0}else Mn?_n(e,n)&&(y="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(y="onCompositionStart");y&&(Pn&&"ko"!==n.locale&&(Mn||"onCompositionStart"!==y?"onCompositionEnd"===y&&Mn&&(b=Jt()):(Xt="value"in(Yt=a)?Yt.value:Yt.textContent,Mn=!0)),0<(v=Ur(r,y)).length&&(y=new vn(y,e,null,n,a),i.push({event:y,listeners:v}),b?y.data=b:null!==(b=Fn(n))&&(y.data=b))),(b=Rn?function(e,t){switch(e){case"compositionend":return Fn(t);case"keypress":return 32!==t.which?null:(An=!0,Ln);case"textInput":return(e=t.data)===Ln&&An?null:e;default:return null}}(e,n):function(e,t){if(Mn)return"compositionend"===e||!Nn&&_n(e,t)?(e=Jt(),qt=Xt=Yt=null,Mn=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return Pn&&"ko"!==t.locale?null:t.data;default:return null}}(e,n))&&(0<(r=Ur(r,"onBeforeInput")).length&&(a=new vn("onBeforeInput","beforeinput",null,n,a),i.push({event:a,listeners:r}),a.data=b))}Lr(i,t)}))}function Br(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Ur(e,t){for(var n=t+"Capture",r=[];null!==e;){var a=e,l=a.stateNode;5===a.tag&&null!==l&&(a=l,null!=(l=Pe(e,n))&&r.unshift(Br(e,l,a)),null!=(l=Pe(e,t))&&r.push(Br(e,l,a))),e=e.return}return r}function Hr(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function Vr(e,t,n,r,a){for(var l=t._reactName,i=[];null!==n&&n!==r;){var o=n,s=o.alternate,c=o.stateNode;if(null!==s&&s===r)break;5===o.tag&&null!==c&&(o=c,a?null!=(s=Pe(n,l))&&i.unshift(Br(n,s,o)):a||null!=(s=Pe(n,l))&&i.push(Br(n,s,o))),n=n.return}0!==i.length&&e.push({event:t,listeners:i})}var Wr=/\r\n?/g,$r=/\u0000|\uFFFD/g;function Gr(e){return("string"==typeof e?e:""+e).replace(Wr,"\n").replace($r,"")}function Kr(e,t,n){if(t=Gr(t),Gr(e)!==t&&n)throw Error(l(425))}function Qr(){}var Yr=null;function Xr(e,t){return"textarea"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var qr="function"==typeof setTimeout?setTimeout:void 0,Jr="function"==typeof clearTimeout?clearTimeout:void 0,Zr="function"==typeof Promise?Promise:void 0,ea="function"==typeof queueMicrotask?queueMicrotask:void 0!==Zr?function(e){return Zr.resolve(null).then(e).catch(ta)}:qr;function ta(e){setTimeout((function(){throw e}))}function na(e,t){var n=t,r=0;do{var a=n.nextSibling;if(e.removeChild(n),a&&8===a.nodeType)if("/$"===(n=a.data)){if(0===r)return e.removeChild(a),void Ut(t);r--}else"$"!==n&&"$?"!==n&&"$!"!==n||r++;n=a}while(n);Ut(t)}function ra(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break;if(8===t){if("$"===(t=e.data)||"$!"===t||"$?"===t)break;if("/$"===t)return null}}return e}function aa(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var la=Math.random().toString(36).slice(2),ia="__reactFiber$"+la,oa="__reactProps$"+la,sa="__reactContainer$"+la,ca="__reactEvents$"+la,ua="__reactListeners$"+la,da="__reactHandles$"+la;function fa(e){var t=e[ia];if(t)return t;for(var n=e.parentNode;n;){if(t=n[sa]||n[ia]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=aa(e);null!==e;){if(n=e[ia])return n;e=aa(e)}return t}n=(e=n).parentNode}return null}function pa(e){return!(e=e[ia]||e[sa])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function ha(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(l(33))}function ga(e){return e[oa]||null}var ma=[],va=-1;function ba(e){return{current:e}}function ya(e){0>va||(e.current=ma[va],ma[va]=null,va--)}function xa(e,t){va++,ma[va]=e.current,e.current=t}var ka={},ja=ba(ka),Ea=ba(!1),wa=ka;function Ta(e,t){var n=e.type.contextTypes;if(!n)return ka;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var a,l={};for(a in n)l[a]=t[a];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=l),l}function Sa(e){return null!=(e=e.childContextTypes)}function Ca(){ya(Ea),ya(ja)}function Oa(e,t,n){if(ja.current!==ka)throw Error(l(168));xa(ja,t),xa(Ea,n)}function Na(e,t,n){var r=e.stateNode;if(t=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var a in r=r.getChildContext())if(!(a in t))throw Error(l(108,V(e)||"Unknown",a));return M({},n,r)}function Ia(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||ka,wa=ja.current,xa(ja,e),xa(Ea,Ea.current),!0}function Ra(e,t,n){var r=e.stateNode;if(!r)throw Error(l(169));n?(e=Na(e,t,wa),r.__reactInternalMemoizedMergedChildContext=e,ya(Ea),ya(ja),xa(ja,e)):ya(Ea),xa(Ea,n)}var Pa=null,La=!1,Aa=!1;function _a(e){null===Pa?Pa=[e]:Pa.push(e)}function Fa(){if(!Aa&&null!==Pa){Aa=!0;var e=0,t=bt;try{var n=Pa;for(bt=1;e<n.length;e++){var r=n[e];do{r=r(!0)}while(null!==r)}Pa=null,La=!1}catch(t){throw null!==Pa&&(Pa=Pa.slice(e+1)),Ke(Ze,Fa),t}finally{bt=t,Aa=!1}}return null}var Ma=x.ReactCurrentBatchConfig;function Da(e,t){if(e&&e.defaultProps){for(var n in t=M({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}var za=ba(null),Ba=null,Ua=null,Ha=null;function Va(){Ha=Ua=Ba=null}function Wa(e){var t=za.current;ya(za),e._currentValue=t}function $a(e,t,n){for(;null!==e;){var r=e.alternate;if((e.childLanes&t)!==t?(e.childLanes|=t,null!==r&&(r.childLanes|=t)):null!==r&&(r.childLanes&t)!==t&&(r.childLanes|=t),e===n)break;e=e.return}}function Ga(e,t){Ba=e,Ha=Ua=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!=(e.lanes&t)&&(ho=!0),e.firstContext=null)}function Ka(e){var t=e._currentValue;if(Ha!==e)if(e={context:e,memoizedValue:t,next:null},null===Ua){if(null===Ba)throw Error(l(308));Ua=e,Ba.dependencies={lanes:0,firstContext:e}}else Ua=Ua.next=e;return t}var Qa=null,Ya=!1;function Xa(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null}}function qa(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function Ja(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function Za(e,t){var n=e.updateQueue;null!==n&&(n=n.shared,null!==gs&&0!=(1&e.mode)&&0==(2&hs)?(null===(e=n.interleaved)?(t.next=t,null===Qa?Qa=[n]:Qa.push(n)):(t.next=e.next,e.next=t),n.interleaved=t):(null===(e=n.pending)?t.next=t:(t.next=e.next,e.next=t),n.pending=t))}function el(e,t,n){if(null!==(t=t.updateQueue)&&(t=t.shared,0!=(4194240&n))){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,vt(e,n)}}function tl(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var a=null,l=null;if(null!==(n=n.firstBaseUpdate)){do{var i={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===l?a=l=i:l=l.next=i,n=n.next}while(null!==n);null===l?a=l=t:l=l.next=t}else a=l=t;return n={baseState:r.baseState,firstBaseUpdate:a,lastBaseUpdate:l,shared:r.shared,effects:r.effects},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function nl(e,t,n,r){var a=e.updateQueue;Ya=!1;var l=a.firstBaseUpdate,i=a.lastBaseUpdate,o=a.shared.pending;if(null!==o){a.shared.pending=null;var s=o,c=s.next;s.next=null,null===i?l=c:i.next=c,i=s;var u=e.alternate;null!==u&&((o=(u=u.updateQueue).lastBaseUpdate)!==i&&(null===o?u.firstBaseUpdate=c:o.next=c,u.lastBaseUpdate=s))}if(null!==l){var d=a.baseState;for(i=0,u=c=s=null,o=l;;){var f=o.lane,p=o.eventTime;if((r&f)===f){null!==u&&(u=u.next={eventTime:p,lane:0,tag:o.tag,payload:o.payload,callback:o.callback,next:null});e:{var h=e,g=o;switch(f=t,p=n,g.tag){case 1:if("function"==typeof(h=g.payload)){d=h.call(p,d,f);break e}d=h;break e;case 3:h.flags=-65537&h.flags|128;case 0:if(null==(f="function"==typeof(h=g.payload)?h.call(p,d,f):h))break e;d=M({},d,f);break e;case 2:Ya=!0}}null!==o.callback&&0!==o.lane&&(e.flags|=64,null===(f=a.effects)?a.effects=[o]:f.push(o))}else p={eventTime:p,lane:f,tag:o.tag,payload:o.payload,callback:o.callback,next:null},null===u?(c=u=p,s=d):u=u.next=p,i|=f;if(null===(o=o.next)){if(null===(o=a.shared.pending))break;o=(f=o).next,f.next=null,a.lastBaseUpdate=f,a.shared.pending=null}}if(null===u&&(s=d),a.baseState=s,a.firstBaseUpdate=c,a.lastBaseUpdate=u,null!==(t=a.shared.interleaved)){a=t;do{i|=a.lane,a=a.next}while(a!==t)}else null===l&&(a.shared.lanes=0);js|=i,e.lanes=i,e.memoizedState=d}}function rl(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],a=r.callback;if(null!==a){if(r.callback=null,r=n,"function"!=typeof a)throw Error(l(191,a));a.call(r)}}}var al=(new r.Component).refs;function ll(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:M({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var il={isMounted:function(e){return!!(e=e._reactInternals)&&He(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=zs(),a=Bs(e),l=Ja(r,a);l.payload=t,null!=n&&(l.callback=n),Za(e,l),null!==(t=Us(e,a,r))&&el(t,e,a)},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=zs(),a=Bs(e),l=Ja(r,a);l.tag=1,l.payload=t,null!=n&&(l.callback=n),Za(e,l),null!==(t=Us(e,a,r))&&el(t,e,a)},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=zs(),r=Bs(e),a=Ja(n,r);a.tag=2,null!=t&&(a.callback=t),Za(e,a),null!==(t=Us(e,r,n))&&el(t,e,r)}};function ol(e,t,n,r,a,l,i){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,l,i):!t.prototype||!t.prototype.isPureReactComponent||(!rr(n,r)||!rr(a,l))}function sl(e,t,n){var r=!1,a=ka,l=t.contextType;return"object"==typeof l&&null!==l?l=Ka(l):(a=Sa(t)?wa:ja.current,l=(r=null!=(r=t.contextTypes))?Ta(e,a):ka),t=new t(n,l),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=il,e.stateNode=t,t._reactInternals=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=a,e.__reactInternalMemoizedMaskedChildContext=l),t}function cl(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&il.enqueueReplaceState(t,t.state,null)}function ul(e,t,n,r){var a=e.stateNode;a.props=n,a.state=e.memoizedState,a.refs=al,Xa(e);var l=t.contextType;"object"==typeof l&&null!==l?a.context=Ka(l):(l=Sa(t)?wa:ja.current,a.context=Ta(e,l)),a.state=e.memoizedState,"function"==typeof(l=t.getDerivedStateFromProps)&&(ll(e,t,l,n),a.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof a.getSnapshotBeforeUpdate||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||(t=a.state,"function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount(),t!==a.state&&il.enqueueReplaceState(a,a.state,null),nl(e,n,a,r),a.state=e.memoizedState),"function"==typeof a.componentDidMount&&(e.flags|=4194308)}var dl=[],fl=0,pl=null,hl=0,gl=[],ml=0,vl=null,bl=1,yl="";function xl(e,t){dl[fl++]=hl,dl[fl++]=pl,pl=e,hl=t}function kl(e,t,n){gl[ml++]=bl,gl[ml++]=yl,gl[ml++]=vl,vl=e;var r=bl;e=yl;var a=32-it(r)-1;r&=~(1<<a),n+=1;var l=32-it(t)+a;if(30<l){var i=a-a%5;l=(r&(1<<i)-1).toString(32),r>>=i,a-=i,bl=1<<32-it(t)+a|n<<a|r,yl=l+e}else bl=1<<l|n<<a|r,yl=e}function jl(e){null!==e.return&&(xl(e,1),kl(e,1,0))}function El(e){for(;e===pl;)pl=dl[--fl],dl[fl]=null,hl=dl[--fl],dl[fl]=null;for(;e===vl;)vl=gl[--ml],gl[ml]=null,yl=gl[--ml],gl[ml]=null,bl=gl[--ml],gl[ml]=null}var wl=null,Tl=null,Sl=!1,Cl=null;function Ol(e,t){var n=vc(5,null,null,0);n.elementType="DELETED",n.stateNode=t,n.return=e,null===(t=e.deletions)?(e.deletions=[n],e.flags|=16):t.push(n)}function Nl(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,wl=e,Tl=ra(t.firstChild),!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,wl=e,Tl=null,!0);case 13:return null!==(t=8!==t.nodeType?null:t)&&(n=null!==vl?{id:bl,overflow:yl}:null,e.memoizedState={dehydrated:t,treeContext:n,retryLane:1073741824},(n=vc(18,null,null,0)).stateNode=t,n.return=e,e.child=n,wl=e,Tl=null,!0);default:return!1}}function Il(e){return 0!=(1&e.mode)&&0==(128&e.flags)}function Rl(e){if(Sl){var t=Tl;if(t){var n=t;if(!Nl(e,t)){if(Il(e))throw Error(l(418));t=ra(n.nextSibling);var r=wl;t&&Nl(e,t)?Ol(r,n):(e.flags=-4097&e.flags|2,Sl=!1,wl=e)}}else{if(Il(e))throw Error(l(418));e.flags=-4097&e.flags|2,Sl=!1,wl=e}}}function Pl(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;wl=e}function Ll(e){if(e!==wl)return!1;if(!Sl)return Pl(e),Sl=!0,!1;var t;if((t=3!==e.tag)&&!(t=5!==e.tag)&&(t="head"!==(t=e.type)&&"body"!==t&&!Xr(e.type,e.memoizedProps)),t&&(t=Tl)){if(Il(e)){for(e=Tl;e;)e=ra(e.nextSibling);throw Error(l(418))}for(;t;)Ol(e,t),t=ra(t.nextSibling)}if(Pl(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(l(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){Tl=ra(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}Tl=null}}else Tl=wl?ra(e.stateNode.nextSibling):null;return!0}function Al(){Tl=wl=null,Sl=!1}function _l(e){null===Cl?Cl=[e]:Cl.push(e)}function Fl(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(l(309));var r=n.stateNode}if(!r)throw Error(l(147,e));var a=r,i=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===i?t.ref:((t=function(e){var t=a.refs;t===al&&(t=a.refs={}),null===e?delete t[i]:t[i]=e})._stringRef=i,t)}if("string"!=typeof e)throw Error(l(284));if(!n._owner)throw Error(l(290,e))}return e}function Ml(e,t){throw e=Object.prototype.toString.call(t),Error(l(31,"[object Object]"===e?"object with keys {"+Object.keys(t).join(", ")+"}":e))}function Dl(e){return(0,e._init)(e._payload)}function zl(e){function t(t,n){if(e){var r=t.deletions;null===r?(t.deletions=[n],t.flags|=16):r.push(n)}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function a(e,t){return(e=yc(e,t)).index=0,e.sibling=null,e}function i(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags|=2,n):r:(t.flags|=2,n):(t.flags|=1048576,n)}function o(t){return e&&null===t.alternate&&(t.flags|=2),t}function s(e,t,n,r){return null===t||6!==t.tag?((t=Ec(n,e.mode,r)).return=e,t):((t=a(t,n)).return=e,t)}function c(e,t,n,r){var l=n.type;return l===E?d(e,t,n.props.children,r,n.key):null!==t&&(t.elementType===l||"object"==typeof l&&null!==l&&l.$$typeof===P&&Dl(l)===t.type)?((r=a(t,n.props)).ref=Fl(e,t,n),r.return=e,r):((r=xc(n.type,n.key,n.props,null,e.mode,r)).ref=Fl(e,t,n),r.return=e,r)}function u(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=wc(n,e.mode,r)).return=e,t):((t=a(t,n.children||[])).return=e,t)}function d(e,t,n,r,l){return null===t||7!==t.tag?((t=kc(n,e.mode,r,l)).return=e,t):((t=a(t,n)).return=e,t)}function f(e,t,n){if("string"==typeof t&&""!==t||"number"==typeof t)return(t=Ec(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case k:return(n=xc(t.type,t.key,t.props,null,e.mode,n)).ref=Fl(e,null,t),n.return=e,n;case j:return(t=wc(t,e.mode,n)).return=e,t;case P:return f(e,(0,t._init)(t._payload),n)}if(te(t)||_(t))return(t=kc(t,e.mode,n,null)).return=e,t;Ml(e,t)}return null}function p(e,t,n,r){var a=null!==t?t.key:null;if("string"==typeof n&&""!==n||"number"==typeof n)return null!==a?null:s(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case k:return n.key===a?c(e,t,n,r):null;case j:return n.key===a?u(e,t,n,r):null;case P:return p(e,t,(a=n._init)(n._payload),r)}if(te(n)||_(n))return null!==a?null:d(e,t,n,r,null);Ml(e,n)}return null}function h(e,t,n,r,a){if("string"==typeof r&&""!==r||"number"==typeof r)return s(t,e=e.get(n)||null,""+r,a);if("object"==typeof r&&null!==r){switch(r.$$typeof){case k:return c(t,e=e.get(null===r.key?n:r.key)||null,r,a);case j:return u(t,e=e.get(null===r.key?n:r.key)||null,r,a);case P:return h(e,t,n,(0,r._init)(r._payload),a)}if(te(r)||_(r))return d(t,e=e.get(n)||null,r,a,null);Ml(t,r)}return null}function g(a,l,o,s){for(var c=null,u=null,d=l,g=l=0,m=null;null!==d&&g<o.length;g++){d.index>g?(m=d,d=null):m=d.sibling;var v=p(a,d,o[g],s);if(null===v){null===d&&(d=m);break}e&&d&&null===v.alternate&&t(a,d),l=i(v,l,g),null===u?c=v:u.sibling=v,u=v,d=m}if(g===o.length)return n(a,d),Sl&&xl(a,g),c;if(null===d){for(;g<o.length;g++)null!==(d=f(a,o[g],s))&&(l=i(d,l,g),null===u?c=d:u.sibling=d,u=d);return Sl&&xl(a,g),c}for(d=r(a,d);g<o.length;g++)null!==(m=h(d,a,g,o[g],s))&&(e&&null!==m.alternate&&d.delete(null===m.key?g:m.key),l=i(m,l,g),null===u?c=m:u.sibling=m,u=m);return e&&d.forEach((function(e){return t(a,e)})),Sl&&xl(a,g),c}function m(a,o,s,c){var u=_(s);if("function"!=typeof u)throw Error(l(150));if(null==(s=u.call(s)))throw Error(l(151));for(var d=u=null,g=o,m=o=0,v=null,b=s.next();null!==g&&!b.done;m++,b=s.next()){g.index>m?(v=g,g=null):v=g.sibling;var y=p(a,g,b.value,c);if(null===y){null===g&&(g=v);break}e&&g&&null===y.alternate&&t(a,g),o=i(y,o,m),null===d?u=y:d.sibling=y,d=y,g=v}if(b.done)return n(a,g),Sl&&xl(a,m),u;if(null===g){for(;!b.done;m++,b=s.next())null!==(b=f(a,b.value,c))&&(o=i(b,o,m),null===d?u=b:d.sibling=b,d=b);return Sl&&xl(a,m),u}for(g=r(a,g);!b.done;m++,b=s.next())null!==(b=h(g,a,m,b.value,c))&&(e&&null!==b.alternate&&g.delete(null===b.key?m:b.key),o=i(b,o,m),null===d?u=b:d.sibling=b,d=b);return e&&g.forEach((function(e){return t(a,e)})),Sl&&xl(a,m),u}return function e(r,l,i,s){if("object"==typeof i&&null!==i&&i.type===E&&null===i.key&&(i=i.props.children),"object"==typeof i&&null!==i){switch(i.$$typeof){case k:e:{for(var c=i.key,u=l;null!==u;){if(u.key===c){if((c=i.type)===E){if(7===u.tag){n(r,u.sibling),(l=a(u,i.props.children)).return=r,r=l;break e}}else if(u.elementType===c||"object"==typeof c&&null!==c&&c.$$typeof===P&&Dl(c)===u.type){n(r,u.sibling),(l=a(u,i.props)).ref=Fl(r,u,i),l.return=r,r=l;break e}n(r,u);break}t(r,u),u=u.sibling}i.type===E?((l=kc(i.props.children,r.mode,s,i.key)).return=r,r=l):((s=xc(i.type,i.key,i.props,null,r.mode,s)).ref=Fl(r,l,i),s.return=r,r=s)}return o(r);case j:e:{for(u=i.key;null!==l;){if(l.key===u){if(4===l.tag&&l.stateNode.containerInfo===i.containerInfo&&l.stateNode.implementation===i.implementation){n(r,l.sibling),(l=a(l,i.children||[])).return=r,r=l;break e}n(r,l);break}t(r,l),l=l.sibling}(l=wc(i,r.mode,s)).return=r,r=l}return o(r);case P:return e(r,l,(u=i._init)(i._payload),s)}if(te(i))return g(r,l,i,s);if(_(i))return m(r,l,i,s);Ml(r,i)}return"string"==typeof i&&""!==i||"number"==typeof i?(i=""+i,null!==l&&6===l.tag?(n(r,l.sibling),(l=a(l,i)).return=r,r=l):(n(r,l),(l=Ec(i,r.mode,s)).return=r,r=l),o(r)):n(r,l)}}var Bl=zl(!0),Ul=zl(!1),Hl={},Vl=ba(Hl),Wl=ba(Hl),$l=ba(Hl);function Gl(e){if(e===Hl)throw Error(l(174));return e}function Kl(e,t){switch(xa($l,t),xa(Wl,e),xa(Vl,Hl),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:se(null,"");break;default:t=se(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}ya(Vl),xa(Vl,t)}function Ql(){ya(Vl),ya(Wl),ya($l)}function Yl(e){Gl($l.current);var t=Gl(Vl.current),n=se(t,e.type);t!==n&&(xa(Wl,e),xa(Vl,n))}function Xl(e){Wl.current===e&&(ya(Vl),ya(Wl))}var ql=ba(0);function Jl(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(128&t.flags))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var Zl=[];function ei(){for(var e=0;e<Zl.length;e++)Zl[e]._workInProgressVersionPrimary=null;Zl.length=0}var ti=x.ReactCurrentDispatcher,ni=x.ReactCurrentBatchConfig,ri=0,ai=null,li=null,ii=null,oi=!1,si=!1,ci=0,ui=0;function di(){throw Error(l(321))}function fi(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!nr(e[n],t[n]))return!1;return!0}function pi(e,t,n,r,a,i){if(ri=i,ai=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,ti.current=null===e||null===e.memoizedState?Yi:Xi,e=n(r,a),si){i=0;do{if(si=!1,ci=0,25<=i)throw Error(l(301));i+=1,ii=li=null,t.updateQueue=null,ti.current=qi,e=n(r,a)}while(si)}if(ti.current=Qi,t=null!==li&&null!==li.next,ri=0,ii=li=ai=null,oi=!1,t)throw Error(l(300));return e}function hi(){var e=0!==ci;return ci=0,e}function gi(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===ii?ai.memoizedState=ii=e:ii=ii.next=e,ii}function mi(){if(null===li){var e=ai.alternate;e=null!==e?e.memoizedState:null}else e=li.next;var t=null===ii?ai.memoizedState:ii.next;if(null!==t)ii=t,li=e;else{if(null===e)throw Error(l(310));e={memoizedState:(li=e).memoizedState,baseState:li.baseState,baseQueue:li.baseQueue,queue:li.queue,next:null},null===ii?ai.memoizedState=ii=e:ii=ii.next=e}return ii}function vi(e,t){return"function"==typeof t?t(e):t}function bi(e){var t=mi(),n=t.queue;if(null===n)throw Error(l(311));n.lastRenderedReducer=e;var r=li,a=r.baseQueue,i=n.pending;if(null!==i){if(null!==a){var o=a.next;a.next=i.next,i.next=o}r.baseQueue=a=i,n.pending=null}if(null!==a){i=a.next,r=r.baseState;var s=o=null,c=null,u=i;do{var d=u.lane;if((ri&d)===d)null!==c&&(c=c.next={lane:0,action:u.action,hasEagerState:u.hasEagerState,eagerState:u.eagerState,next:null}),r=u.hasEagerState?u.eagerState:e(r,u.action);else{var f={lane:d,action:u.action,hasEagerState:u.hasEagerState,eagerState:u.eagerState,next:null};null===c?(s=c=f,o=r):c=c.next=f,ai.lanes|=d,js|=d}u=u.next}while(null!==u&&u!==i);null===c?o=r:c.next=s,nr(r,t.memoizedState)||(ho=!0),t.memoizedState=r,t.baseState=o,t.baseQueue=c,n.lastRenderedState=r}if(null!==(e=n.interleaved)){a=e;do{i=a.lane,ai.lanes|=i,js|=i,a=a.next}while(a!==e)}else null===a&&(n.lanes=0);return[t.memoizedState,n.dispatch]}function yi(e){var t=mi(),n=t.queue;if(null===n)throw Error(l(311));n.lastRenderedReducer=e;var r=n.dispatch,a=n.pending,i=t.memoizedState;if(null!==a){n.pending=null;var o=a=a.next;do{i=e(i,o.action),o=o.next}while(o!==a);nr(i,t.memoizedState)||(ho=!0),t.memoizedState=i,null===t.baseQueue&&(t.baseState=i),n.lastRenderedState=i}return[i,r]}function xi(){}function ki(e,t){var n=ai,r=mi(),a=t(),i=!nr(r.memoizedState,a);if(i&&(r.memoizedState=a,ho=!0),r=r.queue,Pi(wi.bind(null,n,r,e),[e]),r.getSnapshot!==t||i||null!==ii&&1&ii.memoizedState.tag){if(n.flags|=2048,Ci(9,Ei.bind(null,n,r,a,t),void 0,null),null===gs)throw Error(l(349));0!=(30&ri)||ji(n,t,a)}return a}function ji(e,t,n){e.flags|=16384,e={getSnapshot:t,value:n},null===(t=ai.updateQueue)?(t={lastEffect:null,stores:null},ai.updateQueue=t,t.stores=[e]):null===(n=t.stores)?t.stores=[e]:n.push(e)}function Ei(e,t,n,r){t.value=n,t.getSnapshot=r,Ti(t)&&Us(e,1,-1)}function wi(e,t,n){return n((function(){Ti(t)&&Us(e,1,-1)}))}function Ti(e){var t=e.getSnapshot;e=e.value;try{var n=t();return!nr(e,n)}catch(e){return!0}}function Si(e){var t=gi();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:vi,lastRenderedState:e},t.queue=e,e=e.dispatch=Vi.bind(null,ai,e),[t.memoizedState,e]}function Ci(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=ai.updateQueue)?(t={lastEffect:null,stores:null},ai.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function Oi(){return mi().memoizedState}function Ni(e,t,n,r){var a=gi();ai.flags|=e,a.memoizedState=Ci(1|t,n,void 0,void 0===r?null:r)}function Ii(e,t,n,r){var a=mi();r=void 0===r?null:r;var l=void 0;if(null!==li){var i=li.memoizedState;if(l=i.destroy,null!==r&&fi(r,i.deps))return void(a.memoizedState=Ci(t,n,l,r))}ai.flags|=e,a.memoizedState=Ci(1|t,n,l,r)}function Ri(e,t){return Ni(8390656,8,e,t)}function Pi(e,t){return Ii(2048,8,e,t)}function Li(e,t){return Ii(4,2,e,t)}function Ai(e,t){return Ii(4,4,e,t)}function _i(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function Fi(e,t,n){return n=null!=n?n.concat([e]):null,Ii(4,4,_i.bind(null,t,e),n)}function Mi(){}function Di(e,t){var n=mi();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&fi(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function zi(e,t){var n=mi();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&fi(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function Bi(e,t){var n=bt;bt=0!==n&&4>n?n:4,e(!0);var r=ni.transition;ni.transition={};try{e(!1),t()}finally{bt=n,ni.transition=r}}function Ui(){return mi().memoizedState}function Hi(e,t,n){var r=Bs(e);n={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null},Wi(e)?$i(t,n):(Gi(e,t,n),null!==(e=Us(e,r,n=zs()))&&Ki(e,t,r))}function Vi(e,t,n){var r=Bs(e),a={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null};if(Wi(e))$i(t,a);else{Gi(e,t,a);var l=e.alternate;if(0===e.lanes&&(null===l||0===l.lanes)&&null!==(l=t.lastRenderedReducer))try{var i=t.lastRenderedState,o=l(i,n);if(a.hasEagerState=!0,a.eagerState=o,nr(o,i))return}catch(e){}null!==(e=Us(e,r,n=zs()))&&Ki(e,t,r)}}function Wi(e){var t=e.alternate;return e===ai||null!==t&&t===ai}function $i(e,t){si=oi=!0;var n=e.pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}function Gi(e,t,n){null!==gs&&0!=(1&e.mode)&&0==(2&hs)?(null===(e=t.interleaved)?(n.next=n,null===Qa?Qa=[t]:Qa.push(t)):(n.next=e.next,e.next=n),t.interleaved=n):(null===(e=t.pending)?n.next=n:(n.next=e.next,e.next=n),t.pending=n)}function Ki(e,t,n){if(0!=(4194240&n)){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,vt(e,n)}}var Qi={readContext:Ka,useCallback:di,useContext:di,useEffect:di,useImperativeHandle:di,useInsertionEffect:di,useLayoutEffect:di,useMemo:di,useReducer:di,useRef:di,useState:di,useDebugValue:di,useDeferredValue:di,useTransition:di,useMutableSource:di,useSyncExternalStore:di,useId:di,unstable_isNewReconciler:!1},Yi={readContext:Ka,useCallback:function(e,t){return gi().memoizedState=[e,void 0===t?null:t],e},useContext:Ka,useEffect:Ri,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,Ni(4194308,4,_i.bind(null,t,e),n)},useLayoutEffect:function(e,t){return Ni(4194308,4,e,t)},useInsertionEffect:function(e,t){return Ni(4,2,e,t)},useMemo:function(e,t){var n=gi();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=gi();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:t},r.queue=e,e=e.dispatch=Hi.bind(null,ai,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},gi().memoizedState=e},useState:Si,useDebugValue:Mi,useDeferredValue:function(e){var t=Si(e),n=t[0],r=t[1];return Ri((function(){var t=ni.transition;ni.transition={};try{r(e)}finally{ni.transition=t}}),[e]),n},useTransition:function(){var e=Si(!1),t=e[0];return e=Bi.bind(null,e[1]),gi().memoizedState=e,[t,e]},useMutableSource:function(){},useSyncExternalStore:function(e,t,n){var r=ai,a=gi();if(Sl){if(void 0===n)throw Error(l(407));n=n()}else{if(n=t(),null===gs)throw Error(l(349));0!=(30&ri)||ji(r,t,n)}a.memoizedState=n;var i={value:n,getSnapshot:t};return a.queue=i,Ri(wi.bind(null,r,i,e),[e]),r.flags|=2048,Ci(9,Ei.bind(null,r,i,n,t),void 0,null),n},useId:function(){var e=gi(),t=gs.identifierPrefix;if(Sl){var n=yl;t=":"+t+"R"+(n=(bl&~(1<<32-it(bl)-1)).toString(32)+n),0<(n=ci++)&&(t+="H"+n.toString(32)),t+=":"}else t=":"+t+"r"+(n=ui++).toString(32)+":";return e.memoizedState=t},unstable_isNewReconciler:!1},Xi={readContext:Ka,useCallback:Di,useContext:Ka,useEffect:Pi,useImperativeHandle:Fi,useInsertionEffect:Li,useLayoutEffect:Ai,useMemo:zi,useReducer:bi,useRef:Oi,useState:function(){return bi(vi)},useDebugValue:Mi,useDeferredValue:function(e){var t=bi(vi),n=t[0],r=t[1];return Pi((function(){var t=ni.transition;ni.transition={};try{r(e)}finally{ni.transition=t}}),[e]),n},useTransition:function(){return[bi(vi)[0],mi().memoizedState]},useMutableSource:xi,useSyncExternalStore:ki,useId:Ui,unstable_isNewReconciler:!1},qi={readContext:Ka,useCallback:Di,useContext:Ka,useEffect:Pi,useImperativeHandle:Fi,useInsertionEffect:Li,useLayoutEffect:Ai,useMemo:zi,useReducer:yi,useRef:Oi,useState:function(){return yi(vi)},useDebugValue:Mi,useDeferredValue:function(e){var t=yi(vi),n=t[0],r=t[1];return Pi((function(){var t=ni.transition;ni.transition={};try{r(e)}finally{ni.transition=t}}),[e]),n},useTransition:function(){return[yi(vi)[0],mi().memoizedState]},useMutableSource:xi,useSyncExternalStore:ki,useId:Ui,unstable_isNewReconciler:!1};function Ji(e,t){try{var n="",r=t;do{n+=U(r),r=r.return}while(r);var a=n}catch(e){a="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:a}}function Zi(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}var eo,to,no,ro="function"==typeof WeakMap?WeakMap:Map;function ao(e,t,n){(n=Ja(-1,n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Ns||(Ns=!0,Is=r),Zi(0,t)},n}function lo(e,t,n){(n=Ja(-1,n)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var a=t.value;n.payload=function(){return r(a)},n.callback=function(){Zi(0,t)}}var l=e.stateNode;return null!==l&&"function"==typeof l.componentDidCatch&&(n.callback=function(){Zi(0,t),"function"!=typeof r&&(null===Rs?Rs=new Set([this]):Rs.add(this));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),n}function io(e,t,n){var r=e.pingCache;if(null===r){r=e.pingCache=new ro;var a=new Set;r.set(t,a)}else void 0===(a=r.get(t))&&(a=new Set,r.set(t,a));a.has(n)||(a.add(n),e=dc.bind(null,e,t,n),t.then(e,e))}function oo(e){do{var t;if((t=13===e.tag)&&(t=null===(t=e.memoizedState)||null!==t.dehydrated),t)return e;e=e.return}while(null!==e);return null}function so(e,t,n,r,a){return 0==(1&e.mode)?(e===t?e.flags|=65536:(e.flags|=128,n.flags|=131072,n.flags&=-52805,1===n.tag&&(null===n.alternate?n.tag=17:((t=Ja(-1,1)).tag=2,Za(n,t))),n.lanes|=1),e):(e.flags|=65536,e.lanes=a,e)}function co(e,t){if(!Sl)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function uo(e){var t=null!==e.alternate&&e.alternate.child===e.child,n=0,r=0;if(t)for(var a=e.child;null!==a;)n|=a.lanes|a.childLanes,r|=14680064&a.subtreeFlags,r|=14680064&a.flags,a.return=e,a=a.sibling;else for(a=e.child;null!==a;)n|=a.lanes|a.childLanes,r|=a.subtreeFlags,r|=a.flags,a.return=e,a=a.sibling;return e.subtreeFlags|=r,e.childLanes=n,t}function fo(e,t,n){var r=t.pendingProps;switch(El(t),t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return uo(t),null;case 1:return Sa(t.type)&&Ca(),uo(t),null;case 3:return r=t.stateNode,Ql(),ya(Ea),ya(ja),ei(),r.pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(Ll(t)?t.flags|=4:null===e||e.memoizedState.isDehydrated&&0==(256&t.flags)||(t.flags|=1024,null!==Cl&&(Gs(Cl),Cl=null))),uo(t),null;case 5:Xl(t);var a=Gl($l.current);if(n=t.type,null!==e&&null!=t.stateNode)to(e,t,n,r),e.ref!==t.ref&&(t.flags|=512,t.flags|=2097152);else{if(!r){if(null===t.stateNode)throw Error(l(166));return uo(t),null}if(e=Gl(Vl.current),Ll(t)){r=t.stateNode,n=t.type;var i=t.memoizedProps;switch(r[ia]=t,r[oa]=i,e=0!=(1&t.mode),n){case"dialog":Ar("cancel",r),Ar("close",r);break;case"iframe":case"object":case"embed":Ar("load",r);break;case"video":case"audio":for(a=0;a<Ir.length;a++)Ar(Ir[a],r);break;case"source":Ar("error",r);break;case"img":case"image":case"link":Ar("error",r),Ar("load",r);break;case"details":Ar("toggle",r);break;case"input":X(r,i),Ar("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!i.multiple},Ar("invalid",r);break;case"textarea":ae(r,i),Ar("invalid",r)}for(var s in be(n,i),a=null,i)if(i.hasOwnProperty(s)){var c=i[s];"children"===s?"string"==typeof c?r.textContent!==c&&(Kr(r.textContent,c,e),a=["children",c]):"number"==typeof c&&r.textContent!==""+c&&(Kr(r.textContent,c,e),a=["children",""+c]):o.hasOwnProperty(s)&&null!=c&&"onScroll"===s&&Ar("scroll",r)}switch(n){case"input":G(r),Z(r,i,!0);break;case"textarea":G(r),ie(r);break;case"select":case"option":break;default:"function"==typeof i.onClick&&(r.onclick=Qr)}r=a,t.updateQueue=r,null!==r&&(t.flags|=4)}else{s=9===a.nodeType?a:a.ownerDocument,"http://www.w3.org/1999/xhtml"===e&&(e=oe(n)),"http://www.w3.org/1999/xhtml"===e?"script"===n?((e=s.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=s.createElement(n,{is:r.is}):(e=s.createElement(n),"select"===n&&(s=e,r.multiple?s.multiple=!0:r.size&&(s.size=r.size))):e=s.createElementNS(e,n),e[ia]=t,e[oa]=r,eo(e,t),t.stateNode=e;e:{switch(s=ye(n,r),n){case"dialog":Ar("cancel",e),Ar("close",e),a=r;break;case"iframe":case"object":case"embed":Ar("load",e),a=r;break;case"video":case"audio":for(a=0;a<Ir.length;a++)Ar(Ir[a],e);a=r;break;case"source":Ar("error",e),a=r;break;case"img":case"image":case"link":Ar("error",e),Ar("load",e),a=r;break;case"details":Ar("toggle",e),a=r;break;case"input":X(e,r),a=Y(e,r),Ar("invalid",e);break;case"option":a=r;break;case"select":e._wrapperState={wasMultiple:!!r.multiple},a=M({},r,{value:void 0}),Ar("invalid",e);break;case"textarea":ae(e,r),a=re(e,r),Ar("invalid",e);break;default:a=r}for(i in be(n,a),c=a)if(c.hasOwnProperty(i)){var u=c[i];"style"===i?me(e,u):"dangerouslySetInnerHTML"===i?null!=(u=u?u.__html:void 0)&&de(e,u):"children"===i?"string"==typeof u?("textarea"!==n||""!==u)&&fe(e,u):"number"==typeof u&&fe(e,""+u):"suppressContentEditableWarning"!==i&&"suppressHydrationWarning"!==i&&"autoFocus"!==i&&(o.hasOwnProperty(i)?null!=u&&"onScroll"===i&&Ar("scroll",e):null!=u&&y(e,i,u,s))}switch(n){case"input":G(e),Z(e,r,!1);break;case"textarea":G(e),ie(e);break;case"option":null!=r.value&&e.setAttribute("value",""+W(r.value));break;case"select":e.multiple=!!r.multiple,null!=(i=r.value)?ne(e,!!r.multiple,i,!1):null!=r.defaultValue&&ne(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof a.onClick&&(e.onclick=Qr)}switch(n){case"button":case"input":case"select":case"textarea":r=!!r.autoFocus;break e;case"img":r=!0;break e;default:r=!1}}r&&(t.flags|=4)}null!==t.ref&&(t.flags|=512,t.flags|=2097152)}return uo(t),null;case 6:if(e&&null!=t.stateNode)no(0,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(l(166));if(n=Gl($l.current),Gl(Vl.current),Ll(t)){if(r=t.stateNode,n=t.memoizedProps,r[ia]=t,(i=r.nodeValue!==n)&&null!==(e=wl))switch(s=0!=(1&e.mode),e.tag){case 3:Kr(r.nodeValue,n,s);break;case 5:!0!==e.memoizedProps[void 0]&&Kr(r.nodeValue,n,s)}i&&(t.flags|=4)}else(r=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[ia]=t,t.stateNode=r}return uo(t),null;case 13:if(ya(ql),r=t.memoizedState,Sl&&null!==Tl&&0!=(1&t.mode)&&0==(128&t.flags)){for(r=Tl;r;)r=ra(r.nextSibling);return Al(),t.flags|=98560,t}if(null!==r&&null!==r.dehydrated){if(r=Ll(t),null===e){if(!r)throw Error(l(318));if(!(r=null!==(r=t.memoizedState)?r.dehydrated:null))throw Error(l(317));r[ia]=t}else Al(),0==(128&t.flags)&&(t.memoizedState=null),t.flags|=4;return uo(t),null}return null!==Cl&&(Gs(Cl),Cl=null),0!=(128&t.flags)?(t.lanes=n,t):(r=null!==r,n=!1,null===e?Ll(t):n=null!==e.memoizedState,r&&!n&&(t.child.flags|=8192,0!=(1&t.mode)&&(null===e||0!=(1&ql.current)?0===xs&&(xs=3):tc())),null!==t.updateQueue&&(t.flags|=4),uo(t),null);case 4:return Ql(),null===e&&Mr(t.stateNode.containerInfo),uo(t),null;case 10:return Wa(t.type._context),uo(t),null;case 17:return Sa(t.type)&&Ca(),uo(t),null;case 19:if(ya(ql),null===(i=t.memoizedState))return uo(t),null;if(r=0!=(128&t.flags),null===(s=i.rendering))if(r)co(i,!1);else{if(0!==xs||null!==e&&0!=(128&e.flags))for(e=t.child;null!==e;){if(null!==(s=Jl(e))){for(t.flags|=128,co(i,!1),null!==(r=s.updateQueue)&&(t.updateQueue=r,t.flags|=4),t.subtreeFlags=0,r=n,n=t.child;null!==n;)e=r,(i=n).flags&=14680066,null===(s=i.alternate)?(i.childLanes=0,i.lanes=e,i.child=null,i.subtreeFlags=0,i.memoizedProps=null,i.memoizedState=null,i.updateQueue=null,i.dependencies=null,i.stateNode=null):(i.childLanes=s.childLanes,i.lanes=s.lanes,i.child=s.child,i.subtreeFlags=0,i.deletions=null,i.memoizedProps=s.memoizedProps,i.memoizedState=s.memoizedState,i.updateQueue=s.updateQueue,i.type=s.type,e=s.dependencies,i.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return xa(ql,1&ql.current|2),t.child}e=e.sibling}null!==i.tail&&qe()>Os&&(t.flags|=128,r=!0,co(i,!1),t.lanes=4194304)}else{if(!r)if(null!==(e=Jl(s))){if(t.flags|=128,r=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.flags|=4),co(i,!0),null===i.tail&&"hidden"===i.tailMode&&!s.alternate&&!Sl)return uo(t),null}else 2*qe()-i.renderingStartTime>Os&&1073741824!==n&&(t.flags|=128,r=!0,co(i,!1),t.lanes=4194304);i.isBackwards?(s.sibling=t.child,t.child=s):(null!==(n=i.last)?n.sibling=s:t.child=s,i.last=s)}return null!==i.tail?(t=i.tail,i.rendering=t,i.tail=t.sibling,i.renderingStartTime=qe(),t.sibling=null,n=ql.current,xa(ql,r?1&n|2:1&n),t):(uo(t),null);case 22:case 23:return qs(),r=null!==t.memoizedState,null!==e&&null!==e.memoizedState!==r&&(t.flags|=8192),r&&0!=(1&t.mode)?0!=(1073741824&bs)&&(uo(t),6&t.subtreeFlags&&(t.flags|=8192)):uo(t),null;case 24:case 25:return null}throw Error(l(156,t.tag))}eo=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},to=function(e,t,n,r){var a=e.memoizedProps;if(a!==r){e=t.stateNode,Gl(Vl.current);var l,i=null;switch(n){case"input":a=Y(e,a),r=Y(e,r),i=[];break;case"select":a=M({},a,{value:void 0}),r=M({},r,{value:void 0}),i=[];break;case"textarea":a=re(e,a),r=re(e,r),i=[];break;default:"function"!=typeof a.onClick&&"function"==typeof r.onClick&&(e.onclick=Qr)}for(u in be(n,r),n=null,a)if(!r.hasOwnProperty(u)&&a.hasOwnProperty(u)&&null!=a[u])if("style"===u){var s=a[u];for(l in s)s.hasOwnProperty(l)&&(n||(n={}),n[l]="")}else"dangerouslySetInnerHTML"!==u&&"children"!==u&&"suppressContentEditableWarning"!==u&&"suppressHydrationWarning"!==u&&"autoFocus"!==u&&(o.hasOwnProperty(u)?i||(i=[]):(i=i||[]).push(u,null));for(u in r){var c=r[u];if(s=null!=a?a[u]:void 0,r.hasOwnProperty(u)&&c!==s&&(null!=c||null!=s))if("style"===u)if(s){for(l in s)!s.hasOwnProperty(l)||c&&c.hasOwnProperty(l)||(n||(n={}),n[l]="");for(l in c)c.hasOwnProperty(l)&&s[l]!==c[l]&&(n||(n={}),n[l]=c[l])}else n||(i||(i=[]),i.push(u,n)),n=c;else"dangerouslySetInnerHTML"===u?(c=c?c.__html:void 0,s=s?s.__html:void 0,null!=c&&s!==c&&(i=i||[]).push(u,c)):"children"===u?"string"!=typeof c&&"number"!=typeof c||(i=i||[]).push(u,""+c):"suppressContentEditableWarning"!==u&&"suppressHydrationWarning"!==u&&(o.hasOwnProperty(u)?(null!=c&&"onScroll"===u&&Ar("scroll",e),i||s===c||(i=[])):(i=i||[]).push(u,c))}n&&(i=i||[]).push("style",n);var u=i;(t.updateQueue=u)&&(t.flags|=4)}},no=function(e,t,n,r){n!==r&&(t.flags|=4)};var po=x.ReactCurrentOwner,ho=!1;function go(e,t,n,r){t.child=null===e?Ul(t,null,n,r):Bl(t,e.child,n,r)}function mo(e,t,n,r,a){n=n.render;var l=t.ref;return Ga(t,a),r=pi(e,t,n,r,l,a),n=hi(),null===e||ho?(Sl&&n&&jl(t),t.flags|=1,go(e,t,r,a),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~a,Fo(e,t,a))}function vo(e,t,n,r,a){if(null===e){var l=n.type;return"function"!=typeof l||bc(l)||void 0!==l.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=xc(n.type,null,r,t,t.mode,a)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=l,bo(e,t,l,r,a))}if(l=e.child,0==(e.lanes&a)){var i=l.memoizedProps;if((n=null!==(n=n.compare)?n:rr)(i,r)&&e.ref===t.ref)return Fo(e,t,a)}return t.flags|=1,(e=yc(l,r)).ref=t.ref,e.return=t,t.child=e}function bo(e,t,n,r,a){if(null!==e&&rr(e.memoizedProps,r)&&e.ref===t.ref){if(ho=!1,0==(e.lanes&a))return t.lanes=e.lanes,Fo(e,t,a);0!=(131072&e.flags)&&(ho=!0)}return ko(e,t,n,r,a)}function yo(e,t,n){var r=t.pendingProps,a=r.children,l=null!==e?e.memoizedState:null;if("hidden"===r.mode)if(0==(1&t.mode))t.memoizedState={baseLanes:0,cachePool:null},xa(ys,bs),bs|=n;else{if(0==(1073741824&n))return e=null!==l?l.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e,cachePool:null},t.updateQueue=null,xa(ys,bs),bs|=e,null;t.memoizedState={baseLanes:0,cachePool:null},r=null!==l?l.baseLanes:n,xa(ys,bs),bs|=r}else null!==l?(r=l.baseLanes|n,t.memoizedState=null):r=n,xa(ys,bs),bs|=r;return go(e,t,a,n),t.child}function xo(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=512,t.flags|=2097152)}function ko(e,t,n,r,a){var l=Sa(n)?wa:ja.current;return l=Ta(t,l),Ga(t,a),n=pi(e,t,n,r,l,a),r=hi(),null===e||ho?(Sl&&r&&jl(t),t.flags|=1,go(e,t,n,a),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~a,Fo(e,t,a))}function jo(e,t,n,r,a){if(Sa(n)){var l=!0;Ia(t)}else l=!1;if(Ga(t,a),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),sl(t,n,r),ul(t,n,r,a),r=!0;else if(null===e){var i=t.stateNode,o=t.memoizedProps;i.props=o;var s=i.context,c=n.contextType;"object"==typeof c&&null!==c?c=Ka(c):c=Ta(t,c=Sa(n)?wa:ja.current);var u=n.getDerivedStateFromProps,d="function"==typeof u||"function"==typeof i.getSnapshotBeforeUpdate;d||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(o!==r||s!==c)&&cl(t,i,r,c),Ya=!1;var f=t.memoizedState;i.state=f,nl(t,r,i,a),s=t.memoizedState,o!==r||f!==s||Ea.current||Ya?("function"==typeof u&&(ll(t,n,u,r),s=t.memoizedState),(o=Ya||ol(t,n,o,r,f,s,c))?(d||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||("function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount()),"function"==typeof i.componentDidMount&&(t.flags|=4194308)):("function"==typeof i.componentDidMount&&(t.flags|=4194308),t.memoizedProps=r,t.memoizedState=s),i.props=r,i.state=s,i.context=c,r=o):("function"==typeof i.componentDidMount&&(t.flags|=4194308),r=!1)}else{i=t.stateNode,qa(e,t),o=t.memoizedProps,c=t.type===t.elementType?o:Da(t.type,o),i.props=c,d=t.pendingProps,f=i.context,"object"==typeof(s=n.contextType)&&null!==s?s=Ka(s):s=Ta(t,s=Sa(n)?wa:ja.current);var p=n.getDerivedStateFromProps;(u="function"==typeof p||"function"==typeof i.getSnapshotBeforeUpdate)||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(o!==d||f!==s)&&cl(t,i,r,s),Ya=!1,f=t.memoizedState,i.state=f,nl(t,r,i,a);var h=t.memoizedState;o!==d||f!==h||Ea.current||Ya?("function"==typeof p&&(ll(t,n,p,r),h=t.memoizedState),(c=Ya||ol(t,n,c,r,f,h,s)||!1)?(u||"function"!=typeof i.UNSAFE_componentWillUpdate&&"function"!=typeof i.componentWillUpdate||("function"==typeof i.componentWillUpdate&&i.componentWillUpdate(r,h,s),"function"==typeof i.UNSAFE_componentWillUpdate&&i.UNSAFE_componentWillUpdate(r,h,s)),"function"==typeof i.componentDidUpdate&&(t.flags|=4),"function"==typeof i.getSnapshotBeforeUpdate&&(t.flags|=1024)):("function"!=typeof i.componentDidUpdate||o===e.memoizedProps&&f===e.memoizedState||(t.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||o===e.memoizedProps&&f===e.memoizedState||(t.flags|=1024),t.memoizedProps=r,t.memoizedState=h),i.props=r,i.state=h,i.context=s,r=c):("function"!=typeof i.componentDidUpdate||o===e.memoizedProps&&f===e.memoizedState||(t.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||o===e.memoizedProps&&f===e.memoizedState||(t.flags|=1024),r=!1)}return Eo(e,t,n,r,l,a)}function Eo(e,t,n,r,a,l){xo(e,t);var i=0!=(128&t.flags);if(!r&&!i)return a&&Ra(t,n,!1),Fo(e,t,l);r=t.stateNode,po.current=t;var o=i&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.flags|=1,null!==e&&i?(t.child=Bl(t,e.child,null,l),t.child=Bl(t,null,o,l)):go(e,t,o,l),t.memoizedState=r.state,a&&Ra(t,n,!0),t.child}function wo(e){var t=e.stateNode;t.pendingContext?Oa(0,t.pendingContext,t.pendingContext!==t.context):t.context&&Oa(0,t.context,!1),Kl(e,t.containerInfo)}function To(e,t,n,r,a){return Al(),_l(a),t.flags|=256,go(e,t,n,r),t.child}var So={dehydrated:null,treeContext:null,retryLane:0};function Co(e){return{baseLanes:e,cachePool:null}}function Oo(e,t,n){var r,a=t.pendingProps,i=ql.current,o=!1,s=0!=(128&t.flags);if((r=s)||(r=(null===e||null!==e.memoizedState)&&0!=(2&i)),r?(o=!0,t.flags&=-129):null!==e&&null===e.memoizedState||(i|=1),xa(ql,1&i),null===e)return Rl(t),null!==(e=t.memoizedState)&&null!==(e=e.dehydrated)?(0==(1&t.mode)?t.lanes=1:"$!"===e.data?t.lanes=8:t.lanes=1073741824,null):(i=a.children,e=a.fallback,o?(a=t.mode,o=t.child,i={mode:"hidden",children:i},0==(1&a)&&null!==o?(o.childLanes=0,o.pendingProps=i):o=jc(i,a,0,null),e=kc(e,a,n,null),o.return=t,e.return=t,o.sibling=e,t.child=o,t.child.memoizedState=Co(n),t.memoizedState=So,e):No(t,i));if(null!==(i=e.memoizedState)){if(null!==(r=i.dehydrated)){if(s)return 256&t.flags?(t.flags&=-257,Po(e,t,n,Error(l(422)))):null!==t.memoizedState?(t.child=e.child,t.flags|=128,null):(o=a.fallback,i=t.mode,a=jc({mode:"visible",children:a.children},i,0,null),(o=kc(o,i,n,null)).flags|=2,a.return=t,o.return=t,a.sibling=o,t.child=a,0!=(1&t.mode)&&Bl(t,e.child,null,n),t.child.memoizedState=Co(n),t.memoizedState=So,o);if(0==(1&t.mode))t=Po(e,t,n,null);else if("$!"===r.data)t=Po(e,t,n,Error(l(419)));else if(a=0!=(n&e.childLanes),ho||a){if(null!==(a=gs)){switch(n&-n){case 4:o=2;break;case 16:o=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:o=32;break;case 536870912:o=268435456;break;default:o=0}0!==(a=0!=(o&(a.suspendedLanes|n))?0:o)&&a!==i.retryLane&&(i.retryLane=a,Us(e,a,-1))}tc(),t=Po(e,t,n,Error(l(421)))}else"$?"===r.data?(t.flags|=128,t.child=e.child,t=pc.bind(null,e),r._reactRetry=t,t=null):(n=i.treeContext,Tl=ra(r.nextSibling),wl=t,Sl=!0,Cl=null,null!==n&&(gl[ml++]=bl,gl[ml++]=yl,gl[ml++]=vl,bl=n.id,yl=n.overflow,vl=t),(t=No(t,t.pendingProps.children)).flags|=4096);return t}return o?(a=Ro(e,t,a.children,a.fallback,n),o=t.child,i=e.child.memoizedState,o.memoizedState=null===i?Co(n):{baseLanes:i.baseLanes|n,cachePool:null},o.childLanes=e.childLanes&~n,t.memoizedState=So,a):(n=Io(e,t,a.children,n),t.memoizedState=null,n)}return o?(a=Ro(e,t,a.children,a.fallback,n),o=t.child,i=e.child.memoizedState,o.memoizedState=null===i?Co(n):{baseLanes:i.baseLanes|n,cachePool:null},o.childLanes=e.childLanes&~n,t.memoizedState=So,a):(n=Io(e,t,a.children,n),t.memoizedState=null,n)}function No(e,t){return(t=jc({mode:"visible",children:t},e.mode,0,null)).return=e,e.child=t}function Io(e,t,n,r){var a=e.child;return e=a.sibling,n=yc(a,{mode:"visible",children:n}),0==(1&t.mode)&&(n.lanes=r),n.return=t,n.sibling=null,null!==e&&(null===(r=t.deletions)?(t.deletions=[e],t.flags|=16):r.push(e)),t.child=n}function Ro(e,t,n,r,a){var l=t.mode,i=(e=e.child).sibling,o={mode:"hidden",children:n};return 0==(1&l)&&t.child!==e?((n=t.child).childLanes=0,n.pendingProps=o,t.deletions=null):(n=yc(e,o)).subtreeFlags=14680064&e.subtreeFlags,null!==i?r=yc(i,r):(r=kc(r,l,a,null)).flags|=2,r.return=t,n.return=t,n.sibling=r,t.child=n,r}function Po(e,t,n,r){return null!==r&&_l(r),Bl(t,e.child,null,n),(e=No(t,t.pendingProps.children)).flags|=2,t.memoizedState=null,e}function Lo(e,t,n){e.lanes|=t;var r=e.alternate;null!==r&&(r.lanes|=t),$a(e.return,t,n)}function Ao(e,t,n,r,a){var l=e.memoizedState;null===l?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:a}:(l.isBackwards=t,l.rendering=null,l.renderingStartTime=0,l.last=r,l.tail=n,l.tailMode=a)}function _o(e,t,n){var r=t.pendingProps,a=r.revealOrder,l=r.tail;if(go(e,t,r.children,n),0!=(2&(r=ql.current)))r=1&r|2,t.flags|=128;else{if(null!==e&&0!=(128&e.flags))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Lo(e,n,t);else if(19===e.tag)Lo(e,n,t);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(xa(ql,r),0==(1&t.mode))t.memoizedState=null;else switch(a){case"forwards":for(n=t.child,a=null;null!==n;)null!==(e=n.alternate)&&null===Jl(e)&&(a=n),n=n.sibling;null===(n=a)?(a=t.child,t.child=null):(a=n.sibling,n.sibling=null),Ao(t,!1,a,n,l);break;case"backwards":for(n=null,a=t.child,t.child=null;null!==a;){if(null!==(e=a.alternate)&&null===Jl(e)){t.child=a;break}e=a.sibling,a.sibling=n,n=a,a=e}Ao(t,!0,n,null,l);break;case"together":Ao(t,!1,null,null,void 0);break;default:t.memoizedState=null}return t.child}function Fo(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),js|=t.lanes,0==(n&t.childLanes))return null;if(null!==e&&t.child!==e.child)throw Error(l(153));if(null!==t.child){for(n=yc(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=yc(e,e.pendingProps)).return=t;n.sibling=null}return t.child}function Mo(e,t){switch(El(t),t.tag){case 1:return Sa(t.type)&&Ca(),65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 3:return Ql(),ya(Ea),ya(ja),ei(),0!=(65536&(e=t.flags))&&0==(128&e)?(t.flags=-65537&e|128,t):null;case 5:return Xl(t),null;case 13:if(ya(ql),null!==(e=t.memoizedState)&&null!==e.dehydrated){if(null===t.alternate)throw Error(l(340));Al()}return 65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 19:return ya(ql),null;case 4:return Ql(),null;case 10:return Wa(t.type._context),null;case 22:case 23:return qs(),null;case 24:default:return null}}var Do=!1,zo=!1,Bo="function"==typeof WeakSet?WeakSet:Set,Uo=null;function Ho(e,t){var n=e.ref;if(null!==n)if("function"==typeof n)try{n(null)}catch(n){uc(e,t,n)}else n.current=null}function Vo(e,t,n){try{n()}catch(n){uc(e,t,n)}}var Wo=!1;function $o(e,t,n){var r=t.updateQueue;if(null!==(r=null!==r?r.lastEffect:null)){var a=r=r.next;do{if((a.tag&e)===e){var l=a.destroy;a.destroy=void 0,void 0!==l&&Vo(t,n,l)}a=a.next}while(a!==r)}}function Go(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var r=n.create;n.destroy=r()}n=n.next}while(n!==t)}}function Ko(e){var t=e.ref;if(null!==t){var n=e.stateNode;switch(e.tag){case 5:e=n;break;default:e=n}"function"==typeof t?t(e):t.current=e}}function Qo(e,t,n){if(lt&&"function"==typeof lt.onCommitFiberUnmount)try{lt.onCommitFiberUnmount(at,t)}catch(e){}switch(t.tag){case 0:case 11:case 14:case 15:if(null!==(e=t.updateQueue)&&null!==(e=e.lastEffect)){var r=e=e.next;do{var a=r,l=a.destroy;a=a.tag,void 0!==l&&(0!=(2&a)||0!=(4&a))&&Vo(t,n,l),r=r.next}while(r!==e)}break;case 1:if(Ho(t,n),"function"==typeof(e=t.stateNode).componentWillUnmount)try{e.props=t.memoizedProps,e.state=t.memoizedState,e.componentWillUnmount()}catch(e){uc(t,n,e)}break;case 5:Ho(t,n);break;case 4:ts(e,t,n)}}function Yo(e){var t=e.alternate;null!==t&&(e.alternate=null,Yo(t)),e.child=null,e.deletions=null,e.sibling=null,5===e.tag&&(null!==(t=e.stateNode)&&(delete t[ia],delete t[oa],delete t[ca],delete t[ua],delete t[da])),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}function Xo(e){return 5===e.tag||3===e.tag||4===e.tag}function qo(e){e:for(;;){for(;null===e.sibling;){if(null===e.return||Xo(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;5!==e.tag&&6!==e.tag&&18!==e.tag;){if(2&e.flags)continue e;if(null===e.child||4===e.tag)continue e;e.child.return=e,e=e.child}if(!(2&e.flags))return e.stateNode}}function Jo(e){e:{for(var t=e.return;null!==t;){if(Xo(t))break e;t=t.return}throw Error(l(160))}var n=t;switch(n.tag){case 5:t=n.stateNode,32&n.flags&&(fe(t,""),n.flags&=-33),es(e,n=qo(e),t);break;case 3:case 4:t=n.stateNode.containerInfo,Zo(e,n=qo(e),t);break;default:throw Error(l(161))}}function Zo(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=Qr));else if(4!==r&&null!==(e=e.child))for(Zo(e,t,n),e=e.sibling;null!==e;)Zo(e,t,n),e=e.sibling}function es(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&null!==(e=e.child))for(es(e,t,n),e=e.sibling;null!==e;)es(e,t,n),e=e.sibling}function ts(e,t,n){for(var r,a,i=t,o=!1;;){if(!o){o=i.return;e:for(;;){if(null===o)throw Error(l(160));switch(r=o.stateNode,o.tag){case 5:a=!1;break e;case 3:case 4:r=r.containerInfo,a=!0;break e}o=o.return}o=!0}if(5===i.tag||6===i.tag){e:for(var s=e,c=i,u=n,d=c;;)if(Qo(s,d,u),null!==d.child&&4!==d.tag)d.child.return=d,d=d.child;else{if(d===c)break e;for(;null===d.sibling;){if(null===d.return||d.return===c)break e;d=d.return}d.sibling.return=d.return,d=d.sibling}a?(s=r,c=i.stateNode,8===s.nodeType?s.parentNode.removeChild(c):s.removeChild(c)):r.removeChild(i.stateNode)}else if(18===i.tag)a?(s=r,c=i.stateNode,8===s.nodeType?na(s.parentNode,c):1===s.nodeType&&na(s,c),Ut(s)):na(r,i.stateNode);else if(4===i.tag){if(null!==i.child){r=i.stateNode.containerInfo,a=!0,i.child.return=i,i=i.child;continue}}else if(Qo(e,i,n),null!==i.child){i.child.return=i,i=i.child;continue}if(i===t)break;for(;null===i.sibling;){if(null===i.return||i.return===t)return;4===(i=i.return).tag&&(o=!1)}i.sibling.return=i.return,i=i.sibling}}function ns(e,t){switch(t.tag){case 0:case 11:case 14:case 15:return $o(3,t,t.return),Go(3,t),void $o(5,t,t.return);case 1:return;case 5:var n=t.stateNode;if(null!=n){var r=t.memoizedProps,a=null!==e?e.memoizedProps:r;e=t.type;var i=t.updateQueue;if(t.updateQueue=null,null!==i){for("input"===e&&"radio"===r.type&&null!=r.name&&q(n,r),ye(e,a),t=ye(e,r),a=0;a<i.length;a+=2){var o=i[a],s=i[a+1];"style"===o?me(n,s):"dangerouslySetInnerHTML"===o?de(n,s):"children"===o?fe(n,s):y(n,o,s,t)}switch(e){case"input":J(n,r);break;case"textarea":le(n,r);break;case"select":e=n._wrapperState.wasMultiple,n._wrapperState.wasMultiple=!!r.multiple,null!=(i=r.value)?ne(n,!!r.multiple,i,!1):e!==!!r.multiple&&(null!=r.defaultValue?ne(n,!!r.multiple,r.defaultValue,!0):ne(n,!!r.multiple,r.multiple?[]:"",!1))}n[oa]=r}}return;case 6:if(null===t.stateNode)throw Error(l(162));return void(t.stateNode.nodeValue=t.memoizedProps);case 3:return void(null!==e&&e.memoizedState.isDehydrated&&Ut(t.stateNode.containerInfo));case 12:return;case 13:case 19:return void rs(t);case 17:return}throw Error(l(163))}function rs(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new Bo),t.forEach((function(t){var r=hc.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}function as(e,t,n){Uo=e,ls(e,t,n)}function ls(e,t,n){for(var r=0!=(1&e.mode);null!==Uo;){var a=Uo,l=a.child;if(22===a.tag&&r){var i=null!==a.memoizedState||Do;if(!i){var o=a.alternate,s=null!==o&&null!==o.memoizedState||zo;o=Do;var c=zo;if(Do=i,(zo=s)&&!c)for(Uo=a;null!==Uo;)s=(i=Uo).child,22===i.tag&&null!==i.memoizedState?ss(a):null!==s?(s.return=i,Uo=s):ss(a);for(;null!==l;)Uo=l,ls(l,t,n),l=l.sibling;Uo=a,Do=o,zo=c}is(e)}else 0!=(8772&a.subtreeFlags)&&null!==l?(l.return=a,Uo=l):is(e)}}function is(e){for(;null!==Uo;){var t=Uo;if(0!=(8772&t.flags)){var n=t.alternate;try{if(0!=(8772&t.flags))switch(t.tag){case 0:case 11:case 15:zo||Go(5,t);break;case 1:var r=t.stateNode;if(4&t.flags&&!zo)if(null===n)r.componentDidMount();else{var a=t.elementType===t.type?n.memoizedProps:Da(t.type,n.memoizedProps);r.componentDidUpdate(a,n.memoizedState,r.__reactInternalSnapshotBeforeUpdate)}var i=t.updateQueue;null!==i&&rl(t,i,r);break;case 3:var o=t.updateQueue;if(null!==o){if(n=null,null!==t.child)switch(t.child.tag){case 5:n=t.child.stateNode;break;case 1:n=t.child.stateNode}rl(t,o,n)}break;case 5:var s=t.stateNode;if(null===n&&4&t.flags){n=s;var c=t.memoizedProps;switch(t.type){case"button":case"input":case"select":case"textarea":c.autoFocus&&n.focus();break;case"img":c.src&&(n.src=c.src)}}break;case 6:case 4:case 12:break;case 13:if(null===t.memoizedState){var u=t.alternate;if(null!==u){var d=u.memoizedState;if(null!==d){var f=d.dehydrated;null!==f&&Ut(f)}}}break;case 19:case 17:case 21:case 22:case 23:break;default:throw Error(l(163))}zo||512&t.flags&&Ko(t)}catch(e){uc(t,t.return,e)}}if(t===e){Uo=null;break}if(null!==(n=t.sibling)){n.return=t.return,Uo=n;break}Uo=t.return}}function os(e){for(;null!==Uo;){var t=Uo;if(t===e){Uo=null;break}var n=t.sibling;if(null!==n){n.return=t.return,Uo=n;break}Uo=t.return}}function ss(e){for(;null!==Uo;){var t=Uo;try{switch(t.tag){case 0:case 11:case 15:var n=t.return;try{Go(4,t)}catch(e){uc(t,n,e)}break;case 1:var r=t.stateNode;if("function"==typeof r.componentDidMount){var a=t.return;try{r.componentDidMount()}catch(e){uc(t,a,e)}}var l=t.return;try{Ko(t)}catch(e){uc(t,l,e)}break;case 5:var i=t.return;try{Ko(t)}catch(e){uc(t,i,e)}}}catch(e){uc(t,t.return,e)}if(t===e){Uo=null;break}var o=t.sibling;if(null!==o){o.return=t.return,Uo=o;break}Uo=t.return}}var cs,us=Math.ceil,ds=x.ReactCurrentDispatcher,fs=x.ReactCurrentOwner,ps=x.ReactCurrentBatchConfig,hs=0,gs=null,ms=null,vs=0,bs=0,ys=ba(0),xs=0,ks=null,js=0,Es=0,ws=0,Ts=null,Ss=null,Cs=0,Os=1/0,Ns=!1,Is=null,Rs=null,Ps=!1,Ls=null,As=0,_s=0,Fs=null,Ms=-1,Ds=0;function zs(){return 0!=(6&hs)?qe():-1!==Ms?Ms:Ms=qe()}function Bs(e){return 0==(1&e.mode)?1:0!=(2&hs)&&0!==vs?vs&-vs:null!==Ma.transition?(0===Ds&&(e=ct,0==(4194240&(ct<<=1))&&(ct=64),Ds=e),Ds):0!==(e=bt)?e:e=void 0===(e=window.event)?16:Qt(e.type)}function Us(e,t,n){if(50<_s)throw _s=0,Fs=null,Error(l(185));var r=Hs(e,t);return null===r?null:(mt(r,t,n),0!=(2&hs)&&r===gs||(r===gs&&(0==(2&hs)&&(Es|=t),4===xs&&Ks(r,vs)),Vs(r,n),1===t&&0===hs&&0==(1&e.mode)&&(Os=qe()+500,La&&Fa())),r)}function Hs(e,t){e.lanes|=t;var n=e.alternate;for(null!==n&&(n.lanes|=t),n=e,e=e.return;null!==e;)e.childLanes|=t,null!==(n=e.alternate)&&(n.childLanes|=t),n=e,e=e.return;return 3===n.tag?n.stateNode:null}function Vs(e,t){var n=e.callbackNode;!function(e,t){for(var n=e.suspendedLanes,r=e.pingedLanes,a=e.expirationTimes,l=e.pendingLanes;0<l;){var i=31-it(l),o=1<<i,s=a[i];-1===s?0!=(o&n)&&0==(o&r)||(a[i]=pt(o,t)):s<=t&&(e.expiredLanes|=o),l&=~o}}(e,t);var r=ft(e,e===gs?vs:0);if(0===r)null!==n&&Qe(n),e.callbackNode=null,e.callbackPriority=0;else if(t=r&-r,e.callbackPriority!==t){if(null!=n&&Qe(n),1===t)0===e.tag?function(e){La=!0,_a(e)}(Qs.bind(null,e)):_a(Qs.bind(null,e)),ea((function(){0===hs&&Fa()})),n=null;else{switch(yt(r)){case 1:n=Ze;break;case 4:n=et;break;case 16:n=tt;break;case 536870912:n=rt;break;default:n=tt}n=gc(n,Ws.bind(null,e))}e.callbackPriority=t,e.callbackNode=n}}function Ws(e,t){if(Ms=-1,Ds=0,0!=(6&hs))throw Error(l(327));var n=e.callbackNode;if(sc()&&e.callbackNode!==n)return null;var r=ft(e,e===gs?vs:0);if(0===r)return null;if(0!=(30&r)||0!=(r&e.expiredLanes)||t)t=nc(e,r);else{t=r;var a=hs;hs|=2;var i=ec();for(gs===e&&vs===t||(Os=qe()+500,Js(e,t));;)try{ac();break}catch(t){Zs(e,t)}Va(),ds.current=i,hs=a,null!==ms?t=0:(gs=null,vs=0,t=xs)}if(0!==t){if(2===t&&(0!==(a=ht(e))&&(r=a,t=$s(e,a))),1===t)throw n=ks,Js(e,0),Ks(e,r),Vs(e,qe()),n;if(6===t)Ks(e,r);else{if(a=e.current.alternate,0==(30&r)&&!function(e){for(var t=e;;){if(16384&t.flags){var n=t.updateQueue;if(null!==n&&null!==(n=n.stores))for(var r=0;r<n.length;r++){var a=n[r],l=a.getSnapshot;a=a.value;try{if(!nr(l(),a))return!1}catch(e){return!1}}}if(n=t.child,16384&t.subtreeFlags&&null!==n)n.return=t,t=n;else{if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return!0;t=t.return}t.sibling.return=t.return,t=t.sibling}}return!0}(a)&&(2===(t=nc(e,r))&&(0!==(i=ht(e))&&(r=i,t=$s(e,i))),1===t))throw n=ks,Js(e,0),Ks(e,r),Vs(e,qe()),n;switch(e.finishedWork=a,e.finishedLanes=r,t){case 0:case 1:throw Error(l(345));case 2:oc(e,Ss);break;case 3:if(Ks(e,r),(130023424&r)===r&&10<(t=Cs+500-qe())){if(0!==ft(e,0))break;if(((a=e.suspendedLanes)&r)!==r){zs(),e.pingedLanes|=e.suspendedLanes&a;break}e.timeoutHandle=qr(oc.bind(null,e,Ss),t);break}oc(e,Ss);break;case 4:if(Ks(e,r),(4194240&r)===r)break;for(t=e.eventTimes,a=-1;0<r;){var o=31-it(r);i=1<<o,(o=t[o])>a&&(a=o),r&=~i}if(r=a,10<(r=(120>(r=qe()-r)?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*us(r/1960))-r)){e.timeoutHandle=qr(oc.bind(null,e,Ss),r);break}oc(e,Ss);break;case 5:oc(e,Ss);break;default:throw Error(l(329))}}}return Vs(e,qe()),e.callbackNode===n?Ws.bind(null,e):null}function $s(e,t){var n=Ts;return e.current.memoizedState.isDehydrated&&(Js(e,t).flags|=256),2!==(e=nc(e,t))&&(t=Ss,Ss=n,null!==t&&Gs(t)),e}function Gs(e){null===Ss?Ss=e:Ss.push.apply(Ss,e)}function Ks(e,t){for(t&=~ws,t&=~Es,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-it(t),r=1<<n;e[n]=-1,t&=~r}}function Qs(e){if(0!=(6&hs))throw Error(l(327));sc();var t=ft(e,0);if(0==(1&t))return Vs(e,qe()),null;var n=nc(e,t);if(0!==e.tag&&2===n){var r=ht(e);0!==r&&(t=r,n=$s(e,r))}if(1===n)throw n=ks,Js(e,0),Ks(e,t),Vs(e,qe()),n;if(6===n)throw Error(l(345));return e.finishedWork=e.current.alternate,e.finishedLanes=t,oc(e,Ss),Vs(e,qe()),null}function Ys(e,t){var n=hs;hs|=1;try{return e(t)}finally{0===(hs=n)&&(Os=qe()+500,La&&Fa())}}function Xs(e){null!==Ls&&0===Ls.tag&&0==(6&hs)&&sc();var t=hs;hs|=1;var n=ps.transition,r=bt;try{if(ps.transition=null,bt=1,e)return e()}finally{bt=r,ps.transition=n,0==(6&(hs=t))&&Fa()}}function qs(){bs=ys.current,ya(ys)}function Js(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,Jr(n)),null!==ms)for(n=ms.return;null!==n;){var r=n;switch(El(r),r.tag){case 1:null!=(r=r.type.childContextTypes)&&Ca();break;case 3:Ql(),ya(Ea),ya(ja),ei();break;case 5:Xl(r);break;case 4:Ql();break;case 13:case 19:ya(ql);break;case 10:Wa(r.type._context);break;case 22:case 23:qs()}n=n.return}if(gs=e,ms=e=yc(e.current,null),vs=bs=t,xs=0,ks=null,ws=Es=js=0,Ss=Ts=null,null!==Qa){for(t=0;t<Qa.length;t++)if(null!==(r=(n=Qa[t]).interleaved)){n.interleaved=null;var a=r.next,l=n.pending;if(null!==l){var i=l.next;l.next=a,r.next=i}n.pending=r}Qa=null}return e}function Zs(e,t){for(;;){var n=ms;try{if(Va(),ti.current=Qi,oi){for(var r=ai.memoizedState;null!==r;){var a=r.queue;null!==a&&(a.pending=null),r=r.next}oi=!1}if(ri=0,ii=li=ai=null,si=!1,ci=0,fs.current=null,null===n||null===n.return){xs=1,ks=t,ms=null;break}e:{var i=e,o=n.return,s=n,c=t;if(t=vs,s.flags|=32768,null!==c&&"object"==typeof c&&"function"==typeof c.then){var u=c,d=s,f=d.tag;if(0==(1&d.mode)&&(0===f||11===f||15===f)){var p=d.alternate;p?(d.updateQueue=p.updateQueue,d.memoizedState=p.memoizedState,d.lanes=p.lanes):(d.updateQueue=null,d.memoizedState=null)}var h=oo(o);if(null!==h){h.flags&=-257,so(h,o,s,0,t),1&h.mode&&io(i,u,t),c=u;var g=(t=h).updateQueue;if(null===g){var m=new Set;m.add(c),t.updateQueue=m}else g.add(c);break e}if(0==(1&t)){io(i,u,t),tc();break e}c=Error(l(426))}else if(Sl&&1&s.mode){var v=oo(o);if(null!==v){0==(65536&v.flags)&&(v.flags|=256),so(v,o,s,0,t),_l(c);break e}}i=c,4!==xs&&(xs=2),null===Ts?Ts=[i]:Ts.push(i),c=Ji(c,s),s=o;do{switch(s.tag){case 3:s.flags|=65536,t&=-t,s.lanes|=t,tl(s,ao(0,c,t));break e;case 1:i=c;var b=s.type,y=s.stateNode;if(0==(128&s.flags)&&("function"==typeof b.getDerivedStateFromError||null!==y&&"function"==typeof y.componentDidCatch&&(null===Rs||!Rs.has(y)))){s.flags|=65536,t&=-t,s.lanes|=t,tl(s,lo(s,i,t));break e}}s=s.return}while(null!==s)}ic(n)}catch(e){t=e,ms===n&&null!==n&&(ms=n=n.return);continue}break}}function ec(){var e=ds.current;return ds.current=Qi,null===e?Qi:e}function tc(){0!==xs&&3!==xs&&2!==xs||(xs=4),null===gs||0==(268435455&js)&&0==(268435455&Es)||Ks(gs,vs)}function nc(e,t){var n=hs;hs|=2;var r=ec();for(gs===e&&vs===t||Js(e,t);;)try{rc();break}catch(t){Zs(e,t)}if(Va(),hs=n,ds.current=r,null!==ms)throw Error(l(261));return gs=null,vs=0,xs}function rc(){for(;null!==ms;)lc(ms)}function ac(){for(;null!==ms&&!Ye();)lc(ms)}function lc(e){var t=cs(e.alternate,e,bs);e.memoizedProps=e.pendingProps,null===t?ic(e):ms=t,fs.current=null}function ic(e){var t=e;do{var n=t.alternate;if(e=t.return,0==(32768&t.flags)){if(null!==(n=fo(n,t,bs)))return void(ms=n)}else{if(null!==(n=Mo(n,t)))return n.flags&=32767,void(ms=n);if(null===e)return xs=6,void(ms=null);e.flags|=32768,e.subtreeFlags=0,e.deletions=null}if(null!==(t=t.sibling))return void(ms=t);ms=t=e}while(null!==t);0===xs&&(xs=5)}function oc(e,t){var n=bt,r=ps.transition;try{ps.transition=null,bt=1,function(e,t,n){do{sc()}while(null!==Ls);if(0!=(6&hs))throw Error(l(327));var r=e.finishedWork,a=e.finishedLanes;if(null===r)return null;if(e.finishedWork=null,e.finishedLanes=0,r===e.current)throw Error(l(177));e.callbackNode=null,e.callbackPriority=0;var i=r.lanes|r.childLanes;if(function(e,t){var n=e.pendingLanes&~t;e.pendingLanes=t,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=t,e.mutableReadLanes&=t,e.entangledLanes&=t,t=e.entanglements;var r=e.eventTimes;for(e=e.expirationTimes;0<n;){var a=31-it(n),l=1<<a;t[a]=0,r[a]=-1,e[a]=-1,n&=~l}}(e,i),e===gs&&(ms=gs=null,vs=0),0==(2064&r.subtreeFlags)&&0==(2064&r.flags)||Ps||(Ps=!0,gc(tt,(function(){return sc(),null}))),i=0!=(15990&r.flags),0!=(15990&r.subtreeFlags)||i){i=ps.transition,ps.transition=null;var o=bt;bt=1;var s=hs;hs|=4,fs.current=null,function(e,t){if(sr(e=or())){if("selectionStart"in e)var n={start:e.selectionStart,end:e.selectionEnd};else e:{var r=(n=(n=e.ownerDocument)&&n.defaultView||window).getSelection&&n.getSelection();if(r&&0!==r.rangeCount){n=r.anchorNode;var a=r.anchorOffset,i=r.focusNode;r=r.focusOffset;try{n.nodeType,i.nodeType}catch(e){n=null;break e}var o=0,s=-1,c=-1,u=0,d=0,f=e,p=null;t:for(;;){for(var h;f!==n||0!==a&&3!==f.nodeType||(s=o+a),f!==i||0!==r&&3!==f.nodeType||(c=o+r),3===f.nodeType&&(o+=f.nodeValue.length),null!==(h=f.firstChild);)p=f,f=h;for(;;){if(f===e)break t;if(p===n&&++u===a&&(s=o),p===i&&++d===r&&(c=o),null!==(h=f.nextSibling))break;p=(f=p).parentNode}f=h}n=-1===s||-1===c?null:{start:s,end:c}}else n=null}n=n||{start:0,end:0}}else n=null;for(Yr={focusedElem:e,selectionRange:n},Uo=t;null!==Uo;)if(e=(t=Uo).child,0!=(1028&t.subtreeFlags)&&null!==e)e.return=t,Uo=e;else for(;null!==Uo;){t=Uo;try{var g=t.alternate;if(0!=(1024&t.flags))switch(t.tag){case 0:case 11:case 15:break;case 1:if(null!==g){var m=g.memoizedProps,v=g.memoizedState,b=t.stateNode,y=b.getSnapshotBeforeUpdate(t.elementType===t.type?m:Da(t.type,m),v);b.__reactInternalSnapshotBeforeUpdate=y}break;case 3:var x=t.stateNode.containerInfo;if(1===x.nodeType)x.textContent="";else if(9===x.nodeType){var k=x.body;null!=k&&(k.textContent="")}break;case 5:case 6:case 4:case 17:break;default:throw Error(l(163))}}catch(e){uc(t,t.return,e)}if(null!==(e=t.sibling)){e.return=t.return,Uo=e;break}Uo=t.return}g=Wo,Wo=!1}(e,r),function(e,t){for(Uo=t;null!==Uo;){var n=(t=Uo).deletions;if(null!==n)for(var r=0;r<n.length;r++){var a=n[r];try{ts(e,a,t);var l=a.alternate;null!==l&&(l.return=null),a.return=null}catch(e){uc(a,t,e)}}if(n=t.child,0!=(12854&t.subtreeFlags)&&null!==n)n.return=t,Uo=n;else for(;null!==Uo;){t=Uo;try{var i=t.flags;if(32&i&&fe(t.stateNode,""),512&i){var o=t.alternate;if(null!==o){var s=o.ref;null!==s&&("function"==typeof s?s(null):s.current=null)}}if(8192&i)switch(t.tag){case 13:if(null!==t.memoizedState){var c=t.alternate;null!==c&&null!==c.memoizedState||(Cs=qe())}break;case 22:var u=null!==t.memoizedState,d=t.alternate,f=null!==d&&null!==d.memoizedState;e:{a=u;for(var p=null,h=r=n=t;;){if(5===h.tag){if(null===p){p=h;var g=h.stateNode;if(a){var m=g.style;"function"==typeof m.setProperty?m.setProperty("display","none","important"):m.display="none"}else{var v=h.stateNode,b=h.memoizedProps.style,y=null!=b&&b.hasOwnProperty("display")?b.display:null;v.style.display=ge("display",y)}}}else if(6===h.tag)null===p&&(h.stateNode.nodeValue=a?"":h.memoizedProps);else if((22!==h.tag&&23!==h.tag||null===h.memoizedState||h===r)&&null!==h.child){h.child.return=h,h=h.child;continue}if(h===r)break;for(;null===h.sibling;){if(null===h.return||h.return===r)break e;p===h&&(p=null),h=h.return}p===h&&(p=null),h.sibling.return=h.return,h=h.sibling}}if(u&&!f&&0!=(1&n.mode)){Uo=n;for(var x=n.child;null!==x;){for(n=Uo=x;null!==Uo;){var k=(r=Uo).child;switch(r.tag){case 0:case 11:case 14:case 15:$o(4,r,r.return);break;case 1:Ho(r,r.return);var j=r.stateNode;if("function"==typeof j.componentWillUnmount){var E=r.return;try{j.props=r.memoizedProps,j.state=r.memoizedState,j.componentWillUnmount()}catch(e){uc(r,E,e)}}break;case 5:Ho(r,r.return);break;case 22:if(null!==r.memoizedState){os(n);continue}}null!==k?(k.return=r,Uo=k):os(n)}x=x.sibling}}}switch(4102&i){case 2:Jo(t),t.flags&=-3;break;case 6:Jo(t),t.flags&=-3,ns(t.alternate,t);break;case 4096:t.flags&=-4097;break;case 4100:t.flags&=-4097,ns(t.alternate,t);break;case 4:ns(t.alternate,t)}}catch(e){uc(t,t.return,e)}if(null!==(n=t.sibling)){n.return=t.return,Uo=n;break}Uo=t.return}}}(e,r),cr(Yr),Yr=null,e.current=r,as(r,e,a),Xe(),hs=s,bt=o,ps.transition=i}else e.current=r;if(Ps&&(Ps=!1,Ls=e,As=a),0===(i=e.pendingLanes)&&(Rs=null),function(e){if(lt&&"function"==typeof lt.onCommitFiberRoot)try{lt.onCommitFiberRoot(at,e,void 0,128==(128&e.current.flags))}catch(e){}}(r.stateNode),Vs(e,qe()),null!==t)for(n=e.onRecoverableError,r=0;r<t.length;r++)n(t[r]);if(Ns)throw Ns=!1,e=Is,Is=null,e;0!=(1&As)&&0!==e.tag&&sc(),0!=(1&(i=e.pendingLanes))?e===Fs?_s++:(_s=0,Fs=e):_s=0,Fa()}(e,t,n)}finally{ps.transition=r,bt=n}return null}function sc(){if(null!==Ls){var e=yt(As),t=ps.transition,n=bt;try{if(ps.transition=null,bt=16>e?16:e,null===Ls)var r=!1;else{if(e=Ls,Ls=null,As=0,0!=(6&hs))throw Error(l(331));var a=hs;for(hs|=4,Uo=e.current;null!==Uo;){var i=Uo,o=i.child;if(0!=(16&Uo.flags)){var s=i.deletions;if(null!==s){for(var c=0;c<s.length;c++){var u=s[c];for(Uo=u;null!==Uo;){var d=Uo;switch(d.tag){case 0:case 11:case 15:$o(8,d,i)}var f=d.child;if(null!==f)f.return=d,Uo=f;else for(;null!==Uo;){var p=(d=Uo).sibling,h=d.return;if(Yo(d),d===u){Uo=null;break}if(null!==p){p.return=h,Uo=p;break}Uo=h}}}var g=i.alternate;if(null!==g){var m=g.child;if(null!==m){g.child=null;do{var v=m.sibling;m.sibling=null,m=v}while(null!==m)}}Uo=i}}if(0!=(2064&i.subtreeFlags)&&null!==o)o.return=i,Uo=o;else e:for(;null!==Uo;){if(0!=(2048&(i=Uo).flags))switch(i.tag){case 0:case 11:case 15:$o(9,i,i.return)}var b=i.sibling;if(null!==b){b.return=i.return,Uo=b;break e}Uo=i.return}}var y=e.current;for(Uo=y;null!==Uo;){var x=(o=Uo).child;if(0!=(2064&o.subtreeFlags)&&null!==x)x.return=o,Uo=x;else e:for(o=y;null!==Uo;){if(0!=(2048&(s=Uo).flags))try{switch(s.tag){case 0:case 11:case 15:Go(9,s)}}catch(e){uc(s,s.return,e)}if(s===o){Uo=null;break e}var k=s.sibling;if(null!==k){k.return=s.return,Uo=k;break e}Uo=s.return}}if(hs=a,Fa(),lt&&"function"==typeof lt.onPostCommitFiberRoot)try{lt.onPostCommitFiberRoot(at,e)}catch(e){}r=!0}return r}finally{bt=n,ps.transition=t}}return!1}function cc(e,t,n){Za(e,t=ao(0,t=Ji(n,t),1)),t=zs(),null!==(e=Hs(e,1))&&(mt(e,1,t),Vs(e,t))}function uc(e,t,n){if(3===e.tag)cc(e,e,n);else for(;null!==t;){if(3===t.tag){cc(t,e,n);break}if(1===t.tag){var r=t.stateNode;if("function"==typeof t.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Rs||!Rs.has(r))){Za(t,e=lo(t,e=Ji(n,e),1)),e=zs(),null!==(t=Hs(t,1))&&(mt(t,1,e),Vs(t,e));break}}t=t.return}}function dc(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),t=zs(),e.pingedLanes|=e.suspendedLanes&n,gs===e&&(vs&n)===n&&(4===xs||3===xs&&(130023424&vs)===vs&&500>qe()-Cs?Js(e,0):ws|=n),Vs(e,t)}function fc(e,t){0===t&&(0==(1&e.mode)?t=1:(t=ut,0==(130023424&(ut<<=1))&&(ut=4194304)));var n=zs();null!==(e=Hs(e,t))&&(mt(e,t,n),Vs(e,n))}function pc(e){var t=e.memoizedState,n=0;null!==t&&(n=t.retryLane),fc(e,n)}function hc(e,t){var n=0;switch(e.tag){case 13:var r=e.stateNode,a=e.memoizedState;null!==a&&(n=a.retryLane);break;case 19:r=e.stateNode;break;default:throw Error(l(314))}null!==r&&r.delete(t),fc(e,n)}function gc(e,t){return Ke(e,t)}function mc(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function vc(e,t,n,r){return new mc(e,t,n,r)}function bc(e){return!(!(e=e.prototype)||!e.isReactComponent)}function yc(e,t){var n=e.alternate;return null===n?((n=vc(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.subtreeFlags=0,n.deletions=null),n.flags=14680064&e.flags,n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function xc(e,t,n,r,a,i){var o=2;if(r=e,"function"==typeof e)bc(e)&&(o=1);else if("string"==typeof e)o=5;else e:switch(e){case E:return kc(n.children,a,i,t);case w:o=8,a|=8;break;case T:return(e=vc(12,n,t,2|a)).elementType=T,e.lanes=i,e;case N:return(e=vc(13,n,t,a)).elementType=N,e.lanes=i,e;case I:return(e=vc(19,n,t,a)).elementType=I,e.lanes=i,e;case L:return jc(n,a,i,t);default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case S:o=10;break e;case C:o=9;break e;case O:o=11;break e;case R:o=14;break e;case P:o=16,r=null;break e}throw Error(l(130,null==e?e:typeof e,""))}return(t=vc(o,n,t,a)).elementType=e,t.type=r,t.lanes=i,t}function kc(e,t,n,r){return(e=vc(7,e,r,t)).lanes=n,e}function jc(e,t,n,r){return(e=vc(22,e,r,t)).elementType=L,e.lanes=n,e.stateNode={},e}function Ec(e,t,n){return(e=vc(6,e,null,t)).lanes=n,e}function wc(e,t,n){return(t=vc(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Tc(e,t,n,r,a){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.pendingContext=this.context=null,this.callbackPriority=0,this.eventTimes=gt(0),this.expirationTimes=gt(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=gt(0),this.identifierPrefix=r,this.onRecoverableError=a,this.mutableSourceEagerHydrationData=null}function Sc(e,t,n,r,a,l,i,o,s){return e=new Tc(e,t,n,o,s),1===t?(t=1,!0===l&&(t|=8)):t=0,l=vc(3,null,null,t),e.current=l,l.stateNode=e,l.memoizedState={element:r,isDehydrated:n,cache:null,transitions:null},Xa(l),e}function Cc(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:j,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}function Oc(e){if(!e)return ka;e:{if(He(e=e._reactInternals)!==e||1!==e.tag)throw Error(l(170));var t=e;do{switch(t.tag){case 3:t=t.stateNode.context;break e;case 1:if(Sa(t.type)){t=t.stateNode.__reactInternalMemoizedMergedChildContext;break e}}t=t.return}while(null!==t);throw Error(l(171))}if(1===e.tag){var n=e.type;if(Sa(n))return Na(e,n,t)}return t}function Nc(e,t,n,r,a,l,i,o,s){return(e=Sc(n,r,!0,e,0,l,0,o,s)).context=Oc(null),n=e.current,(l=Ja(r=zs(),a=Bs(n))).callback=null!=t?t:null,Za(n,l),e.current.lanes=a,mt(e,a,r),Vs(e,r),e}function Ic(e,t,n,r){var a=t.current,l=zs(),i=Bs(a);return n=Oc(n),null===t.context?t.context=n:t.pendingContext=n,(t=Ja(l,i)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),Za(a,t),null!==(e=Us(a,i,l))&&el(e,a,i),i}function Rc(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:default:return e.child.stateNode}}function Pc(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function Lc(e,t){Pc(e,t),(e=e.alternate)&&Pc(e,t)}cs=function(e,t,n){if(null!==e)if(e.memoizedProps!==t.pendingProps||Ea.current)ho=!0;else{if(0==(e.lanes&n)&&0==(128&t.flags))return ho=!1,function(e,t,n){switch(t.tag){case 3:wo(t),Al();break;case 5:Yl(t);break;case 1:Sa(t.type)&&Ia(t);break;case 4:Kl(t,t.stateNode.containerInfo);break;case 10:var r=t.type._context,a=t.memoizedProps.value;xa(za,r._currentValue),r._currentValue=a;break;case 13:if(null!==(r=t.memoizedState))return null!==r.dehydrated?(xa(ql,1&ql.current),t.flags|=128,null):0!=(n&t.child.childLanes)?Oo(e,t,n):(xa(ql,1&ql.current),null!==(e=Fo(e,t,n))?e.sibling:null);xa(ql,1&ql.current);break;case 19:if(r=0!=(n&t.childLanes),0!=(128&e.flags)){if(r)return _o(e,t,n);t.flags|=128}if(null!==(a=t.memoizedState)&&(a.rendering=null,a.tail=null,a.lastEffect=null),xa(ql,ql.current),r)break;return null;case 22:case 23:return t.lanes=0,yo(e,t,n)}return Fo(e,t,n)}(e,t,n);ho=0!=(131072&e.flags)}else ho=!1,Sl&&0!=(1048576&t.flags)&&kl(t,hl,t.index);switch(t.lanes=0,t.tag){case 2:var r=t.type;null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps;var a=Ta(t,ja.current);Ga(t,n),a=pi(null,t,r,e,a,n);var i=hi();return t.flags|=1,"object"==typeof a&&null!==a&&"function"==typeof a.render&&void 0===a.$$typeof?(t.tag=1,t.memoizedState=null,t.updateQueue=null,Sa(r)?(i=!0,Ia(t)):i=!1,t.memoizedState=null!==a.state&&void 0!==a.state?a.state:null,Xa(t),a.updater=il,t.stateNode=a,a._reactInternals=t,ul(t,r,e,n),t=Eo(null,t,r,!0,i,n)):(t.tag=0,Sl&&i&&jl(t),go(null,t,a,n),t=t.child),t;case 16:r=t.elementType;e:{switch(null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,r=(a=r._init)(r._payload),t.type=r,a=t.tag=function(e){if("function"==typeof e)return bc(e)?1:0;if(null!=e){if((e=e.$$typeof)===O)return 11;if(e===R)return 14}return 2}(r),e=Da(r,e),a){case 0:t=ko(null,t,r,e,n);break e;case 1:t=jo(null,t,r,e,n);break e;case 11:t=mo(null,t,r,e,n);break e;case 14:t=vo(null,t,r,Da(r.type,e),n);break e}throw Error(l(306,r,""))}return t;case 0:return r=t.type,a=t.pendingProps,ko(e,t,r,a=t.elementType===r?a:Da(r,a),n);case 1:return r=t.type,a=t.pendingProps,jo(e,t,r,a=t.elementType===r?a:Da(r,a),n);case 3:e:{if(wo(t),null===e)throw Error(l(387));r=t.pendingProps,a=(i=t.memoizedState).element,qa(e,t),nl(t,r,null,n);var o=t.memoizedState;if(r=o.element,i.isDehydrated){if(i={element:r,isDehydrated:!1,cache:o.cache,transitions:o.transitions},t.updateQueue.baseState=i,t.memoizedState=i,256&t.flags){t=To(e,t,r,n,a=Error(l(423)));break e}if(r!==a){t=To(e,t,r,n,a=Error(l(424)));break e}for(Tl=ra(t.stateNode.containerInfo.firstChild),wl=t,Sl=!0,Cl=null,n=Ul(t,null,r,n),t.child=n;n;)n.flags=-3&n.flags|4096,n=n.sibling}else{if(Al(),r===a){t=Fo(e,t,n);break e}go(e,t,r,n)}t=t.child}return t;case 5:return Yl(t),null===e&&Rl(t),r=t.type,a=t.pendingProps,i=null!==e?e.memoizedProps:null,o=a.children,Xr(r,a)?o=null:null!==i&&Xr(r,i)&&(t.flags|=32),xo(e,t),go(e,t,o,n),t.child;case 6:return null===e&&Rl(t),null;case 13:return Oo(e,t,n);case 4:return Kl(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=Bl(t,null,r,n):go(e,t,r,n),t.child;case 11:return r=t.type,a=t.pendingProps,mo(e,t,r,a=t.elementType===r?a:Da(r,a),n);case 7:return go(e,t,t.pendingProps,n),t.child;case 8:case 12:return go(e,t,t.pendingProps.children,n),t.child;case 10:e:{if(r=t.type._context,a=t.pendingProps,i=t.memoizedProps,o=a.value,xa(za,r._currentValue),r._currentValue=o,null!==i)if(nr(i.value,o)){if(i.children===a.children&&!Ea.current){t=Fo(e,t,n);break e}}else for(null!==(i=t.child)&&(i.return=t);null!==i;){var s=i.dependencies;if(null!==s){o=i.child;for(var c=s.firstContext;null!==c;){if(c.context===r){if(1===i.tag){(c=Ja(-1,n&-n)).tag=2;var u=i.updateQueue;if(null!==u){var d=(u=u.shared).pending;null===d?c.next=c:(c.next=d.next,d.next=c),u.pending=c}}i.lanes|=n,null!==(c=i.alternate)&&(c.lanes|=n),$a(i.return,n,t),s.lanes|=n;break}c=c.next}}else if(10===i.tag)o=i.type===t.type?null:i.child;else if(18===i.tag){if(null===(o=i.return))throw Error(l(341));o.lanes|=n,null!==(s=o.alternate)&&(s.lanes|=n),$a(o,n,t),o=i.sibling}else o=i.child;if(null!==o)o.return=i;else for(o=i;null!==o;){if(o===t){o=null;break}if(null!==(i=o.sibling)){i.return=o.return,o=i;break}o=o.return}i=o}go(e,t,a.children,n),t=t.child}return t;case 9:return a=t.type,r=t.pendingProps.children,Ga(t,n),r=r(a=Ka(a)),t.flags|=1,go(e,t,r,n),t.child;case 14:return a=Da(r=t.type,t.pendingProps),vo(e,t,r,a=Da(r.type,a),n);case 15:return bo(e,t,t.type,t.pendingProps,n);case 17:return r=t.type,a=t.pendingProps,a=t.elementType===r?a:Da(r,a),null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),t.tag=1,Sa(r)?(e=!0,Ia(t)):e=!1,Ga(t,n),sl(t,r,a),ul(t,r,a,n),Eo(null,t,r,!0,e,n);case 19:return _o(e,t,n);case 22:return yo(e,t,n)}throw Error(l(156,t.tag))};var Ac="function"==typeof reportError?reportError:function(e){console.error(e)};function _c(e){this._internalRoot=e}function Fc(e){this._internalRoot=e}function Mc(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType)}function Dc(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function zc(){}function Bc(e,t,n,r,a){var l=n._reactRootContainer;if(l){var i=l;if("function"==typeof a){var o=a;a=function(){var e=Rc(i);o.call(e)}}Ic(t,i,e,a)}else i=function(e,t,n,r,a){if(a){if("function"==typeof r){var l=r;r=function(){var e=Rc(i);l.call(e)}}var i=Nc(t,r,e,0,null,!1,0,"",zc);return e._reactRootContainer=i,e[sa]=i.current,Mr(8===e.nodeType?e.parentNode:e),Xs(),i}for(;a=e.lastChild;)e.removeChild(a);if("function"==typeof r){var o=r;r=function(){var e=Rc(s);o.call(e)}}var s=Sc(e,0,!1,null,0,!1,0,"",zc);return e._reactRootContainer=s,e[sa]=s.current,Mr(8===e.nodeType?e.parentNode:e),Xs((function(){Ic(t,s,n,r)})),s}(n,t,e,a,r);return Rc(i)}Fc.prototype.render=_c.prototype.render=function(e){var t=this._internalRoot;if(null===t)throw Error(l(409));Ic(e,t,null,null)},Fc.prototype.unmount=_c.prototype.unmount=function(){var e=this._internalRoot;if(null!==e){this._internalRoot=null;var t=e.containerInfo;Xs((function(){Ic(null,e,null,null)})),t[sa]=null}},Fc.prototype.unstable_scheduleHydration=function(e){if(e){var t=Et();e={blockedOn:null,target:e,priority:t};for(var n=0;n<Pt.length&&0!==t&&t<Pt[n].priority;n++);Pt.splice(n,0,e),0===n&&Ft(e)}},xt=function(e){switch(e.tag){case 3:var t=e.stateNode;if(t.current.memoizedState.isDehydrated){var n=dt(t.pendingLanes);0!==n&&(vt(t,1|n),Vs(t,qe()),0==(6&hs)&&(Os=qe()+500,Fa()))}break;case 13:var r=zs();Xs((function(){return Us(e,1,r)})),Lc(e,1)}},kt=function(e){13===e.tag&&(Us(e,134217728,zs()),Lc(e,134217728))},jt=function(e){if(13===e.tag){var t=zs(),n=Bs(e);Us(e,n,t),Lc(e,n)}},Et=function(){return bt},wt=function(e,t){var n=bt;try{return bt=e,t()}finally{bt=n}},je=function(e,t,n){switch(t){case"input":if(J(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var a=ga(r);if(!a)throw Error(l(90));K(r),J(r,a)}}}break;case"textarea":le(e,n);break;case"select":null!=(t=n.value)&&ne(e,!!n.multiple,t,!1)}},Oe=Ys,Ne=Xs;var Uc={usingClientEntryPoint:!1,Events:[pa,ha,ga,Se,Ce,Ys]},Hc={findFiberByHostInstance:fa,bundleType:0,version:"18.0.0-fc46dba67-20220329",rendererPackageName:"react-dom"},Vc={bundleType:Hc.bundleType,version:Hc.version,rendererPackageName:Hc.rendererPackageName,rendererConfig:Hc.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:x.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=$e(e))?null:e.stateNode},findFiberByHostInstance:Hc.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:"18.0.0-fc46dba67-20220329"};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var Wc=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!Wc.isDisabled&&Wc.supportsFiber)try{at=Wc.inject(Vc),lt=Wc}catch(ue){}}t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=Uc,t.createPortal=function(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Mc(t))throw Error(l(200));return Cc(e,t,null,n)},t.createRoot=function(e,t){if(!Mc(e))throw Error(l(299));var n=!1,r="",a=Ac;return null!=t&&(!0===t.unstable_strictMode&&(n=!0),void 0!==t.identifierPrefix&&(r=t.identifierPrefix),void 0!==t.onRecoverableError&&(a=t.onRecoverableError)),t=Sc(e,1,!1,null,0,n,0,r,a),e[sa]=t.current,Mr(8===e.nodeType?e.parentNode:e),new _c(t)},t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(l(188));throw e=Object.keys(e).join(","),Error(l(268,e))}return e=null===(e=$e(t))?null:e.stateNode},t.flushSync=function(e){return Xs(e)},t.hydrate=function(e,t,n){if(!Dc(t))throw Error(l(200));return Bc(null,e,t,!0,n)},t.hydrateRoot=function(e,t,n){if(!Mc(e))throw Error(l(405));var r=null!=n&&n.hydratedSources||null,a=!1,i="",o=Ac;if(null!=n&&(!0===n.unstable_strictMode&&(a=!0),void 0!==n.identifierPrefix&&(i=n.identifierPrefix),void 0!==n.onRecoverableError&&(o=n.onRecoverableError)),t=Nc(t,null,e,1,null!=n?n:null,a,0,i,o),e[sa]=t.current,Mr(e),r)for(e=0;e<r.length;e++)a=(a=(n=r[e])._getVersion)(n._source),null==t.mutableSourceEagerHydrationData?t.mutableSourceEagerHydrationData=[n,a]:t.mutableSourceEagerHydrationData.push(n,a);return new Fc(t)},t.render=function(e,t,n){if(!Dc(t))throw Error(l(200));return Bc(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!Dc(e))throw Error(l(40));return!!e._reactRootContainer&&(Xs((function(){Bc(null,null,e,!1,(function(){e._reactRootContainer=null,e[sa]=null}))})),!0)},t.unstable_batchedUpdates=Ys,t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!Dc(n))throw Error(l(200));if(null==e||void 0===e._reactInternals)throw Error(l(38));return Bc(e,t,n,!1,r)},t.version="18.0.0-fc46dba67-20220329"},745:(e,t,n)=>{var r=n(935);t.s=r.createRoot,r.hydrateRoot},935:(e,t,n)=>{!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(448)},251:(e,t,n)=>{var r=n(294),a=Symbol.for("react.element"),l=Symbol.for("react.fragment"),i=Object.prototype.hasOwnProperty,o=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,s={key:!0,ref:!0,__self:!0,__source:!0};function c(e,t,n){var r,l={},c=null,u=null;for(r in void 0!==n&&(c=""+n),void 0!==t.key&&(c=""+t.key),void 0!==t.ref&&(u=t.ref),t)i.call(t,r)&&!s.hasOwnProperty(r)&&(l[r]=t[r]);if(e&&e.defaultProps)for(r in t=e.defaultProps)void 0===l[r]&&(l[r]=t[r]);return{$$typeof:a,type:e,key:c,ref:u,props:l,_owner:o.current}}t.Fragment=l,t.jsx=c,t.jsxs=c},408:(e,t)=>{var n=Symbol.for("react.element"),r=Symbol.for("react.portal"),a=Symbol.for("react.fragment"),l=Symbol.for("react.strict_mode"),i=Symbol.for("react.profiler"),o=Symbol.for("react.provider"),s=Symbol.for("react.context"),c=Symbol.for("react.forward_ref"),u=Symbol.for("react.suspense"),d=Symbol.for("react.memo"),f=Symbol.for("react.lazy"),p=Symbol.iterator;var h={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},g=Object.assign,m={};function v(e,t,n){this.props=e,this.context=t,this.refs=m,this.updater=n||h}function b(){}function y(e,t,n){this.props=e,this.context=t,this.refs=m,this.updater=n||h}v.prototype.isReactComponent={},v.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,t,"setState")},v.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},b.prototype=v.prototype;var x=y.prototype=new b;x.constructor=y,g(x,v.prototype),x.isPureReactComponent=!0;var k=Array.isArray,j=Object.prototype.hasOwnProperty,E={current:null},w={key:!0,ref:!0,__self:!0,__source:!0};function T(e,t,r){var a,l={},i=null,o=null;if(null!=t)for(a in void 0!==t.ref&&(o=t.ref),void 0!==t.key&&(i=""+t.key),t)j.call(t,a)&&!w.hasOwnProperty(a)&&(l[a]=t[a]);var s=arguments.length-2;if(1===s)l.children=r;else if(1<s){for(var c=Array(s),u=0;u<s;u++)c[u]=arguments[u+2];l.children=c}if(e&&e.defaultProps)for(a in s=e.defaultProps)void 0===l[a]&&(l[a]=s[a]);return{$$typeof:n,type:e,key:i,ref:o,props:l,_owner:E.current}}function S(e){return"object"==typeof e&&null!==e&&e.$$typeof===n}var C=/\/+/g;function O(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function N(e,t,a,l,i){var o=typeof e;"undefined"!==o&&"boolean"!==o||(e=null);var s=!1;if(null===e)s=!0;else switch(o){case"string":case"number":s=!0;break;case"object":switch(e.$$typeof){case n:case r:s=!0}}if(s)return i=i(s=e),e=""===l?"."+O(s,0):l,k(i)?(a="",null!=e&&(a=e.replace(C,"$&/")+"/"),N(i,t,a,"",(function(e){return e}))):null!=i&&(S(i)&&(i=function(e,t){return{$$typeof:n,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(i,a+(!i.key||s&&s.key===i.key?"":(""+i.key).replace(C,"$&/")+"/")+e)),t.push(i)),1;if(s=0,l=""===l?".":l+":",k(e))for(var c=0;c<e.length;c++){var u=l+O(o=e[c],c);s+=N(o,t,a,u,i)}else if("function"==typeof(u=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=p&&e[p]||e["@@iterator"])?e:null}(e)))for(e=u.call(e),c=0;!(o=e.next()).done;)s+=N(o=o.value,t,a,u=l+O(o,c++),i);else if("object"===o)throw t=String(e),Error("Objects are not valid as a React child (found: "+("[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t)+"). If you meant to render a collection of children, use an array instead.");return s}function I(e,t,n){if(null==e)return e;var r=[],a=0;return N(e,r,"","",(function(e){return t.call(n,e,a++)})),r}function R(e){if(-1===e._status){var t=e._result;(t=t()).then((function(t){0!==e._status&&-1!==e._status||(e._status=1,e._result=t)}),(function(t){0!==e._status&&-1!==e._status||(e._status=2,e._result=t)})),-1===e._status&&(e._status=0,e._result=t)}if(1===e._status)return e._result.default;throw e._result}var P={current:null},L={transition:null},A={ReactCurrentDispatcher:P,ReactCurrentBatchConfig:L,ReactCurrentOwner:E};t.Children={map:I,forEach:function(e,t,n){I(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return I(e,(function(){t++})),t},toArray:function(e){return I(e,(function(e){return e}))||[]},only:function(e){if(!S(e))throw Error("React.Children.only expected to receive a single React element child.");return e}},t.Component=v,t.Fragment=a,t.Profiler=i,t.PureComponent=y,t.StrictMode=l,t.Suspense=u,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=A,t.cloneElement=function(e,t,r){if(null==e)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+e+".");var a=g({},e.props),l=e.key,i=e.ref,o=e._owner;if(null!=t){if(void 0!==t.ref&&(i=t.ref,o=E.current),void 0!==t.key&&(l=""+t.key),e.type&&e.type.defaultProps)var s=e.type.defaultProps;for(c in t)j.call(t,c)&&!w.hasOwnProperty(c)&&(a[c]=void 0===t[c]&&void 0!==s?s[c]:t[c])}var c=arguments.length-2;if(1===c)a.children=r;else if(1<c){s=Array(c);for(var u=0;u<c;u++)s[u]=arguments[u+2];a.children=s}return{$$typeof:n,type:e.type,key:l,ref:i,props:a,_owner:o}},t.createContext=function(e){return(e={$$typeof:s,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null}).Provider={$$typeof:o,_context:e},e.Consumer=e},t.createElement=T,t.createFactory=function(e){var t=T.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:c,render:e}},t.isValidElement=S,t.lazy=function(e){return{$$typeof:f,_payload:{_status:-1,_result:e},_init:R}},t.memo=function(e,t){return{$$typeof:d,type:e,compare:void 0===t?null:t}},t.startTransition=function(e){var t=L.transition;L.transition={};try{e()}finally{L.transition=t}},t.unstable_act=function(){throw Error("act(...) is not supported in production builds of React.")},t.useCallback=function(e,t){return P.current.useCallback(e,t)},t.useContext=function(e){return P.current.useContext(e)},t.useDebugValue=function(){},t.useDeferredValue=function(e){return P.current.useDeferredValue(e)},t.useEffect=function(e,t){return P.current.useEffect(e,t)},t.useId=function(){return P.current.useId()},t.useImperativeHandle=function(e,t,n){return P.current.useImperativeHandle(e,t,n)},t.useInsertionEffect=function(e,t){return P.current.useInsertionEffect(e,t)},t.useLayoutEffect=function(e,t){return P.current.useLayoutEffect(e,t)},t.useMemo=function(e,t){return P.current.useMemo(e,t)},t.useReducer=function(e,t,n){return P.current.useReducer(e,t,n)},t.useRef=function(e){return P.current.useRef(e)},t.useState=function(e){return P.current.useState(e)},t.useSyncExternalStore=function(e,t,n){return P.current.useSyncExternalStore(e,t,n)},t.useTransition=function(){return P.current.useTransition()},t.version="18.0.0-fc46dba67-20220329"},294:(e,t,n)=>{e.exports=n(408)},893:(e,t,n)=>{e.exports=n(251)},53:(e,t)=>{function n(e,t){var n=e.length;e.push(t);e:for(;0<n;){var r=n-1>>>1,a=e[r];if(!(0<l(a,t)))break e;e[r]=t,e[n]=a,n=r}}function r(e){return 0===e.length?null:e[0]}function a(e){if(0===e.length)return null;var t=e[0],n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,a=e.length,i=a>>>1;r<i;){var o=2*(r+1)-1,s=e[o],c=o+1,u=e[c];if(0>l(s,n))c<a&&0>l(u,s)?(e[r]=u,e[c]=n,r=c):(e[r]=s,e[o]=n,r=o);else{if(!(c<a&&0>l(u,n)))break e;e[r]=u,e[c]=n,r=c}}}return t}function l(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}if("object"==typeof performance&&"function"==typeof performance.now){var i=performance;t.unstable_now=function(){return i.now()}}else{var o=Date,s=o.now();t.unstable_now=function(){return o.now()-s}}var c=[],u=[],d=1,f=null,p=3,h=!1,g=!1,m=!1,v="function"==typeof setTimeout?setTimeout:null,b="function"==typeof clearTimeout?clearTimeout:null,y="undefined"!=typeof setImmediate?setImmediate:null;function x(e){for(var t=r(u);null!==t;){if(null===t.callback)a(u);else{if(!(t.startTime<=e))break;a(u),t.sortIndex=t.expirationTime,n(c,t)}t=r(u)}}function k(e){if(m=!1,x(e),!g)if(null!==r(c))g=!0,L(j);else{var t=r(u);null!==t&&A(k,t.startTime-e)}}function j(e,n){g=!1,m&&(m=!1,b(S),S=-1),h=!0;var l=p;try{for(x(n),f=r(c);null!==f&&(!(f.expirationTime>n)||e&&!N());){var i=f.callback;if("function"==typeof i){f.callback=null,p=f.priorityLevel;var o=i(f.expirationTime<=n);n=t.unstable_now(),"function"==typeof o?f.callback=o:f===r(c)&&a(c),x(n)}else a(c);f=r(c)}if(null!==f)var s=!0;else{var d=r(u);null!==d&&A(k,d.startTime-n),s=!1}return s}finally{f=null,p=l,h=!1}}"undefined"!=typeof navigator&&void 0!==navigator.scheduling&&void 0!==navigator.scheduling.isInputPending&&navigator.scheduling.isInputPending.bind(navigator.scheduling);var E,w=!1,T=null,S=-1,C=5,O=-1;function N(){return!(t.unstable_now()-O<C)}function I(){if(null!==T){var e=t.unstable_now();O=e;var n=!0;try{n=T(!0,e)}finally{n?E():(w=!1,T=null)}}else w=!1}if("function"==typeof y)E=function(){y(I)};else if("undefined"!=typeof MessageChannel){var R=new MessageChannel,P=R.port2;R.port1.onmessage=I,E=function(){P.postMessage(null)}}else E=function(){v(I,0)};function L(e){T=e,w||(w=!0,E())}function A(e,n){S=v((function(){e(t.unstable_now())}),n)}t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){g||h||(g=!0,L(j))},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):C=0<e?Math.floor(1e3/e):5},t.unstable_getCurrentPriorityLevel=function(){return p},t.unstable_getFirstCallbackNode=function(){return r(c)},t.unstable_next=function(e){switch(p){case 1:case 2:case 3:var t=3;break;default:t=p}var n=p;p=t;try{return e()}finally{p=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=function(){},t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=p;p=e;try{return t()}finally{p=n}},t.unstable_scheduleCallback=function(e,a,l){var i=t.unstable_now();switch("object"==typeof l&&null!==l?l="number"==typeof(l=l.delay)&&0<l?i+l:i:l=i,e){case 1:var o=-1;break;case 2:o=250;break;case 5:o=1073741823;break;case 4:o=1e4;break;default:o=5e3}return e={id:d++,callback:a,priorityLevel:e,startTime:l,expirationTime:o=l+o,sortIndex:-1},l>i?(e.sortIndex=l,n(u,e),null===r(c)&&e===r(u)&&(m?(b(S),S=-1):m=!0,A(k,l-i))):(e.sortIndex=o,n(c,e),g||h||(g=!0,L(j))),e},t.unstable_shouldYield=N,t.unstable_wrapCallback=function(e){var t=p;return function(){var n=p;p=t;try{return e.apply(this,arguments)}finally{p=n}}}},840:(e,t,n)=>{e.exports=n(53)}},r={};function a(e){var t=r[e];if(void 0!==t)return t.exports;var l=r[e]={exports:{}};return n[e](l,l.exports,a),l.exports}a.m=n,a.d=(e,t)=>{for(var n in t)a.o(t,n)&&!a.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},a.f={},a.e=e=>Promise.all(Object.keys(a.f).reduce(((t,n)=>(a.f[n](e,t),t)),[])),a.u=e=>e+".index.js",a.miniCssF=e=>"css/"+(901===e?"sdktest":e)+".css",a.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),a.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),e={},t="mp_webgl:",a.l=(n,r,l,i)=>{if(e[n])e[n].push(r);else{var o,s;if(void 0!==l)for(var c=document.getElementsByTagName("script"),u=0;u<c.length;u++){var d=c[u];if(d.getAttribute("src")==n||d.getAttribute("data-webpack")==t+l){o=d;break}}o||(s=!0,(o=document.createElement("script")).charset="utf-8",o.timeout=120,a.nc&&o.setAttribute("nonce",a.nc),o.setAttribute("data-webpack",t+l),o.src=n),e[n]=[r];var f=(t,r)=>{o.onerror=o.onload=null,clearTimeout(p);var a=e[n];if(delete e[n],o.parentNode&&o.parentNode.removeChild(o),a&&a.forEach((e=>e(r))),t)return t(r)},p=setTimeout(f.bind(null,void 0,{type:"timeout",target:o}),12e4);o.onerror=f.bind(null,o.onerror),o.onload=f.bind(null,o.onload),s&&document.head.appendChild(o)}},a.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{var e;a.g.importScripts&&(e=a.g.location+"");var t=a.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var n=t.getElementsByTagName("script");n.length&&(e=n[n.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),a.p=e})(),(()=>{var e={901:0};a.f.j=(t,n)=>{var r=a.o(e,t)?e[t]:void 0;if(0!==r)if(r)n.push(r[2]);else{var l=new Promise(((n,a)=>r=e[t]=[n,a]));n.push(r[2]=l);var i=a.p+a.u(t),o=new Error;a.l(i,(n=>{if(a.o(e,t)&&(0!==(r=e[t])&&(e[t]=void 0),r)){var l=n&&("load"===n.type?"missing":n.type),i=n&&n.target&&n.target.src;o.message="Loading chunk "+t+" failed.\n("+l+": "+i+")",o.name="ChunkLoadError",o.type=l,o.request=i,r[1](o)}}),"chunk-"+t,t)}};var t=(t,n)=>{var r,l,[i,o,s]=n,c=0;if(i.some((t=>0!==e[t]))){for(r in o)a.o(o,r)&&(a.m[r]=o[r]);if(s)s(a)}for(t&&t(n);c<i.length;c++)l=i[c],a.o(e,l)&&e[l]&&e[l][0](),e[l]=0},n=self.webpackChunkmp_webgl=self.webpackChunkmp_webgl||[];n.forEach(t.bind(null,0)),n.push=t.bind(null,n.push.bind(n))})(),(()=>{var e=document.getElementById("status");function t(t,n){var r=n||"";e.className="Error: "===t?"error":"",document.querySelector("#status span").textContent=t+n,"Error: "===t&&console.warn(r)}function n(e){t("Error: ",e)}function r(e){t("OK: ",e)}function l(){t("Working ...")}function i(e){for(;e.lastChild;)e.removeChild(e.lastChild)}function o(e,t){console.log("SHOWCASE IS CONNECTED"),function(e){const t=document.getElementById("mattertag-selector");(function(e,t){var n={},r=document.getElementById("tag-lock-bb"),a=document.getElementById("tag-lock-nav");function l(){var e=n[t.value];return e||(e={billboard:!0,navigation:!0}),n[t.value]=e,e}function i(){var n=l();n.billboard=r.checked,n.navigation=a.checked,e.Mattertag.preventAction(t.value,{opening:!n.billboard,navigating:!n.navigation})}t.addEventListener("change",(function(){var e=l();r.checked=e.billboard,a.checked=e.navigation})),r.addEventListener("change",i),a.addEventListener("change",i)})(e,t),document.getElementById("tag-add").addEventListener("click",function(){const t=document.getElementById("tag-add-title"),n=document.getElementById("tag-add-desc"),r=document.getElementById("tag-add-pos-x"),a=document.getElementById("tag-add-pos-y"),l=document.getElementById("tag-add-pos-z"),i=document.getElementById("tag-add-norm-x"),o=document.getElementById("tag-add-norm-y"),s=document.getElementById("tag-add-norm-z"),c=document.getElementById("tag-add-mtype"),u=document.getElementById("tag-add-msrc");return function(){e.Mattertag.add({label:t.value,description:n.value,anchorPosition:{x:parseFloat(r.value),y:parseFloat(a.value),z:parseFloat(l.value)},stemVector:{x:parseFloat(i.value),y:parseFloat(o.value),z:parseFloat(s.value)},media:""===c.value?void 0:{type:c.value,src:u.value}})}}()),document.getElementById("tag-move").addEventListener("click",function(){const n=document.getElementById("tag-move-pos-x"),r=document.getElementById("tag-move-pos-y"),a=document.getElementById("tag-move-pos-z"),l=document.getElementById("tag-move-norm-x"),i=document.getElementById("tag-move-norm-y"),o=document.getElementById("tag-move-norm-z");return function(){e.Mattertag.editPosition(t.value,{anchorPosition:{x:parseFloat(n.value),y:parseFloat(r.value),z:parseFloat(a.value)},stemVector:{x:parseFloat(l.value),y:parseFloat(i.value),z:parseFloat(o.value)}})}}()),document.getElementById("mattertag-remove").addEventListener("click",(function(){e.Mattertag.remove(t.value)}));var a=document.getElementsByClassName("mtag-media-type");for(const t of a){i(t);var o=document.createElement("option");for(var s in o.value="",o.text="(select)",t.appendChild(o),e.Mattertag.MediaType){var c=document.createElement("option");c.value=e.Mattertag.MediaType[s],c.text=s,t.appendChild(c)}}document.getElementById("mattertag-edit").addEventListener("click",(f=document.getElementById("tag-edit-title"),p=document.getElementById("tag-edit-media"),h=document.getElementById("tag-edit-desc"),g=document.getElementById("tag-edit-mediatype"),function(){l(),e.Mattertag.editBillboard(t.value,{label:f.value||void 0,description:h.value||void 0,media:""!==g.value?{src:p.value,type:g.value}:void 0}).then((function(){var e=t.options[t.selectedIndex].innerText;r("edited [".concat(e,"], (SID=").concat(t.value,")"))}),(function(e){n(e)}))})),document.getElementById("tag-edit-color").addEventListener("click",function(){const n=document.getElementById("tag-color-r"),r=document.getElementById("tag-color-g"),a=document.getElementById("tag-color-b");return function(){e.Mattertag.editColor(t.value,{r:parseFloat(n.value),g:parseFloat(r.value),b:parseFloat(a.value)})}}()),document.getElementById("tag-edit-stem").addEventListener("click",function(){const n=document.getElementById("stem-height"),r=document.getElementById("stem-visible");return function(){const a=parseFloat(n.value),l=r.checked;e.Mattertag.editStem(t.value,{stemHeight:a,stemVisible:l})}}()),document.getElementById("mattertag-opacity-edit").addEventListener("click",function(){const n=document.getElementById("mattertag-opacity");return function(){e.Mattertag.editOpacity(t.value,parseFloat(n.value))}}()),document.getElementById("injectHTML").addEventListener("click",function(){const n=document.getElementById("mattertag-html-w"),r=document.getElementById("mattertag-html-h"),a=document.getElementById("injectedHTML");return function(){e.Mattertag.injectHTML(t.value,a.value,{globalVariableMap:{on:"on",off:"off",send:"send",tag:"tag"},size:{w:n.value||0,h:r.value||0}}).then((function(e){function t(){let e="";for(let t=0;t<6;++t)e+=Math.floor(16*Math.random()).toString(16);return"#"+e}e.on("click",(function(n){console.log("page received",n);const r=t();e.send("update.button",r,r.toString())}))}))}}()),document.getElementById("navigateToTag").addEventListener("click",(u=document.getElementById("mattertag-navigation-type"),d=document.getElementById("mattertag-navigation-force"),function(){l(),e.Mattertag.navigateToTag(t.value,e.Mattertag.Transition[u.value],d.checked).then((function(e){r("moved to ["+t.options[t.selectedIndex].innerText+"], (SID="+t.value+")")}),(function(e){n(e)}))}));var u,d;var f,p,h,g}(e);const a={},o=document.getElementsByClassName("sweep-selector");var s;[].slice.call(o).forEach((function(t){i(t),e.Sweep.data.subscribe({onAdded(e,t){a[e]=t},onRemoved(e){delete a[e]},onCollectionUpdated(e){if(!t.hasChildNodes())for(const r in e){var n=document.createElement("option");n.value=r,n.text=r,t.appendChild(n)}}})}));var c,u,d,f,p,h,g,m,v,b,y,x,k,j={};e.Mattertag.data.subscribe({onCollectionUpdated(e){j=e}}),e.on(e.Model.Event.MODEL_LOADED,(function(e){r("Model successfully loaded")})).on(e.Mode.Event.CHANGE_START,(function(e,t){r("moved to mode: "+t+" from "+e)})).on(e.Camera.Event.MOVE,(function(e){s=e})).on(e.Mattertag.Event.CLICK,(function(n){var r=j[n],a={},l={};e.Mattertag.getDiscPosition(r,a),e.Conversion.worldToScreen(a,s,{w:t.clientWidth,h:t.clientHeight},l),console.log("clicked",n),console.log("with a world position of",a),console.log("and a screen position of",l)})),[].slice.call(document.querySelectorAll(".navButton")).forEach((function(t){t.addEventListener("click",(function(t){var a=this.getAttribute("data-direction");l(),e.Camera.moveInDirection(e.Camera.Direction[a]).then((function(e){r(e)}),(function(e){n(e)}))}))})),document.getElementById("pan").addEventListener("click",(c=document.getElementById("positionX"),u=document.getElementById("positionZ"),function(t){l(),e.Camera.pan({x:parseFloat(c.value)||0,z:parseFloat(u.value)||0}).then((function(e){r("Camera.pan complete")}),(function(e){n(e)}))})),[document.getElementById("tiltUp"),document.getElementById("tiltDown"),document.getElementById("rotateLeft"),document.getElementById("rotateRight")].forEach((function(t){var a=document.getElementById("rotation");t.addEventListener("click",(function(t){var i=this.getAttribute("data-direction");l(),e.Camera.rotateInDirection(e.Camera.Direction[i],parseFloat(a.value)).then((function(e){r("Rotation complete: ")}),(function(e){n(e)}))}))})),e.Camera.rotateInDirection=function(t,n){return e.Camera.rotate(t===e.Camera.Direction.RIGHT?n:t===e.Camera.Direction.LEFT?-n:0,t===e.Camera.Direction.UP?n:t===e.Camera.Direction.DOWN?-n:0)},document.getElementById("freeRotate").addEventListener("click",(d=document.getElementById("rotationX"),f=document.getElementById("rotationY"),p=document.getElementById("rotationSpeed"),function(t){var a=d.value||0,i=f.value||0;l(),e.Camera.rotate(parseFloat(a),parseFloat(i),{speed:parseFloat(p.value)}).then((function(e){r("Free rotation complete:")}),(function(e){n(e)}))})),document.getElementById("orient").addEventListener("click",function(){var t=document.getElementById("rotationX"),a=document.getElementById("rotationY"),i=document.getElementById("rotationSpeed");return function(o){var s=t.value||0,c=a.value||0;l(),e.Camera.setRotation({x:parseFloat(s),y:parseFloat(c)},{speed:parseFloat(i.value)}).then((function(e){r(" Orient complete: ")}),(function(e){n(e)}))}}()),[].slice.call(document.querySelectorAll(".modeButton")).forEach((function(t){t.addEventListener("click",(function(t){var a=document.getElementById("modeStyles"),i=e.Mode.TransitionType[a.value],o=this.getAttribute("id");l(),e.Mode.moveTo(e.Mode.Mode[o],{transition:i}).then((function(e){r(e)}),(function(e){n(e)}))}))})),document.getElementById("moveToSweep").addEventListener("click",(h=document.getElementById("sweepIds"),g=document.getElementById("flyStyles"),m=document.getElementById("sweepRotationX"),v=document.getElementById("sweepRotationY"),b=document.getElementById("sweepTransitionTime"),function(t){var a=h.value,i=e.Sweep.Transition[g.value],o={x:m.value||0,y:v.value||0},s=b.value;l(),e.Sweep.moveTo(a,{rotation:o,transition:i,transitionTime:s}).then((function(e){r("moved to sweep "+e)}),(function(e){n(e)}))})),document.getElementById("getPose").addEventListener("click",(y=null,x=document.getElementById("pose"),function(){y?(y.cancel(),y=null):y=e.Camera.pose.subscribe({onChanged:function(e){x.innerText=JSON.stringify(e)}})})),document.getElementById("screenshot").addEventListener("click",(k=document.getElementById("screenshot-preview"),function(t){e.Renderer.takeScreenShot(void 0,{mattertags:!1}).then((function(e){k.setAttribute("src",e)}))})),document.getElementById("equirectangle").addEventListener("click",function(){var t=document.getElementById("screenshot-preview");return function(n){e.Renderer.takeEquirectangular().then((function(e){t.setAttribute("src",e)}))}}()),e.Sweep.current.subscribe((function(e){""===e.sid?console.log("Not currently stationed at a sweep position"):console.log(e)})),function(e){e.Mattertag.data.subscribe(function(){var e=[].slice.call(document.getElementsByClassName("mattertag-selector"));e.forEach((function(e){for(;e.lastChild;)e.removeChild(e.lastChild)}));var t={};function n(e){var t=document.createElement("option");return t.value=e.sid,t.text=e.label||"(no label)",t}return{onAdded(r,a){e.forEach((function(e){var l=n(a);t[r]=t[r]||[],t[r].push(l);let i=e.firstChild;for(;i&&l.text.localeCompare(i.text)>0;)i=i.nextSibling;e.insertBefore(l,i)}))},onRemoved(e){(t[e]||[]).forEach((function(e){e.parentElement.removeChild(e)})),delete t[e]},onUpdated(e,n){(t[e]||[]).forEach((function(e){e.text=n.label}))}}}())}(e),document.getElementById("tourStartBtn").addEventListener("click",(function(){e.Tour.start()})),document.getElementById("tourStopBtn").addEventListener("click",(function(){e.Tour.stop()})),document.getElementById("tourPrevBtn").addEventListener("click",(function(){e.Tour.prev()})),document.getElementById("tourNextBtn").addEventListener("click",(function(){e.Tour.next()})),document.getElementById("tourSteppedBtn").addEventListener("click",(function(){var t=document.getElementById("tour-stepped");e.Tour.step(parseInt(t.value,10))}));var E,w,T=null;document.getElementById("getPointer").addEventListener("click",(function(){var t=document.getElementById("pointer");T?(T.cancel(),T=null):T=e.Pointer.intersection.subscribe((function(e){t.innerText=JSON.stringify(e)}))})),e.Camera.zoom.subscribe((E=document.getElementById("current-zoom-level"),function(e){E.innerText=e.level.toFixed(5)})),document.getElementById("zoom-by").addEventListener("click",(w=document.getElementById("zoom-by-val"),function(){e.Camera.zoomBy(w.value).then((function(e){r("Zoomed by "+w.value+" to "+e)}))})),document.getElementById("zoom-to").addEventListener("click",function(){var t=document.getElementById("zoom-to-val");return function(){e.Camera.zoomTo(t.value).then((function(e){r("Zoomed to "+e)}))}}()),document.getElementById("zoom-reset").addEventListener("click",(function(){e.Camera.zoomReset().then((function(){r("reset zoom")}))})),function(e,t){var n=document.getElementById("sweep-enable-selector"),r={},a=document.getElementById("sweep-enable");function l(){r[n.value]=a.checked,a.checked?e.Sweep.enable(n.value):e.Sweep.disable(n.value)}n.addEventListener("change",(function(){var e=t[n.value].enabled;a.checked=e})),a.addEventListener("change",l)}(e,a)}var s=a(893),c=a(745),u=a(294);class d extends u.Component{constructor(e){super(e),this.optionMap=new Map,this.onChanged=e=>this.onValueChanged(e),this.state={availableOptions:this.optionMap,selected:""},this.selectRef=(0,u.createRef)()}componentDidMount(){if(!this.subscription){const e=this;this.subscription=this.props.collection.subscribe({onAdded(t,n){e.props.filter&&!e.props.filter(n)||e.optionMap.set(t,n)},onRemoved(t){e.optionMap.delete(t)},onUpdated(t,n){!e.props.filter||e.props.filter(n)?e.optionMap.set(t,n):e.optionMap.delete(t)},onCollectionUpdated(t){e.setState((n=>{const r=t[n.selected]?n.selected:Object.keys(t)[0];return e.props.onChanged&&(r?e.props.onChanged(r,e.optionMap.get(r)):e.props.onChanged("",void 0)),{availableOptions:new Map(e.optionMap),selected:void 0!==r?r:""}}))}})}}componentWillUnmount(){this.subscription&&this.subscription.cancel()}onValueChanged(e){if(this.setState({selected:e.currentTarget.value}),this.props.onChanged){const t=e.target.value;this.props.onChanged(t,this.optionMap.get(t))}}render(){const e=[...this.state.availableOptions.entries()].sort((([,e],[,t])=>this.props.sort?this.props.sort(e,t):0));return(0,s.jsx)("select",Object.assign({ref:this.selectRef,className:"collection-selector",onChange:this.onChanged,value:this.state.selected},{children:e.length>0?this.renderOptions(e):(0,s.jsx)("option",Object.assign({value:""},{children:"(no values)"}))}))}renderOptions(e){return e.map((([e,t])=>(0,s.jsx)("option",Object.assign({value:e,title:this.props.hoverLabel&&this.props.hoverLabel(t)},{children:this.props.optionLabel?this.props.optionLabel(t):e}),e)))}}const f={overflowY:"auto"};function p(e){return(0,s.jsxs)("div",Object.assign({style:f,className:"controlPanel"},{children:[(0,s.jsx)("div",Object.assign({className:"controlPanelHeader"},{children:e.header})),e.children]}))}function h(e){const[t,n]=(0,u.useState)(),r=(0,u.useCallback)(((t,r)=>{var a,l;if(r){const a=Object.assign({},r);(e.additionalProperties||[]).forEach((function(e){a[e]=r[e]})),n(a),null===(l=e.onChanged)||void 0===l||l.call(e,t,r)}else n(null),null===(a=e.onChanged)||void 0===a||a.call(e,"",void 0)}),[e]);return(0,s.jsxs)(p,Object.assign({header:`${e.label} - Selector`},{children:[(0,s.jsxs)("div",{children:[e.label+":",(0,s.jsx)(d,{collection:e.collection,onChanged:r,sort:e.sort,optionLabel:e.optionLabel,hoverLabel:e.hoverLabel})]}),(0,s.jsx)("div",{children:(0,s.jsx)("textarea",{style:{width:"100%",height:"80%"},readOnly:!0,value:t?function(t){const n=Object.assign({},t);if(e.propertyTransforms){const r=e.propertyTransforms;for(const[e,a]of Object.entries(r))n[e]=a(t[e])}return JSON.stringify(n)}(t):""})})]}))}var g=function(e,t,n,r){return new(n||(n=Promise))((function(a,l){function i(e){try{s(r.next(e))}catch(e){l(e)}}function o(e){try{s(r.throw(e))}catch(e){l(e)}}function s(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,o)}s((r=r.apply(e,t||[])).next())}))};function m(e){const t=(0,u.useRef)(null),n=(0,u.useRef)(null),r=(0,u.useCallback)(((t,n)=>g(this,void 0,void 0,(function*(){yield e.sdk.Asset.registerTexture(t,n),e.onRegister(t,n)}))),[e]),a=(0,u.useCallback)((()=>g(this,void 0,void 0,(function*(){t.current&&n.current&&r(t.current.value,n.current.value)}))),[r]);return(0,u.useEffect)((()=>{const e={Chrome:"images/chrome.png",Firefox:"images/firefox.png",Edge:"images/edge.png"};for(const t in e)r(t,e[t])}),[]),(0,s.jsxs)(u.Fragment,{children:[(0,s.jsxs)("div",{children:[(0,s.jsx)("label",Object.assign({htmlFor:"asset-id"},{children:"id: "})),(0,s.jsx)("input",{ref:t,className:"small-input",id:"asset-id",type:"string"})]}),(0,s.jsxs)("div",{children:[(0,s.jsx)("label",Object.assign({htmlFor:"asset-src"},{children:"src: "})),(0,s.jsx)("input",{ref:n,className:"small-input",id:"asset-src",type:"string"})]}),(0,s.jsx)("div",{children:(0,s.jsx)("button",Object.assign({id:"asset-register",onClick:a},{children:"Register"}))})]})}const v=new class{constructor(){this.observers=new Set,this.assets={*[Symbol.iterator](){for(const e in this.assets)yield[e,this.assets[e]]}}}subscribe(e){return this.observers.add(e),{cancel:()=>{this.observers.delete(e)}}}add(e,t){var n,r;this.assets[e]=t;for(const a of this.observers)null===(n=a.onAdded)||void 0===n||n.call(a,e,t,this.assets),null===(r=a.onCollectionUpdated)||void 0===r||r.call(a,this.assets)}};function b(e){const t=(0,u.useCallback)(((t,n)=>{e.setAssets((e=>Object.assign(Object.assign({},e),{[t]:n}))),v.add(t,{id:t,src:n})}),[e]);return(0,s.jsxs)(u.Fragment,{children:[(0,s.jsx)(h,{collection:v,label:"Asset",onChanged:e.setSelectedAsset}),(0,s.jsx)(p,Object.assign({header:"Asset - Register"},{children:(0,s.jsx)(m,{sdk:e.sdk,onRegister:t})}))]})}var y=function(e,t,n,r){return new(n||(n=Promise))((function(a,l){function i(e){try{s(r.next(e))}catch(e){l(e)}}function o(e){try{s(r.throw(e))}catch(e){l(e)}}function s(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,o)}s((r=r.apply(e,t||[])).next())}))};function x(e){const[t,n]=(0,u.useState)(""),r=(0,u.useRef)(null),a=(0,u.useRef)(null),l=(0,u.useRef)(null),i=(0,u.useCallback)((t=>{!function(){var t,i,o;y(this,void 0,void 0,(function*(){if(!r.current||!a.current||!l.current)return;const s=e.sdk,c=null===(t=r.current)||void 0===t?void 0:t.value,u=null===(i=a.current)||void 0===i?void 0:i.value,d=null===(o=l.current)||void 0===o?void 0:o.value;if(!c||!u||!d)return;let f=null;yield s.Camera.pose.waitUntil((function(e){return f=e,!0}));const p=document.getElementById("showcase"),h={w:p.clientWidth,h:p.clientHeight};try{const t=yield e.sdk.Conversion.worldToScreen({x:parseFloat(c),y:parseFloat(u),z:parseFloat(d)},f,h);t.x=Math.trunc(t.x),t.y=Math.trunc(t.y),n(`success x:${t.x} y:${t.y}`)}catch(e){n("error")}}))}()}),[]);return(0,s.jsxs)(u.Fragment,{children:[(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("button",Object.assign({onClick:i},{children:"worldToScreen"}))}),(0,s.jsx)("td",{children:(0,s.jsx)("input",{type:"text",id:"conversion-worldtoscreen-x",className:"small-input",placeholder:"x",ref:r})}),(0,s.jsx)("td",{children:(0,s.jsx)("input",{type:"text",id:"conversion-worldtoscreen-y",className:"small-input",placeholder:"y",ref:a})}),(0,s.jsx)("td",{children:(0,s.jsx)("input",{type:"text",id:"conversion-worldtoscreen-z",className:"small-input",placeholder:"z",ref:l})})]}),(0,s.jsx)("tr",{children:(0,s.jsx)("td",Object.assign({colSpan:3},{children:(0,s.jsx)("div",Object.assign({id:"settings-update-message"},{children:t}))}))})]})}function k(e){return(0,s.jsxs)("div",Object.assign({className:"controlPanel"},{children:[(0,s.jsx)("div",Object.assign({className:"controlPanelHeader"},{children:"Conversion"})),(0,s.jsx)("table",{children:(0,s.jsx)("tbody",{children:(0,s.jsx)(x,{sdk:e.sdk})})})]}))}var j=function(e,t,n,r){return new(n||(n=Promise))((function(a,l){function i(e){try{s(r.next(e))}catch(e){l(e)}}function o(e){try{s(r.throw(e))}catch(e){l(e)}}function s(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,o)}s((r=r.apply(e,t||[])).next())}))};const E={height:50};function w(e){const[t,n]=(0,u.useState)(null),r=(0,u.useCallback)((()=>j(this,void 0,void 0,(function*(){const t=yield e.sdk.Floor.getData();n(t)}))),[]),a=JSON.stringify(t);return(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",Object.assign({colSpan:1},{children:(0,s.jsx)("button",Object.assign({onClick:r},{children:"getData"}))})),(0,s.jsx)("td",Object.assign({colSpan:2},{children:(0,s.jsx)("textarea",{rows:3,style:E,value:a,readOnly:!0})}))]})}var T=function(e,t,n,r){return new(n||(n=Promise))((function(a,l){function i(e){try{s(r.next(e))}catch(e){l(e)}}function o(e){try{s(r.throw(e))}catch(e){l(e)}}function s(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,o)}s((r=r.apply(e,t||[])).next())}))};function S(e){const[t,n]=(0,u.useState)(""),[r,a]=(0,u.useState)(!1),l=(0,u.useRef)(null),i=(0,u.useRef)(null),o=(0,u.useCallback)((t=>T(this,void 0,void 0,(function*(){if(!l.current||!i.current)return;let t;try{const n=parseInt(l.current.value,10);let a;if(r)a=yield e.sdk.Floor.moveTo(n);else{const t=i.current.checked;a=yield e.sdk.Floor.moveTo(n,t)}t=`Moved to floor index ${a}`}catch(e){t=`Error ${e}`}n(t)}))),[]),c=(0,u.useCallback)((()=>{a(!0)}),[]),d=r?"Move camera(set)":"Move camera(unset)";return(0,s.jsxs)(u.Fragment,{children:[(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",Object.assign({colSpan:1},{children:(0,s.jsx)("button",Object.assign({onClick:o},{children:"moveTo"}))})),(0,s.jsx)("td",Object.assign({colSpan:1},{children:(0,s.jsx)("input",{type:"number",id:"floor-moveto-index",className:"small-input",placeholder:"index",ref:l})})),(0,s.jsxs)("td",Object.assign({colSpan:1},{children:[(0,s.jsx)("div",{children:d}),(0,s.jsx)("input",{id:"floor-moveto-movecamera",type:"checkbox",ref:i,defaultChecked:!0,onChange:c})]}))]}),(0,s.jsx)("tr",{children:(0,s.jsx)("td",Object.assign({colSpan:2},{children:(0,s.jsx)("div",Object.assign({id:"settings-get-message"},{children:t}))}))})]})}var C=function(e,t,n,r){return new(n||(n=Promise))((function(a,l){function i(e){try{s(r.next(e))}catch(e){l(e)}}function o(e){try{s(r.throw(e))}catch(e){l(e)}}function s(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,o)}s((r=r.apply(e,t||[])).next())}))};function O(e){const t=(0,u.useCallback)((t=>C(this,void 0,void 0,(function*(){yield e.sdk.Floor.showAll()}))),[]);return(0,s.jsx)("tr",{children:(0,s.jsx)("td",Object.assign({colSpan:1},{children:(0,s.jsx)("button",Object.assign({onClick:t},{children:"showAll"}))}))})}const N={height:5};function I(){return(0,s.jsx)("tr",{style:N})}const R={width:"200px",borderWidth:1,borderStyle:"solid",borderColor:"lightgray"},P={maxWidth:20},L={padding:2,height:"50%",overflow:"scroll"},A={backgroundColor:"rgba(239, 239, 239, 0.3)"};function _(e){const[t,n]=(0,u.useState)([]),[r,a]=(0,u.useState)(!1),l=(0,u.useRef)(null);(0,u.useRef)().current=t;const i=(0,u.useCallback)((function(){const t=function(e,t,r){const a={checked:!1,type:e,payload:t};n((e=>[...e,a]))};return e.collection.subscribe({onAdded:(e,n)=>{t("onAdded",n)},onRemoved:(e,n)=>{t("onRemoved",n)},onUpdated:(e,n)=>{t("onUpdated",n)},onCollectionUpdated:e=>{t("onCollectionUpdated",e)}})}),[e.collection]),o=(0,u.useCallback)((e=>{const{currentTarget:t}=e;t.checked?(n([]),l.current=i()):(l.current.cancel(),l.current=null),a(t.checked)}),[i]),c=(0,u.useCallback)((function(e){const r=parseInt(e.currentTarget.value,10),a=[...t];a[r].checked=e.currentTarget.checked,n(a)}),[t]);return(0,s.jsxs)(u.Fragment,{children:[(0,s.jsxs)("div",{children:["Collection: ",e.name]}),(0,s.jsxs)("div",{children:["subscribe: ",(0,s.jsx)("input",{type:"checkbox",onChange:o})]}),(0,s.jsx)("div",Object.assign({style:r?Object.assign({},R):Object.assign(Object.assign({},R),A)},{children:(0,s.jsx)("ol",Object.assign({style:L},{children:t.map((function(e,t){return(0,s.jsxs)("li",{children:[(0,s.jsx)("input",{type:"checkbox",value:t,onChange:c,style:P}),e.type,(0,s.jsx)("textarea",{rows:3,style:(n=e.checked,{height:32,display:n?"block":"none"}),defaultValue:JSON.stringify(e.payload)})]},t);var n}))}))}))]})}const F={height:50};function M(e){const[t,n]=(0,u.useState)(""),[r,a]=(0,u.useState)(!1),l=(0,u.useRef)(null),i=(0,u.useCallback)((t=>{const{currentTarget:r}=t;r.checked?l.current=e.observable.subscribe({onChanged(e){if(null===e||"object"!=typeof e||Array.isArray(e))n(JSON.stringify(e));else{const t=Object.assign({},e);for(const n of Object.keys(t)){const r=e[n];r instanceof Set&&(t[n]=[...r.values()])}n(JSON.stringify(t))}}}):(l.current.cancel(),l.current=null,n("")),a(r.checked)}),[e.observable]),o=r?t:"not subbed";return(0,s.jsxs)("div",{children:[(0,s.jsxs)("div",{children:["Observable: ",e.name]}),(0,s.jsxs)("div",{children:["subscribe: ",(0,s.jsx)("input",{type:"checkbox",onChange:i})]}),(0,s.jsx)("div",{children:(0,s.jsx)("textarea",{rows:3,style:F,readOnly:!0,value:o,disabled:!r})})]})}function D(e){const[t,n]=(0,u.useState)([]);(0,u.useEffect)((function(){const r=e.sdk,a=function(e){return function(...r){const a=[];for(const e of r)"object"==typeof e?a.push(JSON.stringify(e)):a.push(e);t.push({checked:!1,type:e,data:a.join(",")}),n([...t])}};for(const t of Object.values(e.enum))r.on(t,a(t))}),[e.sdk,e.enum,t]);const r=(0,u.useCallback)((function(e){const r=parseInt(e.target.value,10),a=[...t];a[r].checked=e.target.checked,n(a)}),[t]);return(0,s.jsxs)(u.Fragment,{children:[(0,s.jsx)("tr",{children:(0,s.jsx)("td",Object.assign({colSpan:1},{children:(0,s.jsx)("div",Object.assign({className:"controlPanelHeader"},{children:"Event"}))}))}),(0,s.jsx)("tr",{children:(0,s.jsx)("td",Object.assign({colSpan:3},{children:(0,s.jsx)("ol",Object.assign({style:{padding:2}},{children:t.map((function(e,t){return(0,s.jsxs)("li",Object.assign({style:{display:"flex",justifyContent:"flex-start"}},{children:[(0,s.jsx)("input",{type:"checkbox",value:t,onChange:r,style:{maxWidth:20}}),e.checked?(0,s.jsx)("textarea",{rows:3,style:{height:30,float:"right"},defaultValue:e.data}):(0,s.jsx)("div",Object.assign({style:{float:"right"}},{children:String(e.type)}))]}),t)}))}))}))})]})}function z(e){return(0,s.jsxs)(u.Fragment,{children:[(0,s.jsx)(p,Object.assign({header:"Floor"},{children:(0,s.jsx)("table",{children:(0,s.jsxs)("tbody",{children:[(0,s.jsx)(w,{sdk:e.sdk}),(0,s.jsx)(I,{}),(0,s.jsx)(S,{sdk:e.sdk}),(0,s.jsx)(I,{}),(0,s.jsx)(O,{sdk:e.sdk})]})})})),(0,s.jsx)(p,Object.assign({header:"Floor - Current"},{children:(0,s.jsx)(M,{observable:e.sdk.Floor.current,name:"Floor.current"})})),(0,s.jsx)(p,Object.assign({header:"Floor - Collection"},{children:(0,s.jsx)(_,{collection:e.sdk.Floor.data,name:"Floor.data"})})),(0,s.jsx)(p,Object.assign({header:"Floor - Events"},{children:(0,s.jsx)("table",{children:(0,s.jsx)("tbody",{children:(0,s.jsx)(D,{enum:e.sdk.Floor.Event,sdk:e.sdk})})})}))]})}var B=function(e,t,n,r){return new(n||(n=Promise))((function(a,l){function i(e){try{s(r.next(e))}catch(e){l(e)}}function o(e){try{s(r.throw(e))}catch(e){l(e)}}function s(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,o)}s((r=r.apply(e,t||[])).next())}))};const U={height:50};function H(e){const[t,n]=(0,u.useState)([]),[r,a]=(0,u.useState)(""),l=(0,u.useCallback)((()=>B(this,void 0,void 0,(function*(){const t=yield e.sdk.Label.getData();n(t),a(t.length>0?t[0].sid:"")}))),[]);let i=(0,s.jsx)("option",Object.assign({value:0,disabled:!0},{children:"(no data)"})),o="";if(t.length>0){i=t.map((e=>(0,s.jsx)("option",Object.assign({value:e.sid},{children:e.sid}),e.sid)));const e=t.findIndex((e=>e.sid===r));if(-1!==e){const n=t[e];o=JSON.stringify(n,null,2)}}const c=(0,u.useCallback)((e=>a(e.target.value)),[]);return(0,s.jsxs)(u.Fragment,{children:[(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",Object.assign({colSpan:1},{children:(0,s.jsx)("button",Object.assign({onClick:l},{children:"getData"}))})),(0,s.jsx)("td",Object.assign({colSpan:2},{children:(0,s.jsx)("select",Object.assign({value:r,onChange:c},{children:i}))}))]}),(0,s.jsx)("tr",{children:(0,s.jsx)("td",Object.assign({colSpan:3},{children:(0,s.jsx)("textarea",{rows:3,style:U,defaultValue:o})}))})]})}function V(e){return(0,s.jsxs)(u.Fragment,{children:[(0,s.jsxs)("div",Object.assign({className:"controlPanel"},{children:[(0,s.jsx)("div",Object.assign({className:"controlPanelHeader"},{children:"Label"})),(0,s.jsx)("table",{children:(0,s.jsxs)("tbody",{children:[(0,s.jsx)(D,{sdk:e.sdk,enum:e.sdk.Label.Event}),(0,s.jsx)(H,{sdk:e.sdk})]})})]})),(0,s.jsx)(h,{collection:e.sdk.Label.data,label:"Label"})]})}var W,$,G,K,Q,Y,X,q,J,Z,ee,te,ne,re,ae,le,ie,oe,se,ce,ue,de=function(e,t,n,r){return new(n||(n=Promise))((function(a,l){function i(e){try{s(r.next(e))}catch(e){l(e)}}function o(e){try{s(r.throw(e))}catch(e){l(e)}}function s(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,o)}s((r=r.apply(e,t||[])).next())}))};function fe(e){const[t,n]=(0,u.useState)(""),r=(0,u.useCallback)((()=>de(this,void 0,void 0,(function*(){const t=yield e.createLink();n(t)}))),[e]);return(0,s.jsxs)(u.Fragment,{children:[(0,s.jsx)("button",Object.assign({onClick:r},{children:e.label})),(0,s.jsx)("br",{}),(0,s.jsx)("textarea",{style:{height:"3.5em"},value:t,readOnly:!0})]})}function pe(e){const t=Object.keys(X.CreationPolicy).map(((e,t)=>(0,s.jsx)("option",Object.assign({value:X.CreationPolicy[e]},{children:e}),t))),n=(0,u.useCallback)((t=>{const n=t.currentTarget.value;n===X.CreationPolicy.MATTERPORT?e.setPolicy(n):e.setPolicy(n,{includeParams:n===X.CreationPolicy.REFERRER?["apiHost","applicationKey"]:["apiHost"]})}),[e]);return(0,s.jsx)("select",Object.assign({onChange:n},{children:t}))}function he(e){const t=Object.keys(X.OpenPolicy).map(((e,t)=>(0,s.jsx)("option",Object.assign({value:X.OpenPolicy[e]},{children:e}),t))),n=(0,u.useCallback)((t=>{const n=t.currentTarget.value;e.setPolicy(n,{templateHref:window.location.origin+window.location.pathname+"?${bundleVersion}&${apiHost}&${mds}&${applicationKey}"})}),[e]);return(0,s.jsx)("select",Object.assign({onChange:n},{children:t}))}function ge(e){const t=(0,u.useCallback)((t=>{const n="new window"===t.currentTarget.value;e.setPolicy(n)}),[e]);return(0,s.jsxs)("select",Object.assign({onChange:t},{children:[(0,s.jsx)("option",Object.assign({value:"new window"},{children:"NEW WINDOW"})),(0,s.jsx)("option",Object.assign({value:"same window"},{children:"SAME WINDOW"}))]}))}function me(e){return(0,s.jsxs)(u.Fragment,{children:[(0,s.jsxs)("div",Object.assign({className:"controlPanel"},{children:[(0,s.jsx)("div",Object.assign({className:"controlPanelHeader"},{children:"Link - Create"})),(0,s.jsx)("label",{children:"Policy:"}),(0,s.jsx)(pe,{setPolicy:e.sdk.Link.setShareLinkPolicy}),(0,s.jsx)("br",{}),(0,s.jsx)(fe,{label:"createLink",createLink:e.sdk.Link.createLink}),(0,s.jsx)("br",{}),(0,s.jsx)(fe,{label:"createDeepLink",createLink:e.sdk.Link.createDeepLink})]})),(0,s.jsxs)("div",Object.assign({className:"controlPanel"},{children:[(0,s.jsx)("div",Object.assign({className:"controlPanelHeader"},{children:"Link - Set Policy"})),"Opening policies:",(0,s.jsx)("table",{children:(0,s.jsxs)("tbody",{children:[(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Model:"}),(0,s.jsx)("td",{children:(0,s.jsx)(he,{setPolicy:e.sdk.Link.setModelLinkPolicy})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Navigation:"}),(0,s.jsx)("td",{children:(0,s.jsx)(he,{setPolicy:e.sdk.Link.setNavigationLinkPolicy})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"Same Origin:"}),(0,s.jsx)("td",{children:(0,s.jsx)(he,{setPolicy:e.sdk.Link.setSameOriginLinkPolicy})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"External:"}),(0,s.jsx)("td",{children:(0,s.jsx)(ge,{setPolicy:e.sdk.Link.setExternalLinkPolicy})})]})]})})]}))]})}function ve(e){const t=(0,u.useCallback)((()=>{e.sdk.Mattertag.editIcon(e.selectedMattertag,e.selectedAsset)}),[e.sdk.Mattertag,e.selectedAsset,e.selectedMattertag]),n=(0,u.useCallback)((()=>{e.sdk.Mattertag.resetIcon(e.selectedMattertag)}),[e.sdk.Mattertag,e.selectedMattertag]);return(0,s.jsxs)(u.Fragment,{children:[(0,s.jsx)("div",{children:(0,s.jsx)("button",Object.assign({onClick:t},{children:"Edit Icon"}))}),(0,s.jsx)("div",{children:(0,s.jsx)("button",Object.assign({onClick:n},{children:"Reset Icon"}))})]})}!function(e){let t,n,r;!function(e){e.PHASE_CHANGE="application.phasechange"}(t=e.Event||(e.Event={})),function(e){e.UNINITIALIZED="appphase.uninitialized",e.WAITING="appphase.waiting",e.LOADING="appphase.loading",e.STARTING="appphase.starting",e.PLAYING="appphase.playing",e.ERROR="appphase.error"}(n=e.Phase||(e.Phase={})),function(e){e.UNKNOWN="application.unknown",e.WEBVR="application.webvr",e.SHOWCASE="application.showcase",e.WORKSHOP="application.workshop"}(r=e.Application||(e.Application={}))}(W||(W={})),function(e){let t,n,r;!function(e){e.IMAGE="image",e.PDF="pdf",e.VIDEO="video",e.RICH="rich",e.ZIP="zip",e.TEXT="text",e.AUDIO="audio",e.MODEL="model",e.APPLICATION="application"}(t=e.MediaType||(e.MediaType={})),function(e){e.EXTERNAL="external",e.UPLOAD="upload",e.SANDBOX="sandbox"}(n=e.AttachmentCategory||(e.AttachmentCategory={})),function(e){e.COMMENT="comment",e.MATTERTAG="mattertag"}(r=e.ParentType||(e.ParentType={}))}($||($={})),function(e){let t,n;!function(e){e.MOVE="camera.move"}(t=e.Event||(e.Event={})),function(e){e.FORWARD="FORWARD",e.LEFT="LEFT",e.RIGHT="RIGHT",e.BACK="BACK",e.UP="UP",e.DOWN="DOWN"}(n=e.Direction||(e.Direction={}))}(G||(G={})),function(e){let t;!function(e){e.CHANGE_START="floors.changestart",e.CHANGE_END="floors.changeend"}(t=e.Event||(e.Event={}))}(K||(K={})),function(e){let t;!function(e){e.SUCCESS="astar.status.success",e.NO_PATH="astar.status.no_path",e.TIMEOUT="astar.status.timeout",e.NO_START_VERTEX="astar.status.no_start",e.NO_END_VERTEX="astar.status.no_end"}(t=e.AStarStatus||(e.AStarStatus={}))}(Q||(Q={})),function(e){let t;!function(e){e.POSITION_UPDATED="label.positionupdated"}(t=e.Event||(e.Event={}))}(Y||(Y={})),function(e){let t,n,r;!function(e){e.WINDOW="link.creationpolicy.window",e.REFERRER="link.creationpolicy.referrer",e.MATTERPORT="link.creationpolicy.matterport"}(t=e.CreationPolicy||(e.CreationPolicy={})),function(e){e.DEFAULT="link.openpolicy.default",e.NEW_WINDOW="link.openpolicy.newwindow",e.SAME_FRAME="link.openpolicy.sameframe",e.CURRENT_WINDOW="link.openpolicy.current"}(n=e.OpenPolicy||(e.OpenPolicy={})),function(e){e.DEFAULT="link.destination.default",e.MATTERPORT="link.destination.matterport"}(r=e.DestinationPolicy||(e.DestinationPolicy={}))}(X||(X={})),function(e){let t,n,r,a,l;!function(e){e.INSTANT="transition.instant",e.FLY="transition.fly",e.FADEOUT="transition.fade"}(t=e.Transition||(e.Transition={})),function(e){e.NAVIGATION="tag.link.nav",e.MODEL="tag.link.model",e.EXT_LINK="tag.link.ext"}(n=e.LinkType||(e.LinkType={})),function(e){e.NONE="tag.chunk.none",e.TEXT="tag.chunk.text",e.LINK="tag.chunk.link"}(r=e.DescriptionChunkType||(e.DescriptionChunkType={})),function(e){e.HOVER="tag.hover",e.CLICK="tag.click",e.LINK_OPEN="tag.linkopen"}(a=e.Event||(e.Event={})),function(e){e.NONE="mattertag.media.none",e.PHOTO="mattertag.media.photo",e.VIDEO="mattertag.media.video",e.RICH="mattertag.media.rich"}(l=e.MediaType||(e.MediaType={}))}(q||(q={})),function(e){let t,n,r;!function(e){e.INSIDE="mode.inside",e.OUTSIDE="mode.outside",e.DOLLHOUSE="mode.dollhouse",e.FLOORPLAN="mode.floorplan",e.TRANSITIONING="mode.transitioning"}(t=e.Mode||(e.Mode={})),function(e){e.CHANGE_START="viewmode.changestart",e.CHANGE_END="viewmode.changeend"}(n=e.Event||(e.Event={})),function(e){e.INSTANT="transition.instant",e.FLY="transition.fly",e.FADEOUT="transition.fade"}(r=e.TransitionType||(e.TransitionType={}))}(J||(J={})),function(e){let t;!function(e){e.MODEL_LOADED="model.loaded"}(t=e.Event||(e.Event={}))}(Z||(Z={})),function(e){let t;!function(e){e.NONE="intersectedobject.none",e.MODEL="intersectedobject.model",e.TAG="intersectedobject.tag",e.SWEEP="intersectedobject.sweep",e.UNKNOWN="intersectedobject.unknown"}(t=e.Colliders||(e.Colliders={}))}(ee||(ee={})),te||(te={}),function(e){let t,n;!function(e){e.CAMERA="sensor.sensortype.camera"}(t=e.SensorType||(e.SensorType={})),function(e){e.SPHERE="sensor.sourcetype.sphere",e.BOX="sensor.sourcetype.box",e.CYLINDER="sensor.sourcetype.cylinder"}(n=e.SourceType||(e.SourceType={}))}(ne||(ne={})),function(e){let t,n,r,a;!function(e){e.ENTER="sweep.enter",e.EXIT="sweep.exit"}(t=e.Event||(e.Event={})),function(e){e.INSTANT="transition.instant",e.FLY="transition.fly",e.FADEOUT="transition.fade"}(n=e.Transition||(e.Transition={})),function(e){e.ALIGNED="aligned",e.UNALIGNED="unaligned"}(r=e.Alignment||(e.Alignment={})),function(e){e.UNPLACED="unplaced",e.AUTO="auto",e.MANUAL="manual"}(a=e.Placement||(e.Placement={}))}(re||(re={})),function(e){let t;!function(e){e.UNKNOWN="tag.attachment.unknown",e.APPLICATION="tag.attachment.application",e.AUDIO="tag.attachment.audio",e.IMAGE="tag.attachment.image",e.MODEL="tag.attachment.model",e.PDF="tag.attachment.pdf",e.RICH="tag.attachment.rich",e.TEXT="tag.attachment.text",e.VIDEO="tag.attachment.video",e.ZIP="tag.attachment.zip",e.SANDBOX="tag.attachment.sandbox"}(t=e.AttachmentType||(e.AttachmentType={}))}(ae||(ae={})),function(e){let t,n;!function(e){e.STARTED="tour.started",e.STOPPED="tour.stopped",e.ENDED="tour.ended",e.STEPPED="tour.stepped"}(t=e.Event||(e.Event={})),function(e){e.INACTIVE="tour.inactive",e.ACTIVE="tour.active",e.STOP_SCHEDULED="tour.stopscheduled"}(n=e.PlayState||(e.PlayState={}))}(le||(le={})),function(e){let t,n,r;!function(e){e.OBJ_LOADER="mp.objLoader",e.FBX_LOADER="mp.fbxLoader",e.DAE_LOADER="mp.daeLoader",e.GLTF_LOADER="mp.gltfLoader",e.SCROLLING_TUBE="mp.scrollingTube",e.TRANSFORM_CONTROLS="mp.transformControls",e.LIGHTS_COMPONENT="mp.lights",e.POINT_LIGHT="mp.pointLight",e.DIRECTIONAL_LIGHT="mp.directionalLight",e.AMBIENT_LIGHT="mp.ambientLight",e.CAMERA="mp.camera",e.INPUT="mp.input",e.XR="mp.xr"}(t=e.Component||(e.Component={})),function(e){e.CLICK="INTERACTION.CLICK",e.HOVER="INTERACTION.HOVER",e.DRAG="INTERACTION.DRAG",e.DRAG_BEGIN="INTERACTION.DRAG_BEGIN",e.DRAG_END="INTERACTION.DRAG_END",e.POINTER_MOVE="INTERACTION.POINTER_MOVE",e.POINTER_BUTTON="INTERACTION.POINTER_BUTTON",e.SCROLL="INTERACTION.SCROLL",e.KEY="INTERACTION.KEY",e.LONG_PRESS_START="INTERACTION.LONG_PRESS_START",e.LONG_PRESS_END="INTERACTION.LONG_PRESS_END",e.MULTI_SWIPE="INTERACTION.MULTI_SWIPE",e.MULTI_SWIPE_END="INTERACTION.MULTI_SWIPE_END",e.PINCH="INTERACTION.PINCH",e.PINCH_END="INTERACTION.PINCH_END",e.ROTATE="INTERACTION.ROTATE",e.ROTATE_END="INTERACTION.ROTATE_END"}(n=e.InteractionType||(e.InteractionType={})),function(e){e.INPUT="input",e.OUTPUT="output",e.EVENT="event",e.EMIT="emit"}(r=e.PathType||(e.PathType={}))}(ie||(ie={})),function(e){e[e.BACKSPACE=8]="BACKSPACE",e[e.TAB=9]="TAB",e[e.RETURN=13]="RETURN",e[e.SHIFT=16]="SHIFT",e[e.CONTROL=17]="CONTROL",e[e.ALT=18]="ALT",e[e.ESCAPE=27]="ESCAPE",e[e.SPACE=32]="SPACE",e[e.HASH=35]="HASH",e[e.LEFTARROW=37]="LEFTARROW",e[e.UPARROW=38]="UPARROW",e[e.RIGHTARROW=39]="RIGHTARROW",e[e.DOWNARROW=40]="DOWNARROW",e[e.DELETE=46]="DELETE",e[e.ZERO=48]="ZERO",e[e.ONE=49]="ONE",e[e.TWO=50]="TWO",e[e.THREE=51]="THREE",e[e.FOUR=52]="FOUR",e[e.FIVE=53]="FIVE",e[e.SIX=54]="SIX",e[e.SEVEN=55]="SEVEN",e[e.EIGHT=56]="EIGHT",e[e.NINE=57]="NINE",e[e.AT=64]="AT",e[e.A=65]="A",e[e.B=66]="B",e[e.C=67]="C",e[e.D=68]="D",e[e.E=69]="E",e[e.F=70]="F",e[e.G=71]="G",e[e.H=72]="H",e[e.I=73]="I",e[e.J=74]="J",e[e.K=75]="K",e[e.L=76]="L",e[e.M=77]="M",e[e.N=78]="N",e[e.O=79]="O",e[e.P=80]="P",e[e.Q=81]="Q",e[e.R=82]="R",e[e.S=83]="S",e[e.T=84]="T",e[e.U=85]="U",e[e.V=86]="V",e[e.W=87]="W",e[e.X=88]="X",e[e.Y=89]="Y",e[e.Z=90]="Z",e[e.SEMICOLON=186]="SEMICOLON",e[e.PLUSEQUALS=187]="PLUSEQUALS",e[e.COMMA=188]="COMMA",e[e.DASHUNDERSCORE=189]="DASHUNDERSCORE",e[e.PERIOD=190]="PERIOD",e[e.OPENBRACKET=219]="OPENBRACKET"}(oe||(oe={})),function(e){e[e.DOWN=0]="DOWN",e[e.PRESSED=1]="PRESSED",e[e.UP=2]="UP"}(se||(se={})),function(e){e[e.PRIMARY=0]="PRIMARY",e[e.MIDDLE=1]="MIDDLE",e[e.SECONDARY=2]="SECONDARY",e[e.BACK=3]="BACK",e[e.FORWARD=4]="FORWARD",e[e.COUNT=5]="COUNT"}(ce||(ce={})),function(e){e[e.NONE=0]="NONE",e[e.PRIMARY=1]="PRIMARY",e[e.SECONDARY=4]="SECONDARY",e[e.MIDDLE=2]="MIDDLE",e[e.BACK=8]="BACK",e[e.FORWARD=16]="FORWARD",e[e.ALL=31]="ALL"}(ue||(ue={}));var be=function(e,t,n,r){return new(n||(n=Promise))((function(a,l){function i(e){try{s(r.next(e))}catch(e){l(e)}}function o(e){try{s(r.throw(e))}catch(e){l(e)}}function s(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,o)}s((r=r.apply(e,t||[])).next())}))};function ye(e){const t=(0,u.useRef)(null),n=(0,u.useRef)(null),r=(0,u.useCallback)((()=>be(this,void 0,void 0,(function*(){if(t.current&&n.current){const r=t.current.value,a=n.current.value;yield e.sdk.Mattertag.registerIcon(r,a),e.addAsset(r,a)}}))),[e]);return(0,s.jsxs)(u.Fragment,{children:[(0,s.jsxs)("div",{children:[(0,s.jsx)("div",Object.assign({style:{display:"inline-block",width:"15%"}},{children:(0,s.jsx)("label",Object.assign({htmlFor:"mattertag-icon-id"},{children:"id: "}))})),(0,s.jsx)("div",Object.assign({style:{display:"inline-block",width:"85%"}},{children:(0,s.jsx)("input",{ref:t,id:"mattertag-icon-id",type:"string"})}))]}),(0,s.jsxs)("div",{children:[(0,s.jsx)("div",Object.assign({style:{display:"inline-block",width:"15%"}},{children:(0,s.jsx)("label",Object.assign({htmlFor:"mattertag-icon-src"},{children:"src: "}))})),(0,s.jsx)("div",Object.assign({style:{display:"inline-block",width:"85%"}},{children:(0,s.jsx)("input",{ref:n,id:"mattertag-icon-src",type:"string"})}))]}),(0,s.jsx)("div",{children:(0,s.jsx)("button",Object.assign({onClick:r},{children:"Register"}))})]})}function xe(e){const[t,n]=(0,u.useState)(""),r=(0,u.useCallback)((function(e){return e.label||"(no label)"}),[]),a=(0,u.useCallback)((function(e,t){return e.label<t.label?-1:e.label>t.label?1:0}),[]),{sdk:l}=e;return(0,s.jsxs)(u.Fragment,{children:[(0,s.jsx)(p,Object.assign({header:"Mattertag - Collection"},{children:(0,s.jsx)(_,{collection:l.Mattertag.data,name:"Mattertags"})})),(0,s.jsx)(h,{label:"Mattertag",collection:l.Mattertag.data,onChanged:n,optionLabel:r,sort:a}),(0,s.jsxs)("div",Object.assign({className:"controlPanel"},{children:[(0,s.jsx)("div",Object.assign({className:"controlPanelHeader"},{children:"Mattertag"})),(0,s.jsx)("table",{children:(0,s.jsx)("tbody",{children:(0,s.jsx)(D,{sdk:l,enum:e.sdk.Mattertag.Event})})})]})),(0,s.jsx)(p,Object.assign({header:"Mattertag - Edit Icon"},{children:(0,s.jsx)(ve,{sdk:l,selectedMattertag:t,selectedAsset:e.selectedAsset})})),(0,s.jsx)(p,Object.assign({header:"Mattertag - Register Icon"},{children:(0,s.jsx)(ye,{sdk:l,selectedMattertag:t,selectedAsset:e.selectedAsset,addAsset:e.addAsset})}))]})}var ke=function(e,t,n,r){return new(n||(n=Promise))((function(a,l){function i(e){try{s(r.next(e))}catch(e){l(e)}}function o(e){try{s(r.throw(e))}catch(e){l(e)}}function s(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,o)}s((r=r.apply(e,t||[])).next())}))};const je={height:50};function Ee(e){const[t,n]=(0,u.useState)(""),r=(0,u.useCallback)((()=>ke(this,void 0,void 0,(function*(){let t;try{t=yield e.sdk.Measurements.getData(),n(JSON.stringify(t))}catch(e){n(`error ${e}`)}}))),[]);return(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",Object.assign({colSpan:1},{children:(0,s.jsx)("button",Object.assign({onClick:r},{children:"getData"}))})),(0,s.jsx)("td",Object.assign({colSpan:2},{children:(0,s.jsx)("textarea",{rows:3,style:je,value:t,readOnly:!0})}))]})}function we({sdk:e}){const[t,n]=(0,u.useState)(!1);(0,u.useEffect)((()=>{const t=e.Measurements.mode.subscribe((e=>n(e.active)));return()=>t.cancel()}),[]);const r=(0,u.useCallback)((()=>{e.Measurements.toggleMode(!t)}),[t,e.Measurements]);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)("div",{children:(0,s.jsx)("button",Object.assign({onClick:r},{children:"Toggle"}))}),(0,s.jsxs)("div",{children:["Active: ",(0,s.jsx)("span",{children:String(t)})]})]})}function Te({sdk:e}){return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(h,{collection:e.Measurements.data,label:"Measurements"}),(0,s.jsx)(p,Object.assign({header:"Measurements - Mode"},{children:(0,s.jsx)(M,{name:"mode",observable:e.Measurements.mode})})),(0,s.jsx)(p,Object.assign({header:"Measurements - Toggle"},{children:(0,s.jsx)(we,{sdk:e})})),(0,s.jsx)(p,Object.assign({header:"Measurements - GetData"},{children:(0,s.jsx)("table",{children:(0,s.jsx)("tbody",{children:(0,s.jsx)(Ee,{sdk:e})})})}))]})}var Se=function(e,t,n,r){return new(n||(n=Promise))((function(a,l){function i(e){try{s(r.next(e))}catch(e){l(e)}}function o(e){try{s(r.throw(e))}catch(e){l(e)}}function s(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,o)}s((r=r.apply(e,t||[])).next())}))};const Ce={height:50};function Oe(e){const[t,n]=(0,u.useState)(""),r=(0,u.useCallback)((()=>Se(this,void 0,void 0,(function*(){let t;try{t=yield e.sdk.Model.getData(),n(JSON.stringify(t))}catch(e){n(`error ${e}`)}}))),[]);return(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",Object.assign({colSpan:1},{children:(0,s.jsx)("button",Object.assign({onClick:r},{children:"getData"}))})),(0,s.jsx)("td",Object.assign({colSpan:3},{children:(0,s.jsx)("textarea",{rows:3,style:Ce,value:t,readOnly:!0})}))]})}var Ne=function(e,t,n,r){return new(n||(n=Promise))((function(a,l){function i(e){try{s(r.next(e))}catch(e){l(e)}}function o(e){try{s(r.throw(e))}catch(e){l(e)}}function s(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,o)}s((r=r.apply(e,t||[])).next())}))};const Ie={height:50};function Re(e){const[t,n]=(0,u.useState)(""),r=(0,u.useCallback)((()=>Ne(this,void 0,void 0,(function*(){let t;try{t=yield e.sdk.Model.getDetails(),n(JSON.stringify(t))}catch(e){n(`error ${e}`)}}))),[]);return(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",Object.assign({colSpan:1},{children:(0,s.jsx)("button",Object.assign({onClick:r},{children:"getDetails"}))})),(0,s.jsx)("td",Object.assign({colSpan:3},{children:(0,s.jsx)("textarea",{rows:3,style:Ie,value:t,readOnly:!0})}))]})}function Pe(e){return(0,s.jsx)(u.Fragment,{children:(0,s.jsxs)("div",Object.assign({className:"controlPanel"},{children:[(0,s.jsx)("div",Object.assign({className:"controlPanelHeader"},{children:"Model"})),(0,s.jsx)("table",{children:(0,s.jsxs)("tbody",{children:[(0,s.jsx)(Oe,{sdk:e.sdk}),(0,s.jsx)(Re,{sdk:e.sdk}),(0,s.jsx)(D,{sdk:e.sdk,enum:e.sdk.Model.Event})]})})]}))})}var Le=function(e,t,n,r){return new(n||(n=Promise))((function(a,l){function i(e){try{s(r.next(e))}catch(e){l(e)}}function o(e){try{s(r.throw(e))}catch(e){l(e)}}function s(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,o)}s((r=r.apply(e,t||[])).next())}))};function Ae(e){const[t,n]=(0,u.useState)(""),r=(0,u.useRef)(null),a=(0,u.useRef)(null),l=(0,u.useRef)(null),i=(0,u.useCallback)((()=>Le(this,void 0,void 0,(function*(){var t,i,o;if(!r)return;const s=null===(t=r.current)||void 0===t?void 0:t.value,c=null===(i=a.current)||void 0===i?void 0:i.value,u=null===(o=l.current)||void 0===o?void 0:o.value;if(void 0===s||void 0===c||void 0===u)return;const d=e.sdk.Plugin;try{yield d.load({applicationKey:c,id:u},new URL(s,window.location.origin).href)}catch(e){n(`error: ${e}`)}}))),[]),o=(0,u.useCallback)((()=>Le(this,void 0,void 0,(function*(){var t,i;if(!r)return;const o=null===(t=a.current)||void 0===t?void 0:t.value,s=null===(i=l.current)||void 0===i?void 0:i.value;if(void 0===o||void 0===s)return;const c=e.sdk.Plugin;try{yield c.unload({applicationKey:o,id:s})}catch(e){n(`error: ${e}`)}}))),[]);return(0,s.jsxs)(u.Fragment,{children:[(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("span",{children:"App Key"})}),(0,s.jsx)("td",{children:(0,s.jsx)("input",{type:"text",placeholder:"application key",defaultValue:"qa314apf28d4um76n45cz91md",ref:a})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("span",{children:"Plugin Id"})}),(0,s.jsx)("td",{children:(0,s.jsx)("input",{type:"text",placeholder:"plugin id",ref:l})})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("span",{children:"Url"})}),(0,s.jsx)("td",{children:(0,s.jsx)("input",{type:"text",id:"scene-source-url",placeholder:"source url",ref:r})})]}),(0,s.jsx)("tr",{children:(0,s.jsx)("td",{children:(0,s.jsx)("button",Object.assign({onClick:i},{children:"Load"}))})}),(0,s.jsx)("tr",{children:(0,s.jsx)("td",{children:(0,s.jsx)("button",Object.assign({onClick:o},{children:"Unload"}))})}),(0,s.jsx)("tr",{children:(0,s.jsx)("td",Object.assign({colSpan:3},{children:(0,s.jsx)("div",Object.assign({id:"scene-setplugin-message"},{children:t}))}))})]})}function _e(e){const t=e.sdk.Plugin;return(0,s.jsxs)(u.Fragment,{children:[(0,s.jsx)(p,Object.assign({header:"Plugin"},{children:(0,s.jsx)("table",{children:(0,s.jsx)("tbody",{children:(0,s.jsx)(Ae,{sdk:e.sdk})})})})),(0,s.jsx)(p,Object.assign({header:"Plugin - Collection"},{children:(0,s.jsx)(_,{collection:t.data,name:"Plugin.data"})}))]})}function Fe(e){const t=(0,u.useCallback)((()=>{e.sdk.Pointer.editTexture(e.selectedAsset)}),[e.sdk.Pointer,e.selectedAsset]),n=(0,u.useCallback)((()=>{e.sdk.Pointer.resetTexture()}),[e.sdk.Pointer]);return(0,s.jsxs)(u.Fragment,{children:["SelectedAsset: ",e.selectedAsset,(0,s.jsx)("div",{children:(0,s.jsx)("button",Object.assign({onClick:t},{children:"Edit Texture"}))}),(0,s.jsx)("div",{children:(0,s.jsx)("button",Object.assign({onClick:n},{children:"Reset Texture"}))})]})}var Me=function(e,t,n,r){return new(n||(n=Promise))((function(a,l){function i(e){try{s(r.next(e))}catch(e){l(e)}}function o(e){try{s(r.throw(e))}catch(e){l(e)}}function s(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,o)}s((r=r.apply(e,t||[])).next())}))};function De(e){const t=(0,u.useRef)(null),n=(0,u.useRef)(null),r=(0,u.useCallback)((()=>Me(this,void 0,void 0,(function*(){if(t.current&&n.current){const r=t.current.value,a=n.current.value;yield e.sdk.Pointer.registerTexture(r,a),e.addAsset(r,a)}}))),[e]);return(0,s.jsxs)(u.Fragment,{children:[(0,s.jsxs)("div",{children:[(0,s.jsx)("label",Object.assign({htmlFor:"pointer-texture-id"},{children:"id: "})),(0,s.jsx)("input",{ref:t,id:"pointer-texture-id",type:"string"})]}),(0,s.jsxs)("div",{children:[(0,s.jsx)("label",Object.assign({htmlFor:"pointer-texture-src"},{children:"src: "})),(0,s.jsx)("input",{ref:n,id:"pointer-texture-src",type:"string"})]}),(0,s.jsx)("div",{children:(0,s.jsx)("button",Object.assign({onClick:r},{children:"Register"}))})]})}function ze(e){const{sdk:t,selectedAsset:n,addAsset:r}=e;return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(p,Object.assign({header:"Pointer - Register Texture"},{children:(0,s.jsx)(De,{sdk:t,addAsset:r})})),(0,s.jsx)(p,Object.assign({header:"Pointer - Edit Texture"},{children:(0,s.jsx)(Fe,{sdk:t,selectedAsset:n})}))]})}var Be=function(e,t,n,r){return new(n||(n=Promise))((function(a,l){function i(e){try{s(r.next(e))}catch(e){l(e)}}function o(e){try{s(r.throw(e))}catch(e){l(e)}}function s(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,o)}s((r=r.apply(e,t||[])).next())}))};function Ue(e){const[t,n]=(0,u.useState)(""),r=(0,u.useRef)(null),a=(0,u.useRef)(null),l=(0,u.useRef)(null),i=(0,u.useCallback)((t=>{!function(){var t,i,o;Be(this,void 0,void 0,(function*(){if(!r.current||!a.current||!l.current)return;const s=null===(t=r.current)||void 0===t?void 0:t.value,c=null===(i=a.current)||void 0===i?void 0:i.value,u=null===(o=l.current)||void 0===o?void 0:o.value;if(s&&c&&u)try{const t=yield e.sdk.Renderer.getScreenPosition({x:parseFloat(s),y:parseFloat(c),z:parseFloat(u)});t.x=Math.trunc(t.x),t.y=Math.trunc(t.y),n(`success x:${t.x} y:${t.y}`)}catch(e){n("error")}}))}()}),[]);return(0,s.jsxs)(u.Fragment,{children:[(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("button",Object.assign({onClick:i},{children:"getScreenPosition"}))}),(0,s.jsx)("td",{children:(0,s.jsx)("input",{type:"number",id:"renderer-getscreenposition-x",className:"small-input",placeholder:"x",ref:r})}),(0,s.jsx)("td",{children:(0,s.jsx)("input",{type:"number",id:"renderer-getscreenposition-y",className:"small-input",placeholder:"y",ref:a})}),(0,s.jsx)("td",{children:(0,s.jsx)("input",{type:"number",id:"renderer-getscreenposition-z",className:"small-input",placeholder:"z",ref:l})})]}),(0,s.jsx)("tr",{children:(0,s.jsx)("td",Object.assign({colSpan:3},{children:(0,s.jsx)("div",Object.assign({id:"renderer-getscreenposition-message"},{children:t}))}))})]})}var He=function(e,t,n,r){return new(n||(n=Promise))((function(a,l){function i(e){try{s(r.next(e))}catch(e){l(e)}}function o(e){try{s(r.throw(e))}catch(e){l(e)}}function s(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,o)}s((r=r.apply(e,t||[])).next())}))};function Ve(e){const[t,n]=(0,u.useState)(""),r=(0,u.useRef)(null),a=(0,u.useRef)(null),l=(0,u.useCallback)((t=>{!function(){var t,l;He(this,void 0,void 0,(function*(){if(!r.current||!a.current)return;const i=null===(t=r.current)||void 0===t?void 0:t.value,o=null===(l=a.current)||void 0===l?void 0:l.value;if(i&&o)try{const t=yield e.sdk.Renderer.getWorldPositionData({x:parseFloat(i),y:parseFloat(o)});n(`success ${JSON.stringify(t)}`)}catch(e){n("error")}}))}()}),[]);return(0,s.jsxs)(u.Fragment,{children:[(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("button",Object.assign({onClick:l},{children:"getWorldPositionData"}))}),(0,s.jsx)("td",{children:(0,s.jsx)("input",{type:"number",id:"renderer-getworldpositiondata-x",className:"small-input",placeholder:"x",ref:r})}),(0,s.jsx)("td",{children:(0,s.jsx)("input",{type:"number",id:"renderer-getworldpositiondata-y",className:"small-input",placeholder:"y",ref:a})})]}),(0,s.jsx)("tr",{children:(0,s.jsx)("td",Object.assign({colSpan:3},{children:(0,s.jsx)("div",Object.assign({id:"renderer-getscreenposition-message"},{children:t}))}))})]})}function We(e){return(0,s.jsx)(u.Fragment,{children:(0,s.jsxs)("div",Object.assign({className:"controlPanel"},{children:[(0,s.jsx)("div",Object.assign({className:"controlPanelHeader"},{children:"Renderer"})),(0,s.jsx)("table",{children:(0,s.jsxs)("tbody",{children:[(0,s.jsx)(Ue,{sdk:e.sdk}),(0,s.jsx)(Ve,{sdk:e.sdk})]})})]}))})}function $e(e){return(0,s.jsxs)(u.Fragment,{children:[(0,s.jsx)(p,Object.assign({header:"Room - Current"},{children:(0,s.jsx)(M,{observable:e.sdk.Room.current,name:"Room.current"})})),(0,s.jsx)(p,Object.assign({header:"Room - Collection"},{children:(0,s.jsx)(_,{collection:e.sdk.Room.data,name:"Room.data"})}))]})}function Ge(e){const t=(0,u.useRef)(null),n=(0,u.useCallback)((()=>{var n,r;(null===(n=t.current)||void 0===n?void 0:n.value)&&e.path.set(null===(r=t.current)||void 0===r?void 0:r.value)}),[]);return(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",Object.assign({colSpan:2},{children:(0,s.jsx)("button",Object.assign({onClick:n},{children:e.id}))})),(0,s.jsx)("td",Object.assign({colSpan:2},{children:(0,s.jsx)("input",{type:"text",placeholder:"string",ref:t})}))]})}const Ke=JSON.parse('{"version":"2.0","payload":{"objects":[{"name":"","position":{"x":0,"y":0.6,"z":0},"rotation":{"x":0,"y":0,"z":0},"scale":{"x":1,"y":1,"z":1},"components":[{"type":"mp.gltfLoader","id":"gltf-loader","inputs":{"url":"","materialUrl":"","visible":true,"localScale":{"x":1,"y":1,"z":1},"localRotation":{"x":0,"y":0,"z":0},"localPosition":{"x":0,"y":0,"z":0},"colliderEnabled":true},"events":{"INTERACTION.CLICK":true,"INTERACTION.HOVER":true,"INTERACTION.DRAG":false,"INTERACTION.DRAG_BEGIN":false,"INTERACTION.DRAG_END":false,"INTERACTION.POINTER_MOVE":false,"INTERACTION.POINTER_BUTTON":false,"INTERACTION.SCROLL":false,"INTERACTION.KEY":false,"INTERACTION.LONG_PRESS_START":false,"INTERACTION.LONG_PRESS_END":false,"INTERACTION.MULTI_SWIPE":false,"INTERACTION.MULTI_SWIPE_END":false,"INTERACTION.PINCH":false,"INTERACTION.PINCH_END":false,"INTERACTION.ROTATE":false,"INTERACTION.ROTATE_END":false}},{"type":"mp.objLoader","id":"obj-loader","inputs":{"url":"","materialUrl":"","visible":true,"localScale":{"x":0.03,"y":0.03,"z":0.03},"localRotation":{"x":0,"y":0,"z":0},"localPosition":{"x":0,"y":0,"z":0},"colliderEnabled":true},"events":{"INTERACTION.CLICK":true,"INTERACTION.HOVER":true,"INTERACTION.DRAG":false,"INTERACTION.DRAG_BEGIN":false,"INTERACTION.DRAG_END":false,"INTERACTION.POINTER_MOVE":false,"INTERACTION.POINTER_BUTTON":false,"INTERACTION.SCROLL":false,"INTERACTION.KEY":false,"INTERACTION.LONG_PRESS_START":false,"INTERACTION.LONG_PRESS_END":false,"INTERACTION.MULTI_SWIPE":false,"INTERACTION.MULTI_SWIPE_END":false,"INTERACTION.PINCH":false,"INTERACTION.PINCH_END":false,"INTERACTION.ROTATE":false,"INTERACTION.ROTATE_END":false}},{"type":"mp.daeLoader","id":"dae-loader","inputs":{"url":"","materialUrl":"","visible":true,"localScale":{"x":1,"y":1,"z":1},"localRotation":{"x":0,"y":0,"z":0},"localPosition":{"x":0,"y":0,"z":0},"colliderEnabled":true},"events":{"INTERACTION.CLICK":true,"INTERACTION.HOVER":true,"INTERACTION.DRAG":false,"INTERACTION.DRAG_BEGIN":false,"INTERACTION.DRAG_END":false,"INTERACTION.POINTER_MOVE":false,"INTERACTION.POINTER_BUTTON":false,"INTERACTION.SCROLL":false,"INTERACTION.KEY":false,"INTERACTION.LONG_PRESS_START":false,"INTERACTION.LONG_PRESS_END":false,"INTERACTION.MULTI_SWIPE":false,"INTERACTION.MULTI_SWIPE_END":false,"INTERACTION.PINCH":false,"INTERACTION.PINCH_END":false,"INTERACTION.ROTATE":false,"INTERACTION.ROTATE_END":false}}],"bindings":[],"id":"JxRI"},{"name":"","position":{"x":0,"y":0,"z":0},"rotation":{"x":0,"y":0,"z":0},"scale":{"x":1,"y":1,"z":1},"components":[{"type":"mp.directionalLight","id":"ouvX","inputs":{"enabled":true,"color":{"r":0.7,"g":0.7,"b":0.7},"intensity":2,"position":{"x":1,"y":5,"z":1},"target":{"x":0,"y":0,"z":0},"castShadow":false,"debug":false},"events":{"INTERACTION.CLICK":false,"INTERACTION.HOVER":false,"INTERACTION.DRAG":false,"INTERACTION.DRAG_BEGIN":false,"INTERACTION.DRAG_END":false,"INTERACTION.POINTER_MOVE":false,"INTERACTION.POINTER_BUTTON":false,"INTERACTION.SCROLL":false,"INTERACTION.KEY":false,"INTERACTION.LONG_PRESS_START":false,"INTERACTION.LONG_PRESS_END":false,"INTERACTION.MULTI_SWIPE":false,"INTERACTION.MULTI_SWIPE_END":false,"INTERACTION.PINCH":false,"INTERACTION.PINCH_END":false,"INTERACTION.ROTATE":false,"INTERACTION.ROTATE_END":false}},{"type":"mp.ambientLight","id":"aZ8Q","inputs":{"enabled":true,"color":{"r":1,"g":1,"b":1},"intensity":0.5},"events":{"INTERACTION.CLICK":false,"INTERACTION.HOVER":false,"INTERACTION.DRAG":false,"INTERACTION.DRAG_BEGIN":false,"INTERACTION.DRAG_END":false,"INTERACTION.POINTER_MOVE":false,"INTERACTION.POINTER_BUTTON":false,"INTERACTION.SCROLL":false,"INTERACTION.KEY":false,"INTERACTION.LONG_PRESS_START":false,"INTERACTION.LONG_PRESS_END":false,"INTERACTION.MULTI_SWIPE":false,"INTERACTION.MULTI_SWIPE_END":false,"INTERACTION.PINCH":false,"INTERACTION.PINCH_END":false,"INTERACTION.ROTATE":false,"INTERACTION.ROTATE_END":false}}],"bindings":[],"id":"rLHR"}],"bindings":[],"paths":[["gltfUrl","JxRI/gltf-loader/url"],["objUrl","JxRI/obj-loader/url"],["daeUrl","JxRI/dae-loader/url"],["ambientIntensity","rLHR/ouvX/intensity"]]}}');var Qe=function(e,t,n,r){return new(n||(n=Promise))((function(a,l){function i(e){try{s(r.next(e))}catch(e){l(e)}}function o(e){try{s(r.throw(e))}catch(e){l(e)}}function s(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,o)}s((r=r.apply(e,t||[])).next())}))};const Ye=JSON.stringify(Ke);function Xe(e){const[t,n]=(0,u.useState)(null),r=(0,u.useRef)(null),a=function(){if(t){if(t.object&&t.object.stop(),t.objects)for(const e of t.objects)e.stop();n(null)}},l=function(t){var r;return Qe(this,void 0,void 0,(function*(){const a=yield e.sdk.Scene.deserialize(t);if(a)if(Array.isArray(a)){const e=a;for(const t of e)t.start();n({object:null,objects:e,paths:[]})}else if("object"==typeof a){const e=JSON.parse(t),l=null===(r=null==e?void 0:e.payload)||void 0===r?void 0:r.paths,i=[];if(l)for(const e of l)i.push(e[0]);const o=a;o.start(),n({object:o,objects:null,paths:i})}}))},i=(0,u.useCallback)((e=>{if(a(),0===e.target.files.length)return;const t=new FileReader;t.onload=e=>Qe(this,void 0,void 0,(function*(){if(e.target){const t=e.target.result;console.log(t),yield l(t)}})),t.readAsText(e.target.files[0],"UTF-8")}),[]),o=(0,u.useCallback)((e=>{a(),r.current&&(r.current.value="")}),[t]);return(0,s.jsxs)(u.Fragment,{children:[(0,s.jsx)("tr",{children:(0,s.jsxs)("td",Object.assign({colSpan:3},{children:[(0,s.jsx)("input",{type:"file",id:"scene-deserialize-key",placeholder:"key",accept:".json",onChange:i,ref:r}),(0,s.jsx)("input",{type:"button",onClick:e=>{r.current&&(r.current.value=""),l(Ye)},value:"Model Loader"})]}))}),(0,s.jsx)("tr",{children:(0,s.jsx)("td",Object.assign({colSpan:3},{children:(0,s.jsx)("button",Object.assign({onClick:o},{children:"Clear"}))}))}),(()=>{if(t&&t.object){const e=[];for(const{desc:n,path:r}of t.object.pathIterator())n.type===ie.PathType.INPUT&&e.push({desc:n,path:r});return e.map((function(e){return(0,s.jsx)(Ge,{id:e.desc.id,path:e.path},e.desc.id)}))}return null})()]})}function qe(e){return(0,s.jsx)(u.Fragment,{children:(0,s.jsxs)("div",Object.assign({className:"controlPanel"},{children:[(0,s.jsx)("div",Object.assign({className:"controlPanelHeader"},{children:"Scene"})),(0,s.jsx)("table",{children:(0,s.jsx)("tbody",{children:(0,s.jsx)(Xe,{sdk:e.sdk})})})]}))})}function Je(e){return(0,s.jsxs)(u.Fragment,{children:[(0,s.jsx)("tr",{children:(0,s.jsx)("td",Object.assign({colSpan:3},{children:(0,s.jsx)("div",{children:"TBD"})}))}),(0,s.jsx)("tr",{children:(0,s.jsx)("td",{colSpan:3})})]})}function Ze(e){return(0,s.jsx)(u.Fragment,{children:(0,s.jsxs)("div",Object.assign({className:"controlPanel"},{children:[(0,s.jsx)("div",Object.assign({className:"controlPanelHeader"},{children:"Sensor"})),(0,s.jsx)("table",{children:(0,s.jsx)("tbody",{children:(0,s.jsx)(Je,{sdk:e.sdk})})})]}))})}var et=function(e,t,n,r){return new(n||(n=Promise))((function(a,l){function i(e){try{s(r.next(e))}catch(e){l(e)}}function o(e){try{s(r.throw(e))}catch(e){l(e)}}function s(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,o)}s((r=r.apply(e,t||[])).next())}))};function tt(e){const[t,n]=(0,u.useState)(""),r=(0,u.useRef)(null),a=(0,u.useCallback)((t=>et(this,void 0,void 0,(function*(){var t;if(!r.current)return;const a=null===(t=r.current)||void 0===t?void 0:t.value,l=yield e.sdk.Settings.get(a);n(`key:${a} value:${l}`)}))),[]);return(0,s.jsxs)(u.Fragment,{children:[(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("button",Object.assign({onClick:a},{children:"get"}))}),(0,s.jsx)("td",{children:(0,s.jsx)("input",{type:"text",id:"settings-get-key",className:"small-input",placeholder:"key",ref:r})})]}),(0,s.jsx)("tr",{children:(0,s.jsx)("td",Object.assign({colSpan:2},{children:(0,s.jsx)("div",Object.assign({id:"settings-get-message"},{children:t}))}))})]})}var nt=function(e,t,n,r){return new(n||(n=Promise))((function(a,l){function i(e){try{s(r.next(e))}catch(e){l(e)}}function o(e){try{s(r.throw(e))}catch(e){l(e)}}function s(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,o)}s((r=r.apply(e,t||[])).next())}))};function rt(e){const[t,n]=(0,u.useState)(""),r=(0,u.useRef)(null),a=(0,u.useRef)(null),l=(0,u.useCallback)((()=>nt(this,void 0,void 0,(function*(){var t,l;if(!r||!a)return;const i=null===(t=r.current)||void 0===t?void 0:t.value,o=null===(l=a.current)||void 0===l?void 0:l.value;if(void 0!==i&&void 0!==o)try{yield e.sdk.Settings.update(i,o),n(`success key:${i} value: ${o}`)}catch(e){n(`error key:${i} value: ${o}`)}}))),[]);return(0,s.jsxs)(u.Fragment,{children:[(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("button",Object.assign({onClick:l},{children:"update"}))}),(0,s.jsx)("td",{children:(0,s.jsx)("input",{type:"text",id:"settings-update-key",className:"small-input",placeholder:"key",ref:r})}),(0,s.jsx)("td",{children:(0,s.jsx)("input",{type:"text",id:"settings-update-value",className:"small-input",placeholder:"value",ref:a})})]}),(0,s.jsx)("tr",{children:(0,s.jsx)("td",Object.assign({colSpan:3},{children:(0,s.jsx)("div",Object.assign({id:"settings-update-message"},{children:t}))}))})]})}function at(e){return(0,s.jsxs)("div",Object.assign({className:"controlPanel"},{children:[(0,s.jsx)("div",Object.assign({className:"controlPanelHeader"},{children:"Settings"})),(0,s.jsx)("table",{children:(0,s.jsxs)("tbody",{children:[(0,s.jsx)(tt,{sdk:e.sdk}),(0,s.jsx)(rt,{sdk:e.sdk})]})})]}))}var lt=function(e,t,n,r){return new(n||(n=Promise))((function(a,l){function i(e){try{s(r.next(e))}catch(e){l(e)}}function o(e){try{s(r.throw(e))}catch(e){l(e)}}function s(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,o)}s((r=r.apply(e,t||[])).next())}))};function it(e){const[t,n]=(0,u.useState)(""),r=(0,u.useRef)(null),a=(0,u.useCallback)((()=>lt(this,void 0,void 0,(function*(){var t;if(!r)return;const a=null===(t=r.current)||void 0===t?void 0:t.value;if(void 0!==a)try{yield e.sdk.Sweep.disable(a),n(`sweepId:${a} disabled`)}catch(e){n(`error disabling sweepId:${a}`)}}))),[]);return(0,s.jsxs)(u.Fragment,{children:[(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("button",Object.assign({onClick:a},{children:"disable"}))}),(0,s.jsx)("td",{children:(0,s.jsx)("input",{type:"text",id:"sweep-disable-sweepId",placeholder:"sweep id",ref:r})})]}),(0,s.jsx)("tr",{children:(0,s.jsx)("td",Object.assign({colSpan:3},{children:(0,s.jsx)("div",Object.assign({id:"sweep-disable-message"},{children:t}))}))})]})}var ot=function(e,t,n,r){return new(n||(n=Promise))((function(a,l){function i(e){try{s(r.next(e))}catch(e){l(e)}}function o(e){try{s(r.throw(e))}catch(e){l(e)}}function s(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,o)}s((r=r.apply(e,t||[])).next())}))};function st(e){const[t,n]=(0,u.useState)(""),r=(0,u.useRef)(null),a=(0,u.useCallback)((()=>ot(this,void 0,void 0,(function*(){var t;if(!r)return;const a=null===(t=r.current)||void 0===t?void 0:t.value;if(void 0!==a)try{yield e.sdk.Sweep.enable(a),n(`sweepId:${a} enabled`)}catch(e){n(`error enabling sweepId:${a}`)}}))),[]);return(0,s.jsxs)(u.Fragment,{children:[(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("button",Object.assign({onClick:a},{children:"enable"}))}),(0,s.jsx)("td",{children:(0,s.jsx)("input",{type:"text",id:"sweep-enable-sweepId",placeholder:"sweep id",ref:r})})]}),(0,s.jsx)("tr",{children:(0,s.jsx)("td",Object.assign({colSpan:3},{children:(0,s.jsx)("div",Object.assign({id:"sweep-enable-message"},{children:t}))}))})]})}var ct=function(e,t,n,r){return new(n||(n=Promise))((function(a,l){function i(e){try{s(r.next(e))}catch(e){l(e)}}function o(e){try{s(r.throw(e))}catch(e){l(e)}}function s(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,o)}s((r=r.apply(e,t||[])).next())}))};const ut=e=>{const[t,n]=(0,u.useState)({}),[r,a]=(0,u.useState)({}),[l,i]=(0,u.useState)([]),[o,c]=(0,u.useState)([]),[d,f]=(0,u.useState)(""),[p,h]=(0,u.useState)(""),g=(0,u.useRef)(!1),m=(0,u.useRef)("");function v(e){const t=r[e];if(!t)throw new Error("Id doesn't correspond to sweep: "+e);c(t.neighbors),h(e),m.current=e}(0,u.useEffect)((()=>{const t=[];return function(){return ct(this,void 0,void 0,(function*(){yield e.sdk.App.state.waitUntil((t=>t.phase===e.sdk.App.Phase.PLAYING));const r=yield e.sdk.Sweep.Conversion.createIdMap(!0);t.push(e.sdk.Sweep.current.subscribe((e=>{var t;e.id&&f(null!==(t=r[e.id])&&void 0!==t?t:e.id)}))),t.push(e.sdk.Sweep.data.subscribe({onCollectionUpdated(t){return ct(this,void 0,void 0,(function*(){const l=function(e,t){var n;const r={},l=Object.values(e).map((e=>{var n;const a=null!==(n=t[e.id])&&void 0!==n?n:e.id;return r[a]=e,a}));a(r);const i=null!==(n=t[m.current])&&void 0!==n?n:m.current;return r&&r[i]&&c(r[i].neighbors),l}(t,r);g.current?d&&v(d):(i(l),g.current=!0,function(t,r){ct(this,void 0,void 0,(function*(){const a={};yield Promise.all(Object.values(t).map((t=>ct(this,void 0,void 0,(function*(){const n=yield e.sdk.Sweep.Conversion.getLabelFromId(t.id);a[t.id]=n,a[r[t.id]]=n}))))).then((()=>{n(a),d&&v(d)}))}))}(t,r))}))}}))}))}().catch((e=>{console.error(e)})),()=>{t.forEach((e=>{e.cancel()}))}}),[]);const b=(0,s.jsx)("option",Object.assign({value:""},{children:"-"}),-1),y=l.map(((e,n)=>(0,s.jsx)("option",Object.assign({value:e},{children:t[e]}),n)));return y.unshift(b),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)("p",{children:["Select Sweep: ",(0,s.jsx)("select",Object.assign({onChange:function(e){v(e.currentTarget.value)},value:p},{children:y})),(0,s.jsxs)("button",Object.assign({style:{float:"right"},disabled:!d||d===p,onClick:()=>{v(d)}},{children:[" Use Current (",t[d],") "]}))]}),(0,s.jsxs)("div",Object.assign({style:{width:"250px"}},{children:["Neighbors: ",o.map(((e,n)=>t[e])).join(", ")]})),(0,s.jsx)("hr",{}),(0,s.jsxs)("div",{children:["Remove sweep neighbor:",(0,s.jsxs)("select",Object.assign({onChange:function(t){var n;return ct(this,void 0,void 0,(function*(){const r=t.currentTarget.value;if(!r)return void console.warn("cannot select spacer as ID!");const a=yield e.sdk.Sweep.Conversion.createIdMap(!0);yield e.sdk.Sweep.removeNeighbors(p,[null!==(n=a[r])&&void 0!==n?n:r]),console.log("removed sweep",r)}))},value:-1,style:{float:"right",width:"40px"}},{children:[b,o.map(((e,n)=>(0,s.jsx)("option",Object.assign({value:e},{children:t[e]}),n)))]}))]}),(0,s.jsxs)("div",{children:["Add sweep neighbor:",(0,s.jsx)("select",Object.assign({onChange:function(t){var n;return ct(this,void 0,void 0,(function*(){const r=t.currentTarget.value;if(!r)return void console.warn("cannot select spacer as ID!");const a=yield e.sdk.Sweep.Conversion.createIdMap(!0);yield e.sdk.Sweep.addNeighbors(p,[null!==(n=a[r])&&void 0!==n?n:r]),console.log("added sweep",r)}))},value:-1,style:{float:"right",width:"40px"}},{children:y}))]})]})};function dt(e){return(0,s.jsxs)(u.Fragment,{children:[(0,s.jsx)(p,Object.assign({header:"Sweep - Current"},{children:(0,s.jsx)(M,{observable:e.sdk.Sweep.current,name:"Sweep.current"})})),(0,s.jsx)(p,Object.assign({header:"Sweep - Collection"},{children:(0,s.jsx)(_,{collection:e.sdk.Sweep.data,name:"Sweep.data"})})),(0,s.jsxs)("div",Object.assign({className:"controlPanel"},{children:[(0,s.jsx)("div",Object.assign({className:"controlPanelHeader"},{children:"Sweep"})),(0,s.jsx)("table",{children:(0,s.jsxs)("tbody",{children:[(0,s.jsx)(it,{sdk:e.sdk}),(0,s.jsx)(st,{sdk:e.sdk})]})})]})),(0,s.jsxs)("div",Object.assign({className:"controlPanel"},{children:[(0,s.jsx)("div",Object.assign({className:"controlPanelHeader"},{children:"Sweep"})),(0,s.jsx)("table",{children:(0,s.jsx)("tbody",{children:(0,s.jsx)(D,{sdk:e.sdk,enum:e.sdk.Sweep.Event})})})]})),(0,s.jsx)(p,Object.assign({header:"Sweep Neighbor Connections"},{children:(0,s.jsx)(ut,{sdk:e.sdk})}))]})}function ft(e){const[t,n]=(0,u.useState)(!0),r=(0,u.useRef)(),a=["",""],l=(0,u.useRef)(),i=(0,u.useRef)(),o=(0,u.useCallback)((function(e){a[0]=e,f()}),[]),c=(0,u.useCallback)((function(e){a[1]=e,f()}),[]);function f(){if(r.current){const t=r.current.vertex(a[0]),o=r.current.vertex(a[1]);t&&o&&(l.current&&l.current.cancel(),i.current=e.sdk.Graph.createAStarRunner(r.current,t,o),l.current=i.current.subscribe({onChanged(){n(!0)}}))}n(!0)}(0,u.useEffect)((()=>{e.sdk.Sweep.createGraph().then((e=>r.current=e))}));const p=(0,u.useRef)(null),h=(0,u.useCallback)((function(){if(i.current){const e=i.current.exec();p.current&&(e.status!==Q.AStarStatus.SUCCESS?p.current.value="No path found":p.current.value=e.path.map(((e,t)=>t+": "+e.id)).join("\n")),n(!1)}}),[]);return(0,s.jsx)(u.Fragment,{children:(0,s.jsxs)("div",Object.assign({className:"controlPanel"},{children:[(0,s.jsx)("div",Object.assign({className:"controlPanelHeader"},{children:"Graph - Sweep"})),(0,s.jsxs)("div",{children:["Start: ",(0,s.jsx)(d,{collection:e.sdk.Sweep.data,filter:pt,onChanged:o})]}),(0,s.jsxs)("div",{children:["End: ",(0,s.jsx)(d,{collection:e.sdk.Sweep.data,filter:pt,onChanged:c})]}),(0,s.jsxs)("div",{children:["Path Dirty: ",t.toString()]}),(0,s.jsx)("div",{children:(0,s.jsx)("button",Object.assign({onClick:h},{children:"CALCULATE PATH"}))}),(0,s.jsx)("div",{children:(0,s.jsx)("textarea",{style:{width:"300px",height:"72px",whiteSpace:"pre"},ref:p})})]}))})}function pt(e){return e.enabled}function ht({sdk:e,selectedLayer:t,children:n}){const[r,a]=(0,u.useState)(!1),l=(0,u.useCallback)((e=>{a(e.target.checked)}),[]);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)("div",Object.assign({style:{backgroundColor:"#d7dee0"}},{children:[(0,s.jsxs)("div",Object.assign({style:{display:"inline-block"}},{children:[(0,s.jsx)("label",Object.assign({htmlFor:""},{children:"Use Layer"})),(0,s.jsx)("input",{type:"checkbox",onChange:l})]})),(0,s.jsx)("div",Object.assign({style:{display:"inline-block"}},{children:(0,s.jsx)("input",{width:"200px",type:"text",value:t?t.id:"no layer selected",readOnly:!0,disabled:!r})}))]})),(0,s.jsx)("div",{children:u.Children.map(n,(n=>(0,u.cloneElement)(n,{sdk:r&&t?t:e})))})]})}function gt(e){const t=(0,u.useRef)(null),n=(0,u.useRef)(null),r=(0,u.useRef)(null),a=(0,u.useRef)(null),l=(0,u.useRef)(null),i=(0,u.useRef)(null),o=(0,u.useRef)(null),c=(0,u.useRef)(null),d=(0,u.useRef)(null),f=(0,u.useRef)(null),p=(0,u.useRef)(null),h=(0,u.useCallback)((()=>{var s;t.current&&n.current&&r.current&&a.current&&l.current&&i.current&&o.current&&c.current&&d.current&&f.current&&e.sdk.Tag.add({id:""===d.current.value?void 0:d.current.value,label:t.current.value,description:n.current.value,anchorPosition:{x:parseFloat(r.current.value),y:parseFloat(a.current.value),z:parseFloat(l.current.value)},stemVector:{x:parseFloat(i.current.value),y:parseFloat(o.current.value),z:parseFloat(c.current.value)},opacity:parseFloat(f.current.value),iconId:(null===(s=p.current)||void 0===s?void 0:s.checked)&&e.selectedAsset?e.selectedAsset:void 0})}),[e.sdk.Tag,e.selectedAsset]);return(0,s.jsxs)(u.Fragment,{children:[(0,s.jsxs)("div",{children:[(0,s.jsx)("label",Object.assign({htmlFor:"tag2-add-title"},{children:"Title:"})),(0,s.jsx)("input",{ref:t,type:"text",id:"tag2-add-title"})]}),(0,s.jsxs)("div",{children:[(0,s.jsx)("label",Object.assign({htmlFor:"tag2-add-desc"},{children:"Desc:"})),(0,s.jsx)("textarea",{ref:n,id:"tag2-add-desc"})]}),(0,s.jsxs)("div",{children:[(0,s.jsx)("div",{children:"position:"}),(0,s.jsx)("label",Object.assign({htmlFor:"tag2-add-pos-x"},{children:"x: "})),(0,s.jsx)("input",{ref:r,className:"small-input",id:"tag2-add-pos-x",type:"number",step:"0.001",defaultValue:"0"}),(0,s.jsx)("label",Object.assign({htmlFor:"tag2-add-pos-y"},{children:"y: "})),(0,s.jsx)("input",{ref:a,className:"small-input",id:"tag2-add-pos-y",type:"number",step:"0.001",defaultValue:"0"}),(0,s.jsx)("label",Object.assign({htmlFor:"tag2-add-pos-z"},{children:"z: "})),(0,s.jsx)("input",{ref:l,className:"small-input",id:"tag2-add-pos-z",type:"number",step:"0.001",defaultValue:"0"})]}),(0,s.jsxs)("div",{children:[(0,s.jsx)("div",{children:"normal:"}),(0,s.jsx)("label",Object.assign({htmlFor:"tag2-add-norm-x"},{children:"x: "})),(0,s.jsx)("input",{ref:i,className:"small-input",id:"tag2-add-norm-x",type:"number",step:"0.001",defaultValue:"0"}),(0,s.jsx)("label",Object.assign({htmlFor:"tag2-add-norm-y"},{children:"y: "})),(0,s.jsx)("input",{ref:o,className:"small-input",id:"tag2-add-norm-y",type:"number",step:"0.001",defaultValue:"1"}),(0,s.jsx)("label",Object.assign({htmlFor:"tag2-add-norm-z"},{children:"z: "})),(0,s.jsx)("input",{ref:c,className:"small-input",id:"tag2-add-norm-z",type:"number",step:"0.001",defaultValue:"0"})]}),(0,s.jsxs)("div",{children:[(0,s.jsx)("label",Object.assign({htmlFor:"tag2-add-id"},{children:"id: "})),(0,s.jsx)("input",{ref:d,className:"small-input",id:"tag2-add-id",type:"string"}),(0,s.jsx)("label",Object.assign({htmlFor:"tag2-add-opacity"},{children:"opacity: "})),(0,s.jsx)("input",{ref:f,className:"small-input",id:"tag2-add-opacity",type:"number",step:"0.01",defaultValue:"1"})]}),(0,s.jsxs)("div",{children:["icon: ",(0,s.jsx)("input",{ref:p,type:"checkbox",defaultChecked:!1}),(0,s.jsx)("input",{type:"text",readOnly:!0,value:e.selectedAsset}),(0,s.jsx)("button",Object.assign({id:"tag2-add",onClick:h},{children:"Add"}))]})]})}function mt(e){const t=(0,u.useRef)(null),n=(0,u.useRef)(null),r=(0,u.useRef)(null),a=(0,u.useRef)(null),[l,i]=(0,u.useState)(new Map),o=(0,u.useCallback)((()=>{t.current&&n.current&&r.current&&a.current&&e.sdk.Tag.allowAction(e.selectedTag,{docking:t.current.checked,opening:n.current.checked,navigating:r.current.checked,sharing:a.current.checked})}),[e.sdk.Tag,e.selectedTag]),c=(0,u.useCallback)((s=>{const c=l.get(e.selectedTag)||{docking:!0,opening:!0,navigating:!0,sharing:!0};s.target===t.current&&(c.docking=!c.docking),s.target===r.current&&(c.navigating=!c.navigating),s.target===n.current&&(c.opening=!c.opening),s.target===a.current&&(c.sharing=!c.sharing),l.set(e.selectedTag,c),i(new Map(l)),o()}),[o,l,e.selectedTag]),d=l.get(e.selectedTag)||{docking:!0,opening:!0,navigating:!0,sharing:!0};return(0,s.jsxs)(u.Fragment,{children:[(0,s.jsx)("div",{children:"(checked == allowed)"}),(0,s.jsxs)("div",{children:[(0,s.jsx)("label",Object.assign({htmlFor:"tag2-allow-open"},{children:"Billboard:"})),(0,s.jsx)("input",{ref:n,type:"checkbox",id:"tag2-allow-open",onChange:c,checked:d.opening})]}),(0,s.jsxs)("div",{children:[(0,s.jsx)("label",Object.assign({htmlFor:"tag2-allow-nav"},{children:"Navigation:"})),(0,s.jsx)("input",{ref:r,type:"checkbox",id:"tag2-allow-nav",onChange:c,checked:d.navigating})]}),(0,s.jsxs)("div",{children:[(0,s.jsx)("label",Object.assign({htmlFor:"tag2-allow-dock"},{children:"Dock:"})),(0,s.jsx)("input",{ref:t,type:"checkbox",id:"tag2-allow-dock",onChange:c,checked:d.docking})]}),(0,s.jsxs)("div",{children:[(0,s.jsx)("label",Object.assign({htmlFor:"tag2-allow-share"},{children:"Share:"})),(0,s.jsx)("input",{ref:a,type:"checkbox",id:"tag2-allow-share",onChange:c,checked:d.sharing})]})]})}const vt={display:"inline-block",width:"80px"};function bt({sdk:e,selectedTag:t,selectedAttachment:n}){const r=(0,u.useCallback)((()=>{e.Tag.attach(t,n)}),[e.Tag,n,t]),a=(0,u.useCallback)((()=>{e.Tag.detach(t,n)}),[e.Tag,n,t]);return(0,s.jsxs)(u.Fragment,{children:[(0,s.jsxs)("div",{children:[(0,s.jsx)("label",Object.assign({style:vt},{children:"Tag:"})),(0,s.jsx)("input",{type:"text",readOnly:!0,placeholder:"(none)",value:t})]}),(0,s.jsxs)("div",{children:[(0,s.jsx)("label",Object.assign({style:vt},{children:"Attachment:"})),(0,s.jsx)("input",{type:"text",readOnly:!0,placeholder:"(none)",value:n})]}),(0,s.jsx)("div",{children:(0,s.jsx)("button",Object.assign({onClick:r},{children:"Attach"}))}),(0,s.jsx)("div",{children:(0,s.jsx)("button",Object.assign({onClick:a},{children:"Detach"}))})]})}function yt(e){const t=(0,u.useRef)(null),n=(0,u.useRef)(null),r=(0,u.useCallback)((()=>{t.current&&n.current&&e.sdk.Tag.editBillboard(e.selectedTag,{label:t.current.value||void 0,description:n.current.value||void 0})}),[e.sdk.Tag,e.selectedTag]);return(0,s.jsxs)(u.Fragment,{children:[(0,s.jsxs)("div",{children:[(0,s.jsx)("label",Object.assign({htmlFor:"tag2-edit-title"},{children:"Title:"})),(0,s.jsx)("input",{ref:t,type:"text",id:"tag2-edit-title"})]}),(0,s.jsxs)("div",{children:[(0,s.jsx)("label",Object.assign({htmlFor:"tag2-edit-desc"},{children:"Desc:"})),(0,s.jsx)("textarea",{ref:n,id:"tag2-edit-desc"})]}),(0,s.jsx)("div",{children:(0,s.jsx)("button",Object.assign({id:"tag2-edit",onClick:r},{children:"Edit"}))})]})}function xt(e){const t=(0,u.useRef)(null),n=(0,u.useRef)(null),r=(0,u.useRef)(null),a=(0,u.useCallback)((()=>{t.current&&n.current&&r.current&&e.sdk.Tag.editColor(e.selectedTag,{r:parseFloat(t.current.value),g:parseFloat(n.current.value),b:parseFloat(r.current.value)})}),[e.sdk.Tag,e.selectedTag]);return(0,s.jsxs)(u.Fragment,{children:[(0,s.jsxs)("div",{children:[(0,s.jsx)("label",Object.assign({htmlFor:"tag2-color-r"},{children:"R: "})),(0,s.jsx)("input",{ref:t,className:"small-input",id:"tag2-color-r",type:"number",step:.01,defaultValue:1,min:0,max:.75})]}),(0,s.jsxs)("div",{children:[(0,s.jsx)("label",Object.assign({htmlFor:"tag2-color-g"},{children:"G: "})),(0,s.jsx)("input",{ref:n,className:"small-input",id:"tag2-color-g",type:"number",step:.01,defaultValue:0,min:0,max:1})]}),(0,s.jsxs)("div",{children:[(0,s.jsx)("label",Object.assign({htmlFor:"tag2-color-b"},{children:"B: "})),(0,s.jsx)("input",{ref:r,className:"small-input",id:"tag2-color-b",type:"number",step:.01,defaultValue:1,min:0,max:.75})]}),(0,s.jsx)("div",{children:(0,s.jsx)("button",Object.assign({id:"tag2-edit-color",onClick:a},{children:"Edit Color"}))})]})}function kt(e){const[t,n]=(0,u.useState)(!0),[r,a]=(0,u.useState)(!0),l=(0,u.useRef)(null),i=(0,u.useRef)(null),o=(0,u.useCallback)((function(){n(!t)}),[t]),c=(0,u.useCallback)((function(){a(!r)}),[r]),d=(0,u.useCallback)((()=>{l.current&&i.current&&e.sdk.Tag.editStem(e.selectedTag,{stemVisible:r?i.current.checked:void 0,stemHeight:t?parseFloat(l.current.value):void 0})}),[e.sdk.Tag,e.selectedTag,t,r]);return(0,s.jsxs)(u.Fragment,{children:[(0,s.jsxs)("div",{children:[(0,s.jsx)("input",{type:"checkbox",checked:t,onChange:o}),(0,s.jsx)("label",Object.assign({htmlFor:"tag2-stem-height"},{children:"stem height: "})),(0,s.jsx)("input",{ref:l,className:"small-input",id:"tag2-height-stem",type:"number",step:.1,defaultValue:1,min:0,disabled:!t})]}),(0,s.jsxs)("div",{children:[(0,s.jsx)("input",{type:"checkbox",checked:r,onChange:c}),(0,s.jsx)("label",Object.assign({htmlFor:"tag2-stem-visible"},{children:"stem visible:"})),(0,s.jsx)("input",{ref:i,type:"checkbox",id:"tag2-stem-visible",disabled:!r})]}),(0,s.jsx)("div",{children:(0,s.jsx)("button",Object.assign({id:"tag2-edit-stem",onClick:d},{children:"Edit Stem"}))})]})}function jt(e){const t=(0,u.useRef)(null),[n,r]=(0,u.useState)(!0),a=(0,u.useCallback)((()=>{n?e.sdk.Tag.editIcon(e.selectedTag,e.selectedAsset):null!==t.current&&e.sdk.Tag.editIcon(e.selectedTag,t.current.value)}),[e.sdk.Tag,e.selectedAsset,e.selectedTag,n]),l=(0,u.useCallback)((()=>{e.sdk.Tag.resetIcon(e.selectedTag)}),[e.sdk.Tag,e.selectedTag]);return(0,s.jsxs)(u.Fragment,{children:[(0,s.jsxs)("div",{children:["Use selected Asset?",(0,s.jsx)("input",{type:"checkbox",onChange:e=>{r(e.target.checked)},defaultChecked:n})]}),n?null:(0,s.jsx)("div",{children:(0,s.jsxs)("div",{children:[(0,s.jsx)("div",Object.assign({style:{display:"inline-block",width:"15%"}},{children:(0,s.jsx)("label",Object.assign({htmlFor:"mattertag-icon-id"},{children:"id: "}))})),(0,s.jsx)("div",Object.assign({style:{display:"inline-block",width:"85%"}},{children:(0,s.jsx)("input",{ref:t,id:"mattertag-icon-id",type:"string",defaultValue:e.selectedAsset})}))]})}),(0,s.jsx)("div",{children:(0,s.jsx)("button",Object.assign({id:"tag2-edit-icon",onClick:a},{children:"Edit Icon"}))}),(0,s.jsx)("div",{children:(0,s.jsx)("button",Object.assign({id:"tag2-reset-icon",onClick:l},{children:"Reset Icon"}))})]})}function Et(e){const t=(0,u.useRef)(null),n=(0,u.useCallback)((()=>{t.current&&e.sdk.Tag.editOpacity(e.selectedTag,parseFloat(t.current.value))}),[e.sdk.Tag,e.selectedTag]);return(0,s.jsxs)(u.Fragment,{children:[(0,s.jsxs)("div",{children:[(0,s.jsx)("label",Object.assign({htmlFor:"tag2-opacity"},{children:"opacity: "})),(0,s.jsx)("input",{ref:t,className:"small-input",id:"tag2-opacity",type:"number",step:.01,defaultValue:.5,min:0,max:1})]}),(0,s.jsx)("div",{children:(0,s.jsx)("button",Object.assign({id:"tag2-edit-opacity",onClick:n},{children:"Edit Opacity"}))})]})}function wt(e){const[t,n]=(0,u.useState)(!0),[r,a]=(0,u.useState)(!0),l=(0,u.useRef)(null),i=(0,u.useRef)(null),o=(0,u.useRef)(null),c=(0,u.useRef)(null),d=(0,u.useRef)(null),f=(0,u.useRef)(null),p=(0,u.useCallback)((function(){n(!t)}),[t]),h=(0,u.useCallback)((function(){a(!r)}),[r]),g=(0,u.useCallback)((()=>{l.current&&i.current&&o.current&&c.current&&d.current&&f.current&&e.sdk.Tag.editPosition(e.selectedTag,{anchorPosition:t?{x:parseFloat(l.current.value),y:parseFloat(i.current.value),z:parseFloat(o.current.value)}:void 0,stemVector:r?{x:parseFloat(c.current.value),y:parseFloat(d.current.value),z:parseFloat(f.current.value)}:void 0})}),[e.sdk.Tag,e.selectedTag,r,t]);return(0,s.jsxs)(u.Fragment,{children:[(0,s.jsx)("div",{children:"position:"}),(0,s.jsxs)("div",{children:[(0,s.jsx)("input",{type:"checkbox",checked:t,onChange:p}),(0,s.jsx)("label",Object.assign({htmlFor:"tag2-move-pos-x"},{children:"x: "})),(0,s.jsx)("input",{ref:l,className:"small-input",id:"tag2-move-pos-x",type:"number",step:"0.001",defaultValue:"0",disabled:!t}),(0,s.jsx)("label",Object.assign({htmlFor:"tag2-move-pos-y"},{children:"y: "})),(0,s.jsx)("input",{ref:i,className:"small-input",id:"tag2-move-pos-y",type:"number",step:"0.001",defaultValue:"0",disabled:!t}),(0,s.jsx)("label",Object.assign({htmlFor:"tag2-move-pos-z"},{children:"z: "})),(0,s.jsx)("input",{ref:o,className:"small-input",id:"tag2-move-pos-z",type:"number",step:"0.001",defaultValue:"0",disabled:!t})]}),(0,s.jsx)("div",{children:"normal:"}),(0,s.jsxs)("div",{children:[(0,s.jsx)("input",{type:"checkbox",checked:r,onChange:h}),(0,s.jsx)("label",Object.assign({htmlFor:"tag2-move-norm-x"},{children:"x: "})),(0,s.jsx)("input",{ref:c,className:"small-input",id:"tag2-move-norm-x",type:"number",step:"0.001",defaultValue:"0",disabled:!r}),(0,s.jsx)("label",Object.assign({htmlFor:"tag2-move-norm-y"},{children:"y: "})),(0,s.jsx)("input",{ref:d,className:"small-input",id:"tag2-move-norm-y",type:"number",step:"0.001",defaultValue:"1",disabled:!r}),(0,s.jsx)("label",Object.assign({htmlFor:"tag2-move-norm-z"},{children:"z: "})),(0,s.jsx)("input",{ref:f,className:"small-input",id:"tag2-move-norm-z",type:"number",step:"0.001",defaultValue:"0",disabled:!r})]}),(0,s.jsx)("div",{children:(0,s.jsx)("button",Object.assign({id:"tag2-move",onClick:g},{children:"Move"}))})]})}function Tt({sdk:e,selectedTag:t}){const n=(0,u.useRef)(null),r=(0,u.useRef)(null),a=(0,u.useCallback)((function(){var r;const a=(null===(r=n.current)||void 0===r?void 0:r.checked)||!1;e.Tag.open(t,{force:a})}),[e.Tag,t]),l=(0,u.useCallback)((function(){var n;const a=(null===(n=r.current)||void 0===n?void 0:n.checked)||!1;e.Tag.dock(t,{force:a})}),[e.Tag,t]),i=(0,u.useCallback)((function(){e.Tag.close(t)}),[e.Tag,t]);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)("div",{children:(0,s.jsx)("input",{type:"text",readOnly:!0,placeholder:"(none)",value:t})}),(0,s.jsxs)("div",{children:[(0,s.jsx)("button",Object.assign({className:"small-input",onClick:a},{children:"Open"})),(0,s.jsx)("label",Object.assign({style:{marginLeft:"5px"}},{children:"force:"})),(0,s.jsx)("input",{ref:n,id:"tag-force-open",type:"checkbox"})]}),(0,s.jsxs)("div",{children:[(0,s.jsx)("button",Object.assign({className:"small-input",onClick:l},{children:"Dock"})),(0,s.jsx)("label",Object.assign({style:{marginLeft:"5px"}},{children:"force:"})),(0,s.jsx)("input",{ref:r,id:"tag-force-dock",type:"checkbox"})]}),(0,s.jsx)("div",{children:(0,s.jsx)("button",Object.assign({className:"small-input",onClick:i},{children:"Close"}))})]})}function St(e){const t=(0,u.useRef)(null),n=(0,u.useCallback)((()=>{t.current&&e.sdk.Tag.registerAttachment(t.current.value)}),[e.sdk.Tag]);return(0,s.jsxs)(u.Fragment,{children:[(0,s.jsxs)("div",{children:[(0,s.jsx)("label",Object.assign({htmlFor:"tag2-register-attachment-src"},{children:"Src:"})),(0,s.jsx)("input",{ref:t,type:"text",id:"tag2-register-attachment-src"})]}),(0,s.jsx)("div",{children:(0,s.jsx)("button",Object.assign({onClick:n},{children:"Register"}))})]})}var Ct=function(e,t,n,r){return new(n||(n=Promise))((function(a,l){function i(e){try{s(r.next(e))}catch(e){l(e)}}function o(e){try{s(r.throw(e))}catch(e){l(e)}}function s(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,o)}s((r=r.apply(e,t||[])).next())}))};function Ot(e){const t=(0,u.useRef)(null),n=(0,u.useRef)(null),r=(0,u.useRef)(null),a=(0,u.useRef)(null),l=(0,u.useCallback)((()=>Ct(this,void 0,void 0,(function*(){if(t.current&&n.current&&r.current&&a.current){const[,l]=yield e.sdk.Tag.registerSandbox(t.current.value,{name:n.current.value,size:{h:parseInt(a.current.value,10),w:parseInt(r.current.value,10)}});l.on("click",(function(e){const t=function(){let e="";for(let t=0;t<6;++t)e+=Math.floor(16*Math.random()).toString(16);return"#"+e}();l.send("update.button",t,t.toString())}))}}))),[e.sdk.Tag]);return(0,s.jsxs)(u.Fragment,{children:[(0,s.jsx)("div",{children:(0,s.jsx)("input",{ref:n,type:"text",placeholder:"name"})}),(0,s.jsx)("div",{children:(0,s.jsx)("textarea",{style:{height:"7em"},ref:t,defaultValue:Nt})}),(0,s.jsxs)("div",{children:["width:",(0,s.jsx)("input",{className:"small-input",ref:r,type:"number",defaultValue:350}),"height:",(0,s.jsx)("input",{className:"small-input",ref:a,type:"number",defaultValue:150})]}),(0,s.jsx)("div",{children:(0,s.jsx)("button",Object.assign({onClick:l},{children:"Register"}))})]})}const Nt="<style>\nbody {\n  background-color: #cccccc;\n}\n#btn1 {\n  width: 100px;\n  height: 20px;\n  background-color: rgb(255, 255, 255);\n  border-radius: 10px;\n  border: 1px solid black;\n  text-align: center;\n}\n</style>\n<br>\n<br>\n<div id='btn1'>CLICK ME!</div>\n<div id='tag'></div>\n<div id='docked'></div>\n<script>\nconst btn1 = document.getElementById('btn1');\nbtn1.addEventListener('click', function () {\n  window.send('click', {buttonId: 1234321});\n});\nwindow.on('update.button', function (color, message) {\n  btn1.innerText = message;\n  btn1.style.backgroundColor = color;\n});\nconst tagOutput = document.getElementById('tag');\ntagOutput.innerHTML = 'Current tag: ' + window.tag;\nconst dockedOutput = document.getElementById('docked');\ndockedOutput.innerHTML = 'Docked: ' + window.docked;\n<\/script>";function It(e){const t=(0,u.useCallback)((()=>{e.sdk.Tag.remove(e.selectedTag)}),[e.sdk.Tag,e.selectedTag]);return(0,s.jsx)(u.Fragment,{children:(0,s.jsx)("div",{children:(0,s.jsx)("button",Object.assign({id:"tag2-remove",onClick:t},{children:"Remove"}))})})}function Rt({toggleSetting:e}){const t=(0,u.useCallback)((()=>{e()}),[e]),n=(0,u.useCallback)((()=>{e(!0)}),[e]),r=(0,u.useCallback)((()=>{e(!1)}),[e]);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)("div",{children:(0,s.jsx)("button",Object.assign({className:"small-input",onClick:t},{children:"Toggle"}))}),(0,s.jsx)("div",{children:(0,s.jsx)("button",Object.assign({className:"small-input",onClick:n},{children:"Show"}))}),(0,s.jsx)("div",{children:(0,s.jsx)("button",Object.assign({className:"small-input",onClick:r},{children:"Hide"}))})]})}function Pt(e,t){return e.label<t.label?-1:e.label>t.label?1:0}var Lt=function(e,t,n,r){return new(n||(n=Promise))((function(a,l){function i(e){try{s(r.next(e))}catch(e){l(e)}}function o(e){try{s(r.throw(e))}catch(e){l(e)}}function s(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,o)}s((r=r.apply(e,t||[])).next())}))};function At(e){const t=(0,u.useRef)(null),[n,r]=(0,u.useState)(""),a=(0,u.useCallback)((()=>Lt(this,void 0,void 0,(function*(){if(t.current){const n=yield e.sdk.Tag.importTags(t.current.value);r(`New tag ids: ${n}`)}}))),[e.sdk.Tag]);return(0,s.jsxs)(u.Fragment,{children:[(0,s.jsxs)("div",{children:[(0,s.jsx)("label",Object.assign({htmlFor:"space-id"},{children:"spaceId: "})),(0,s.jsx)("input",{ref:t,className:"small-input",id:"space-id",type:"string"})]}),(0,s.jsx)("div",{children:(0,s.jsx)("button",Object.assign({id:"copy-tags",onClick:a},{children:"Import"}))}),(0,s.jsx)("textarea",{style:{width:"100%",height:"80%"},readOnly:!0,value:n})]})}var _t=function(e,t,n,r){return new(n||(n=Promise))((function(a,l){function i(e){try{s(r.next(e))}catch(e){l(e)}}function o(e){try{s(r.throw(e))}catch(e){l(e)}}function s(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,o)}s((r=r.apply(e,t||[])).next())}))};function Ft(e){const[t,n]=(0,u.useState)(""),r=(0,u.useCallback)((()=>_t(this,void 0,void 0,(function*(){const t=yield e.sdk.Tag.saveToLayer();n(`[${t.join(",")}]`)}))),[e.sdk.Tag]);return(0,s.jsxs)(u.Fragment,{children:[(0,s.jsx)("div",{children:(0,s.jsx)("button",Object.assign({id:"saveToLayer",onClick:r},{children:"Save"}))}),(0,s.jsx)("textarea",{style:{width:"100%",height:"80%"},readOnly:!0,value:t})]})}function Mt({sdk:e,selectedAsset:t,selectedLayer:n}){const[r,a]=(0,u.useState)(""),[l,i]=(0,u.useState)(""),o=(0,u.useCallback)((function(e){return e.label||"(no label)"}),[]),c=(0,u.useCallback)((function(e){return e.src}),[]),d=(0,u.useCallback)((function(e){return e.src.slice(0,30)}),[]);return(0,s.jsxs)(u.Fragment,{children:[(0,s.jsx)(p,Object.assign({header:"Tag - SaveToLayer"},{children:(0,s.jsx)(Ft,{sdk:e})})),(0,s.jsx)(p,Object.assign({header:"Tag - Collection"},{children:(0,s.jsx)(_,{collection:e.Tag.data,name:"Tags"})})),(0,s.jsx)(p,Object.assign({header:"Tag.attachments - Collection"},{children:(0,s.jsx)(_,{collection:e.Tag.attachments,name:"Attachments"})})),(0,s.jsx)(h,{label:"Tag",collection:e.Tag.data,onChanged:a,optionLabel:o,sort:Pt,additionalProperties:["stemHeight","discPosition"]}),(0,s.jsx)(h,{label:"Attachment",collection:e.Tag.attachments,onChanged:i,optionLabel:d,hoverLabel:c}),(0,s.jsx)(p,Object.assign({header:"Tag - Add"},{children:(0,s.jsx)(ht,Object.assign({sdk:e,selectedLayer:n},{children:(0,s.jsx)(gt,{sdk:e,selectedAsset:t})}))})),(0,s.jsx)(p,Object.assign({header:"Tag - Remove"},{children:(0,s.jsx)(ht,Object.assign({sdk:e,selectedLayer:n},{children:(0,s.jsx)(It,{sdk:e,selectedTag:r})}))})),(0,s.jsx)(p,Object.assign({header:"Tag - Open"},{children:(0,s.jsx)(Tt,{sdk:e,selectedTag:r})})),(0,s.jsx)(p,Object.assign({header:'Tag - "Open Tags"'},{children:(0,s.jsx)(M,{observable:e.Tag.openTags,name:"Open Tags"})})),(0,s.jsx)(p,Object.assign({header:"Tag - Edit"},{children:(0,s.jsx)(ht,Object.assign({sdk:e,selectedLayer:n},{children:(0,s.jsx)(yt,{sdk:e,selectedTag:r})}))})),(0,s.jsx)(p,Object.assign({header:"Tag - Color"},{children:(0,s.jsx)(ht,Object.assign({sdk:e,selectedLayer:n},{children:(0,s.jsx)(xt,{sdk:e,selectedTag:r})}))})),(0,s.jsx)(p,Object.assign({header:"Tag - Edit Icon"},{children:(0,s.jsx)(ht,Object.assign({sdk:e,selectedLayer:n},{children:(0,s.jsx)(jt,{sdk:e,selectedTag:r,selectedAsset:t})}))})),(0,s.jsx)(p,Object.assign({header:"Tag - Opacity"},{children:(0,s.jsx)(ht,Object.assign({sdk:e,selectedLayer:n},{children:(0,s.jsx)(Et,{sdk:e,selectedTag:r})}))})),(0,s.jsx)(p,Object.assign({header:"Tag - Stem"},{children:(0,s.jsx)(ht,Object.assign({sdk:e,selectedLayer:n},{children:(0,s.jsx)(kt,{sdk:e,selectedTag:r})}))})),(0,s.jsx)(p,Object.assign({header:"Tag - Move"},{children:(0,s.jsx)(ht,Object.assign({sdk:e,selectedLayer:n},{children:(0,s.jsx)(wt,{sdk:e,selectedTag:r})}))})),(0,s.jsx)(p,Object.assign({header:"Tag - Allow Actions"},{children:(0,s.jsx)(ht,Object.assign({sdk:e,selectedLayer:n},{children:(0,s.jsx)(mt,{sdk:e,selectedTag:r})}))})),(0,s.jsx)(p,Object.assign({header:"Tag - Attach"},{children:(0,s.jsx)(ht,Object.assign({sdk:e,selectedLayer:n},{children:(0,s.jsx)(bt,{sdk:e,selectedTag:r,selectedAttachment:l})}))})),(0,s.jsx)(p,Object.assign({header:"Tag - Register Attachment"},{children:(0,s.jsx)(St,{sdk:e})})),(0,s.jsx)(p,Object.assign({header:"Tag - Register Sandbox"},{children:(0,s.jsx)(Ot,{sdk:e})})),(0,s.jsx)(p,Object.assign({header:"Tag - Docking Controls"},{children:(0,s.jsx)(Rt,{toggleSetting:e.Tag.toggleDocking})})),(0,s.jsx)(p,Object.assign({header:"Tag - Navigation Controls"},{children:(0,s.jsx)(Rt,{toggleSetting:e.Tag.toggleNavControls})})),(0,s.jsx)(p,Object.assign({header:"Tag - Sharing Controls"},{children:(0,s.jsx)(Rt,{toggleSetting:e.Tag.toggleSharing})})),(0,s.jsx)(p,Object.assign({header:"Tag - Import Tags"},{children:(0,s.jsx)(At,{sdk:e})}))]})}var Dt=function(e,t,n,r){return new(n||(n=Promise))((function(a,l){function i(e){try{s(r.next(e))}catch(e){l(e)}}function o(e){try{s(r.throw(e))}catch(e){l(e)}}function s(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,o)}s((r=r.apply(e,t||[])).next())}))};const zt={height:50};function Bt(e){const[t,n]=(0,u.useState)([]),r=(0,u.useCallback)((()=>Dt(this,void 0,void 0,(function*(){const t=yield e.sdk.Tour.getData();n(t)}))),[]);let a="";return t.length>0&&(a=JSON.stringify(t,null,2)),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("button",Object.assign({onClick:r},{children:"getData"}))}),(0,s.jsx)("td",{children:(0,s.jsx)("textarea",{rows:3,style:zt,defaultValue:a})})]})}const Ut={overflowY:"auto"};function Ht(e){return(0,s.jsxs)(u.Fragment,{children:[(0,s.jsxs)("div",Object.assign({style:Ut,className:"controlPanel"},{children:[(0,s.jsx)("div",Object.assign({className:"controlPanelHeader"},{children:"Tour"})),(0,s.jsx)("table",{children:(0,s.jsxs)("tbody",{children:[(0,s.jsx)(Bt,{sdk:e.sdk}),(0,s.jsx)(D,{sdk:e.sdk,enum:e.sdk.Tour.Event})]})})]})),(0,s.jsxs)(p,Object.assign({header:"Tour - State"},{children:[(0,s.jsx)(M,{name:"current step",observable:e.sdk.Tour.currentStep}),(0,s.jsx)(M,{name:"play state",observable:e.sdk.Tour.state}),(0,s.jsx)(M,{name:"transition",observable:e.sdk.Tour.transition})]}))]})}var Vt=function(e,t,n,r){return new(n||(n=Promise))((function(a,l){function i(e){try{s(r.next(e))}catch(e){l(e)}}function o(e){try{s(r.throw(e))}catch(e){l(e)}}function s(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,o)}s((r=r.apply(e,t||[])).next())}))};function Wt({sdk:e}){const t=(0,u.useRef)(null),[n,r]=(0,u.useState)(!0),[a,l]=(0,u.useState)(""),i=(0,u.useCallback)((e=>{r(!e.currentTarget.value)}),[]),o=(0,u.useCallback)((()=>Vt(this,void 0,void 0,(function*(){if(t.current){const n=yield e.View.createLayer(t.current.value);l("created: "+n.id)}}))),[e.View]);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)("div",{children:(0,s.jsx)("input",{ref:t,type:"text",onInput:i})}),(0,s.jsx)("div",{children:(0,s.jsx)("button",Object.assign({onClick:o,disabled:n},{children:"Create"}))}),(0,s.jsx)("div",{children:(0,s.jsx)("textarea",{style:{height:"6em"},readOnly:!0,value:a})})]})}function $t({selectedView:e}){var t;const n=(0,u.useRef)(null),r=(0,u.useCallback)((()=>{var t,r;e&&e.setActive(null!==(r=null===(t=n.current)||void 0===t?void 0:t.checked)&&void 0!==r&&r)}),[e]);return(0,s.jsxs)(u.Fragment,{children:[(0,s.jsxs)("div",{children:["selected: ",(0,s.jsx)("input",{type:"text",value:null!==(t=null==e?void 0:e.id)&&void 0!==t?t:"None",disabled:!0})]}),(0,s.jsxs)("div",{children:[(0,s.jsx)("label",Object.assign({htmlFor:"view-start-return"},{children:"Return to Start?"})),(0,s.jsx)("input",{ref:n,id:"view-start-return",type:"checkbox"})]}),(0,s.jsx)("div",{children:(0,s.jsx)("button",Object.assign({onClick:r},{children:"Activate"}))})]})}function Gt({selectedLayer:e}){var t;const n=(0,u.useCallback)((t=>{e&&e.toggle(t)}),[e]);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)("div",{children:["selected: ",(0,s.jsx)("input",{type:"text",value:null!==(t=null==e?void 0:e.id)&&void 0!==t?t:"None",disabled:!0})]}),(0,s.jsx)("div",{children:(0,s.jsx)("button",Object.assign({onClick:()=>n(!0)},{children:"Toggle On"}))}),(0,s.jsx)("div",{children:(0,s.jsx)("button",Object.assign({onClick:()=>n(!1)},{children:"Toggle Off"}))})]})}var Kt=function(e,t,n,r){return new(n||(n=Promise))((function(a,l){function i(e){try{s(r.next(e))}catch(e){l(e)}}function o(e){try{s(r.throw(e))}catch(e){l(e)}}function s(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,o)}s((r=r.apply(e,t||[])).next())}))};const Qt={display:"inline-block",width:"50px"};function Yt({selectedView:e,selectedLayer:t}){var n,r;const[a,l]=(0,u.useState)(""),i=(0,u.useCallback)((()=>Kt(this,void 0,void 0,(function*(){if(l(""),e&&t)try{yield e.addLayer(t),l("OK")}catch(e){l("[addLayer] Error:"+e)}else l("not ready")}))),[t,e]),o=(0,u.useCallback)((()=>Kt(this,void 0,void 0,(function*(){if(l(""),e&&t)try{yield e.removeLayer(t),l("OK")}catch(e){l("[removeLayer] Error:"+e)}else l("not ready")}))),[t,e]),c=(0,u.useCallback)((()=>Kt(this,void 0,void 0,(function*(){l(e&&t?e.hasLayer(t).toString():"not ready")}))),[t,e]);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)("div",{children:[(0,s.jsx)("span",Object.assign({style:Qt},{children:"View:"})),(0,s.jsx)("input",{type:"text",value:null!==(n=null==e?void 0:e.id)&&void 0!==n?n:"None",disabled:!0})]}),(0,s.jsxs)("div",{children:[(0,s.jsx)("span",Object.assign({style:Qt},{children:"Layer:"})),(0,s.jsx)("input",{type:"text",value:null!==(r=null==t?void 0:t.id)&&void 0!==r?r:"None",disabled:!0})]}),(0,s.jsxs)("div",{children:[(0,s.jsx)("button",Object.assign({style:{width:"70px"},onClick:i},{children:"Add"})),(0,s.jsx)("button",Object.assign({style:{width:"70px"},onClick:o},{children:"Remove"})),(0,s.jsx)("button",Object.assign({style:{width:"70px"},onClick:c},{children:"Has"}))]}),(0,s.jsx)("div",{children:(0,s.jsx)("textarea",{style:{width:"100%",height:"6em"},value:a,disabled:!0})})]})}function Xt({sdk:e,selectedLayer:t,selectLayer:n}){const[r,a]=(0,u.useState)();return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(p,Object.assign({header:"View.views - Collection"},{children:(0,s.jsx)(_,{name:"views",collection:e.View.views})})),(0,s.jsx)(h,{label:"Views",collection:e.View.views,additionalProperties:["id","name","layers"],propertyTransforms:{layers:e=>[...e].map((e=>e.id))},onChanged:(e,t)=>a(t)}),(0,s.jsx)(p,Object.assign({header:"View.layers - Collection"},{children:(0,s.jsx)(_,{name:"layers",collection:e.View.layers})})),(0,s.jsx)(h,{label:"Layers",collection:e.View.layers,additionalProperties:["id","name"],onChanged:(e,t)=>n(t)}),(0,s.jsx)(p,Object.assign({header:"View - Current"},{children:(0,s.jsx)(M,{name:"current",observable:e.View.current})})),(0,s.jsx)(p,Object.assign({header:"View - Create Layer"},{children:(0,s.jsx)(Wt,{sdk:e})})),(0,s.jsx)(p,Object.assign({header:"View - Activate"},{children:(0,s.jsx)($t,{selectedView:r})})),(0,s.jsx)(p,Object.assign({header:"Layer - Toggle"},{children:(0,s.jsx)(Gt,{selectedLayer:t})})),(0,s.jsx)(p,Object.assign({header:"View.layers controls"},{children:(0,s.jsx)(Yt,{selectedView:r,selectedLayer:t})}))]})}function qt(e){return(0,s.jsx)(s.Fragment,{children:(0,s.jsxs)(p,Object.assign({header:"Viewmode - Transition"},{children:[(0,s.jsx)(M,{name:"viewmode current",observable:e.sdk.Mode.current}),(0,s.jsx)(M,{name:"viewmode transition",observable:e.sdk.Mode.transition})]}))})}function Jt({sdk:e}){const[t,n]=(0,u.useState)(""),[r,a]=(0,u.useState)(),[l,i]=(0,u.useState)({}),o=(0,u.useCallback)(((e,t)=>{i((n=>Object.assign(Object.assign({},n),{[e]:t})))}),[]);return(0,s.jsxs)(u.Fragment,{children:[(0,s.jsx)(b,{sdk:e,assets:l,setAssets:i,setSelectedAsset:n}),(0,s.jsx)(k,{sdk:e}),(0,s.jsx)(z,{sdk:e}),(0,s.jsx)(V,{sdk:e}),(0,s.jsx)(me,{sdk:e}),(0,s.jsx)(xe,{sdk:e,selectedAsset:t,addAsset:o}),(0,s.jsx)(Te,{sdk:e}),(0,s.jsx)(Pe,{sdk:e}),"Plugin"in e&&(0,s.jsx)(_e,{sdk:e}),(0,s.jsx)(ze,{sdk:e,selectedAsset:t,addAsset:o}),(0,s.jsx)(We,{sdk:e}),(0,s.jsx)($e,{sdk:e}),(0,s.jsx)(qe,{sdk:e}),(0,s.jsx)(Ze,{sdk:e}),(0,s.jsx)(at,{sdk:e}),(0,s.jsx)(dt,{sdk:e}),(0,s.jsx)(ft,{sdk:e}),"Tag"in e&&(0,s.jsx)(Mt,{sdk:e,selectedAsset:t,selectedLayer:r}),(0,s.jsx)(Ht,{sdk:e}),"View"in e&&(0,s.jsx)(Xt,{sdk:e,selectedLayer:r,selectLayer:a}),(0,s.jsx)(qt,{sdk:e})]})}(()=>{const e={}})();var Zt=function(e,t,n,r){return new(n||(n=Promise))((function(a,l){function i(e){try{s(r.next(e))}catch(e){l(e)}}function o(e){try{s(r.throw(e))}catch(e){l(e)}}function s(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,o)}s((r=r.apply(e,t||[])).next())}))};document.getElementById("control-root").innerHTML="<div>\n  <div class='drawer'>\n    <span class='drawer-label'>Mattertag</span>\n    <div>\n      <select id='mattertag-selector' class='mattertag-selector'>\n        <option disabled selected value />\n      </select>\n    </div>\n\n    \x3c!-- Mattertag Add --\x3e\n    <div class='controlPanel'>\n      <div class='controlPanelHeader'>Mattertag - Add</div>\n      <label for='tag-add-title'>Title:</label>\n      <input type='text' id='tag-add-title'>\n      <br>\n      <label for='tag-add-desc'>Desc:</label>\n      <textarea id='tag-add-desc'></textarea>\n      <br>\n      position:\n      <br>\n      <label for='tag-add-pos-x'>x: </label><input class='small-input' id='tag-add-pos-x' type='number' step='0.001' value='0'>\n      <label for='tag-add-pos-y'>y: </label><input class='small-input' id='tag-add-pos-y' type='number' step='0.001' value='0'>\n      <label for='tag-add-pos-z'>z: </label><input class='small-input' id='tag-add-pos-z' type='number' step='0.001' value='0'>\n      <br>\n      normal:\n      <br>\n      <label for='tag-add-norm-x'>x: </label><input class='small-input' id='tag-add-norm-x' type='number' step='0.001' value='0'>\n      <label for='tag-add-norm-y'>y: </label><input class='small-input' id='tag-add-norm-y' type='number' step='0.001' value='1'>\n      <label for='tag-add-norm-z'>z: </label><input class='small-input' id='tag-add-norm-z' type='number' step='0.001' value='0'>\n      <br>\n      media:\n      <br>\n      <label for='tag-add-mtype'>type:</label><select id='tag-add-mtype' class='mtag-media-type'></select>\n      <label for='tag-add-msrc'>src:</label><input type='text' id='tag-add-msrc'>\n      <br>\n      <button id='tag-add'>Add</button>\n    </div>\n\n    \x3c!-- Mattertag Move --\x3e\n    <div class='controlPanel'>\n      <div class='controlPanelHeader'>Mattertag - Move</div>\n      position:\n      <br>\n      <label for='tag-move-pos-x'>x: </label><input class='small-input' id='tag-move-pos-x' type='number' step='0.001' value='0'>\n      <label for='tag-move-pos-y'>y: </label><input class='small-input' id='tag-move-pos-y' type='number' step='0.001' value='0'>\n      <label for='tag-move-pos-z'>z: </label><input class='small-input' id='tag-move-pos-z' type='number' step='0.001' value='0'>\n      <br>\n      normal:\n      <br>\n      <label for='tag-move-norm-x'>x: </label><input class='small-input' id='tag-move-norm-x' type='number' step='0.001' value='0'>\n      <label for='tag-move-norm-y'>y: </label><input class='small-input' id='tag-move-norm-y' type='number' step='0.001' value='1'>\n      <label for='tag-move-norm-z'>z: </label><input class='small-input' id='tag-move-norm-z' type='number' step='0.001' value='0'>\n      <br>\n      <button id='tag-move'>Move</button>\n    </div>\n\n    \x3c!-- Mattertag Remove --\x3e\n    <div id='mattertag-controls' class='controlPanel'>\n      <div class='controlPanelHeader'>Mattertag - Remove</div>\n      <br />\n      <div>\n        <button id='mattertag-remove'>Remove Mattertag</button>\n      </div>\n    </div>\n\n    \x3c!-- Mattertag Editor --\x3e\n    <div class='controlPanel'>\n      <div class=\"controlPanelHeader\">Mattertag - Edit</div>\n      <table>\n        <tr>\n          <td><label for='tag-edit-title'>Title:</label></td>\n          <td><input type='text' id='tag-edit-title'></td>\n        </tr>\n        <tr>\n          <td><label for='tag-edit-media'>Media:</label></td>\n          <td><input type='text' id='tag-edit-media'></td>\n          <td><select id='tag-edit-mediatype' class='mtag-media-type'></select></td>\n        </tr>\n        <tr>\n          <td><label for='tag-edit-desc'>Desc:</label></td>\n          <td><textarea id='tag-edit-desc'></textarea></td>\n        </tr>\n      </table>\n      <button id='mattertag-edit'>Edit</button>\n    </div>\n\n    \x3c!-- Mattertag prevent --\x3e\n    <div class='controlPanel'>\n      <div class='controlPanelHeader'>Mattertag - Prevent Action</div>\n      checked => functionality allowed<br />unchecked => disallowed\n      <br />\n      <br />\n      <div>\n        <label for='tag-lock-bb'>Billboard:</label>\n        <input type='checkbox' id='tag-lock-bb' checked></td>\n      </div>\n      <div>\n        <label>Navigation:</label>\n        <input type='checkbox' id='tag-lock-nav' checked></td>\n      </div>\n    </div>\n\n    \x3c!-- Mattertag Color --\x3e\n    <div class='controlPanel'>\n      <div class='controlPanelHeader'>Mattertag - Color</div>\n      <br>\n      <label>Color</label>\n      <div>\n        <label for='tag-color-r'>r: </label><input class='small-input' id='tag-color-r' type='number' step='0.001' value='1'>\n      </div>\n      <div>\n        <label for='tag-color-g'>g: </label><input class='small-input' id='tag-color-g' type='number' step='0.001' value='0'>\n      </div>\n      <div>\n        <label for='tag-color-b'>b: </label><input class='small-input' id='tag-color-b' type='number' step='0.001' value='1'>\n      </div>\n      <br>\n      <button id='tag-edit-color'>Edit Color</button>\n    </div>\n\n    \x3c!-- Mattertag Opacity --\x3e\n    <div class='controlPanel'>\n      <div class='controlPanelHeader'>Mattertag - Edit Opacity</div>\n      <br />\n      <div>\n        <label for='mattertag-opacity'>Opacity:</label>\n        <input type='number' min='0' max='1' step='0.001' value='.5' id='mattertag-opacity'>\n      </div>\n      <div>\n        <button id='mattertag-opacity-edit'>Edit Opacity</button>\n      </div>\n    </div>\n\n    \x3c!-- Mattertag injection --\x3e\n    <div id=\"tagHTML\" class=\"controlPanel\">\n      <div class=\"controlPanelHeader\">Mattertag - Inject HTML</div>\n      <table height=\"100%\">\n        <tr>\n          <td>\n            <textarea id='injectedHTML'></textarea>\n          </td>\n        </tr>\n        <tr>\n          <td>\n            <div>\n              <table>\n                <tr>\n                  <td>Size:</td>\n                  <td><input type=\"text\" id=\"mattertag-html-w\" class=\"small-input\"></td>\n                  <td><input type=\"text\" id=\"mattertag-html-h\" class=\"small-input\"></td>\n                </tr>\n              </table>\n            </div>\n          </td>\n        </tr>\n        <tr>\n          <td><button id=\"injectHTML\">INJECT HTML</button></td>\n        </tr>\n      </table>\n    </div>\n\n    \x3c!-- Mattertag Navigation --\x3e\n    <div id='mattertag-controls' class='controlPanel'>\n      <div class='controlPanelHeader'>Mattertag - Navigate</div>\n      <br />\n      <div>\n        <select id='mattertag-navigation-type'>\n          <option value='FLY'>Fly</option>\n          <option value='FADEOUT'>Fade Out</option>\n          <option value='INSTANT'>Instant</option>\n        </select>\n      </div>\n      <div>\n        <label for='mattertag-navigation-force'>Force:</label>\n        <input id='mattertag-navigation-force' type='checkbox'></input>\n      </div>\n      <div>\n        <button id='navigateToTag'>Navigate</button>\n      </div>\n    </div>\n\n  </div>\n\n\n  \x3c!-- Mattertag Stem --\x3e\n  <div class='controlPanel'>\n    <div class='controlPanelHeader'>Mattertag - Stem</div>\n    <br>\n    <label>Editable Stem Properties</label>\n    <div>\n      <label for='stem-height'>Stem Height: </label><input class='small-input' id='stem-height' type='number' step='0.01' value='0.7'>\n    </div>\n    <input id='stem-visible' type='checkbox' checked>Visible</input>\n    <br>\n    <button id='tag-edit-stem'>Update Stem</button>\n  </div>\n\n\n  \x3c!-- Screenshots --\x3e\n  <div class='controlPanel'>\n    <button id=\"screenshot\">Screenshot</button>\n    <button id=\"equirectangle\">Equirectangular</button>\n    <br />\n    <br />\n    <img id='screenshot-preview'>\n  </div>\n\n  \x3c!-- Pose Observable --\x3e\n  <div id=\"playerPose\" class=\"controlPanel\">\n    <textarea id='pose'></textarea>\n    <br />\n    <button id=\"getPose\">Get Pose</button>\n  </div>\n\n  \x3c!-- Pointer Observable --\x3e\n  <div id=\"pointerInfo\" class=\"controlPanel\">\n    <textarea id='pointer'></textarea>\n    <br />\n    <button id=\"getPointer\">Toggle Pointer Data</button>\n  </div>\n\n  \x3c!-- Movement --\x3e\n  <div class=\"controlPanel navControls\">\n    <div class=\"controlPanelHeader\">Movement</div>\n    <br />\n    <table>\n      <tr>\n        <td></td>\n        <td><button id=\"FORWARD\" data-direction='FORWARD' class=\"navButton\">Fwd</button></td>\n        <td></td>\n      </tr>\n       <tr>\n        <td><button id=\"LEFT\" data-direction='LEFT' class=\"navButton\">Left</button></td>\n        <td></td>\n        <td><button id=\"RIGHT\" data-direction='RIGHT' class=\"navButton\">Right</button></td>\n      </tr>\n       <tr>\n        <td></td>\n        <td><button id=\"BACK\" data-direction='BACK' class=\"navButton\">Back</button></td>\n        <td></td>\n      </tr>\n      <tr>\n        <td><input type=\"text\" id=\"positionX\" name=\"panX\" class=\"rotationbutton\"></td>\n        <td><input type=\"text\" id=\"positionZ\" name=\"panZ\" class=\"rotationbutton\"></td>\n        <td><button id=\"pan\">Pan</button></td>\n        </tr>\n      </tr>\n    </table>\n  </div>\n\n  \x3c!-- Rotation Controls --\x3e\n  <div class=\"controlPanel rotationControls\">\n    <div class=\"controlPanelHeader\">Rotation</div>\n    <br />\n    <table>\n      <tr>\n        <td></td>\n        <td><button id=\"tiltUp\" data-direction='UP' class=\"rotationbutton\">Up</button></td>\n        <td></td>\n      </tr>\n       <tr>\n        <td><button id=\"rotateLeft\" data-direction='LEFT' class=\"rotationbutton\">Left</button></td>\n        <td><input type=\"text\" id=\"rotation\" name=\"rotation\" class=\"rotationbutton\"></td>\n        <td><button id=\"rotateRight\" data-direction='RIGHT' class=\"rotationbutton\">Right</button></td>\n      </tr>\n       <tr>\n        <td></td>\n        <td><button id=\"tiltDown\" data-direction='DOWN' class=\"rotationbutton\">Down</button></td>\n        <td></td>\n      </tr>\n    </table>\n    <br />\n    <input type=\"text\" id=\"rotationX\" name=\"rotationX\" class=\"rotationbutton\">&nbsp;&nbsp;\n    <input type=\"text\" id=\"rotationY\" name=\"rotationY\" class=\"rotationbutton\">&nbsp;&nbsp;\n    <button id=\"freeRotate\" class=\"rotationbutton\">Free</button>\n    <button id=\"orient\" class=\"rotationbutton\">Orient</button>\n    <input type=\"text\" id=\"rotationSpeed\" name=\"rotationSpeed\" class=\"rotationbutton\">&nbsp;&nbsp;\n  </div>\n\n  \x3c!-- Zoom Controls --\x3e\n  <div class=\"controlPanel zoomControls\">\n    <div class=\"controlPanelHeader\">Zoom</div>\n    <br />\n    <table>\n      <tr>\n        <td>Current Zoom:</td>\n        <td><label id='current-zoom-level'>1</label></td>\n\n      </tr>\n      <tr>\n        <td><input type=\"text\" id=\"zoom-by-val\" name=\"zoom-by-val\" class=\"rotationbutton\"></td>\n        <td><button id=\"zoom-by\" class=\"\">Zoom By</button></td>\n      </tr>\n      <tr>\n        <td><input type=\"text\" id=\"zoom-to-val\" name=\"zoom-to-val\" class=\"rotationbutton\"></td>\n        <td><button id=\"zoom-to\" class=\"\">Zoom To</button></td>\n      </tr>\n      <tr>\n        <td></td>\n        <td><button id=\"zoom-reset\" class=\"rotationbutton\">Reset</button></td>\n      </tr>\n    </table>\n  </div>\n\n  \x3c!-- Mode Controls --\x3e\n  <div class=\"controlPanel modeControls\">\n    <div class=\"controlPanelHeader\">Mode</div>\n    <br />\n    <table>\n      <tr>\n        <td></td>\n        <td><button id=\"INSIDE\" class=\"modeButton\">Inside</button></td>\n        <td></td>\n      </tr>\n      <tr>\n        <td></td>\n        <td><button id=\"DOLLHOUSE\" class=\"modeButton\">Dollhouse</button></td>\n        <td></td>\n      </tr>\n      <tr>\n        <td></td>\n        <td><button id=\"FLOORPLAN\" class=\"modeButton\">Floorplan</button></td>\n        <td></td>\n      </tr>\n      <tr>\n        <td></td>\n        <td>\n          <p>\n            Transition:\n            <select id=\"modeStyles\">\n              <option value='FLY'>Fly</option>\n              <option value='FADEOUT'>Fade to black</option>\n              <option value='INSTANT'>Instant</option>\n            </select>\n          </p>\n        </td>\n        <td></td>\n      </tr>\n    </table>\n  </div>\n\n  \x3c!-- sweep Controls --\x3e\n  <div class=\"controlPanel modeControls\">\n    <div class=\"controlPanelHeader\">Fly To Sweep By ID</div>\n    <br />\n    <table>\n      <tr>\n        <td>\n        <p>\n          Sweep:\n          <select class='sweep-selector' id='sweepIds'></select>\n        </p>\n        </td>\n      </tr>\n      <tr>\n        <td>\n        <p>\n          Rotation:\n          <input type=\"text\" id=\"sweepRotationX\" name=\"rotationX\" class=\"rotationbutton\">&nbsp;&nbsp;\n          <input type=\"text\" id=\"sweepRotationY\" name=\"rotationY\" class=\"rotationbutton\">&nbsp;&nbsp;\n        </p>\n        </td>\n      </tr>\n      <tr>\n        <td>\n        <p>\n          Transition:\n          <select id=\"flyStyles\">\n            <option value='FLY'>Fly</option>\n            <option value='FADEOUT'>Fade to black</option>\n            <option value='INSTANT'>Instant</option>\n          </select>\n        </p>\n        </td>\n      </tr>\n      <tr>\n        <td>\n        <p>\n          Transition Time:\n          <input type=\"text\" id=\"sweepTransitionTime\">&nbsp;&nbsp;\n        </p>\n        </td>\n      </tr>\n      <tr>\n        <td>\n          <button id=\"moveToSweep\" class=\"sweepButton\">Move To Sweep</button>\n        </td>\n      </tr>\n    </table>\n  </div>\n\n  \x3c!-- Sweep enable --\x3e\n  <div class=\"controlPanel\">\n    <div class=\"controlPanelHeader\">Sweep - Enable</div>\n    <br>\n    <select class='sweep-selector' id='sweep-enable-selector'></select>\n    <br>\n    <input id='sweep-enable' type='checkbox' checked>Enabled</input>\n  </div>\n\n  \x3c!-- Tour Controls --\x3e\n  <div id=\"tour-controls\" class=\"controlPanel\">\n    <div class='controlPanelHeader'>Tour Controls</div>\n    <table>\n      <tr>\n        <td></td>\n        <td><button id=\"tourStartBtn\">Start Tour</button></td>\n        <td></td>\n      </tr>\n      <tr>\n        <td></td>\n        <td><button id=\"tourStopBtn\">Stop Tour</button></td>\n        <td></td>\n      </tr>\n      <tr>\n        <td></td>\n        <td><label for='tour-stepped'>Index to Step</td>\n        <td><input type=\"text\" id=\"tour-stepped\" name=\"tour-stepped\"></td>\n        <td></td>\n      </tr>\n      <tr>\n        <td></td>\n        <td><button id=\"tourSteppedBtn\">Stepped Tour</button></td>\n        <td></td>\n      </tr>\n      <tr>\n        <td></td>\n        <td><button id=\"tourPrevBtn\">Prev</button></td>\n        <td></td>\n      </tr>\n      <tr>\n        <td></td>\n        <td><button id=\"tourNextBtn\">Next</button></td>\n        <td></td>\n      </tr>\n    </table>\n    <br />\n  </div>\n\n  <div id='root'></div>\n</div>\n";const en=document.getElementById("showcase"),tn=new URLSearchParams(window.location.search),nn={host:tn.get("host")||tn.get("apiHost")||window.location.origin,sdkKey:tn.get("sdkKey")||tn.get("applicationKey")||"u2mw9w1qe1sasr0sbiucrgceb",bundleVersion:tn.get("bundleVersion")||"",useDirectMessages:!(!tn.get("bundleVersion")&&!tn.get("dm")||"0"===tn.get("dm")),sdkVersion:tn.get("sdkVersion")||"2.0.1-0-g64e7e88",workshop:tn.get("workshop")||"",connectionDelay:parseInt(tn.get("delay")||"0",10),provider:tn.get("provider")||void 0};function rn(){return Zt(this,void 0,void 0,(function*(){var e;if(nn.connectionDelay>0&&(yield(e=nn.connectionDelay,new Promise(((t,n)=>{setTimeout(t,e)})))),nn.useDirectMessages){const e=en.contentWindow,t=e.MP_SDK;try{return yield t.connect(e,{provider:nn.provider})}catch(n){return yield t.connect(e,nn.sdkKey)}}if("local"===nn.sdkVersion){const{connect:e}=yield a.e(562).then(a.bind(a,562));return yield e(en,{provider:nn.provider})}try{return yield window.MP_SDK.connect(en,{provider:nn.provider})}catch(e){return yield window.MP_SDK.connect(en,nn.sdkKey,"")}}))}function an(){var e;return Zt(this,void 0,void 0,(function*(){try{nn.useDirectMessages||"local"===nn.sdkVersion||(yield(t=nn.sdkVersion,new Promise((e=>{console.log("Loading SDK bootstrap version:",t);var n="https://static.matterport.com/showcase-sdk/"+t+"/sdk.js",r=document.createElement("script");r.type="text/javascript",r.src=n,r.onload=e,document.head.appendChild(r)}))));const e=yield rn();window.SDK_INSTANCE=e,o(e,en),function(e){const t=document.getElementById("react-root");t&&(0,c.s)(t).render((0,s.jsx)("div",{children:(0,s.jsx)(Jt,{sdk:e})}))}(e)}catch(e){console.error(e)}var t;window.THREE=null===(e=en.contentWindow)||void 0===e?void 0:e.THREE}))}!function(){Zt(this,void 0,void 0,(function*(){if(!tn.get("m")&&!tn.get("model")){const e="No model specified. Specify a model using ?m=[modelSid]",t=document.getElementById("status");throw t.classList.add("error"),t.innerText=e,Error(e)}nn.bundleVersion?function(e,t,n){const r=t.bundleVersion,a=r.startsWith("http");e.onload=n;let l="";l+=a?r+"/showcase.html":"https://static.matterport.com/showcase-sdk/bundle/"+r+"/showcase.html";const i=new URLSearchParams(window.location.search);i.set("applicationKey",t.sdkKey),i.set("apiHost",t.host),e.src=l+"?"+decodeURIComponent(i)}(en,nn,an):function(e,t,n){e.onload=n;const r=t.workshop?"/work/":"/show/",a=new URLSearchParams(window.location.search);a.set("applicationKey",t.sdkKey),e.src=t.host+r+"?"+decodeURIComponent(a.toString())}(en,nn,an)}))}()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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cUIsaUJBRXJCLHFEQUF1REEsRUFBc0IsaUJBR3RGLE1BQU03QixFQUFTLElBQUlDLGdCQUFnQnArRCxPQUFPMmYsU0FBUytDLFFBQ25EeTdDLEVBQU92NUQsSUFBSSxpQkFBa0J5NUQsRUFBT0UsUUFDcENKLEVBQU92NUQsSUFBSSxVQUFXeTVELEVBQU9DLE1BQzdCeG9CLEVBQWdCclIsSUFBTUEsRUFBTSxJQUFNMDdCLG1CQUFtQmhDLEdEcUZuRGlDLENBQW1CdHFCLEdBQWlCdW9CLEdBQVFhLElDNUd6QyxTQUFzQnBwQixFQUFpQnVvQixFQUFRMEIsR0FDcERqcUIsRUFBZ0J2QyxPQUFTd3NCLEVBQ3pCLE1BQU1NLEVBQWFoQyxFQUFPTSxTQUFXLFNBQVcsU0FDMUNSLEVBQVMsSUFBSUMsZ0JBQWdCcCtELE9BQU8yZixTQUFTK0MsUUFDbkR5N0MsRUFBT3Y1RCxJQUFJLGlCQUFrQnk1RCxFQUFPRSxRQUNwQ3pvQixFQUFnQnJSLElBQU00NUIsRUFBT0MsS0FBTytCLEVBQWEsSUFBTUYsbUJBQW1CaEMsRUFBTzkwRCxZRHdHL0VpM0QsQ0FBYXhxQixHQUFpQnVvQixHQUFRYSxPQVgxQyIsInNvdXJjZXMiOlsid2VicGFjazovLy93ZWJwYWNrL3J1bnRpbWUvbG9hZCBzY3JpcHQiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9janMvcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vY2xpZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2Nqcy9yZWFjdC1qc3gtcnVudGltZS5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QvY2pzL3JlYWN0LnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QvanN4LXJ1bnRpbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NjaGVkdWxlci9janMvc2NoZWR1bGVyLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zY2hlZHVsZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovLy93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vL3dlYnBhY2svcnVudGltZS9lbnN1cmUgY2h1bmsiLCJ3ZWJwYWNrOi8vL3dlYnBhY2svcnVudGltZS9nZXQgamF2YXNjcmlwdCBjaHVuayBmaWxlbmFtZSIsIndlYnBhY2s6Ly8vd2VicGFjay9ydW50aW1lL2dldCBtaW5pLWNzcyBjaHVuayBmaWxlbmFtZSIsIndlYnBhY2s6Ly8vd2VicGFjay9ydW50aW1lL2dsb2JhbCIsIndlYnBhY2s6Ly8vd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly8vd2VicGFjay9ydW50aW1lL21ha2UgbmFtZXNwYWNlIG9iamVjdCIsIndlYnBhY2s6Ly8vd2VicGFjay9ydW50aW1lL3B1YmxpY1BhdGgiLCJ3ZWJwYWNrOi8vL3dlYnBhY2svcnVudGltZS9qc29ucCBjaHVuayBsb2FkaW5nIiwid2VicGFjazovLy8uL3BhY2thZ2VzL3Nkay90ZXN0LXBhZ2Uvc3JjL2NvbnRyb2xzLmpzIiwid2VicGFjazovLy8uL3BhY2thZ2VzL3Nkay90ZXN0LXBhZ2Uvc3JjL2NvbXBvbmVudHMvQ29sbGVjdGlvblNlbGVjdG9yLnRzeCIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy9zZGsvdGVzdC1wYWdlL3NyYy9jb21wb25lbnRzL0NvbnRyb2xQYW5lbC50c3giLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMvc2RrL3Rlc3QtcGFnZS9zcmMvY29tcG9uZW50cy9Db2xsZWN0aW9uSW5zcGVjdG9yLnRzeCIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy9zZGsvdGVzdC1wYWdlL3NyYy9jb21wb25lbnRzL0Fzc2V0L1JlZ2lzdGVyLnRzeCIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy9zZGsvdGVzdC1wYWdlL3NyYy9jb21wb25lbnRzL0Fzc2V0L2luZGV4LnRzeCIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy9zZGsvdGVzdC1wYWdlL3NyYy9jb21wb25lbnRzL0Fzc2V0L0Fzc2V0Q29sbGVjdGlvbi50cyIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy9zZGsvdGVzdC1wYWdlL3NyYy9jb21wb25lbnRzL0NvbnZlcnNpb25Xb3JsZFRvU2NyZWVuLnRzeCIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy9zZGsvdGVzdC1wYWdlL3NyYy9jb21wb25lbnRzL0NvbnZlcnNpb24udHN4Iiwid2VicGFjazovLy8uL3BhY2thZ2VzL3Nkay90ZXN0LXBhZ2Uvc3JjL2NvbXBvbmVudHMvRmxvb3JHZXREYXRhLnRzeCIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy9zZGsvdGVzdC1wYWdlL3NyYy9jb21wb25lbnRzL0Zsb29yTW92ZVRvLnRzeCIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy9zZGsvdGVzdC1wYWdlL3NyYy9jb21wb25lbnRzL0Zsb29yU2hvd0FsbC50c3giLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMvc2RrL3Rlc3QtcGFnZS9zcmMvY29tcG9uZW50cy9Sb3dTcGFjZXIudHN4Iiwid2VicGFjazovLy8uL3BhY2thZ2VzL3Nkay90ZXN0LXBhZ2Uvc3JjL2NvbXBvbmVudHMvT2JzZXJ2YWJsZUNvbGxlY3Rpb24udHN4Iiwid2VicGFjazovLy8uL3BhY2thZ2VzL3Nkay90ZXN0LXBhZ2Uvc3JjL2NvbXBvbmVudHMvT2JzZXJ2YWJsZS50c3giLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMvc2RrL3Rlc3QtcGFnZS9zcmMvY29tcG9uZW50cy9FdmVudC50c3giLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMvc2RrL3Rlc3QtcGFnZS9zcmMvY29tcG9uZW50cy9GbG9vci50c3giLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMvc2RrL3Rlc3QtcGFnZS9zcmMvY29tcG9uZW50cy9MYWJlbEdldERhdGEudHN4Iiwid2VicGFjazovLy8uL3BhY2thZ2VzL3Nkay90ZXN0LXBhZ2Uvc3JjL2NvbXBvbmVudHMvTGFiZWwudHN4Iiwid2VicGFjazovLy8uL3BhY2thZ2VzL3Nkay90eXBlcy90eXBlcy9hcHAudHMiLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMvc2RrL3R5cGVzL3R5cGVzL2Fzc2V0LnRzIiwid2VicGFjazovLy8uL3BhY2thZ2VzL3Nkay90eXBlcy90eXBlcy9jYW1lcmEudHMiLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMvc2RrL3R5cGVzL3R5cGVzL2Zsb29yLnRzIiwid2VicGFjazovLy8uL3BhY2thZ2VzL3Nkay90eXBlcy90eXBlcy9ncmFwaC50cyIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy9zZGsvdHlwZXMvdHlwZXMvbGFiZWwudHMiLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMvc2RrL3R5cGVzL3R5cGVzL2xpbmsudHMiLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMvc2RrL3R5cGVzL3R5cGVzL21hdHRlcnRhZy50cyIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy9zZGsvdHlwZXMvdHlwZXMvbW9kZS50cyIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy9zZGsvdHlwZXMvdHlwZXMvbW9kZWwudHMiLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMvc2RrL3R5cGVzL3R5cGVzL3BvaW50ZXIudHMiLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMvc2RrL3R5cGVzL3R5cGVzL3Jvb20udHMiLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMvc2RrL3R5cGVzL3R5cGVzL3NlbnNvci50cyIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy9zZGsvdHlwZXMvdHlwZXMvc3dlZXAudHMiLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMvc2RrL3R5cGVzL3R5cGVzL3RhZy50cyIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy9zZGsvdHlwZXMvdHlwZXMvdG91ci50cyIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy9zZGsvdHlwZXMvdHlwZXMvc2NlbmUudHMiLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMvc2RrL3R5cGVzL3NoYXJlL0tleXMudHMiLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMvc2RrL3R5cGVzL3NoYXJlL0tleVN0YXRlLnRzIiwid2VicGFjazovLy8uL3BhY2thZ2VzL3Nkay90eXBlcy9zaGFyZS9Qb2ludGVyQnV0dG9uLnRzIiwid2VicGFjazovLy8uL3BhY2thZ2VzL3Nkay90ZXN0LXBhZ2Uvc3JjL2NvbXBvbmVudHMvTGlua0NyZWF0ZS50c3giLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMvc2RrL3Rlc3QtcGFnZS9zcmMvY29tcG9uZW50cy9MaW5rUG9saWN5LnRzeCIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy9zZGsvdGVzdC1wYWdlL3NyYy9jb21wb25lbnRzL0xpbmsudHN4Iiwid2VicGFjazovLy8uL3BhY2thZ2VzL3Nkay90ZXN0LXBhZ2Uvc3JjL2NvbXBvbmVudHMvTWF0dGVydGFnL0VkaXRJY29uLnRzeCIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy9zZGsvdGVzdC1wYWdlL3NyYy9jb21wb25lbnRzL01hdHRlcnRhZy9SZWdpc3Rlckljb24udHN4Iiwid2VicGFjazovLy8uL3BhY2thZ2VzL3Nkay90ZXN0LXBhZ2Uvc3JjL2NvbXBvbmVudHMvTWF0dGVydGFnL2luZGV4LnRzeCIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy9zZGsvdGVzdC1wYWdlL3NyYy9jb21wb25lbnRzL01lYXN1cmVtZW50c0dldERhdGEudHN4Iiwid2VicGFjazovLy8uL3BhY2thZ2VzL3Nkay90ZXN0LXBhZ2Uvc3JjL2NvbXBvbmVudHMvTWVhc3VyZW1lbnRzL1RvZ2dsZS50c3giLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMvc2RrL3Rlc3QtcGFnZS9zcmMvY29tcG9uZW50cy9NZWFzdXJlbWVudHMvaW5kZXgudHN4Iiwid2VicGFjazovLy8uL3BhY2thZ2VzL3Nkay90ZXN0LXBhZ2Uvc3JjL2NvbXBvbmVudHMvTW9kZWxHZXREYXRhLnRzeCIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy9zZGsvdGVzdC1wYWdlL3NyYy9jb21wb25lbnRzL01vZGVsR2V0RGV0YWlscy50c3giLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMvc2RrL3Rlc3QtcGFnZS9zcmMvY29tcG9uZW50cy9Nb2RlbC50c3giLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMvc2RrL3Rlc3QtcGFnZS9zcmMvY29tcG9uZW50cy9QbHVnaW5Mb2FkLnRzeCIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy9zZGsvdGVzdC1wYWdlL3NyYy9jb21wb25lbnRzL1BsdWdpbi50c3giLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMvc2RrL3Rlc3QtcGFnZS9zcmMvY29tcG9uZW50cy9Qb2ludGVyL0VkaXRUZXh0dXJlLnRzeCIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy9zZGsvdGVzdC1wYWdlL3NyYy9jb21wb25lbnRzL1BvaW50ZXIvUmVnaXN0ZXJUZXh0dXJlLnRzeCIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy9zZGsvdGVzdC1wYWdlL3NyYy9jb21wb25lbnRzL1BvaW50ZXIvaW5kZXgudHN4Iiwid2VicGFjazovLy8uL3BhY2thZ2VzL3Nkay90ZXN0LXBhZ2Uvc3JjL2NvbXBvbmVudHMvUmVuZGVyZXJHZXRTY3JlZW5Qb3NpdGlvbi50c3giLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMvc2RrL3Rlc3QtcGFnZS9zcmMvY29tcG9uZW50cy9SZW5kZXJlckdldFdvcmxkUG9zaXRpb25EYXRhLnRzeCIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy9zZGsvdGVzdC1wYWdlL3NyYy9jb21wb25lbnRzL1JlbmRlcmVyLnRzeCIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy9zZGsvdGVzdC1wYWdlL3NyYy9jb21wb25lbnRzL1Jvb20udHN4Iiwid2VicGFjazovLy8uL3BhY2thZ2VzL3Nkay90ZXN0LXBhZ2Uvc3JjL2NvbXBvbmVudHMvU2NlbmVQYXRoLnRzeCIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy9zZGsvdGVzdC1wYWdlL3NyYy9jb21wb25lbnRzL1NjZW5lRGVzZXJpYWxpemUudHN4Iiwid2VicGFjazovLy8uL3BhY2thZ2VzL3Nkay90ZXN0LXBhZ2Uvc3JjL2NvbXBvbmVudHMvU2NlbmUudHN4Iiwid2VicGFjazovLy8uL3BhY2thZ2VzL3Nkay90ZXN0LXBhZ2Uvc3JjL2NvbXBvbmVudHMvU2Vuc29yQWRkU291cmNlLnRzeCIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy9zZGsvdGVzdC1wYWdlL3NyYy9jb21wb25lbnRzL1NlbnNvci50c3giLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMvc2RrL3Rlc3QtcGFnZS9zcmMvY29tcG9uZW50cy9TZXR0aW5nc0dldC50c3giLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMvc2RrL3Rlc3QtcGFnZS9zcmMvY29tcG9uZW50cy9TZXR0aW5nc1VwZGF0ZS50c3giLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMvc2RrL3Rlc3QtcGFnZS9zcmMvY29tcG9uZW50cy9TZXR0aW5ncy50c3giLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMvc2RrL3Rlc3QtcGFnZS9zcmMvY29tcG9uZW50cy9Td2VlcERpc2FibGUudHN4Iiwid2VicGFjazovLy8uL3BhY2thZ2VzL3Nkay90ZXN0LXBhZ2Uvc3JjL2NvbXBvbmVudHMvU3dlZXBFbmFibGUudHN4Iiwid2VicGFjazovLy8uL3BhY2thZ2VzL3Nkay90ZXN0LXBhZ2Uvc3JjL2NvbXBvbmVudHMvU3dlZXBNb2RpZnlOZWlnaGJvcnMudHN4Iiwid2VicGFjazovLy8uL3BhY2thZ2VzL3Nkay90ZXN0LXBhZ2Uvc3JjL2NvbXBvbmVudHMvU3dlZXAudHN4Iiwid2VicGFjazovLy8uL3BhY2thZ2VzL3Nkay90ZXN0LXBhZ2Uvc3JjL2NvbXBvbmVudHMvU3dlZXBHcmFwaC50c3giLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMvc2RrL3Rlc3QtcGFnZS9zcmMvY29tcG9uZW50cy9UYWcvTGF5ZXJTdXBwb3J0LnRzeCIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy9zZGsvdGVzdC1wYWdlL3NyYy9jb21wb25lbnRzL1RhZy9BZGQudHN4Iiwid2VicGFjazovLy8uL3BhY2thZ2VzL3Nkay90ZXN0LXBhZ2Uvc3JjL2NvbXBvbmVudHMvVGFnL0FsbG93QWN0aW9uLnRzeCIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy9zZGsvdGVzdC1wYWdlL3NyYy9jb21wb25lbnRzL1RhZy9BdHRhY2gudHN4Iiwid2VicGFjazovLy8uL3BhY2thZ2VzL3Nkay90ZXN0LXBhZ2Uvc3JjL2NvbXBvbmVudHMvVGFnL0VkaXRCaWxsYm9hcmQudHN4Iiwid2VicGFjazovLy8uL3BhY2thZ2VzL3Nkay90ZXN0LXBhZ2Uvc3JjL2NvbXBvbmVudHMvVGFnL0VkaXRDb2xvci50c3giLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMvc2RrL3Rlc3QtcGFnZS9zcmMvY29tcG9uZW50cy9UYWcvRWRpdFN0ZW0udHN4Iiwid2VicGFjazovLy8uL3BhY2thZ2VzL3Nkay90ZXN0LXBhZ2Uvc3JjL2NvbXBvbmVudHMvVGFnL0VkaXRJY29uLnRzeCIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy9zZGsvdGVzdC1wYWdlL3NyYy9jb21wb25lbnRzL1RhZy9FZGl0T3BhY2l0eS50c3giLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMvc2RrL3Rlc3QtcGFnZS9zcmMvY29tcG9uZW50cy9UYWcvTW92ZS50c3giLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMvc2RrL3Rlc3QtcGFnZS9zcmMvY29tcG9uZW50cy9UYWcvT3Blbi50c3giLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMvc2RrL3Rlc3QtcGFnZS9zcmMvY29tcG9uZW50cy9UYWcvUmVnaXN0ZXJBdHRhY2htZW50LnRzeCIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy9zZGsvdGVzdC1wYWdlL3NyYy9jb21wb25lbnRzL1RhZy9SZWdpc3RlclNhbmRib3gudHN4Iiwid2VicGFjazovLy8uL3BhY2thZ2VzL3Nkay90ZXN0LXBhZ2Uvc3JjL2NvbXBvbmVudHMvVGFnL1JlbW92ZS50c3giLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMvc2RrL3Rlc3QtcGFnZS9zcmMvY29tcG9uZW50cy9UYWcvVG9nZ2xlU2V0dGluZy50c3giLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMvc2RrL3Rlc3QtcGFnZS9zcmMvY29tcG9uZW50cy9UYWcvdGFnU29ydC50cyIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy9zZGsvdGVzdC1wYWdlL3NyYy9jb21wb25lbnRzL1RhZy9JbXBvcnRUYWdzLnRzeCIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy9zZGsvdGVzdC1wYWdlL3NyYy9jb21wb25lbnRzL1RhZy9TYXZlVG9MYXllci50c3giLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMvc2RrL3Rlc3QtcGFnZS9zcmMvY29tcG9uZW50cy9UYWcvaW5kZXgudHN4Iiwid2VicGFjazovLy8uL3BhY2thZ2VzL3Nkay90ZXN0LXBhZ2Uvc3JjL2NvbXBvbmVudHMvVG91ckdldERhdGEudHN4Iiwid2VicGFjazovLy8uL3BhY2thZ2VzL3Nkay90ZXN0LXBhZ2Uvc3JjL2NvbXBvbmVudHMvVG91ci50c3giLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMvc2RrL3Rlc3QtcGFnZS9zcmMvY29tcG9uZW50cy9WaWV3L0NyZWF0ZUxheWVyLnRzeCIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy9zZGsvdGVzdC1wYWdlL3NyYy9jb21wb25lbnRzL1ZpZXcvQWN0aXZhdGVWaWV3LnRzeCIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy9zZGsvdGVzdC1wYWdlL3NyYy9jb21wb25lbnRzL1ZpZXcvVG9nZ2xlTGF5ZXIudHN4Iiwid2VicGFjazovLy8uL3BhY2thZ2VzL3Nkay90ZXN0LXBhZ2Uvc3JjL2NvbXBvbmVudHMvVmlldy9MYXllckNvbnRyb2xzLnRzeCIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy9zZGsvdGVzdC1wYWdlL3NyYy9jb21wb25lbnRzL1ZpZXcvaW5kZXgudHN4Iiwid2VicGFjazovLy8uL3BhY2thZ2VzL3Nkay90ZXN0LXBhZ2Uvc3JjL2NvbXBvbmVudHMvVmlld21vZGUudHN4Iiwid2VicGFjazovLy8uL3BhY2thZ2VzL3Nkay90ZXN0LXBhZ2Uvc3JjL2NvbXBvbmVudHMvUmVhY3RSb290LnRzeCIsIndlYnBhY2s6Ly8vLi9jd2Yvc3JjL3V0aWwvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMvc2RrL3Rlc3QtcGFnZS9zcmMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vcGFja2FnZXMvc2RrL3Rlc3QtcGFnZS9zcmMvdXRpbHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGluUHJvZ3Jlc3MgPSB7fTtcbnZhciBkYXRhV2VicGFja1ByZWZpeCA9IFwibXBfd2ViZ2w6XCI7XG4vLyBsb2FkU2NyaXB0IGZ1bmN0aW9uIHRvIGxvYWQgYSBzY3JpcHQgdmlhIHNjcmlwdCB0YWdcbl9fd2VicGFja19yZXF1aXJlX18ubCA9ICh1cmwsIGRvbmUsIGtleSwgY2h1bmtJZCkgPT4ge1xuXHRpZihpblByb2dyZXNzW3VybF0pIHsgaW5Qcm9ncmVzc1t1cmxdLnB1c2goZG9uZSk7IHJldHVybjsgfVxuXHR2YXIgc2NyaXB0LCBuZWVkQXR0YWNoO1xuXHRpZihrZXkgIT09IHVuZGVmaW5lZCkge1xuXHRcdHZhciBzY3JpcHRzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJzY3JpcHRcIik7XG5cdFx0Zm9yKHZhciBpID0gMDsgaSA8IHNjcmlwdHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBzID0gc2NyaXB0c1tpXTtcblx0XHRcdGlmKHMuZ2V0QXR0cmlidXRlKFwic3JjXCIpID09IHVybCB8fCBzLmdldEF0dHJpYnV0ZShcImRhdGEtd2VicGFja1wiKSA9PSBkYXRhV2VicGFja1ByZWZpeCArIGtleSkgeyBzY3JpcHQgPSBzOyBicmVhazsgfVxuXHRcdH1cblx0fVxuXHRpZighc2NyaXB0KSB7XG5cdFx0bmVlZEF0dGFjaCA9IHRydWU7XG5cdFx0c2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XG5cblx0XHRzY3JpcHQuY2hhcnNldCA9ICd1dGYtOCc7XG5cdFx0c2NyaXB0LnRpbWVvdXQgPSAxMjA7XG5cdFx0aWYgKF9fd2VicGFja19yZXF1aXJlX18ubmMpIHtcblx0XHRcdHNjcmlwdC5zZXRBdHRyaWJ1dGUoXCJub25jZVwiLCBfX3dlYnBhY2tfcmVxdWlyZV9fLm5jKTtcblx0XHR9XG5cdFx0c2NyaXB0LnNldEF0dHJpYnV0ZShcImRhdGEtd2VicGFja1wiLCBkYXRhV2VicGFja1ByZWZpeCArIGtleSk7XG5cdFx0c2NyaXB0LnNyYyA9IHVybDtcblx0fVxuXHRpblByb2dyZXNzW3VybF0gPSBbZG9uZV07XG5cdHZhciBvblNjcmlwdENvbXBsZXRlID0gKHByZXYsIGV2ZW50KSA9PiB7XG5cdFx0Ly8gYXZvaWQgbWVtIGxlYWtzIGluIElFLlxuXHRcdHNjcmlwdC5vbmVycm9yID0gc2NyaXB0Lm9ubG9hZCA9IG51bGw7XG5cdFx0Y2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuXHRcdHZhciBkb25lRm5zID0gaW5Qcm9ncmVzc1t1cmxdO1xuXHRcdGRlbGV0ZSBpblByb2dyZXNzW3VybF07XG5cdFx0c2NyaXB0LnBhcmVudE5vZGUgJiYgc2NyaXB0LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc2NyaXB0KTtcblx0XHRkb25lRm5zICYmIGRvbmVGbnMuZm9yRWFjaCgoZm4pID0+IChmbihldmVudCkpKTtcblx0XHRpZihwcmV2KSByZXR1cm4gcHJldihldmVudCk7XG5cdH07XG5cdHZhciB0aW1lb3V0ID0gc2V0VGltZW91dChvblNjcmlwdENvbXBsZXRlLmJpbmQobnVsbCwgdW5kZWZpbmVkLCB7IHR5cGU6ICd0aW1lb3V0JywgdGFyZ2V0OiBzY3JpcHQgfSksIDEyMDAwMCk7XG5cdHNjcmlwdC5vbmVycm9yID0gb25TY3JpcHRDb21wbGV0ZS5iaW5kKG51bGwsIHNjcmlwdC5vbmVycm9yKTtcblx0c2NyaXB0Lm9ubG9hZCA9IG9uU2NyaXB0Q29tcGxldGUuYmluZChudWxsLCBzY3JpcHQub25sb2FkKTtcblx0bmVlZEF0dGFjaCAmJiBkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKHNjcmlwdCk7XG59OyIsIi8qKlxuICogQGxpY2Vuc2UgUmVhY3RcbiAqIHJlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG4vKlxuIE1vZGVybml6ciAzLjAuMHByZSAoQ3VzdG9tIEJ1aWxkKSB8IE1JVFxuKi9cbid1c2Ugc3RyaWN0Jzt2YXIgYWE9cmVxdWlyZShcInJlYWN0XCIpLGJhPXJlcXVpcmUoXCJzY2hlZHVsZXJcIik7ZnVuY3Rpb24gcChhKXtmb3IodmFyIGI9XCJodHRwczovL3JlYWN0anMub3JnL2RvY3MvZXJyb3ItZGVjb2Rlci5odG1sP2ludmFyaWFudD1cIithLGM9MTtjPGFyZ3VtZW50cy5sZW5ndGg7YysrKWIrPVwiJmFyZ3NbXT1cIitlbmNvZGVVUklDb21wb25lbnQoYXJndW1lbnRzW2NdKTtyZXR1cm5cIk1pbmlmaWVkIFJlYWN0IGVycm9yICNcIithK1wiOyB2aXNpdCBcIitiK1wiIGZvciB0aGUgZnVsbCBtZXNzYWdlIG9yIHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCBmb3IgZnVsbCBlcnJvcnMgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy5cIn12YXIgY2E9bmV3IFNldCxkYT17fTtmdW5jdGlvbiBlYShhLGIpe2ZhKGEsYik7ZmEoYStcIkNhcHR1cmVcIixiKX1cbmZ1bmN0aW9uIGZhKGEsYil7ZGFbYV09Yjtmb3IoYT0wO2E8Yi5sZW5ndGg7YSsrKWNhLmFkZChiW2FdKX1cbnZhciBoYT0hKFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93fHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvdy5kb2N1bWVudHx8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCksaWE9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxqYT0vXls6QS1aX2EtelxcdTAwQzAtXFx1MDBENlxcdTAwRDgtXFx1MDBGNlxcdTAwRjgtXFx1MDJGRlxcdTAzNzAtXFx1MDM3RFxcdTAzN0YtXFx1MUZGRlxcdTIwMEMtXFx1MjAwRFxcdTIwNzAtXFx1MjE4RlxcdTJDMDAtXFx1MkZFRlxcdTMwMDEtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZGRF1bOkEtWl9hLXpcXHUwMEMwLVxcdTAwRDZcXHUwMEQ4LVxcdTAwRjZcXHUwMEY4LVxcdTAyRkZcXHUwMzcwLVxcdTAzN0RcXHUwMzdGLVxcdTFGRkZcXHUyMDBDLVxcdTIwMERcXHUyMDcwLVxcdTIxOEZcXHUyQzAwLVxcdTJGRUZcXHUzMDAxLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRkRcXC0uMC05XFx1MDBCN1xcdTAzMDAtXFx1MDM2RlxcdTIwM0YtXFx1MjA0MF0qJC8sa2E9XG57fSxsYT17fTtmdW5jdGlvbiBtYShhKXtpZihpYS5jYWxsKGxhLGEpKXJldHVybiEwO2lmKGlhLmNhbGwoa2EsYSkpcmV0dXJuITE7aWYoamEudGVzdChhKSlyZXR1cm4gbGFbYV09ITA7a2FbYV09ITA7cmV0dXJuITF9ZnVuY3Rpb24gbmEoYSxiLGMsZCl7aWYobnVsbCE9PWMmJjA9PT1jLnR5cGUpcmV0dXJuITE7c3dpdGNoKHR5cGVvZiBiKXtjYXNlIFwiZnVuY3Rpb25cIjpjYXNlIFwic3ltYm9sXCI6cmV0dXJuITA7Y2FzZSBcImJvb2xlYW5cIjppZihkKXJldHVybiExO2lmKG51bGwhPT1jKXJldHVybiFjLmFjY2VwdHNCb29sZWFuczthPWEudG9Mb3dlckNhc2UoKS5zbGljZSgwLDUpO3JldHVyblwiZGF0YS1cIiE9PWEmJlwiYXJpYS1cIiE9PWE7ZGVmYXVsdDpyZXR1cm4hMX19XG5mdW5jdGlvbiBvYShhLGIsYyxkKXtpZihudWxsPT09Ynx8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiBifHxuYShhLGIsYyxkKSlyZXR1cm4hMDtpZihkKXJldHVybiExO2lmKG51bGwhPT1jKXN3aXRjaChjLnR5cGUpe2Nhc2UgMzpyZXR1cm4hYjtjYXNlIDQ6cmV0dXJuITE9PT1iO2Nhc2UgNTpyZXR1cm4gaXNOYU4oYik7Y2FzZSA2OnJldHVybiBpc05hTihiKXx8MT5ifXJldHVybiExfWZ1bmN0aW9uIHEoYSxiLGMsZCxlLGYsZyl7dGhpcy5hY2NlcHRzQm9vbGVhbnM9Mj09PWJ8fDM9PT1ifHw0PT09Yjt0aGlzLmF0dHJpYnV0ZU5hbWU9ZDt0aGlzLmF0dHJpYnV0ZU5hbWVzcGFjZT1lO3RoaXMubXVzdFVzZVByb3BlcnR5PWM7dGhpcy5wcm9wZXJ0eU5hbWU9YTt0aGlzLnR5cGU9Yjt0aGlzLnNhbml0aXplVVJMPWY7dGhpcy5yZW1vdmVFbXB0eVN0cmluZz1nfXZhciB6PXt9O1xuXCJjaGlsZHJlbiBkYW5nZXJvdXNseVNldElubmVySFRNTCBkZWZhdWx0VmFsdWUgZGVmYXVsdENoZWNrZWQgaW5uZXJIVE1MIHN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZyBzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmcgc3R5bGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXt6W2FdPW5ldyBxKGEsMCwhMSxhLG51bGwsITEsITEpfSk7W1tcImFjY2VwdENoYXJzZXRcIixcImFjY2VwdC1jaGFyc2V0XCJdLFtcImNsYXNzTmFtZVwiLFwiY2xhc3NcIl0sW1wiaHRtbEZvclwiLFwiZm9yXCJdLFtcImh0dHBFcXVpdlwiLFwiaHR0cC1lcXVpdlwiXV0uZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hWzBdO3pbYl09bmV3IHEoYiwxLCExLGFbMV0sbnVsbCwhMSwhMSl9KTtbXCJjb250ZW50RWRpdGFibGVcIixcImRyYWdnYWJsZVwiLFwic3BlbGxDaGVja1wiLFwidmFsdWVcIl0uZm9yRWFjaChmdW5jdGlvbihhKXt6W2FdPW5ldyBxKGEsMiwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSwhMSl9KTtcbltcImF1dG9SZXZlcnNlXCIsXCJleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkXCIsXCJmb2N1c2FibGVcIixcInByZXNlcnZlQWxwaGFcIl0uZm9yRWFjaChmdW5jdGlvbihhKXt6W2FdPW5ldyBxKGEsMiwhMSxhLG51bGwsITEsITEpfSk7XCJhbGxvd0Z1bGxTY3JlZW4gYXN5bmMgYXV0b0ZvY3VzIGF1dG9QbGF5IGNvbnRyb2xzIGRlZmF1bHQgZGVmZXIgZGlzYWJsZWQgZGlzYWJsZVBpY3R1cmVJblBpY3R1cmUgZGlzYWJsZVJlbW90ZVBsYXliYWNrIGZvcm1Ob1ZhbGlkYXRlIGhpZGRlbiBsb29wIG5vTW9kdWxlIG5vVmFsaWRhdGUgb3BlbiBwbGF5c0lubGluZSByZWFkT25seSByZXF1aXJlZCByZXZlcnNlZCBzY29wZWQgc2VhbWxlc3MgaXRlbVNjb3BlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgcShhLDMsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEsITEpfSk7XG5bXCJjaGVja2VkXCIsXCJtdWx0aXBsZVwiLFwibXV0ZWRcIixcInNlbGVjdGVkXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgcShhLDMsITAsYSxudWxsLCExLCExKX0pO1tcImNhcHR1cmVcIixcImRvd25sb2FkXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgcShhLDQsITEsYSxudWxsLCExLCExKX0pO1tcImNvbHNcIixcInJvd3NcIixcInNpemVcIixcInNwYW5cIl0uZm9yRWFjaChmdW5jdGlvbihhKXt6W2FdPW5ldyBxKGEsNiwhMSxhLG51bGwsITEsITEpfSk7W1wicm93U3BhblwiLFwic3RhcnRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXt6W2FdPW5ldyBxKGEsNSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSwhMSl9KTt2YXIgcGE9L1tcXC06XShbYS16XSkvZztmdW5jdGlvbiBxYShhKXtyZXR1cm4gYVsxXS50b1VwcGVyQ2FzZSgpfVxuXCJhY2NlbnQtaGVpZ2h0IGFsaWdubWVudC1iYXNlbGluZSBhcmFiaWMtZm9ybSBiYXNlbGluZS1zaGlmdCBjYXAtaGVpZ2h0IGNsaXAtcGF0aCBjbGlwLXJ1bGUgY29sb3ItaW50ZXJwb2xhdGlvbiBjb2xvci1pbnRlcnBvbGF0aW9uLWZpbHRlcnMgY29sb3ItcHJvZmlsZSBjb2xvci1yZW5kZXJpbmcgZG9taW5hbnQtYmFzZWxpbmUgZW5hYmxlLWJhY2tncm91bmQgZmlsbC1vcGFjaXR5IGZpbGwtcnVsZSBmbG9vZC1jb2xvciBmbG9vZC1vcGFjaXR5IGZvbnQtZmFtaWx5IGZvbnQtc2l6ZSBmb250LXNpemUtYWRqdXN0IGZvbnQtc3RyZXRjaCBmb250LXN0eWxlIGZvbnQtdmFyaWFudCBmb250LXdlaWdodCBnbHlwaC1uYW1lIGdseXBoLW9yaWVudGF0aW9uLWhvcml6b250YWwgZ2x5cGgtb3JpZW50YXRpb24tdmVydGljYWwgaG9yaXotYWR2LXggaG9yaXotb3JpZ2luLXggaW1hZ2UtcmVuZGVyaW5nIGxldHRlci1zcGFjaW5nIGxpZ2h0aW5nLWNvbG9yIG1hcmtlci1lbmQgbWFya2VyLW1pZCBtYXJrZXItc3RhcnQgb3ZlcmxpbmUtcG9zaXRpb24gb3ZlcmxpbmUtdGhpY2tuZXNzIHBhaW50LW9yZGVyIHBhbm9zZS0xIHBvaW50ZXItZXZlbnRzIHJlbmRlcmluZy1pbnRlbnQgc2hhcGUtcmVuZGVyaW5nIHN0b3AtY29sb3Igc3RvcC1vcGFjaXR5IHN0cmlrZXRocm91Z2gtcG9zaXRpb24gc3RyaWtldGhyb3VnaC10aGlja25lc3Mgc3Ryb2tlLWRhc2hhcnJheSBzdHJva2UtZGFzaG9mZnNldCBzdHJva2UtbGluZWNhcCBzdHJva2UtbGluZWpvaW4gc3Ryb2tlLW1pdGVybGltaXQgc3Ryb2tlLW9wYWNpdHkgc3Ryb2tlLXdpZHRoIHRleHQtYW5jaG9yIHRleHQtZGVjb3JhdGlvbiB0ZXh0LXJlbmRlcmluZyB1bmRlcmxpbmUtcG9zaXRpb24gdW5kZXJsaW5lLXRoaWNrbmVzcyB1bmljb2RlLWJpZGkgdW5pY29kZS1yYW5nZSB1bml0cy1wZXItZW0gdi1hbHBoYWJldGljIHYtaGFuZ2luZyB2LWlkZW9ncmFwaGljIHYtbWF0aGVtYXRpY2FsIHZlY3Rvci1lZmZlY3QgdmVydC1hZHYteSB2ZXJ0LW9yaWdpbi14IHZlcnQtb3JpZ2luLXkgd29yZC1zcGFjaW5nIHdyaXRpbmctbW9kZSB4bWxuczp4bGluayB4LWhlaWdodFwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShwYSxcbnFhKTt6W2JdPW5ldyBxKGIsMSwhMSxhLG51bGwsITEsITEpfSk7XCJ4bGluazphY3R1YXRlIHhsaW5rOmFyY3JvbGUgeGxpbms6cm9sZSB4bGluazpzaG93IHhsaW5rOnRpdGxlIHhsaW5rOnR5cGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2UocGEscWEpO3pbYl09bmV3IHEoYiwxLCExLGEsXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIsITEsITEpfSk7W1wieG1sOmJhc2VcIixcInhtbDpsYW5nXCIsXCJ4bWw6c3BhY2VcIl0uZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2UocGEscWEpO3pbYl09bmV3IHEoYiwxLCExLGEsXCJodHRwOi8vd3d3LnczLm9yZy9YTUwvMTk5OC9uYW1lc3BhY2VcIiwhMSwhMSl9KTtbXCJ0YWJJbmRleFwiLFwiY3Jvc3NPcmlnaW5cIl0uZm9yRWFjaChmdW5jdGlvbihhKXt6W2FdPW5ldyBxKGEsMSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSwhMSl9KTtcbnoueGxpbmtIcmVmPW5ldyBxKFwieGxpbmtIcmVmXCIsMSwhMSxcInhsaW5rOmhyZWZcIixcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIiwhMCwhMSk7W1wic3JjXCIsXCJocmVmXCIsXCJhY3Rpb25cIixcImZvcm1BY3Rpb25cIl0uZm9yRWFjaChmdW5jdGlvbihhKXt6W2FdPW5ldyBxKGEsMSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMCwhMCl9KTtcbmZ1bmN0aW9uIHJhKGEsYixjLGQpe3ZhciBlPXouaGFzT3duUHJvcGVydHkoYik/eltiXTpudWxsO2lmKG51bGwhPT1lPzAhPT1lLnR5cGU6ZHx8ISgyPGIubGVuZ3RoKXx8XCJvXCIhPT1iWzBdJiZcIk9cIiE9PWJbMF18fFwiblwiIT09YlsxXSYmXCJOXCIhPT1iWzFdKW9hKGIsYyxlLGQpJiYoYz1udWxsKSxkfHxudWxsPT09ZT9tYShiKSYmKG51bGw9PT1jP2EucmVtb3ZlQXR0cmlidXRlKGIpOmEuc2V0QXR0cmlidXRlKGIsXCJcIitjKSk6ZS5tdXN0VXNlUHJvcGVydHk/YVtlLnByb3BlcnR5TmFtZV09bnVsbD09PWM/Mz09PWUudHlwZT8hMTpcIlwiOmM6KGI9ZS5hdHRyaWJ1dGVOYW1lLGQ9ZS5hdHRyaWJ1dGVOYW1lc3BhY2UsbnVsbD09PWM/YS5yZW1vdmVBdHRyaWJ1dGUoYik6KGU9ZS50eXBlLGM9Mz09PWV8fDQ9PT1lJiYhMD09PWM/XCJcIjpcIlwiK2MsZD9hLnNldEF0dHJpYnV0ZU5TKGQsYixjKTphLnNldEF0dHJpYnV0ZShiLGMpKSl9XG52YXIgc2E9YWEuX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQsdGE9U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIiksdWE9U3ltYm9sLmZvcihcInJlYWN0LnBvcnRhbFwiKSx2YT1TeW1ib2wuZm9yKFwicmVhY3QuZnJhZ21lbnRcIiksd2E9U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpLHhhPVN5bWJvbC5mb3IoXCJyZWFjdC5wcm9maWxlclwiKSx5YT1TeW1ib2wuZm9yKFwicmVhY3QucHJvdmlkZXJcIiksQWE9U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIiksQmE9U3ltYm9sLmZvcihcInJlYWN0LmZvcndhcmRfcmVmXCIpLENhPVN5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZVwiKSxEYT1TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VfbGlzdFwiKSxFYT1TeW1ib2wuZm9yKFwicmVhY3QubWVtb1wiKSxGYT1TeW1ib2wuZm9yKFwicmVhY3QubGF6eVwiKTtTeW1ib2wuZm9yKFwicmVhY3Quc2NvcGVcIik7U3ltYm9sLmZvcihcInJlYWN0LmRlYnVnX3RyYWNlX21vZGVcIik7XG52YXIgR2E9U3ltYm9sLmZvcihcInJlYWN0Lm9mZnNjcmVlblwiKTtTeW1ib2wuZm9yKFwicmVhY3QubGVnYWN5X2hpZGRlblwiKTtTeW1ib2wuZm9yKFwicmVhY3QuY2FjaGVcIik7U3ltYm9sLmZvcihcInJlYWN0LnRyYWNpbmdfbWFya2VyXCIpO3ZhciBIYT1TeW1ib2wuaXRlcmF0b3I7ZnVuY3Rpb24gSWEoYSl7aWYobnVsbD09PWF8fFwib2JqZWN0XCIhPT10eXBlb2YgYSlyZXR1cm4gbnVsbDthPUhhJiZhW0hhXXx8YVtcIkBAaXRlcmF0b3JcIl07cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGE/YTpudWxsfXZhciBBPU9iamVjdC5hc3NpZ24sSmE7ZnVuY3Rpb24gS2EoYSl7aWYodm9pZCAwPT09SmEpdHJ5e3Rocm93IEVycm9yKCk7fWNhdGNoKGMpe3ZhciBiPWMuc3RhY2sudHJpbSgpLm1hdGNoKC9cXG4oICooYXQgKT8pLyk7SmE9YiYmYlsxXXx8XCJcIn1yZXR1cm5cIlxcblwiK0phK2F9dmFyIExhPSExO1xuZnVuY3Rpb24gTWEoYSxiKXtpZighYXx8TGEpcmV0dXJuXCJcIjtMYT0hMDt2YXIgYz1FcnJvci5wcmVwYXJlU3RhY2tUcmFjZTtFcnJvci5wcmVwYXJlU3RhY2tUcmFjZT12b2lkIDA7dHJ5e2lmKGIpaWYoYj1mdW5jdGlvbigpe3Rocm93IEVycm9yKCk7fSxPYmplY3QuZGVmaW5lUHJvcGVydHkoYi5wcm90b3R5cGUsXCJwcm9wc1wiLHtzZXQ6ZnVuY3Rpb24oKXt0aHJvdyBFcnJvcigpO319KSxcIm9iamVjdFwiPT09dHlwZW9mIFJlZmxlY3QmJlJlZmxlY3QuY29uc3RydWN0KXt0cnl7UmVmbGVjdC5jb25zdHJ1Y3QoYixbXSl9Y2F0Y2gobCl7dmFyIGQ9bH1SZWZsZWN0LmNvbnN0cnVjdChhLFtdLGIpfWVsc2V7dHJ5e2IuY2FsbCgpfWNhdGNoKGwpe2Q9bH1hLmNhbGwoYi5wcm90b3R5cGUpfWVsc2V7dHJ5e3Rocm93IEVycm9yKCk7fWNhdGNoKGwpe2Q9bH1hKCl9fWNhdGNoKGwpe2lmKGwmJmQmJlwic3RyaW5nXCI9PT10eXBlb2YgbC5zdGFjayl7Zm9yKHZhciBlPWwuc3RhY2suc3BsaXQoXCJcXG5cIiksXG5mPWQuc3RhY2suc3BsaXQoXCJcXG5cIiksZz1lLmxlbmd0aC0xLGg9Zi5sZW5ndGgtMTsxPD1nJiYwPD1oJiZlW2ddIT09ZltoXTspaC0tO2Zvcig7MTw9ZyYmMDw9aDtnLS0saC0tKWlmKGVbZ10hPT1mW2hdKXtpZigxIT09Z3x8MSE9PWgpe2RvIGlmKGctLSxoLS0sMD5ofHxlW2ddIT09ZltoXSl7dmFyIGs9XCJcXG5cIitlW2ddLnJlcGxhY2UoXCIgYXQgbmV3IFwiLFwiIGF0IFwiKTthLmRpc3BsYXlOYW1lJiZrLmluY2x1ZGVzKFwiPGFub255bW91cz5cIikmJihrPWsucmVwbGFjZShcIjxhbm9ueW1vdXM+XCIsYS5kaXNwbGF5TmFtZSkpO3JldHVybiBrfXdoaWxlKDE8PWcmJjA8PWgpfWJyZWFrfX19ZmluYWxseXtMYT0hMSxFcnJvci5wcmVwYXJlU3RhY2tUcmFjZT1jfXJldHVybihhPWE/YS5kaXNwbGF5TmFtZXx8YS5uYW1lOlwiXCIpP0thKGEpOlwiXCJ9XG5mdW5jdGlvbiBOYShhKXtzd2l0Y2goYS50YWcpe2Nhc2UgNTpyZXR1cm4gS2EoYS50eXBlKTtjYXNlIDE2OnJldHVybiBLYShcIkxhenlcIik7Y2FzZSAxMzpyZXR1cm4gS2EoXCJTdXNwZW5zZVwiKTtjYXNlIDE5OnJldHVybiBLYShcIlN1c3BlbnNlTGlzdFwiKTtjYXNlIDA6Y2FzZSAyOmNhc2UgMTU6cmV0dXJuIGE9TWEoYS50eXBlLCExKSxhO2Nhc2UgMTE6cmV0dXJuIGE9TWEoYS50eXBlLnJlbmRlciwhMSksYTtjYXNlIDE6cmV0dXJuIGE9TWEoYS50eXBlLCEwKSxhO2RlZmF1bHQ6cmV0dXJuXCJcIn19XG5mdW5jdGlvbiBPYShhKXtpZihudWxsPT1hKXJldHVybiBudWxsO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhKXJldHVybiBhLmRpc3BsYXlOYW1lfHxhLm5hbWV8fG51bGw7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBhKXJldHVybiBhO3N3aXRjaChhKXtjYXNlIHZhOnJldHVyblwiRnJhZ21lbnRcIjtjYXNlIHVhOnJldHVyblwiUG9ydGFsXCI7Y2FzZSB4YTpyZXR1cm5cIlByb2ZpbGVyXCI7Y2FzZSB3YTpyZXR1cm5cIlN0cmljdE1vZGVcIjtjYXNlIENhOnJldHVyblwiU3VzcGVuc2VcIjtjYXNlIERhOnJldHVyblwiU3VzcGVuc2VMaXN0XCJ9aWYoXCJvYmplY3RcIj09PXR5cGVvZiBhKXN3aXRjaChhLiQkdHlwZW9mKXtjYXNlIEFhOnJldHVybihhLmRpc3BsYXlOYW1lfHxcIkNvbnRleHRcIikrXCIuQ29uc3VtZXJcIjtjYXNlIHlhOnJldHVybihhLl9jb250ZXh0LmRpc3BsYXlOYW1lfHxcIkNvbnRleHRcIikrXCIuUHJvdmlkZXJcIjtjYXNlIEJhOnZhciBiPWEucmVuZGVyO2E9YS5kaXNwbGF5TmFtZTthfHwoYT1iLmRpc3BsYXlOYW1lfHxcbmIubmFtZXx8XCJcIixhPVwiXCIhPT1hP1wiRm9yd2FyZFJlZihcIithK1wiKVwiOlwiRm9yd2FyZFJlZlwiKTtyZXR1cm4gYTtjYXNlIEVhOnJldHVybiBiPWEuZGlzcGxheU5hbWV8fG51bGwsbnVsbCE9PWI/YjpPYShhLnR5cGUpfHxcIk1lbW9cIjtjYXNlIEZhOmI9YS5fcGF5bG9hZDthPWEuX2luaXQ7dHJ5e3JldHVybiBPYShhKGIpKX1jYXRjaChjKXt9fXJldHVybiBudWxsfVxuZnVuY3Rpb24gUGEoYSl7dmFyIGI9YS50eXBlO3N3aXRjaChhLnRhZyl7Y2FzZSAyNDpyZXR1cm5cIkNhY2hlXCI7Y2FzZSA5OnJldHVybihiLmRpc3BsYXlOYW1lfHxcIkNvbnRleHRcIikrXCIuQ29uc3VtZXJcIjtjYXNlIDEwOnJldHVybihiLl9jb250ZXh0LmRpc3BsYXlOYW1lfHxcIkNvbnRleHRcIikrXCIuUHJvdmlkZXJcIjtjYXNlIDE4OnJldHVyblwiRGVoeWRyYXRlZEZyYWdtZW50XCI7Y2FzZSAxMTpyZXR1cm4gYT1iLnJlbmRlcixhPWEuZGlzcGxheU5hbWV8fGEubmFtZXx8XCJcIixiLmRpc3BsYXlOYW1lfHwoXCJcIiE9PWE/XCJGb3J3YXJkUmVmKFwiK2ErXCIpXCI6XCJGb3J3YXJkUmVmXCIpO2Nhc2UgNzpyZXR1cm5cIkZyYWdtZW50XCI7Y2FzZSA1OnJldHVybiBiO2Nhc2UgNDpyZXR1cm5cIlBvcnRhbFwiO2Nhc2UgMzpyZXR1cm5cIlJvb3RcIjtjYXNlIDY6cmV0dXJuXCJUZXh0XCI7Y2FzZSAxNjpyZXR1cm4gT2EoYik7Y2FzZSA4OnJldHVybiBiPT09d2E/XCJTdHJpY3RNb2RlXCI6XCJNb2RlXCI7Y2FzZSAyMjpyZXR1cm5cIk9mZnNjcmVlblwiO1xuY2FzZSAxMjpyZXR1cm5cIlByb2ZpbGVyXCI7Y2FzZSAyMTpyZXR1cm5cIlNjb3BlXCI7Y2FzZSAxMzpyZXR1cm5cIlN1c3BlbnNlXCI7Y2FzZSAxOTpyZXR1cm5cIlN1c3BlbnNlTGlzdFwiO2Nhc2UgMjU6cmV0dXJuXCJUcmFjaW5nTWFya2VyXCI7Y2FzZSAxOmNhc2UgMDpjYXNlIDE3OmNhc2UgMjpjYXNlIDE0OmNhc2UgMTU6aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGIpcmV0dXJuIGIuZGlzcGxheU5hbWV8fGIubmFtZXx8bnVsbDtpZihcInN0cmluZ1wiPT09dHlwZW9mIGIpcmV0dXJuIGJ9cmV0dXJuIG51bGx9ZnVuY3Rpb24gUWEoYSl7c3dpdGNoKHR5cGVvZiBhKXtjYXNlIFwiYm9vbGVhblwiOmNhc2UgXCJudW1iZXJcIjpjYXNlIFwic3RyaW5nXCI6Y2FzZSBcInVuZGVmaW5lZFwiOnJldHVybiBhO2Nhc2UgXCJvYmplY3RcIjpyZXR1cm4gYTtkZWZhdWx0OnJldHVyblwiXCJ9fVxuZnVuY3Rpb24gUmEoYSl7dmFyIGI9YS50eXBlO3JldHVybihhPWEubm9kZU5hbWUpJiZcImlucHV0XCI9PT1hLnRvTG93ZXJDYXNlKCkmJihcImNoZWNrYm94XCI9PT1ifHxcInJhZGlvXCI9PT1iKX1cbmZ1bmN0aW9uIFNhKGEpe3ZhciBiPVJhKGEpP1wiY2hlY2tlZFwiOlwidmFsdWVcIixjPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoYS5jb25zdHJ1Y3Rvci5wcm90b3R5cGUsYiksZD1cIlwiK2FbYl07aWYoIWEuaGFzT3duUHJvcGVydHkoYikmJlwidW5kZWZpbmVkXCIhPT10eXBlb2YgYyYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGMuZ2V0JiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5zZXQpe3ZhciBlPWMuZ2V0LGY9Yy5zZXQ7T2JqZWN0LmRlZmluZVByb3BlcnR5KGEsYix7Y29uZmlndXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBlLmNhbGwodGhpcyl9LHNldDpmdW5jdGlvbihhKXtkPVwiXCIrYTtmLmNhbGwodGhpcyxhKX19KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoYSxiLHtlbnVtZXJhYmxlOmMuZW51bWVyYWJsZX0pO3JldHVybntnZXRWYWx1ZTpmdW5jdGlvbigpe3JldHVybiBkfSxzZXRWYWx1ZTpmdW5jdGlvbihhKXtkPVwiXCIrYX0sc3RvcFRyYWNraW5nOmZ1bmN0aW9uKCl7YS5fdmFsdWVUcmFja2VyPVxubnVsbDtkZWxldGUgYVtiXX19fX1mdW5jdGlvbiBUYShhKXthLl92YWx1ZVRyYWNrZXJ8fChhLl92YWx1ZVRyYWNrZXI9U2EoYSkpfWZ1bmN0aW9uIFVhKGEpe2lmKCFhKXJldHVybiExO3ZhciBiPWEuX3ZhbHVlVHJhY2tlcjtpZighYilyZXR1cm4hMDt2YXIgYz1iLmdldFZhbHVlKCk7dmFyIGQ9XCJcIjthJiYoZD1SYShhKT9hLmNoZWNrZWQ/XCJ0cnVlXCI6XCJmYWxzZVwiOmEudmFsdWUpO2E9ZDtyZXR1cm4gYSE9PWM/KGIuc2V0VmFsdWUoYSksITApOiExfWZ1bmN0aW9uIFZhKGEpe2E9YXx8KFwidW5kZWZpbmVkXCIhPT10eXBlb2YgZG9jdW1lbnQ/ZG9jdW1lbnQ6dm9pZCAwKTtpZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIGEpcmV0dXJuIG51bGw7dHJ5e3JldHVybiBhLmFjdGl2ZUVsZW1lbnR8fGEuYm9keX1jYXRjaChiKXtyZXR1cm4gYS5ib2R5fX1cbmZ1bmN0aW9uIFdhKGEsYil7dmFyIGM9Yi5jaGVja2VkO3JldHVybiBBKHt9LGIse2RlZmF1bHRDaGVja2VkOnZvaWQgMCxkZWZhdWx0VmFsdWU6dm9pZCAwLHZhbHVlOnZvaWQgMCxjaGVja2VkOm51bGwhPWM/YzphLl93cmFwcGVyU3RhdGUuaW5pdGlhbENoZWNrZWR9KX1mdW5jdGlvbiBYYShhLGIpe3ZhciBjPW51bGw9PWIuZGVmYXVsdFZhbHVlP1wiXCI6Yi5kZWZhdWx0VmFsdWUsZD1udWxsIT1iLmNoZWNrZWQ/Yi5jaGVja2VkOmIuZGVmYXVsdENoZWNrZWQ7Yz1RYShudWxsIT1iLnZhbHVlP2IudmFsdWU6Yyk7YS5fd3JhcHBlclN0YXRlPXtpbml0aWFsQ2hlY2tlZDpkLGluaXRpYWxWYWx1ZTpjLGNvbnRyb2xsZWQ6XCJjaGVja2JveFwiPT09Yi50eXBlfHxcInJhZGlvXCI9PT1iLnR5cGU/bnVsbCE9Yi5jaGVja2VkOm51bGwhPWIudmFsdWV9fWZ1bmN0aW9uIFlhKGEsYil7Yj1iLmNoZWNrZWQ7bnVsbCE9YiYmcmEoYSxcImNoZWNrZWRcIixiLCExKX1cbmZ1bmN0aW9uIFphKGEsYil7WWEoYSxiKTt2YXIgYz1RYShiLnZhbHVlKSxkPWIudHlwZTtpZihudWxsIT1jKWlmKFwibnVtYmVyXCI9PT1kKXtpZigwPT09YyYmXCJcIj09PWEudmFsdWV8fGEudmFsdWUhPWMpYS52YWx1ZT1cIlwiK2N9ZWxzZSBhLnZhbHVlIT09XCJcIitjJiYoYS52YWx1ZT1cIlwiK2MpO2Vsc2UgaWYoXCJzdWJtaXRcIj09PWR8fFwicmVzZXRcIj09PWQpe2EucmVtb3ZlQXR0cmlidXRlKFwidmFsdWVcIik7cmV0dXJufWIuaGFzT3duUHJvcGVydHkoXCJ2YWx1ZVwiKT8kYShhLGIudHlwZSxjKTpiLmhhc093blByb3BlcnR5KFwiZGVmYXVsdFZhbHVlXCIpJiYkYShhLGIudHlwZSxRYShiLmRlZmF1bHRWYWx1ZSkpO251bGw9PWIuY2hlY2tlZCYmbnVsbCE9Yi5kZWZhdWx0Q2hlY2tlZCYmKGEuZGVmYXVsdENoZWNrZWQ9ISFiLmRlZmF1bHRDaGVja2VkKX1cbmZ1bmN0aW9uIGFiKGEsYixjKXtpZihiLmhhc093blByb3BlcnR5KFwidmFsdWVcIil8fGIuaGFzT3duUHJvcGVydHkoXCJkZWZhdWx0VmFsdWVcIikpe3ZhciBkPWIudHlwZTtpZighKFwic3VibWl0XCIhPT1kJiZcInJlc2V0XCIhPT1kfHx2b2lkIDAhPT1iLnZhbHVlJiZudWxsIT09Yi52YWx1ZSkpcmV0dXJuO2I9XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlO2N8fGI9PT1hLnZhbHVlfHwoYS52YWx1ZT1iKTthLmRlZmF1bHRWYWx1ZT1ifWM9YS5uYW1lO1wiXCIhPT1jJiYoYS5uYW1lPVwiXCIpO2EuZGVmYXVsdENoZWNrZWQ9ISFhLl93cmFwcGVyU3RhdGUuaW5pdGlhbENoZWNrZWQ7XCJcIiE9PWMmJihhLm5hbWU9Yyl9XG5mdW5jdGlvbiAkYShhLGIsYyl7aWYoXCJudW1iZXJcIiE9PWJ8fFZhKGEub3duZXJEb2N1bWVudCkhPT1hKW51bGw9PWM/YS5kZWZhdWx0VmFsdWU9XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlOmEuZGVmYXVsdFZhbHVlIT09XCJcIitjJiYoYS5kZWZhdWx0VmFsdWU9XCJcIitjKX12YXIgYmI9QXJyYXkuaXNBcnJheTtcbmZ1bmN0aW9uIGNiKGEsYixjLGQpe2E9YS5vcHRpb25zO2lmKGIpe2I9e307Zm9yKHZhciBlPTA7ZTxjLmxlbmd0aDtlKyspYltcIiRcIitjW2VdXT0hMDtmb3IoYz0wO2M8YS5sZW5ndGg7YysrKWU9Yi5oYXNPd25Qcm9wZXJ0eShcIiRcIithW2NdLnZhbHVlKSxhW2NdLnNlbGVjdGVkIT09ZSYmKGFbY10uc2VsZWN0ZWQ9ZSksZSYmZCYmKGFbY10uZGVmYXVsdFNlbGVjdGVkPSEwKX1lbHNle2M9XCJcIitRYShjKTtiPW51bGw7Zm9yKGU9MDtlPGEubGVuZ3RoO2UrKyl7aWYoYVtlXS52YWx1ZT09PWMpe2FbZV0uc2VsZWN0ZWQ9ITA7ZCYmKGFbZV0uZGVmYXVsdFNlbGVjdGVkPSEwKTtyZXR1cm59bnVsbCE9PWJ8fGFbZV0uZGlzYWJsZWR8fChiPWFbZV0pfW51bGwhPT1iJiYoYi5zZWxlY3RlZD0hMCl9fVxuZnVuY3Rpb24gZGIoYSxiKXtpZihudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKXRocm93IEVycm9yKHAoOTEpKTtyZXR1cm4gQSh7fSxiLHt2YWx1ZTp2b2lkIDAsZGVmYXVsdFZhbHVlOnZvaWQgMCxjaGlsZHJlbjpcIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWV9KX1mdW5jdGlvbiBlYihhLGIpe3ZhciBjPWIudmFsdWU7aWYobnVsbD09Yyl7Yz1iLmNoaWxkcmVuO2I9Yi5kZWZhdWx0VmFsdWU7aWYobnVsbCE9Yyl7aWYobnVsbCE9Yil0aHJvdyBFcnJvcihwKDkyKSk7aWYoYmIoYykpe2lmKDE8Yy5sZW5ndGgpdGhyb3cgRXJyb3IocCg5MykpO2M9Y1swXX1iPWN9bnVsbD09YiYmKGI9XCJcIik7Yz1ifWEuX3dyYXBwZXJTdGF0ZT17aW5pdGlhbFZhbHVlOlFhKGMpfX1cbmZ1bmN0aW9uIGZiKGEsYil7dmFyIGM9UWEoYi52YWx1ZSksZD1RYShiLmRlZmF1bHRWYWx1ZSk7bnVsbCE9YyYmKGM9XCJcIitjLGMhPT1hLnZhbHVlJiYoYS52YWx1ZT1jKSxudWxsPT1iLmRlZmF1bHRWYWx1ZSYmYS5kZWZhdWx0VmFsdWUhPT1jJiYoYS5kZWZhdWx0VmFsdWU9YykpO251bGwhPWQmJihhLmRlZmF1bHRWYWx1ZT1cIlwiK2QpfWZ1bmN0aW9uIGdiKGEpe3ZhciBiPWEudGV4dENvbnRlbnQ7Yj09PWEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWUmJlwiXCIhPT1iJiZudWxsIT09YiYmKGEudmFsdWU9Yil9ZnVuY3Rpb24gaGIoYSl7c3dpdGNoKGEpe2Nhc2UgXCJzdmdcIjpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI7Y2FzZSBcIm1hdGhcIjpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzE5OTgvTWF0aC9NYXRoTUxcIjtkZWZhdWx0OnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwifX1cbmZ1bmN0aW9uIGliKGEsYil7cmV0dXJuIG51bGw9PWF8fFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiPT09YT9oYihiKTpcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI9PT1hJiZcImZvcmVpZ25PYmplY3RcIj09PWI/XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI6YX1cbnZhciBqYixrYj1mdW5jdGlvbihhKXtyZXR1cm5cInVuZGVmaW5lZFwiIT09dHlwZW9mIE1TQXBwJiZNU0FwcC5leGVjVW5zYWZlTG9jYWxGdW5jdGlvbj9mdW5jdGlvbihiLGMsZCxlKXtNU0FwcC5leGVjVW5zYWZlTG9jYWxGdW5jdGlvbihmdW5jdGlvbigpe3JldHVybiBhKGIsYyxkLGUpfSl9OmF9KGZ1bmN0aW9uKGEsYil7aWYoXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIT09YS5uYW1lc3BhY2VVUkl8fFwiaW5uZXJIVE1MXCJpbiBhKWEuaW5uZXJIVE1MPWI7ZWxzZXtqYj1qYnx8ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtqYi5pbm5lckhUTUw9XCI8c3ZnPlwiK2IudmFsdWVPZigpLnRvU3RyaW5nKCkrXCI8L3N2Zz5cIjtmb3IoYj1qYi5maXJzdENoaWxkO2EuZmlyc3RDaGlsZDspYS5yZW1vdmVDaGlsZChhLmZpcnN0Q2hpbGQpO2Zvcig7Yi5maXJzdENoaWxkOylhLmFwcGVuZENoaWxkKGIuZmlyc3RDaGlsZCl9fSk7XG5mdW5jdGlvbiBsYihhLGIpe2lmKGIpe3ZhciBjPWEuZmlyc3RDaGlsZDtpZihjJiZjPT09YS5sYXN0Q2hpbGQmJjM9PT1jLm5vZGVUeXBlKXtjLm5vZGVWYWx1ZT1iO3JldHVybn19YS50ZXh0Q29udGVudD1ifVxudmFyIG1iPXthbmltYXRpb25JdGVyYXRpb25Db3VudDohMCxhc3BlY3RSYXRpbzohMCxib3JkZXJJbWFnZU91dHNldDohMCxib3JkZXJJbWFnZVNsaWNlOiEwLGJvcmRlckltYWdlV2lkdGg6ITAsYm94RmxleDohMCxib3hGbGV4R3JvdXA6ITAsYm94T3JkaW5hbEdyb3VwOiEwLGNvbHVtbkNvdW50OiEwLGNvbHVtbnM6ITAsZmxleDohMCxmbGV4R3JvdzohMCxmbGV4UG9zaXRpdmU6ITAsZmxleFNocmluazohMCxmbGV4TmVnYXRpdmU6ITAsZmxleE9yZGVyOiEwLGdyaWRBcmVhOiEwLGdyaWRSb3c6ITAsZ3JpZFJvd0VuZDohMCxncmlkUm93U3BhbjohMCxncmlkUm93U3RhcnQ6ITAsZ3JpZENvbHVtbjohMCxncmlkQ29sdW1uRW5kOiEwLGdyaWRDb2x1bW5TcGFuOiEwLGdyaWRDb2x1bW5TdGFydDohMCxmb250V2VpZ2h0OiEwLGxpbmVDbGFtcDohMCxsaW5lSGVpZ2h0OiEwLG9wYWNpdHk6ITAsb3JkZXI6ITAsb3JwaGFuczohMCx0YWJTaXplOiEwLHdpZG93czohMCx6SW5kZXg6ITAsXG56b29tOiEwLGZpbGxPcGFjaXR5OiEwLGZsb29kT3BhY2l0eTohMCxzdG9wT3BhY2l0eTohMCxzdHJva2VEYXNoYXJyYXk6ITAsc3Ryb2tlRGFzaG9mZnNldDohMCxzdHJva2VNaXRlcmxpbWl0OiEwLHN0cm9rZU9wYWNpdHk6ITAsc3Ryb2tlV2lkdGg6ITB9LG5iPVtcIldlYmtpdFwiLFwibXNcIixcIk1velwiLFwiT1wiXTtPYmplY3Qua2V5cyhtYikuZm9yRWFjaChmdW5jdGlvbihhKXtuYi5mb3JFYWNoKGZ1bmN0aW9uKGIpe2I9YithLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpK2Euc3Vic3RyaW5nKDEpO21iW2JdPW1iW2FdfSl9KTtmdW5jdGlvbiBvYihhLGIsYyl7cmV0dXJuIG51bGw9PWJ8fFwiYm9vbGVhblwiPT09dHlwZW9mIGJ8fFwiXCI9PT1iP1wiXCI6Y3x8XCJudW1iZXJcIiE9PXR5cGVvZiBifHwwPT09Ynx8bWIuaGFzT3duUHJvcGVydHkoYSkmJm1iW2FdPyhcIlwiK2IpLnRyaW0oKTpiK1wicHhcIn1cbmZ1bmN0aW9uIHBiKGEsYil7YT1hLnN0eWxlO2Zvcih2YXIgYyBpbiBiKWlmKGIuaGFzT3duUHJvcGVydHkoYykpe3ZhciBkPTA9PT1jLmluZGV4T2YoXCItLVwiKSxlPW9iKGMsYltjXSxkKTtcImZsb2F0XCI9PT1jJiYoYz1cImNzc0Zsb2F0XCIpO2Q/YS5zZXRQcm9wZXJ0eShjLGUpOmFbY109ZX19dmFyIHFiPUEoe21lbnVpdGVtOiEwfSx7YXJlYTohMCxiYXNlOiEwLGJyOiEwLGNvbDohMCxlbWJlZDohMCxocjohMCxpbWc6ITAsaW5wdXQ6ITAsa2V5Z2VuOiEwLGxpbms6ITAsbWV0YTohMCxwYXJhbTohMCxzb3VyY2U6ITAsdHJhY2s6ITAsd2JyOiEwfSk7XG5mdW5jdGlvbiByYihhLGIpe2lmKGIpe2lmKHFiW2FdJiYobnVsbCE9Yi5jaGlsZHJlbnx8bnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCkpdGhyb3cgRXJyb3IocCgxMzcsYSkpO2lmKG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpe2lmKG51bGwhPWIuY2hpbGRyZW4pdGhyb3cgRXJyb3IocCg2MCkpO2lmKFwib2JqZWN0XCIhPT10eXBlb2YgYi5kYW5nZXJvdXNseVNldElubmVySFRNTHx8IShcIl9faHRtbFwiaW4gYi5kYW5nZXJvdXNseVNldElubmVySFRNTCkpdGhyb3cgRXJyb3IocCg2MSkpO31pZihudWxsIT1iLnN0eWxlJiZcIm9iamVjdFwiIT09dHlwZW9mIGIuc3R5bGUpdGhyb3cgRXJyb3IocCg2MikpO319XG5mdW5jdGlvbiBzYihhLGIpe2lmKC0xPT09YS5pbmRleE9mKFwiLVwiKSlyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGIuaXM7c3dpdGNoKGEpe2Nhc2UgXCJhbm5vdGF0aW9uLXhtbFwiOmNhc2UgXCJjb2xvci1wcm9maWxlXCI6Y2FzZSBcImZvbnQtZmFjZVwiOmNhc2UgXCJmb250LWZhY2Utc3JjXCI6Y2FzZSBcImZvbnQtZmFjZS11cmlcIjpjYXNlIFwiZm9udC1mYWNlLWZvcm1hdFwiOmNhc2UgXCJmb250LWZhY2UtbmFtZVwiOmNhc2UgXCJtaXNzaW5nLWdseXBoXCI6cmV0dXJuITE7ZGVmYXVsdDpyZXR1cm4hMH19dmFyIHRiPW51bGw7ZnVuY3Rpb24gdWIoYSl7YT1hLnRhcmdldHx8YS5zcmNFbGVtZW50fHx3aW5kb3c7YS5jb3JyZXNwb25kaW5nVXNlRWxlbWVudCYmKGE9YS5jb3JyZXNwb25kaW5nVXNlRWxlbWVudCk7cmV0dXJuIDM9PT1hLm5vZGVUeXBlP2EucGFyZW50Tm9kZTphfXZhciB2Yj1udWxsLHdiPW51bGwseGI9bnVsbDtcbmZ1bmN0aW9uIHliKGEpe2lmKGE9emIoYSkpe2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiB2Yil0aHJvdyBFcnJvcihwKDI4MCkpO3ZhciBiPWEuc3RhdGVOb2RlO2ImJihiPUFiKGIpLHZiKGEuc3RhdGVOb2RlLGEudHlwZSxiKSl9fWZ1bmN0aW9uIEJiKGEpe3diP3hiP3hiLnB1c2goYSk6eGI9W2FdOndiPWF9ZnVuY3Rpb24gQ2IoKXtpZih3Yil7dmFyIGE9d2IsYj14Yjt4Yj13Yj1udWxsO3liKGEpO2lmKGIpZm9yKGE9MDthPGIubGVuZ3RoO2ErKyl5YihiW2FdKX19ZnVuY3Rpb24gRGIoYSxiKXtyZXR1cm4gYShiKX1mdW5jdGlvbiBFYigpe312YXIgRmI9ITE7ZnVuY3Rpb24gR2IoYSxiLGMpe2lmKEZiKXJldHVybiBhKGIsYyk7RmI9ITA7dHJ5e3JldHVybiBEYihhLGIsYyl9ZmluYWxseXtpZihGYj0hMSxudWxsIT09d2J8fG51bGwhPT14YilFYigpLENiKCl9fVxuZnVuY3Rpb24gSGIoYSxiKXt2YXIgYz1hLnN0YXRlTm9kZTtpZihudWxsPT09YylyZXR1cm4gbnVsbDt2YXIgZD1BYihjKTtpZihudWxsPT09ZClyZXR1cm4gbnVsbDtjPWRbYl07YTpzd2l0Y2goYil7Y2FzZSBcIm9uQ2xpY2tcIjpjYXNlIFwib25DbGlja0NhcHR1cmVcIjpjYXNlIFwib25Eb3VibGVDbGlja1wiOmNhc2UgXCJvbkRvdWJsZUNsaWNrQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlRG93blwiOmNhc2UgXCJvbk1vdXNlRG93bkNhcHR1cmVcIjpjYXNlIFwib25Nb3VzZU1vdmVcIjpjYXNlIFwib25Nb3VzZU1vdmVDYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VVcFwiOmNhc2UgXCJvbk1vdXNlVXBDYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VFbnRlclwiOihkPSFkLmRpc2FibGVkKXx8KGE9YS50eXBlLGQ9IShcImJ1dHRvblwiPT09YXx8XCJpbnB1dFwiPT09YXx8XCJzZWxlY3RcIj09PWF8fFwidGV4dGFyZWFcIj09PWEpKTthPSFkO2JyZWFrIGE7ZGVmYXVsdDphPSExfWlmKGEpcmV0dXJuIG51bGw7aWYoYyYmXCJmdW5jdGlvblwiIT09XG50eXBlb2YgYyl0aHJvdyBFcnJvcihwKDIzMSxiLHR5cGVvZiBjKSk7cmV0dXJuIGN9dmFyIEliPSExO2lmKGhhKXRyeXt2YXIgSmI9e307T2JqZWN0LmRlZmluZVByb3BlcnR5KEpiLFwicGFzc2l2ZVwiLHtnZXQ6ZnVuY3Rpb24oKXtJYj0hMH19KTt3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInRlc3RcIixKYixKYik7d2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ0ZXN0XCIsSmIsSmIpfWNhdGNoKGEpe0liPSExfWZ1bmN0aW9uIEtiKGEsYixjLGQsZSxmLGcsaCxrKXt2YXIgbD1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsMyk7dHJ5e2IuYXBwbHkoYyxsKX1jYXRjaChtKXt0aGlzLm9uRXJyb3IobSl9fXZhciBMYj0hMSxNYj1udWxsLE5iPSExLE9iPW51bGwsUGI9e29uRXJyb3I6ZnVuY3Rpb24oYSl7TGI9ITA7TWI9YX19O2Z1bmN0aW9uIFFiKGEsYixjLGQsZSxmLGcsaCxrKXtMYj0hMTtNYj1udWxsO0tiLmFwcGx5KFBiLGFyZ3VtZW50cyl9XG5mdW5jdGlvbiBSYihhLGIsYyxkLGUsZixnLGgsayl7UWIuYXBwbHkodGhpcyxhcmd1bWVudHMpO2lmKExiKXtpZihMYil7dmFyIGw9TWI7TGI9ITE7TWI9bnVsbH1lbHNlIHRocm93IEVycm9yKHAoMTk4KSk7TmJ8fChOYj0hMCxPYj1sKX19ZnVuY3Rpb24gU2IoYSl7dmFyIGI9YSxjPWE7aWYoYS5hbHRlcm5hdGUpZm9yKDtiLnJldHVybjspYj1iLnJldHVybjtlbHNle2E9YjtkbyBiPWEsMCE9PShiLmZsYWdzJjQwOTgpJiYoYz1iLnJldHVybiksYT1iLnJldHVybjt3aGlsZShhKX1yZXR1cm4gMz09PWIudGFnP2M6bnVsbH1mdW5jdGlvbiBUYihhKXtpZigxMz09PWEudGFnKXt2YXIgYj1hLm1lbW9pemVkU3RhdGU7bnVsbD09PWImJihhPWEuYWx0ZXJuYXRlLG51bGwhPT1hJiYoYj1hLm1lbW9pemVkU3RhdGUpKTtpZihudWxsIT09YilyZXR1cm4gYi5kZWh5ZHJhdGVkfXJldHVybiBudWxsfWZ1bmN0aW9uIFViKGEpe2lmKFNiKGEpIT09YSl0aHJvdyBFcnJvcihwKDE4OCkpO31cbmZ1bmN0aW9uIFZiKGEpe3ZhciBiPWEuYWx0ZXJuYXRlO2lmKCFiKXtiPVNiKGEpO2lmKG51bGw9PT1iKXRocm93IEVycm9yKHAoMTg4KSk7cmV0dXJuIGIhPT1hP251bGw6YX1mb3IodmFyIGM9YSxkPWI7Oyl7dmFyIGU9Yy5yZXR1cm47aWYobnVsbD09PWUpYnJlYWs7dmFyIGY9ZS5hbHRlcm5hdGU7aWYobnVsbD09PWYpe2Q9ZS5yZXR1cm47aWYobnVsbCE9PWQpe2M9ZDtjb250aW51ZX1icmVha31pZihlLmNoaWxkPT09Zi5jaGlsZCl7Zm9yKGY9ZS5jaGlsZDtmOyl7aWYoZj09PWMpcmV0dXJuIFViKGUpLGE7aWYoZj09PWQpcmV0dXJuIFViKGUpLGI7Zj1mLnNpYmxpbmd9dGhyb3cgRXJyb3IocCgxODgpKTt9aWYoYy5yZXR1cm4hPT1kLnJldHVybiljPWUsZD1mO2Vsc2V7Zm9yKHZhciBnPSExLGg9ZS5jaGlsZDtoOyl7aWYoaD09PWMpe2c9ITA7Yz1lO2Q9ZjticmVha31pZihoPT09ZCl7Zz0hMDtkPWU7Yz1mO2JyZWFrfWg9aC5zaWJsaW5nfWlmKCFnKXtmb3IoaD1mLmNoaWxkO2g7KXtpZihoPT09XG5jKXtnPSEwO2M9ZjtkPWU7YnJlYWt9aWYoaD09PWQpe2c9ITA7ZD1mO2M9ZTticmVha31oPWguc2libGluZ31pZighZyl0aHJvdyBFcnJvcihwKDE4OSkpO319aWYoYy5hbHRlcm5hdGUhPT1kKXRocm93IEVycm9yKHAoMTkwKSk7fWlmKDMhPT1jLnRhZyl0aHJvdyBFcnJvcihwKDE4OCkpO3JldHVybiBjLnN0YXRlTm9kZS5jdXJyZW50PT09Yz9hOmJ9ZnVuY3Rpb24gV2IoYSl7YT1WYihhKTtyZXR1cm4gbnVsbCE9PWE/WGIoYSk6bnVsbH1mdW5jdGlvbiBYYihhKXtpZig1PT09YS50YWd8fDY9PT1hLnRhZylyZXR1cm4gYTtmb3IoYT1hLmNoaWxkO251bGwhPT1hOyl7dmFyIGI9WGIoYSk7aWYobnVsbCE9PWIpcmV0dXJuIGI7YT1hLnNpYmxpbmd9cmV0dXJuIG51bGx9XG52YXIgWWI9YmEudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayxaYj1iYS51bnN0YWJsZV9jYW5jZWxDYWxsYmFjaywkYj1iYS51bnN0YWJsZV9zaG91bGRZaWVsZCxhYz1iYS51bnN0YWJsZV9yZXF1ZXN0UGFpbnQsRD1iYS51bnN0YWJsZV9ub3csYmM9YmEudW5zdGFibGVfZ2V0Q3VycmVudFByaW9yaXR5TGV2ZWwsY2M9YmEudW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHksZGM9YmEudW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHksZWM9YmEudW5zdGFibGVfTm9ybWFsUHJpb3JpdHksZmM9YmEudW5zdGFibGVfTG93UHJpb3JpdHksZ2M9YmEudW5zdGFibGVfSWRsZVByaW9yaXR5LGhjPW51bGwsaWM9bnVsbDtmdW5jdGlvbiBqYyhhKXtpZihpYyYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGljLm9uQ29tbWl0RmliZXJSb290KXRyeXtpYy5vbkNvbW1pdEZpYmVyUm9vdChoYyxhLHZvaWQgMCwxMjg9PT0oYS5jdXJyZW50LmZsYWdzJjEyOCkpfWNhdGNoKGIpe319XG52YXIgbGM9TWF0aC5jbHozMj9NYXRoLmNsejMyOmtjLG1jPU1hdGgubG9nLG5jPU1hdGguTE4yO2Z1bmN0aW9uIGtjKGEpe2E+Pj49MDtyZXR1cm4gMD09PWE/MzI6MzEtKG1jKGEpL25jfDApfDB9dmFyIG9jPTY0LHBjPTQxOTQzMDQ7XG5mdW5jdGlvbiBxYyhhKXtzd2l0Y2goYSYtYSl7Y2FzZSAxOnJldHVybiAxO2Nhc2UgMjpyZXR1cm4gMjtjYXNlIDQ6cmV0dXJuIDQ7Y2FzZSA4OnJldHVybiA4O2Nhc2UgMTY6cmV0dXJuIDE2O2Nhc2UgMzI6cmV0dXJuIDMyO2Nhc2UgNjQ6Y2FzZSAxMjg6Y2FzZSAyNTY6Y2FzZSA1MTI6Y2FzZSAxMDI0OmNhc2UgMjA0ODpjYXNlIDQwOTY6Y2FzZSA4MTkyOmNhc2UgMTYzODQ6Y2FzZSAzMjc2ODpjYXNlIDY1NTM2OmNhc2UgMTMxMDcyOmNhc2UgMjYyMTQ0OmNhc2UgNTI0Mjg4OmNhc2UgMTA0ODU3NjpjYXNlIDIwOTcxNTI6cmV0dXJuIGEmNDE5NDI0MDtjYXNlIDQxOTQzMDQ6Y2FzZSA4Mzg4NjA4OmNhc2UgMTY3NzcyMTY6Y2FzZSAzMzU1NDQzMjpjYXNlIDY3MTA4ODY0OnJldHVybiBhJjEzMDAyMzQyNDtjYXNlIDEzNDIxNzcyODpyZXR1cm4gMTM0MjE3NzI4O2Nhc2UgMjY4NDM1NDU2OnJldHVybiAyNjg0MzU0NTY7Y2FzZSA1MzY4NzA5MTI6cmV0dXJuIDUzNjg3MDkxMjtjYXNlIDEwNzM3NDE4MjQ6cmV0dXJuIDEwNzM3NDE4MjQ7XG5kZWZhdWx0OnJldHVybiBhfX1mdW5jdGlvbiByYyhhLGIpe3ZhciBjPWEucGVuZGluZ0xhbmVzO2lmKDA9PT1jKXJldHVybiAwO3ZhciBkPTAsZT1hLnN1c3BlbmRlZExhbmVzLGY9YS5waW5nZWRMYW5lcyxnPWMmMjY4NDM1NDU1O2lmKDAhPT1nKXt2YXIgaD1nJn5lOzAhPT1oP2Q9cWMoaCk6KGYmPWcsMCE9PWYmJihkPXFjKGYpKSl9ZWxzZSBnPWMmfmUsMCE9PWc/ZD1xYyhnKTowIT09ZiYmKGQ9cWMoZikpO2lmKDA9PT1kKXJldHVybiAwO2lmKDAhPT1iJiZiIT09ZCYmMD09PShiJmUpJiYoZT1kJi1kLGY9YiYtYixlPj1mfHwxNj09PWUmJjAhPT0oZiY0MTk0MjQwKSkpcmV0dXJuIGI7MCE9PShkJjQpJiYoZHw9YyYxNik7Yj1hLmVudGFuZ2xlZExhbmVzO2lmKDAhPT1iKWZvcihhPWEuZW50YW5nbGVtZW50cyxiJj1kOzA8YjspYz0zMS1sYyhiKSxlPTE8PGMsZHw9YVtjXSxiJj1+ZTtyZXR1cm4gZH1cbmZ1bmN0aW9uIHNjKGEsYil7c3dpdGNoKGEpe2Nhc2UgMTpjYXNlIDI6Y2FzZSA0OnJldHVybiBiKzI1MDtjYXNlIDg6Y2FzZSAxNjpjYXNlIDMyOmNhc2UgNjQ6Y2FzZSAxMjg6Y2FzZSAyNTY6Y2FzZSA1MTI6Y2FzZSAxMDI0OmNhc2UgMjA0ODpjYXNlIDQwOTY6Y2FzZSA4MTkyOmNhc2UgMTYzODQ6Y2FzZSAzMjc2ODpjYXNlIDY1NTM2OmNhc2UgMTMxMDcyOmNhc2UgMjYyMTQ0OmNhc2UgNTI0Mjg4OmNhc2UgMTA0ODU3NjpjYXNlIDIwOTcxNTI6cmV0dXJuIGIrNUUzO2Nhc2UgNDE5NDMwNDpjYXNlIDgzODg2MDg6Y2FzZSAxNjc3NzIxNjpjYXNlIDMzNTU0NDMyOmNhc2UgNjcxMDg4NjQ6cmV0dXJuLTE7Y2FzZSAxMzQyMTc3Mjg6Y2FzZSAyNjg0MzU0NTY6Y2FzZSA1MzY4NzA5MTI6Y2FzZSAxMDczNzQxODI0OnJldHVybi0xO2RlZmF1bHQ6cmV0dXJuLTF9fVxuZnVuY3Rpb24gdGMoYSxiKXtmb3IodmFyIGM9YS5zdXNwZW5kZWRMYW5lcyxkPWEucGluZ2VkTGFuZXMsZT1hLmV4cGlyYXRpb25UaW1lcyxmPWEucGVuZGluZ0xhbmVzOzA8Zjspe3ZhciBnPTMxLWxjKGYpLGg9MTw8ZyxrPWVbZ107aWYoLTE9PT1rKXtpZigwPT09KGgmYyl8fDAhPT0oaCZkKSllW2ddPXNjKGgsYil9ZWxzZSBrPD1iJiYoYS5leHBpcmVkTGFuZXN8PWgpO2YmPX5ofX1mdW5jdGlvbiB1YyhhKXthPWEucGVuZGluZ0xhbmVzJi0xMDczNzQxODI1O3JldHVybiAwIT09YT9hOmEmMTA3Mzc0MTgyND8xMDczNzQxODI0OjB9ZnVuY3Rpb24gdmMoYSl7Zm9yKHZhciBiPVtdLGM9MDszMT5jO2MrKyliLnB1c2goYSk7cmV0dXJuIGJ9ZnVuY3Rpb24gd2MoYSxiLGMpe2EucGVuZGluZ0xhbmVzfD1iOzUzNjg3MDkxMiE9PWImJihhLnN1c3BlbmRlZExhbmVzPTAsYS5waW5nZWRMYW5lcz0wKTthPWEuZXZlbnRUaW1lcztiPTMxLWxjKGIpO2FbYl09Y31cbmZ1bmN0aW9uIHhjKGEsYil7dmFyIGM9YS5wZW5kaW5nTGFuZXMmfmI7YS5wZW5kaW5nTGFuZXM9YjthLnN1c3BlbmRlZExhbmVzPTA7YS5waW5nZWRMYW5lcz0wO2EuZXhwaXJlZExhbmVzJj1iO2EubXV0YWJsZVJlYWRMYW5lcyY9YjthLmVudGFuZ2xlZExhbmVzJj1iO2I9YS5lbnRhbmdsZW1lbnRzO3ZhciBkPWEuZXZlbnRUaW1lcztmb3IoYT1hLmV4cGlyYXRpb25UaW1lczswPGM7KXt2YXIgZT0zMS1sYyhjKSxmPTE8PGU7YltlXT0wO2RbZV09LTE7YVtlXT0tMTtjJj1+Zn19ZnVuY3Rpb24geWMoYSxiKXt2YXIgYz1hLmVudGFuZ2xlZExhbmVzfD1iO2ZvcihhPWEuZW50YW5nbGVtZW50cztjOyl7dmFyIGQ9MzEtbGMoYyksZT0xPDxkO2UmYnxhW2RdJmImJihhW2RdfD1iKTtjJj1+ZX19dmFyIEU9MDtmdW5jdGlvbiB6YyhhKXthJj0tYTtyZXR1cm4gMTxhPzQ8YT8wIT09KGEmMjY4NDM1NDU1KT8xNjo1MzY4NzA5MTI6NDoxfVxudmFyIEFjLEJjLENjLERjLEVjLEZjPSExLEdjPVtdLEhjPW51bGwsSWM9bnVsbCxKYz1udWxsLEtjPW5ldyBNYXAsTGM9bmV3IE1hcCxNYz1bXSxOYz1cIm1vdXNlZG93biBtb3VzZXVwIHRvdWNoY2FuY2VsIHRvdWNoZW5kIHRvdWNoc3RhcnQgYXV4Y2xpY2sgZGJsY2xpY2sgcG9pbnRlcmNhbmNlbCBwb2ludGVyZG93biBwb2ludGVydXAgZHJhZ2VuZCBkcmFnc3RhcnQgZHJvcCBjb21wb3NpdGlvbmVuZCBjb21wb3NpdGlvbnN0YXJ0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgaW5wdXQgdGV4dElucHV0IGNvcHkgY3V0IHBhc3RlIGNsaWNrIGNoYW5nZSBjb250ZXh0bWVudSByZXNldCBzdWJtaXRcIi5zcGxpdChcIiBcIik7XG5mdW5jdGlvbiBPYyhhLGIpe3N3aXRjaChhKXtjYXNlIFwiZm9jdXNpblwiOmNhc2UgXCJmb2N1c291dFwiOkhjPW51bGw7YnJlYWs7Y2FzZSBcImRyYWdlbnRlclwiOmNhc2UgXCJkcmFnbGVhdmVcIjpJYz1udWxsO2JyZWFrO2Nhc2UgXCJtb3VzZW92ZXJcIjpjYXNlIFwibW91c2VvdXRcIjpKYz1udWxsO2JyZWFrO2Nhc2UgXCJwb2ludGVyb3ZlclwiOmNhc2UgXCJwb2ludGVyb3V0XCI6S2MuZGVsZXRlKGIucG9pbnRlcklkKTticmVhaztjYXNlIFwiZ290cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwibG9zdHBvaW50ZXJjYXB0dXJlXCI6TGMuZGVsZXRlKGIucG9pbnRlcklkKX19XG5mdW5jdGlvbiBQYyhhLGIsYyxkLGUsZil7aWYobnVsbD09PWF8fGEubmF0aXZlRXZlbnQhPT1mKXJldHVybiBhPXtibG9ja2VkT246Yixkb21FdmVudE5hbWU6YyxldmVudFN5c3RlbUZsYWdzOmQsbmF0aXZlRXZlbnQ6Zix0YXJnZXRDb250YWluZXJzOltlXX0sbnVsbCE9PWImJihiPXpiKGIpLG51bGwhPT1iJiZCYyhiKSksYTthLmV2ZW50U3lzdGVtRmxhZ3N8PWQ7Yj1hLnRhcmdldENvbnRhaW5lcnM7bnVsbCE9PWUmJi0xPT09Yi5pbmRleE9mKGUpJiZiLnB1c2goZSk7cmV0dXJuIGF9XG5mdW5jdGlvbiBRYyhhLGIsYyxkLGUpe3N3aXRjaChiKXtjYXNlIFwiZm9jdXNpblwiOnJldHVybiBIYz1QYyhIYyxhLGIsYyxkLGUpLCEwO2Nhc2UgXCJkcmFnZW50ZXJcIjpyZXR1cm4gSWM9UGMoSWMsYSxiLGMsZCxlKSwhMDtjYXNlIFwibW91c2VvdmVyXCI6cmV0dXJuIEpjPVBjKEpjLGEsYixjLGQsZSksITA7Y2FzZSBcInBvaW50ZXJvdmVyXCI6dmFyIGY9ZS5wb2ludGVySWQ7S2Muc2V0KGYsUGMoS2MuZ2V0KGYpfHxudWxsLGEsYixjLGQsZSkpO3JldHVybiEwO2Nhc2UgXCJnb3Rwb2ludGVyY2FwdHVyZVwiOnJldHVybiBmPWUucG9pbnRlcklkLExjLnNldChmLFBjKExjLmdldChmKXx8bnVsbCxhLGIsYyxkLGUpKSwhMH1yZXR1cm4hMX1cbmZ1bmN0aW9uIFJjKGEpe3ZhciBiPVNjKGEudGFyZ2V0KTtpZihudWxsIT09Yil7dmFyIGM9U2IoYik7aWYobnVsbCE9PWMpaWYoYj1jLnRhZywxMz09PWIpe2lmKGI9VGIoYyksbnVsbCE9PWIpe2EuYmxvY2tlZE9uPWI7RWMoYS5wcmlvcml0eSxmdW5jdGlvbigpe0NjKGMpfSk7cmV0dXJufX1lbHNlIGlmKDM9PT1iJiZjLnN0YXRlTm9kZS5jdXJyZW50Lm1lbW9pemVkU3RhdGUuaXNEZWh5ZHJhdGVkKXthLmJsb2NrZWRPbj0zPT09Yy50YWc/Yy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbzpudWxsO3JldHVybn19YS5ibG9ja2VkT249bnVsbH1cbmZ1bmN0aW9uIFRjKGEpe2lmKG51bGwhPT1hLmJsb2NrZWRPbilyZXR1cm4hMTtmb3IodmFyIGI9YS50YXJnZXRDb250YWluZXJzOzA8Yi5sZW5ndGg7KXt2YXIgYz1VYyhhLmRvbUV2ZW50TmFtZSxhLmV2ZW50U3lzdGVtRmxhZ3MsYlswXSxhLm5hdGl2ZUV2ZW50KTtpZihudWxsPT09Yyl7Yz1hLm5hdGl2ZUV2ZW50O3ZhciBkPW5ldyBjLmNvbnN0cnVjdG9yKGMudHlwZSxjKTt0Yj1kO2MudGFyZ2V0LmRpc3BhdGNoRXZlbnQoZCk7dGI9bnVsbH1lbHNlIHJldHVybiBiPXpiKGMpLG51bGwhPT1iJiZCYyhiKSxhLmJsb2NrZWRPbj1jLCExO2Iuc2hpZnQoKX1yZXR1cm4hMH1mdW5jdGlvbiBWYyhhLGIsYyl7VGMoYSkmJmMuZGVsZXRlKGIpfWZ1bmN0aW9uIFdjKCl7RmM9ITE7bnVsbCE9PUhjJiZUYyhIYykmJihIYz1udWxsKTtudWxsIT09SWMmJlRjKEljKSYmKEljPW51bGwpO251bGwhPT1KYyYmVGMoSmMpJiYoSmM9bnVsbCk7S2MuZm9yRWFjaChWYyk7TGMuZm9yRWFjaChWYyl9XG5mdW5jdGlvbiBYYyhhLGIpe2EuYmxvY2tlZE9uPT09YiYmKGEuYmxvY2tlZE9uPW51bGwsRmN8fChGYz0hMCxiYS51bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrKGJhLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5LFdjKSkpfVxuZnVuY3Rpb24gWWMoYSl7ZnVuY3Rpb24gYihiKXtyZXR1cm4gWGMoYixhKX1pZigwPEdjLmxlbmd0aCl7WGMoR2NbMF0sYSk7Zm9yKHZhciBjPTE7YzxHYy5sZW5ndGg7YysrKXt2YXIgZD1HY1tjXTtkLmJsb2NrZWRPbj09PWEmJihkLmJsb2NrZWRPbj1udWxsKX19bnVsbCE9PUhjJiZYYyhIYyxhKTtudWxsIT09SWMmJlhjKEljLGEpO251bGwhPT1KYyYmWGMoSmMsYSk7S2MuZm9yRWFjaChiKTtMYy5mb3JFYWNoKGIpO2ZvcihjPTA7YzxNYy5sZW5ndGg7YysrKWQ9TWNbY10sZC5ibG9ja2VkT249PT1hJiYoZC5ibG9ja2VkT249bnVsbCk7Zm9yKDswPE1jLmxlbmd0aCYmKGM9TWNbMF0sbnVsbD09PWMuYmxvY2tlZE9uKTspUmMoYyksbnVsbD09PWMuYmxvY2tlZE9uJiZNYy5zaGlmdCgpfXZhciBaYz1zYS5SZWFjdEN1cnJlbnRCYXRjaENvbmZpZztcbmZ1bmN0aW9uICRjKGEsYixjLGQpe3ZhciBlPUUsZj1aYy50cmFuc2l0aW9uO1pjLnRyYW5zaXRpb249bnVsbDt0cnl7RT0xLGFkKGEsYixjLGQpfWZpbmFsbHl7RT1lLFpjLnRyYW5zaXRpb249Zn19ZnVuY3Rpb24gYmQoYSxiLGMsZCl7dmFyIGU9RSxmPVpjLnRyYW5zaXRpb247WmMudHJhbnNpdGlvbj1udWxsO3RyeXtFPTQsYWQoYSxiLGMsZCl9ZmluYWxseXtFPWUsWmMudHJhbnNpdGlvbj1mfX1cbmZ1bmN0aW9uIGFkKGEsYixjLGQpe3ZhciBlPVVjKGEsYixjLGQpO2lmKG51bGw9PT1lKWNkKGEsYixkLGRkLGMpLE9jKGEsZCk7ZWxzZSBpZihRYyhlLGEsYixjLGQpKWQuc3RvcFByb3BhZ2F0aW9uKCk7ZWxzZSBpZihPYyhhLGQpLGImNCYmLTE8TmMuaW5kZXhPZihhKSl7Zm9yKDtudWxsIT09ZTspe3ZhciBmPXpiKGUpO251bGwhPT1mJiZBYyhmKTtmPVVjKGEsYixjLGQpO251bGw9PT1mJiZjZChhLGIsZCxkZCxjKTtpZihmPT09ZSlicmVhaztlPWZ9bnVsbCE9PWUmJmQuc3RvcFByb3BhZ2F0aW9uKCl9ZWxzZSBjZChhLGIsZCxudWxsLGMpfXZhciBkZD1udWxsO1xuZnVuY3Rpb24gVWMoYSxiLGMsZCl7ZGQ9bnVsbDthPXViKGQpO2E9U2MoYSk7aWYobnVsbCE9PWEpaWYoYj1TYihhKSxudWxsPT09YilhPW51bGw7ZWxzZSBpZihjPWIudGFnLDEzPT09Yyl7YT1UYihiKTtpZihudWxsIT09YSlyZXR1cm4gYTthPW51bGx9ZWxzZSBpZigzPT09Yyl7aWYoYi5zdGF0ZU5vZGUuY3VycmVudC5tZW1vaXplZFN0YXRlLmlzRGVoeWRyYXRlZClyZXR1cm4gMz09PWIudGFnP2Iuc3RhdGVOb2RlLmNvbnRhaW5lckluZm86bnVsbDthPW51bGx9ZWxzZSBiIT09YSYmKGE9bnVsbCk7ZGQ9YTtyZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIGVkKGEpe3N3aXRjaChhKXtjYXNlIFwiY2FuY2VsXCI6Y2FzZSBcImNsaWNrXCI6Y2FzZSBcImNsb3NlXCI6Y2FzZSBcImNvbnRleHRtZW51XCI6Y2FzZSBcImNvcHlcIjpjYXNlIFwiY3V0XCI6Y2FzZSBcImF1eGNsaWNrXCI6Y2FzZSBcImRibGNsaWNrXCI6Y2FzZSBcImRyYWdlbmRcIjpjYXNlIFwiZHJhZ3N0YXJ0XCI6Y2FzZSBcImRyb3BcIjpjYXNlIFwiZm9jdXNpblwiOmNhc2UgXCJmb2N1c291dFwiOmNhc2UgXCJpbnB1dFwiOmNhc2UgXCJpbnZhbGlkXCI6Y2FzZSBcImtleWRvd25cIjpjYXNlIFwia2V5cHJlc3NcIjpjYXNlIFwia2V5dXBcIjpjYXNlIFwibW91c2Vkb3duXCI6Y2FzZSBcIm1vdXNldXBcIjpjYXNlIFwicGFzdGVcIjpjYXNlIFwicGF1c2VcIjpjYXNlIFwicGxheVwiOmNhc2UgXCJwb2ludGVyY2FuY2VsXCI6Y2FzZSBcInBvaW50ZXJkb3duXCI6Y2FzZSBcInBvaW50ZXJ1cFwiOmNhc2UgXCJyYXRlY2hhbmdlXCI6Y2FzZSBcInJlc2V0XCI6Y2FzZSBcInJlc2l6ZVwiOmNhc2UgXCJzZWVrZWRcIjpjYXNlIFwic3VibWl0XCI6Y2FzZSBcInRvdWNoY2FuY2VsXCI6Y2FzZSBcInRvdWNoZW5kXCI6Y2FzZSBcInRvdWNoc3RhcnRcIjpjYXNlIFwidm9sdW1lY2hhbmdlXCI6Y2FzZSBcImNoYW5nZVwiOmNhc2UgXCJzZWxlY3Rpb25jaGFuZ2VcIjpjYXNlIFwidGV4dElucHV0XCI6Y2FzZSBcImNvbXBvc2l0aW9uc3RhcnRcIjpjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpjYXNlIFwiY29tcG9zaXRpb251cGRhdGVcIjpjYXNlIFwiYmVmb3JlYmx1clwiOmNhc2UgXCJhZnRlcmJsdXJcIjpjYXNlIFwiYmVmb3JlaW5wdXRcIjpjYXNlIFwiYmx1clwiOmNhc2UgXCJmdWxsc2NyZWVuY2hhbmdlXCI6Y2FzZSBcImZvY3VzXCI6Y2FzZSBcImhhc2hjaGFuZ2VcIjpjYXNlIFwicG9wc3RhdGVcIjpjYXNlIFwic2VsZWN0XCI6Y2FzZSBcInNlbGVjdHN0YXJ0XCI6cmV0dXJuIDE7Y2FzZSBcImRyYWdcIjpjYXNlIFwiZHJhZ2VudGVyXCI6Y2FzZSBcImRyYWdleGl0XCI6Y2FzZSBcImRyYWdsZWF2ZVwiOmNhc2UgXCJkcmFnb3ZlclwiOmNhc2UgXCJtb3VzZW1vdmVcIjpjYXNlIFwibW91c2VvdXRcIjpjYXNlIFwibW91c2VvdmVyXCI6Y2FzZSBcInBvaW50ZXJtb3ZlXCI6Y2FzZSBcInBvaW50ZXJvdXRcIjpjYXNlIFwicG9pbnRlcm92ZXJcIjpjYXNlIFwic2Nyb2xsXCI6Y2FzZSBcInRvZ2dsZVwiOmNhc2UgXCJ0b3VjaG1vdmVcIjpjYXNlIFwid2hlZWxcIjpjYXNlIFwibW91c2VlbnRlclwiOmNhc2UgXCJtb3VzZWxlYXZlXCI6Y2FzZSBcInBvaW50ZXJlbnRlclwiOmNhc2UgXCJwb2ludGVybGVhdmVcIjpyZXR1cm4gNDtcbmNhc2UgXCJtZXNzYWdlXCI6c3dpdGNoKGJjKCkpe2Nhc2UgY2M6cmV0dXJuIDE7Y2FzZSBkYzpyZXR1cm4gNDtjYXNlIGVjOmNhc2UgZmM6cmV0dXJuIDE2O2Nhc2UgZ2M6cmV0dXJuIDUzNjg3MDkxMjtkZWZhdWx0OnJldHVybiAxNn1kZWZhdWx0OnJldHVybiAxNn19dmFyIGZkPW51bGwsZ2Q9bnVsbCxoZD1udWxsO2Z1bmN0aW9uIGlkKCl7aWYoaGQpcmV0dXJuIGhkO3ZhciBhLGI9Z2QsYz1iLmxlbmd0aCxkLGU9XCJ2YWx1ZVwiaW4gZmQ/ZmQudmFsdWU6ZmQudGV4dENvbnRlbnQsZj1lLmxlbmd0aDtmb3IoYT0wO2E8YyYmYlthXT09PWVbYV07YSsrKTt2YXIgZz1jLWE7Zm9yKGQ9MTtkPD1nJiZiW2MtZF09PT1lW2YtZF07ZCsrKTtyZXR1cm4gaGQ9ZS5zbGljZShhLDE8ZD8xLWQ6dm9pZCAwKX1cbmZ1bmN0aW9uIGpkKGEpe3ZhciBiPWEua2V5Q29kZTtcImNoYXJDb2RlXCJpbiBhPyhhPWEuY2hhckNvZGUsMD09PWEmJjEzPT09YiYmKGE9MTMpKTphPWI7MTA9PT1hJiYoYT0xMyk7cmV0dXJuIDMyPD1hfHwxMz09PWE/YTowfWZ1bmN0aW9uIGtkKCl7cmV0dXJuITB9ZnVuY3Rpb24gbGQoKXtyZXR1cm4hMX1cbmZ1bmN0aW9uIG1kKGEpe2Z1bmN0aW9uIGIoYixkLGUsZixnKXt0aGlzLl9yZWFjdE5hbWU9Yjt0aGlzLl90YXJnZXRJbnN0PWU7dGhpcy50eXBlPWQ7dGhpcy5uYXRpdmVFdmVudD1mO3RoaXMudGFyZ2V0PWc7dGhpcy5jdXJyZW50VGFyZ2V0PW51bGw7Zm9yKHZhciBjIGluIGEpYS5oYXNPd25Qcm9wZXJ0eShjKSYmKGI9YVtjXSx0aGlzW2NdPWI/YihmKTpmW2NdKTt0aGlzLmlzRGVmYXVsdFByZXZlbnRlZD0obnVsbCE9Zi5kZWZhdWx0UHJldmVudGVkP2YuZGVmYXVsdFByZXZlbnRlZDohMT09PWYucmV0dXJuVmFsdWUpP2tkOmxkO3RoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQ9bGQ7cmV0dXJuIHRoaXN9QShiLnByb3RvdHlwZSx7cHJldmVudERlZmF1bHQ6ZnVuY3Rpb24oKXt0aGlzLmRlZmF1bHRQcmV2ZW50ZWQ9ITA7dmFyIGE9dGhpcy5uYXRpdmVFdmVudDthJiYoYS5wcmV2ZW50RGVmYXVsdD9hLnByZXZlbnREZWZhdWx0KCk6XCJ1bmtub3duXCIhPT10eXBlb2YgYS5yZXR1cm5WYWx1ZSYmXG4oYS5yZXR1cm5WYWx1ZT0hMSksdGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQ9a2QpfSxzdG9wUHJvcGFnYXRpb246ZnVuY3Rpb24oKXt2YXIgYT10aGlzLm5hdGl2ZUV2ZW50O2EmJihhLnN0b3BQcm9wYWdhdGlvbj9hLnN0b3BQcm9wYWdhdGlvbigpOlwidW5rbm93blwiIT09dHlwZW9mIGEuY2FuY2VsQnViYmxlJiYoYS5jYW5jZWxCdWJibGU9ITApLHRoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQ9a2QpfSxwZXJzaXN0OmZ1bmN0aW9uKCl7fSxpc1BlcnNpc3RlbnQ6a2R9KTtyZXR1cm4gYn1cbnZhciBuZD17ZXZlbnRQaGFzZTowLGJ1YmJsZXM6MCxjYW5jZWxhYmxlOjAsdGltZVN0YW1wOmZ1bmN0aW9uKGEpe3JldHVybiBhLnRpbWVTdGFtcHx8RGF0ZS5ub3coKX0sZGVmYXVsdFByZXZlbnRlZDowLGlzVHJ1c3RlZDowfSxvZD1tZChuZCkscGQ9QSh7fSxuZCx7dmlldzowLGRldGFpbDowfSkscWQ9bWQocGQpLHJkLHNkLHRkLHZkPUEoe30scGQse3NjcmVlblg6MCxzY3JlZW5ZOjAsY2xpZW50WDowLGNsaWVudFk6MCxwYWdlWDowLHBhZ2VZOjAsY3RybEtleTowLHNoaWZ0S2V5OjAsYWx0S2V5OjAsbWV0YUtleTowLGdldE1vZGlmaWVyU3RhdGU6dWQsYnV0dG9uOjAsYnV0dG9uczowLHJlbGF0ZWRUYXJnZXQ6ZnVuY3Rpb24oYSl7cmV0dXJuIHZvaWQgMD09PWEucmVsYXRlZFRhcmdldD9hLmZyb21FbGVtZW50PT09YS5zcmNFbGVtZW50P2EudG9FbGVtZW50OmEuZnJvbUVsZW1lbnQ6YS5yZWxhdGVkVGFyZ2V0fSxtb3ZlbWVudFg6ZnVuY3Rpb24oYSl7aWYoXCJtb3ZlbWVudFhcImluXG5hKXJldHVybiBhLm1vdmVtZW50WDthIT09dGQmJih0ZCYmXCJtb3VzZW1vdmVcIj09PWEudHlwZT8ocmQ9YS5zY3JlZW5YLXRkLnNjcmVlblgsc2Q9YS5zY3JlZW5ZLXRkLnNjcmVlblkpOnNkPXJkPTAsdGQ9YSk7cmV0dXJuIHJkfSxtb3ZlbWVudFk6ZnVuY3Rpb24oYSl7cmV0dXJuXCJtb3ZlbWVudFlcImluIGE/YS5tb3ZlbWVudFk6c2R9fSksd2Q9bWQodmQpLHhkPUEoe30sdmQse2RhdGFUcmFuc2ZlcjowfSkseWQ9bWQoeGQpLHpkPUEoe30scGQse3JlbGF0ZWRUYXJnZXQ6MH0pLEFkPW1kKHpkKSxCZD1BKHt9LG5kLHthbmltYXRpb25OYW1lOjAsZWxhcHNlZFRpbWU6MCxwc2V1ZG9FbGVtZW50OjB9KSxDZD1tZChCZCksRGQ9QSh7fSxuZCx7Y2xpcGJvYXJkRGF0YTpmdW5jdGlvbihhKXtyZXR1cm5cImNsaXBib2FyZERhdGFcImluIGE/YS5jbGlwYm9hcmREYXRhOndpbmRvdy5jbGlwYm9hcmREYXRhfX0pLEVkPW1kKERkKSxGZD1BKHt9LG5kLHtkYXRhOjB9KSxHZD1tZChGZCksSGQ9e0VzYzpcIkVzY2FwZVwiLFxuU3BhY2ViYXI6XCIgXCIsTGVmdDpcIkFycm93TGVmdFwiLFVwOlwiQXJyb3dVcFwiLFJpZ2h0OlwiQXJyb3dSaWdodFwiLERvd246XCJBcnJvd0Rvd25cIixEZWw6XCJEZWxldGVcIixXaW46XCJPU1wiLE1lbnU6XCJDb250ZXh0TWVudVwiLEFwcHM6XCJDb250ZXh0TWVudVwiLFNjcm9sbDpcIlNjcm9sbExvY2tcIixNb3pQcmludGFibGVLZXk6XCJVbmlkZW50aWZpZWRcIn0sSWQ9ezg6XCJCYWNrc3BhY2VcIiw5OlwiVGFiXCIsMTI6XCJDbGVhclwiLDEzOlwiRW50ZXJcIiwxNjpcIlNoaWZ0XCIsMTc6XCJDb250cm9sXCIsMTg6XCJBbHRcIiwxOTpcIlBhdXNlXCIsMjA6XCJDYXBzTG9ja1wiLDI3OlwiRXNjYXBlXCIsMzI6XCIgXCIsMzM6XCJQYWdlVXBcIiwzNDpcIlBhZ2VEb3duXCIsMzU6XCJFbmRcIiwzNjpcIkhvbWVcIiwzNzpcIkFycm93TGVmdFwiLDM4OlwiQXJyb3dVcFwiLDM5OlwiQXJyb3dSaWdodFwiLDQwOlwiQXJyb3dEb3duXCIsNDU6XCJJbnNlcnRcIiw0NjpcIkRlbGV0ZVwiLDExMjpcIkYxXCIsMTEzOlwiRjJcIiwxMTQ6XCJGM1wiLDExNTpcIkY0XCIsMTE2OlwiRjVcIiwxMTc6XCJGNlwiLDExODpcIkY3XCIsXG4xMTk6XCJGOFwiLDEyMDpcIkY5XCIsMTIxOlwiRjEwXCIsMTIyOlwiRjExXCIsMTIzOlwiRjEyXCIsMTQ0OlwiTnVtTG9ja1wiLDE0NTpcIlNjcm9sbExvY2tcIiwyMjQ6XCJNZXRhXCJ9LEpkPXtBbHQ6XCJhbHRLZXlcIixDb250cm9sOlwiY3RybEtleVwiLE1ldGE6XCJtZXRhS2V5XCIsU2hpZnQ6XCJzaGlmdEtleVwifTtmdW5jdGlvbiBLZChhKXt2YXIgYj10aGlzLm5hdGl2ZUV2ZW50O3JldHVybiBiLmdldE1vZGlmaWVyU3RhdGU/Yi5nZXRNb2RpZmllclN0YXRlKGEpOihhPUpkW2FdKT8hIWJbYV06ITF9ZnVuY3Rpb24gdWQoKXtyZXR1cm4gS2R9XG52YXIgTGQ9QSh7fSxwZCx7a2V5OmZ1bmN0aW9uKGEpe2lmKGEua2V5KXt2YXIgYj1IZFthLmtleV18fGEua2V5O2lmKFwiVW5pZGVudGlmaWVkXCIhPT1iKXJldHVybiBifXJldHVyblwia2V5cHJlc3NcIj09PWEudHlwZT8oYT1qZChhKSwxMz09PWE/XCJFbnRlclwiOlN0cmluZy5mcm9tQ2hhckNvZGUoYSkpOlwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/SWRbYS5rZXlDb2RlXXx8XCJVbmlkZW50aWZpZWRcIjpcIlwifSxjb2RlOjAsbG9jYXRpb246MCxjdHJsS2V5OjAsc2hpZnRLZXk6MCxhbHRLZXk6MCxtZXRhS2V5OjAscmVwZWF0OjAsbG9jYWxlOjAsZ2V0TW9kaWZpZXJTdGF0ZTp1ZCxjaGFyQ29kZTpmdW5jdGlvbihhKXtyZXR1cm5cImtleXByZXNzXCI9PT1hLnR5cGU/amQoYSk6MH0sa2V5Q29kZTpmdW5jdGlvbihhKXtyZXR1cm5cImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP2Eua2V5Q29kZTowfSx3aGljaDpmdW5jdGlvbihhKXtyZXR1cm5cImtleXByZXNzXCI9PT1cbmEudHlwZT9qZChhKTpcImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP2Eua2V5Q29kZTowfX0pLE1kPW1kKExkKSxOZD1BKHt9LHZkLHtwb2ludGVySWQ6MCx3aWR0aDowLGhlaWdodDowLHByZXNzdXJlOjAsdGFuZ2VudGlhbFByZXNzdXJlOjAsdGlsdFg6MCx0aWx0WTowLHR3aXN0OjAscG9pbnRlclR5cGU6MCxpc1ByaW1hcnk6MH0pLE9kPW1kKE5kKSxQZD1BKHt9LHBkLHt0b3VjaGVzOjAsdGFyZ2V0VG91Y2hlczowLGNoYW5nZWRUb3VjaGVzOjAsYWx0S2V5OjAsbWV0YUtleTowLGN0cmxLZXk6MCxzaGlmdEtleTowLGdldE1vZGlmaWVyU3RhdGU6dWR9KSxRZD1tZChQZCksUmQ9QSh7fSxuZCx7cHJvcGVydHlOYW1lOjAsZWxhcHNlZFRpbWU6MCxwc2V1ZG9FbGVtZW50OjB9KSxTZD1tZChSZCksVGQ9QSh7fSx2ZCx7ZGVsdGFYOmZ1bmN0aW9uKGEpe3JldHVyblwiZGVsdGFYXCJpbiBhP2EuZGVsdGFYOlwid2hlZWxEZWx0YVhcImluIGE/LWEud2hlZWxEZWx0YVg6MH0sXG5kZWx0YVk6ZnVuY3Rpb24oYSl7cmV0dXJuXCJkZWx0YVlcImluIGE/YS5kZWx0YVk6XCJ3aGVlbERlbHRhWVwiaW4gYT8tYS53aGVlbERlbHRhWTpcIndoZWVsRGVsdGFcImluIGE/LWEud2hlZWxEZWx0YTowfSxkZWx0YVo6MCxkZWx0YU1vZGU6MH0pLFVkPW1kKFRkKSxWZD1bOSwxMywyNywzMl0sV2Q9aGEmJlwiQ29tcG9zaXRpb25FdmVudFwiaW4gd2luZG93LFhkPW51bGw7aGEmJlwiZG9jdW1lbnRNb2RlXCJpbiBkb2N1bWVudCYmKFhkPWRvY3VtZW50LmRvY3VtZW50TW9kZSk7dmFyIFlkPWhhJiZcIlRleHRFdmVudFwiaW4gd2luZG93JiYhWGQsWmQ9aGEmJighV2R8fFhkJiY4PFhkJiYxMT49WGQpLCRkPVN0cmluZy5mcm9tQ2hhckNvZGUoMzIpLGFlPSExO1xuZnVuY3Rpb24gYmUoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImtleXVwXCI6cmV0dXJuLTEhPT1WZC5pbmRleE9mKGIua2V5Q29kZSk7Y2FzZSBcImtleWRvd25cIjpyZXR1cm4gMjI5IT09Yi5rZXlDb2RlO2Nhc2UgXCJrZXlwcmVzc1wiOmNhc2UgXCJtb3VzZWRvd25cIjpjYXNlIFwiZm9jdXNvdXRcIjpyZXR1cm4hMDtkZWZhdWx0OnJldHVybiExfX1mdW5jdGlvbiBjZShhKXthPWEuZGV0YWlsO3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmXCJkYXRhXCJpbiBhP2EuZGF0YTpudWxsfXZhciBkZT0hMTtmdW5jdGlvbiBlZShhLGIpe3N3aXRjaChhKXtjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpyZXR1cm4gY2UoYik7Y2FzZSBcImtleXByZXNzXCI6aWYoMzIhPT1iLndoaWNoKXJldHVybiBudWxsO2FlPSEwO3JldHVybiAkZDtjYXNlIFwidGV4dElucHV0XCI6cmV0dXJuIGE9Yi5kYXRhLGE9PT0kZCYmYWU/bnVsbDphO2RlZmF1bHQ6cmV0dXJuIG51bGx9fVxuZnVuY3Rpb24gZmUoYSxiKXtpZihkZSlyZXR1cm5cImNvbXBvc2l0aW9uZW5kXCI9PT1hfHwhV2QmJmJlKGEsYik/KGE9aWQoKSxoZD1nZD1mZD1udWxsLGRlPSExLGEpOm51bGw7c3dpdGNoKGEpe2Nhc2UgXCJwYXN0ZVwiOnJldHVybiBudWxsO2Nhc2UgXCJrZXlwcmVzc1wiOmlmKCEoYi5jdHJsS2V5fHxiLmFsdEtleXx8Yi5tZXRhS2V5KXx8Yi5jdHJsS2V5JiZiLmFsdEtleSl7aWYoYi5jaGFyJiYxPGIuY2hhci5sZW5ndGgpcmV0dXJuIGIuY2hhcjtpZihiLndoaWNoKXJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKGIud2hpY2gpfXJldHVybiBudWxsO2Nhc2UgXCJjb21wb3NpdGlvbmVuZFwiOnJldHVybiBaZCYmXCJrb1wiIT09Yi5sb2NhbGU/bnVsbDpiLmRhdGE7ZGVmYXVsdDpyZXR1cm4gbnVsbH19XG52YXIgZ2U9e2NvbG9yOiEwLGRhdGU6ITAsZGF0ZXRpbWU6ITAsXCJkYXRldGltZS1sb2NhbFwiOiEwLGVtYWlsOiEwLG1vbnRoOiEwLG51bWJlcjohMCxwYXNzd29yZDohMCxyYW5nZTohMCxzZWFyY2g6ITAsdGVsOiEwLHRleHQ6ITAsdGltZTohMCx1cmw6ITAsd2VlazohMH07ZnVuY3Rpb24gaGUoYSl7dmFyIGI9YSYmYS5ub2RlTmFtZSYmYS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVyblwiaW5wdXRcIj09PWI/ISFnZVthLnR5cGVdOlwidGV4dGFyZWFcIj09PWI/ITA6ITF9ZnVuY3Rpb24gaWUoYSxiLGMsZCl7QmIoZCk7Yj1qZShiLFwib25DaGFuZ2VcIik7MDxiLmxlbmd0aCYmKGM9bmV3IG9kKFwib25DaGFuZ2VcIixcImNoYW5nZVwiLG51bGwsYyxkKSxhLnB1c2goe2V2ZW50OmMsbGlzdGVuZXJzOmJ9KSl9dmFyIGtlPW51bGwsbGU9bnVsbDtmdW5jdGlvbiBtZShhKXtuZShhLDApfWZ1bmN0aW9uIG9lKGEpe3ZhciBiPXBlKGEpO2lmKFVhKGIpKXJldHVybiBhfVxuZnVuY3Rpb24gcWUoYSxiKXtpZihcImNoYW5nZVwiPT09YSlyZXR1cm4gYn12YXIgcmU9ITE7aWYoaGEpe3ZhciBzZTtpZihoYSl7dmFyIHRlPVwib25pbnB1dFwiaW4gZG9jdW1lbnQ7aWYoIXRlKXt2YXIgdWU9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTt1ZS5zZXRBdHRyaWJ1dGUoXCJvbmlucHV0XCIsXCJyZXR1cm47XCIpO3RlPVwiZnVuY3Rpb25cIj09PXR5cGVvZiB1ZS5vbmlucHV0fXNlPXRlfWVsc2Ugc2U9ITE7cmU9c2UmJighZG9jdW1lbnQuZG9jdW1lbnRNb2RlfHw5PGRvY3VtZW50LmRvY3VtZW50TW9kZSl9ZnVuY3Rpb24gdmUoKXtrZSYmKGtlLmRldGFjaEV2ZW50KFwib25wcm9wZXJ0eWNoYW5nZVwiLHdlKSxsZT1rZT1udWxsKX1mdW5jdGlvbiB3ZShhKXtpZihcInZhbHVlXCI9PT1hLnByb3BlcnR5TmFtZSYmb2UobGUpKXt2YXIgYj1bXTtpZShiLGxlLGEsdWIoYSkpO0diKG1lLGIpfX1cbmZ1bmN0aW9uIHhlKGEsYixjKXtcImZvY3VzaW5cIj09PWE/KHZlKCksa2U9YixsZT1jLGtlLmF0dGFjaEV2ZW50KFwib25wcm9wZXJ0eWNoYW5nZVwiLHdlKSk6XCJmb2N1c291dFwiPT09YSYmdmUoKX1mdW5jdGlvbiB5ZShhKXtpZihcInNlbGVjdGlvbmNoYW5nZVwiPT09YXx8XCJrZXl1cFwiPT09YXx8XCJrZXlkb3duXCI9PT1hKXJldHVybiBvZShsZSl9ZnVuY3Rpb24gemUoYSxiKXtpZihcImNsaWNrXCI9PT1hKXJldHVybiBvZShiKX1mdW5jdGlvbiBBZShhLGIpe2lmKFwiaW5wdXRcIj09PWF8fFwiY2hhbmdlXCI9PT1hKXJldHVybiBvZShiKX1mdW5jdGlvbiBCZShhLGIpe3JldHVybiBhPT09YiYmKDAhPT1hfHwxL2E9PT0xL2IpfHxhIT09YSYmYiE9PWJ9dmFyIENlPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBPYmplY3QuaXM/T2JqZWN0LmlzOkJlO1xuZnVuY3Rpb24gRGUoYSxiKXtpZihDZShhLGIpKXJldHVybiEwO2lmKFwib2JqZWN0XCIhPT10eXBlb2YgYXx8bnVsbD09PWF8fFwib2JqZWN0XCIhPT10eXBlb2YgYnx8bnVsbD09PWIpcmV0dXJuITE7dmFyIGM9T2JqZWN0LmtleXMoYSksZD1PYmplY3Qua2V5cyhiKTtpZihjLmxlbmd0aCE9PWQubGVuZ3RoKXJldHVybiExO2ZvcihkPTA7ZDxjLmxlbmd0aDtkKyspe3ZhciBlPWNbZF07aWYoIWlhLmNhbGwoYixlKXx8IUNlKGFbZV0sYltlXSkpcmV0dXJuITF9cmV0dXJuITB9ZnVuY3Rpb24gRWUoYSl7Zm9yKDthJiZhLmZpcnN0Q2hpbGQ7KWE9YS5maXJzdENoaWxkO3JldHVybiBhfVxuZnVuY3Rpb24gRmUoYSxiKXt2YXIgYz1FZShhKTthPTA7Zm9yKHZhciBkO2M7KXtpZigzPT09Yy5ub2RlVHlwZSl7ZD1hK2MudGV4dENvbnRlbnQubGVuZ3RoO2lmKGE8PWImJmQ+PWIpcmV0dXJue25vZGU6YyxvZmZzZXQ6Yi1hfTthPWR9YTp7Zm9yKDtjOyl7aWYoYy5uZXh0U2libGluZyl7Yz1jLm5leHRTaWJsaW5nO2JyZWFrIGF9Yz1jLnBhcmVudE5vZGV9Yz12b2lkIDB9Yz1FZShjKX19ZnVuY3Rpb24gR2UoYSxiKXtyZXR1cm4gYSYmYj9hPT09Yj8hMDphJiYzPT09YS5ub2RlVHlwZT8hMTpiJiYzPT09Yi5ub2RlVHlwZT9HZShhLGIucGFyZW50Tm9kZSk6XCJjb250YWluc1wiaW4gYT9hLmNvbnRhaW5zKGIpOmEuY29tcGFyZURvY3VtZW50UG9zaXRpb24/ISEoYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihiKSYxNik6ITE6ITF9XG5mdW5jdGlvbiBIZSgpe2Zvcih2YXIgYT13aW5kb3csYj1WYSgpO2IgaW5zdGFuY2VvZiBhLkhUTUxJRnJhbWVFbGVtZW50Oyl7dHJ5e3ZhciBjPVwic3RyaW5nXCI9PT10eXBlb2YgYi5jb250ZW50V2luZG93LmxvY2F0aW9uLmhyZWZ9Y2F0Y2goZCl7Yz0hMX1pZihjKWE9Yi5jb250ZW50V2luZG93O2Vsc2UgYnJlYWs7Yj1WYShhLmRvY3VtZW50KX1yZXR1cm4gYn1mdW5jdGlvbiBJZShhKXt2YXIgYj1hJiZhLm5vZGVOYW1lJiZhLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuIGImJihcImlucHV0XCI9PT1iJiYoXCJ0ZXh0XCI9PT1hLnR5cGV8fFwic2VhcmNoXCI9PT1hLnR5cGV8fFwidGVsXCI9PT1hLnR5cGV8fFwidXJsXCI9PT1hLnR5cGV8fFwicGFzc3dvcmRcIj09PWEudHlwZSl8fFwidGV4dGFyZWFcIj09PWJ8fFwidHJ1ZVwiPT09YS5jb250ZW50RWRpdGFibGUpfVxuZnVuY3Rpb24gSmUoYSl7dmFyIGI9SGUoKSxjPWEuZm9jdXNlZEVsZW0sZD1hLnNlbGVjdGlvblJhbmdlO2lmKGIhPT1jJiZjJiZjLm93bmVyRG9jdW1lbnQmJkdlKGMub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsYykpe2lmKG51bGwhPT1kJiZJZShjKSlpZihiPWQuc3RhcnQsYT1kLmVuZCx2b2lkIDA9PT1hJiYoYT1iKSxcInNlbGVjdGlvblN0YXJ0XCJpbiBjKWMuc2VsZWN0aW9uU3RhcnQ9YixjLnNlbGVjdGlvbkVuZD1NYXRoLm1pbihhLGMudmFsdWUubGVuZ3RoKTtlbHNlIGlmKGE9KGI9Yy5vd25lckRvY3VtZW50fHxkb2N1bWVudCkmJmIuZGVmYXVsdFZpZXd8fHdpbmRvdyxhLmdldFNlbGVjdGlvbil7YT1hLmdldFNlbGVjdGlvbigpO3ZhciBlPWMudGV4dENvbnRlbnQubGVuZ3RoLGY9TWF0aC5taW4oZC5zdGFydCxlKTtkPXZvaWQgMD09PWQuZW5kP2Y6TWF0aC5taW4oZC5lbmQsZSk7IWEuZXh0ZW5kJiZmPmQmJihlPWQsZD1mLGY9ZSk7ZT1GZShjLGYpO3ZhciBnPUZlKGMsXG5kKTtlJiZnJiYoMSE9PWEucmFuZ2VDb3VudHx8YS5hbmNob3JOb2RlIT09ZS5ub2RlfHxhLmFuY2hvck9mZnNldCE9PWUub2Zmc2V0fHxhLmZvY3VzTm9kZSE9PWcubm9kZXx8YS5mb2N1c09mZnNldCE9PWcub2Zmc2V0KSYmKGI9Yi5jcmVhdGVSYW5nZSgpLGIuc2V0U3RhcnQoZS5ub2RlLGUub2Zmc2V0KSxhLnJlbW92ZUFsbFJhbmdlcygpLGY+ZD8oYS5hZGRSYW5nZShiKSxhLmV4dGVuZChnLm5vZGUsZy5vZmZzZXQpKTooYi5zZXRFbmQoZy5ub2RlLGcub2Zmc2V0KSxhLmFkZFJhbmdlKGIpKSl9Yj1bXTtmb3IoYT1jO2E9YS5wYXJlbnROb2RlOykxPT09YS5ub2RlVHlwZSYmYi5wdXNoKHtlbGVtZW50OmEsbGVmdDphLnNjcm9sbExlZnQsdG9wOmEuc2Nyb2xsVG9wfSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGMuZm9jdXMmJmMuZm9jdXMoKTtmb3IoYz0wO2M8Yi5sZW5ndGg7YysrKWE9YltjXSxhLmVsZW1lbnQuc2Nyb2xsTGVmdD1hLmxlZnQsYS5lbGVtZW50LnNjcm9sbFRvcD1hLnRvcH19XG52YXIgS2U9aGEmJlwiZG9jdW1lbnRNb2RlXCJpbiBkb2N1bWVudCYmMTE+PWRvY3VtZW50LmRvY3VtZW50TW9kZSxMZT1udWxsLE1lPW51bGwsTmU9bnVsbCxPZT0hMTtcbmZ1bmN0aW9uIFBlKGEsYixjKXt2YXIgZD1jLndpbmRvdz09PWM/Yy5kb2N1bWVudDo5PT09Yy5ub2RlVHlwZT9jOmMub3duZXJEb2N1bWVudDtPZXx8bnVsbD09TGV8fExlIT09VmEoZCl8fChkPUxlLFwic2VsZWN0aW9uU3RhcnRcImluIGQmJkllKGQpP2Q9e3N0YXJ0OmQuc2VsZWN0aW9uU3RhcnQsZW5kOmQuc2VsZWN0aW9uRW5kfTooZD0oZC5vd25lckRvY3VtZW50JiZkLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXd8fHdpbmRvdykuZ2V0U2VsZWN0aW9uKCksZD17YW5jaG9yTm9kZTpkLmFuY2hvck5vZGUsYW5jaG9yT2Zmc2V0OmQuYW5jaG9yT2Zmc2V0LGZvY3VzTm9kZTpkLmZvY3VzTm9kZSxmb2N1c09mZnNldDpkLmZvY3VzT2Zmc2V0fSksTmUmJkRlKE5lLGQpfHwoTmU9ZCxkPWplKE1lLFwib25TZWxlY3RcIiksMDxkLmxlbmd0aCYmKGI9bmV3IG9kKFwib25TZWxlY3RcIixcInNlbGVjdFwiLG51bGwsYixjKSxhLnB1c2goe2V2ZW50OmIsbGlzdGVuZXJzOmR9KSxiLnRhcmdldD1MZSkpKX1cbmZ1bmN0aW9uIFFlKGEsYil7dmFyIGM9e307Y1thLnRvTG93ZXJDYXNlKCldPWIudG9Mb3dlckNhc2UoKTtjW1wiV2Via2l0XCIrYV09XCJ3ZWJraXRcIitiO2NbXCJNb3pcIithXT1cIm1velwiK2I7cmV0dXJuIGN9dmFyIFJlPXthbmltYXRpb25lbmQ6UWUoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvbkVuZFwiKSxhbmltYXRpb25pdGVyYXRpb246UWUoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvbkl0ZXJhdGlvblwiKSxhbmltYXRpb25zdGFydDpRZShcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uU3RhcnRcIiksdHJhbnNpdGlvbmVuZDpRZShcIlRyYW5zaXRpb25cIixcIlRyYW5zaXRpb25FbmRcIil9LFNlPXt9LFRlPXt9O1xuaGEmJihUZT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLnN0eWxlLFwiQW5pbWF0aW9uRXZlbnRcImluIHdpbmRvd3x8KGRlbGV0ZSBSZS5hbmltYXRpb25lbmQuYW5pbWF0aW9uLGRlbGV0ZSBSZS5hbmltYXRpb25pdGVyYXRpb24uYW5pbWF0aW9uLGRlbGV0ZSBSZS5hbmltYXRpb25zdGFydC5hbmltYXRpb24pLFwiVHJhbnNpdGlvbkV2ZW50XCJpbiB3aW5kb3d8fGRlbGV0ZSBSZS50cmFuc2l0aW9uZW5kLnRyYW5zaXRpb24pO2Z1bmN0aW9uIFVlKGEpe2lmKFNlW2FdKXJldHVybiBTZVthXTtpZighUmVbYV0pcmV0dXJuIGE7dmFyIGI9UmVbYV0sYztmb3IoYyBpbiBiKWlmKGIuaGFzT3duUHJvcGVydHkoYykmJmMgaW4gVGUpcmV0dXJuIFNlW2FdPWJbY107cmV0dXJuIGF9dmFyIFZlPVVlKFwiYW5pbWF0aW9uZW5kXCIpLFdlPVVlKFwiYW5pbWF0aW9uaXRlcmF0aW9uXCIpLFhlPVVlKFwiYW5pbWF0aW9uc3RhcnRcIiksWWU9VWUoXCJ0cmFuc2l0aW9uZW5kXCIpLFplPW5ldyBNYXAsJGU9XCJhYm9ydCBhdXhDbGljayBjYW5jZWwgY2FuUGxheSBjYW5QbGF5VGhyb3VnaCBjbGljayBjbG9zZSBjb250ZXh0TWVudSBjb3B5IGN1dCBkcmFnIGRyYWdFbmQgZHJhZ0VudGVyIGRyYWdFeGl0IGRyYWdMZWF2ZSBkcmFnT3ZlciBkcmFnU3RhcnQgZHJvcCBkdXJhdGlvbkNoYW5nZSBlbXB0aWVkIGVuY3J5cHRlZCBlbmRlZCBlcnJvciBnb3RQb2ludGVyQ2FwdHVyZSBpbnB1dCBpbnZhbGlkIGtleURvd24ga2V5UHJlc3Mga2V5VXAgbG9hZCBsb2FkZWREYXRhIGxvYWRlZE1ldGFkYXRhIGxvYWRTdGFydCBsb3N0UG9pbnRlckNhcHR1cmUgbW91c2VEb3duIG1vdXNlTW92ZSBtb3VzZU91dCBtb3VzZU92ZXIgbW91c2VVcCBwYXN0ZSBwYXVzZSBwbGF5IHBsYXlpbmcgcG9pbnRlckNhbmNlbCBwb2ludGVyRG93biBwb2ludGVyTW92ZSBwb2ludGVyT3V0IHBvaW50ZXJPdmVyIHBvaW50ZXJVcCBwcm9ncmVzcyByYXRlQ2hhbmdlIHJlc2V0IHJlc2l6ZSBzZWVrZWQgc2Vla2luZyBzdGFsbGVkIHN1Ym1pdCBzdXNwZW5kIHRpbWVVcGRhdGUgdG91Y2hDYW5jZWwgdG91Y2hFbmQgdG91Y2hTdGFydCB2b2x1bWVDaGFuZ2Ugc2Nyb2xsIHRvZ2dsZSB0b3VjaE1vdmUgd2FpdGluZyB3aGVlbFwiLnNwbGl0KFwiIFwiKTtcbmZ1bmN0aW9uIGFmKGEsYil7WmUuc2V0KGEsYik7ZWEoYixbYV0pfWZvcih2YXIgYmY9MDtiZjwkZS5sZW5ndGg7YmYrKyl7dmFyIGNmPSRlW2JmXSxkZj1jZi50b0xvd2VyQ2FzZSgpLGVmPWNmWzBdLnRvVXBwZXJDYXNlKCkrY2Yuc2xpY2UoMSk7YWYoZGYsXCJvblwiK2VmKX1hZihWZSxcIm9uQW5pbWF0aW9uRW5kXCIpO2FmKFdlLFwib25BbmltYXRpb25JdGVyYXRpb25cIik7YWYoWGUsXCJvbkFuaW1hdGlvblN0YXJ0XCIpO2FmKFwiZGJsY2xpY2tcIixcIm9uRG91YmxlQ2xpY2tcIik7YWYoXCJmb2N1c2luXCIsXCJvbkZvY3VzXCIpO2FmKFwiZm9jdXNvdXRcIixcIm9uQmx1clwiKTthZihZZSxcIm9uVHJhbnNpdGlvbkVuZFwiKTtmYShcIm9uTW91c2VFbnRlclwiLFtcIm1vdXNlb3V0XCIsXCJtb3VzZW92ZXJcIl0pO2ZhKFwib25Nb3VzZUxlYXZlXCIsW1wibW91c2VvdXRcIixcIm1vdXNlb3ZlclwiXSk7ZmEoXCJvblBvaW50ZXJFbnRlclwiLFtcInBvaW50ZXJvdXRcIixcInBvaW50ZXJvdmVyXCJdKTtcbmZhKFwib25Qb2ludGVyTGVhdmVcIixbXCJwb2ludGVyb3V0XCIsXCJwb2ludGVyb3ZlclwiXSk7ZWEoXCJvbkNoYW5nZVwiLFwiY2hhbmdlIGNsaWNrIGZvY3VzaW4gZm9jdXNvdXQgaW5wdXQga2V5ZG93biBrZXl1cCBzZWxlY3Rpb25jaGFuZ2VcIi5zcGxpdChcIiBcIikpO2VhKFwib25TZWxlY3RcIixcImZvY3Vzb3V0IGNvbnRleHRtZW51IGRyYWdlbmQgZm9jdXNpbiBrZXlkb3duIGtleXVwIG1vdXNlZG93biBtb3VzZXVwIHNlbGVjdGlvbmNoYW5nZVwiLnNwbGl0KFwiIFwiKSk7ZWEoXCJvbkJlZm9yZUlucHV0XCIsW1wiY29tcG9zaXRpb25lbmRcIixcImtleXByZXNzXCIsXCJ0ZXh0SW5wdXRcIixcInBhc3RlXCJdKTtlYShcIm9uQ29tcG9zaXRpb25FbmRcIixcImNvbXBvc2l0aW9uZW5kIGZvY3Vzb3V0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpKTtlYShcIm9uQ29tcG9zaXRpb25TdGFydFwiLFwiY29tcG9zaXRpb25zdGFydCBmb2N1c291dCBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKSk7XG5lYShcIm9uQ29tcG9zaXRpb25VcGRhdGVcIixcImNvbXBvc2l0aW9udXBkYXRlIGZvY3Vzb3V0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpKTt2YXIgZmY9XCJhYm9ydCBjYW5wbGF5IGNhbnBsYXl0aHJvdWdoIGR1cmF0aW9uY2hhbmdlIGVtcHRpZWQgZW5jcnlwdGVkIGVuZGVkIGVycm9yIGxvYWRlZGRhdGEgbG9hZGVkbWV0YWRhdGEgbG9hZHN0YXJ0IHBhdXNlIHBsYXkgcGxheWluZyBwcm9ncmVzcyByYXRlY2hhbmdlIHJlc2l6ZSBzZWVrZWQgc2Vla2luZyBzdGFsbGVkIHN1c3BlbmQgdGltZXVwZGF0ZSB2b2x1bWVjaGFuZ2Ugd2FpdGluZ1wiLnNwbGl0KFwiIFwiKSxnZj1uZXcgU2V0KFwiY2FuY2VsIGNsb3NlIGludmFsaWQgbG9hZCBzY3JvbGwgdG9nZ2xlXCIuc3BsaXQoXCIgXCIpLmNvbmNhdChmZikpO1xuZnVuY3Rpb24gaGYoYSxiLGMpe3ZhciBkPWEudHlwZXx8XCJ1bmtub3duLWV2ZW50XCI7YS5jdXJyZW50VGFyZ2V0PWM7UmIoZCxiLHZvaWQgMCxhKTthLmN1cnJlbnRUYXJnZXQ9bnVsbH1cbmZ1bmN0aW9uIG5lKGEsYil7Yj0wIT09KGImNCk7Zm9yKHZhciBjPTA7YzxhLmxlbmd0aDtjKyspe3ZhciBkPWFbY10sZT1kLmV2ZW50O2Q9ZC5saXN0ZW5lcnM7YTp7dmFyIGY9dm9pZCAwO2lmKGIpZm9yKHZhciBnPWQubGVuZ3RoLTE7MDw9ZztnLS0pe3ZhciBoPWRbZ10saz1oLmluc3RhbmNlLGw9aC5jdXJyZW50VGFyZ2V0O2g9aC5saXN0ZW5lcjtpZihrIT09ZiYmZS5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpKWJyZWFrIGE7aGYoZSxoLGwpO2Y9a31lbHNlIGZvcihnPTA7ZzxkLmxlbmd0aDtnKyspe2g9ZFtnXTtrPWguaW5zdGFuY2U7bD1oLmN1cnJlbnRUYXJnZXQ7aD1oLmxpc3RlbmVyO2lmKGshPT1mJiZlLmlzUHJvcGFnYXRpb25TdG9wcGVkKCkpYnJlYWsgYTtoZihlLGgsbCk7Zj1rfX19aWYoTmIpdGhyb3cgYT1PYixOYj0hMSxPYj1udWxsLGE7fVxuZnVuY3Rpb24gRihhLGIpe3ZhciBjPWJbamZdO3ZvaWQgMD09PWMmJihjPWJbamZdPW5ldyBTZXQpO3ZhciBkPWErXCJfX2J1YmJsZVwiO2MuaGFzKGQpfHwoa2YoYixhLDIsITEpLGMuYWRkKGQpKX1mdW5jdGlvbiBsZihhLGIsYyl7dmFyIGQ9MDtiJiYoZHw9NCk7a2YoYyxhLGQsYil9dmFyIG1mPVwiX3JlYWN0TGlzdGVuaW5nXCIrTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc2xpY2UoMik7ZnVuY3Rpb24gbmYoYSl7aWYoIWFbbWZdKXthW21mXT0hMDtjYS5mb3JFYWNoKGZ1bmN0aW9uKGIpe1wic2VsZWN0aW9uY2hhbmdlXCIhPT1iJiYoZ2YuaGFzKGIpfHxsZihiLCExLGEpLGxmKGIsITAsYSkpfSk7dmFyIGI9OT09PWEubm9kZVR5cGU/YTphLm93bmVyRG9jdW1lbnQ7bnVsbD09PWJ8fGJbbWZdfHwoYlttZl09ITAsbGYoXCJzZWxlY3Rpb25jaGFuZ2VcIiwhMSxiKSl9fVxuZnVuY3Rpb24ga2YoYSxiLGMsZCl7c3dpdGNoKGVkKGIpKXtjYXNlIDE6dmFyIGU9JGM7YnJlYWs7Y2FzZSA0OmU9YmQ7YnJlYWs7ZGVmYXVsdDplPWFkfWM9ZS5iaW5kKG51bGwsYixjLGEpO2U9dm9pZCAwOyFJYnx8XCJ0b3VjaHN0YXJ0XCIhPT1iJiZcInRvdWNobW92ZVwiIT09YiYmXCJ3aGVlbFwiIT09Ynx8KGU9ITApO2Q/dm9pZCAwIT09ZT9hLmFkZEV2ZW50TGlzdGVuZXIoYixjLHtjYXB0dXJlOiEwLHBhc3NpdmU6ZX0pOmEuYWRkRXZlbnRMaXN0ZW5lcihiLGMsITApOnZvaWQgMCE9PWU/YS5hZGRFdmVudExpc3RlbmVyKGIsYyx7cGFzc2l2ZTplfSk6YS5hZGRFdmVudExpc3RlbmVyKGIsYywhMSl9XG5mdW5jdGlvbiBjZChhLGIsYyxkLGUpe3ZhciBmPWQ7aWYoMD09PShiJjEpJiYwPT09KGImMikmJm51bGwhPT1kKWE6Zm9yKDs7KXtpZihudWxsPT09ZClyZXR1cm47dmFyIGc9ZC50YWc7aWYoMz09PWd8fDQ9PT1nKXt2YXIgaD1kLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2lmKGg9PT1lfHw4PT09aC5ub2RlVHlwZSYmaC5wYXJlbnROb2RlPT09ZSlicmVhaztpZig0PT09Zylmb3IoZz1kLnJldHVybjtudWxsIT09Zzspe3ZhciBrPWcudGFnO2lmKDM9PT1rfHw0PT09aylpZihrPWcuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8saz09PWV8fDg9PT1rLm5vZGVUeXBlJiZrLnBhcmVudE5vZGU9PT1lKXJldHVybjtnPWcucmV0dXJufWZvcig7bnVsbCE9PWg7KXtnPVNjKGgpO2lmKG51bGw9PT1nKXJldHVybjtrPWcudGFnO2lmKDU9PT1rfHw2PT09ayl7ZD1mPWc7Y29udGludWUgYX1oPWgucGFyZW50Tm9kZX19ZD1kLnJldHVybn1HYihmdW5jdGlvbigpe3ZhciBkPWYsZT11YihjKSxnPVtdO1xuYTp7dmFyIGg9WmUuZ2V0KGEpO2lmKHZvaWQgMCE9PWgpe3ZhciBrPW9kLG49YTtzd2l0Y2goYSl7Y2FzZSBcImtleXByZXNzXCI6aWYoMD09PWpkKGMpKWJyZWFrIGE7Y2FzZSBcImtleWRvd25cIjpjYXNlIFwia2V5dXBcIjprPU1kO2JyZWFrO2Nhc2UgXCJmb2N1c2luXCI6bj1cImZvY3VzXCI7az1BZDticmVhaztjYXNlIFwiZm9jdXNvdXRcIjpuPVwiYmx1clwiO2s9QWQ7YnJlYWs7Y2FzZSBcImJlZm9yZWJsdXJcIjpjYXNlIFwiYWZ0ZXJibHVyXCI6az1BZDticmVhaztjYXNlIFwiY2xpY2tcIjppZigyPT09Yy5idXR0b24pYnJlYWsgYTtjYXNlIFwiYXV4Y2xpY2tcIjpjYXNlIFwiZGJsY2xpY2tcIjpjYXNlIFwibW91c2Vkb3duXCI6Y2FzZSBcIm1vdXNlbW92ZVwiOmNhc2UgXCJtb3VzZXVwXCI6Y2FzZSBcIm1vdXNlb3V0XCI6Y2FzZSBcIm1vdXNlb3ZlclwiOmNhc2UgXCJjb250ZXh0bWVudVwiOms9d2Q7YnJlYWs7Y2FzZSBcImRyYWdcIjpjYXNlIFwiZHJhZ2VuZFwiOmNhc2UgXCJkcmFnZW50ZXJcIjpjYXNlIFwiZHJhZ2V4aXRcIjpjYXNlIFwiZHJhZ2xlYXZlXCI6Y2FzZSBcImRyYWdvdmVyXCI6Y2FzZSBcImRyYWdzdGFydFwiOmNhc2UgXCJkcm9wXCI6az1cbnlkO2JyZWFrO2Nhc2UgXCJ0b3VjaGNhbmNlbFwiOmNhc2UgXCJ0b3VjaGVuZFwiOmNhc2UgXCJ0b3VjaG1vdmVcIjpjYXNlIFwidG91Y2hzdGFydFwiOms9UWQ7YnJlYWs7Y2FzZSBWZTpjYXNlIFdlOmNhc2UgWGU6az1DZDticmVhaztjYXNlIFllOms9U2Q7YnJlYWs7Y2FzZSBcInNjcm9sbFwiOms9cWQ7YnJlYWs7Y2FzZSBcIndoZWVsXCI6az1VZDticmVhaztjYXNlIFwiY29weVwiOmNhc2UgXCJjdXRcIjpjYXNlIFwicGFzdGVcIjprPUVkO2JyZWFrO2Nhc2UgXCJnb3Rwb2ludGVyY2FwdHVyZVwiOmNhc2UgXCJsb3N0cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwicG9pbnRlcmNhbmNlbFwiOmNhc2UgXCJwb2ludGVyZG93blwiOmNhc2UgXCJwb2ludGVybW92ZVwiOmNhc2UgXCJwb2ludGVyb3V0XCI6Y2FzZSBcInBvaW50ZXJvdmVyXCI6Y2FzZSBcInBvaW50ZXJ1cFwiOms9T2R9dmFyIHY9MCE9PShiJjQpLEM9IXYmJlwic2Nyb2xsXCI9PT1hLHQ9dj9udWxsIT09aD9oK1wiQ2FwdHVyZVwiOm51bGw6aDt2PVtdO2Zvcih2YXIgcj1kLHg7bnVsbCE9PVxucjspe3g9cjt2YXIgQj14LnN0YXRlTm9kZTs1PT09eC50YWcmJm51bGwhPT1CJiYoeD1CLG51bGwhPT10JiYoQj1IYihyLHQpLG51bGwhPUImJnYucHVzaChvZihyLEIseCkpKSk7aWYoQylicmVhaztyPXIucmV0dXJufTA8di5sZW5ndGgmJihoPW5ldyBrKGgsbixudWxsLGMsZSksZy5wdXNoKHtldmVudDpoLGxpc3RlbmVyczp2fSkpfX1pZigwPT09KGImNykpe2E6e2g9XCJtb3VzZW92ZXJcIj09PWF8fFwicG9pbnRlcm92ZXJcIj09PWE7az1cIm1vdXNlb3V0XCI9PT1hfHxcInBvaW50ZXJvdXRcIj09PWE7aWYoaCYmYyE9PXRiJiYobj1jLnJlbGF0ZWRUYXJnZXR8fGMuZnJvbUVsZW1lbnQpJiYoU2Mobil8fG5bcGZdKSlicmVhayBhO2lmKGt8fGgpe2g9ZS53aW5kb3c9PT1lP2U6KGg9ZS5vd25lckRvY3VtZW50KT9oLmRlZmF1bHRWaWV3fHxoLnBhcmVudFdpbmRvdzp3aW5kb3c7aWYoayl7aWYobj1jLnJlbGF0ZWRUYXJnZXR8fGMudG9FbGVtZW50LGs9ZCxuPW4/U2Mobik6bnVsbCxudWxsIT09XG5uJiYoQz1TYihuKSxuIT09Q3x8NSE9PW4udGFnJiY2IT09bi50YWcpKW49bnVsbH1lbHNlIGs9bnVsbCxuPWQ7aWYoayE9PW4pe3Y9d2Q7Qj1cIm9uTW91c2VMZWF2ZVwiO3Q9XCJvbk1vdXNlRW50ZXJcIjtyPVwibW91c2VcIjtpZihcInBvaW50ZXJvdXRcIj09PWF8fFwicG9pbnRlcm92ZXJcIj09PWEpdj1PZCxCPVwib25Qb2ludGVyTGVhdmVcIix0PVwib25Qb2ludGVyRW50ZXJcIixyPVwicG9pbnRlclwiO0M9bnVsbD09az9oOnBlKGspO3g9bnVsbD09bj9oOnBlKG4pO2g9bmV3IHYoQixyK1wibGVhdmVcIixrLGMsZSk7aC50YXJnZXQ9QztoLnJlbGF0ZWRUYXJnZXQ9eDtCPW51bGw7U2MoZSk9PT1kJiYodj1uZXcgdih0LHIrXCJlbnRlclwiLG4sYyxlKSx2LnRhcmdldD14LHYucmVsYXRlZFRhcmdldD1DLEI9dik7Qz1CO2lmKGsmJm4pYjp7dj1rO3Q9bjtyPTA7Zm9yKHg9djt4O3g9cWYoeCkpcisrO3g9MDtmb3IoQj10O0I7Qj1xZihCKSl4Kys7Zm9yKDswPHIteDspdj1xZih2KSxyLS07Zm9yKDswPHgtcjspdD1cbnFmKHQpLHgtLTtmb3IoO3ItLTspe2lmKHY9PT10fHxudWxsIT09dCYmdj09PXQuYWx0ZXJuYXRlKWJyZWFrIGI7dj1xZih2KTt0PXFmKHQpfXY9bnVsbH1lbHNlIHY9bnVsbDtudWxsIT09ayYmcmYoZyxoLGssdiwhMSk7bnVsbCE9PW4mJm51bGwhPT1DJiZyZihnLEMsbix2LCEwKX19fWE6e2g9ZD9wZShkKTp3aW5kb3c7az1oLm5vZGVOYW1lJiZoLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7aWYoXCJzZWxlY3RcIj09PWt8fFwiaW5wdXRcIj09PWsmJlwiZmlsZVwiPT09aC50eXBlKXZhciBPPXFlO2Vsc2UgaWYoaGUoaCkpaWYocmUpTz1BZTtlbHNle089eWU7dmFyIFQ9eGV9ZWxzZShrPWgubm9kZU5hbWUpJiZcImlucHV0XCI9PT1rLnRvTG93ZXJDYXNlKCkmJihcImNoZWNrYm94XCI9PT1oLnR5cGV8fFwicmFkaW9cIj09PWgudHlwZSkmJihPPXplKTtpZihPJiYoTz1PKGEsZCkpKXtpZShnLE8sYyxlKTticmVhayBhfVQmJlQoYSxoLGQpO1wiZm9jdXNvdXRcIj09PWEmJihUPWguX3dyYXBwZXJTdGF0ZSkmJlxuVC5jb250cm9sbGVkJiZcIm51bWJlclwiPT09aC50eXBlJiYkYShoLFwibnVtYmVyXCIsaC52YWx1ZSl9VD1kP3BlKGQpOndpbmRvdztzd2l0Y2goYSl7Y2FzZSBcImZvY3VzaW5cIjppZihoZShUKXx8XCJ0cnVlXCI9PT1ULmNvbnRlbnRFZGl0YWJsZSlMZT1ULE1lPWQsTmU9bnVsbDticmVhaztjYXNlIFwiZm9jdXNvdXRcIjpOZT1NZT1MZT1udWxsO2JyZWFrO2Nhc2UgXCJtb3VzZWRvd25cIjpPZT0hMDticmVhaztjYXNlIFwiY29udGV4dG1lbnVcIjpjYXNlIFwibW91c2V1cFwiOmNhc2UgXCJkcmFnZW5kXCI6T2U9ITE7UGUoZyxjLGUpO2JyZWFrO2Nhc2UgXCJzZWxlY3Rpb25jaGFuZ2VcIjppZihLZSlicmVhaztjYXNlIFwia2V5ZG93blwiOmNhc2UgXCJrZXl1cFwiOlBlKGcsYyxlKX12YXIgemE7aWYoV2QpYjp7c3dpdGNoKGEpe2Nhc2UgXCJjb21wb3NpdGlvbnN0YXJ0XCI6dmFyIEw9XCJvbkNvbXBvc2l0aW9uU3RhcnRcIjticmVhayBiO2Nhc2UgXCJjb21wb3NpdGlvbmVuZFwiOkw9XCJvbkNvbXBvc2l0aW9uRW5kXCI7YnJlYWsgYjtcbmNhc2UgXCJjb21wb3NpdGlvbnVwZGF0ZVwiOkw9XCJvbkNvbXBvc2l0aW9uVXBkYXRlXCI7YnJlYWsgYn1MPXZvaWQgMH1lbHNlIGRlP2JlKGEsYykmJihMPVwib25Db21wb3NpdGlvbkVuZFwiKTpcImtleWRvd25cIj09PWEmJjIyOT09PWMua2V5Q29kZSYmKEw9XCJvbkNvbXBvc2l0aW9uU3RhcnRcIik7TCYmKFpkJiZcImtvXCIhPT1jLmxvY2FsZSYmKGRlfHxcIm9uQ29tcG9zaXRpb25TdGFydFwiIT09TD9cIm9uQ29tcG9zaXRpb25FbmRcIj09PUwmJmRlJiYoemE9aWQoKSk6KGZkPWUsZ2Q9XCJ2YWx1ZVwiaW4gZmQ/ZmQudmFsdWU6ZmQudGV4dENvbnRlbnQsZGU9ITApKSxUPWplKGQsTCksMDxULmxlbmd0aCYmKEw9bmV3IEdkKEwsYSxudWxsLGMsZSksZy5wdXNoKHtldmVudDpMLGxpc3RlbmVyczpUfSksemE/TC5kYXRhPXphOih6YT1jZShjKSxudWxsIT09emEmJihMLmRhdGE9emEpKSkpO2lmKHphPVlkP2VlKGEsYyk6ZmUoYSxjKSlkPWplKGQsXCJvbkJlZm9yZUlucHV0XCIpLDA8ZC5sZW5ndGgmJihlPW5ldyBHZChcIm9uQmVmb3JlSW5wdXRcIixcblwiYmVmb3JlaW5wdXRcIixudWxsLGMsZSksZy5wdXNoKHtldmVudDplLGxpc3RlbmVyczpkfSksZS5kYXRhPXphKX1uZShnLGIpfSl9ZnVuY3Rpb24gb2YoYSxiLGMpe3JldHVybntpbnN0YW5jZTphLGxpc3RlbmVyOmIsY3VycmVudFRhcmdldDpjfX1mdW5jdGlvbiBqZShhLGIpe2Zvcih2YXIgYz1iK1wiQ2FwdHVyZVwiLGQ9W107bnVsbCE9PWE7KXt2YXIgZT1hLGY9ZS5zdGF0ZU5vZGU7NT09PWUudGFnJiZudWxsIT09ZiYmKGU9ZixmPUhiKGEsYyksbnVsbCE9ZiYmZC51bnNoaWZ0KG9mKGEsZixlKSksZj1IYihhLGIpLG51bGwhPWYmJmQucHVzaChvZihhLGYsZSkpKTthPWEucmV0dXJufXJldHVybiBkfWZ1bmN0aW9uIHFmKGEpe2lmKG51bGw9PT1hKXJldHVybiBudWxsO2RvIGE9YS5yZXR1cm47d2hpbGUoYSYmNSE9PWEudGFnKTtyZXR1cm4gYT9hOm51bGx9XG5mdW5jdGlvbiByZihhLGIsYyxkLGUpe2Zvcih2YXIgZj1iLl9yZWFjdE5hbWUsZz1bXTtudWxsIT09YyYmYyE9PWQ7KXt2YXIgaD1jLGs9aC5hbHRlcm5hdGUsbD1oLnN0YXRlTm9kZTtpZihudWxsIT09ayYmaz09PWQpYnJlYWs7NT09PWgudGFnJiZudWxsIT09bCYmKGg9bCxlPyhrPUhiKGMsZiksbnVsbCE9ayYmZy51bnNoaWZ0KG9mKGMsayxoKSkpOmV8fChrPUhiKGMsZiksbnVsbCE9ayYmZy5wdXNoKG9mKGMsayxoKSkpKTtjPWMucmV0dXJufTAhPT1nLmxlbmd0aCYmYS5wdXNoKHtldmVudDpiLGxpc3RlbmVyczpnfSl9dmFyIHNmPS9cXHJcXG4/L2csdGY9L1xcdTAwMDB8XFx1RkZGRC9nO2Z1bmN0aW9uIHVmKGEpe3JldHVybihcInN0cmluZ1wiPT09dHlwZW9mIGE/YTpcIlwiK2EpLnJlcGxhY2Uoc2YsXCJcXG5cIikucmVwbGFjZSh0ZixcIlwiKX1mdW5jdGlvbiB2ZihhLGIsYyl7Yj11ZihiKTtpZih1ZihhKSE9PWImJmMpdGhyb3cgRXJyb3IocCg0MjUpKTt9ZnVuY3Rpb24gd2YoKXt9XG52YXIgeGY9bnVsbDtmdW5jdGlvbiB5ZihhLGIpe3JldHVyblwidGV4dGFyZWFcIj09PWF8fFwibm9zY3JpcHRcIj09PWF8fFwic3RyaW5nXCI9PT10eXBlb2YgYi5jaGlsZHJlbnx8XCJudW1iZXJcIj09PXR5cGVvZiBiLmNoaWxkcmVufHxcIm9iamVjdFwiPT09dHlwZW9mIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJm51bGwhPT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MLl9faHRtbH1cbnZhciB6Zj1cImZ1bmN0aW9uXCI9PT10eXBlb2Ygc2V0VGltZW91dD9zZXRUaW1lb3V0OnZvaWQgMCxBZj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgY2xlYXJUaW1lb3V0P2NsZWFyVGltZW91dDp2b2lkIDAsQmY9XCJmdW5jdGlvblwiPT09dHlwZW9mIFByb21pc2U/UHJvbWlzZTp2b2lkIDAsRGY9XCJmdW5jdGlvblwiPT09dHlwZW9mIHF1ZXVlTWljcm90YXNrP3F1ZXVlTWljcm90YXNrOlwidW5kZWZpbmVkXCIhPT10eXBlb2YgQmY/ZnVuY3Rpb24oYSl7cmV0dXJuIEJmLnJlc29sdmUobnVsbCkudGhlbihhKS5jYXRjaChDZil9OnpmO2Z1bmN0aW9uIENmKGEpe3NldFRpbWVvdXQoZnVuY3Rpb24oKXt0aHJvdyBhO30pfVxuZnVuY3Rpb24gRWYoYSxiKXt2YXIgYz1iLGQ9MDtkb3t2YXIgZT1jLm5leHRTaWJsaW5nO2EucmVtb3ZlQ2hpbGQoYyk7aWYoZSYmOD09PWUubm9kZVR5cGUpaWYoYz1lLmRhdGEsXCIvJFwiPT09Yyl7aWYoMD09PWQpe2EucmVtb3ZlQ2hpbGQoZSk7WWMoYik7cmV0dXJufWQtLX1lbHNlXCIkXCIhPT1jJiZcIiQ/XCIhPT1jJiZcIiQhXCIhPT1jfHxkKys7Yz1lfXdoaWxlKGMpO1ljKGIpfWZ1bmN0aW9uIEZmKGEpe2Zvcig7bnVsbCE9YTthPWEubmV4dFNpYmxpbmcpe3ZhciBiPWEubm9kZVR5cGU7aWYoMT09PWJ8fDM9PT1iKWJyZWFrO2lmKDg9PT1iKXtiPWEuZGF0YTtpZihcIiRcIj09PWJ8fFwiJCFcIj09PWJ8fFwiJD9cIj09PWIpYnJlYWs7aWYoXCIvJFwiPT09YilyZXR1cm4gbnVsbH19cmV0dXJuIGF9XG5mdW5jdGlvbiBHZihhKXthPWEucHJldmlvdXNTaWJsaW5nO2Zvcih2YXIgYj0wO2E7KXtpZig4PT09YS5ub2RlVHlwZSl7dmFyIGM9YS5kYXRhO2lmKFwiJFwiPT09Y3x8XCIkIVwiPT09Y3x8XCIkP1wiPT09Yyl7aWYoMD09PWIpcmV0dXJuIGE7Yi0tfWVsc2VcIi8kXCI9PT1jJiZiKyt9YT1hLnByZXZpb3VzU2libGluZ31yZXR1cm4gbnVsbH12YXIgSGY9TWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc2xpY2UoMiksSWY9XCJfX3JlYWN0RmliZXIkXCIrSGYsSmY9XCJfX3JlYWN0UHJvcHMkXCIrSGYscGY9XCJfX3JlYWN0Q29udGFpbmVyJFwiK0hmLGpmPVwiX19yZWFjdEV2ZW50cyRcIitIZixLZj1cIl9fcmVhY3RMaXN0ZW5lcnMkXCIrSGYsTGY9XCJfX3JlYWN0SGFuZGxlcyRcIitIZjtcbmZ1bmN0aW9uIFNjKGEpe3ZhciBiPWFbSWZdO2lmKGIpcmV0dXJuIGI7Zm9yKHZhciBjPWEucGFyZW50Tm9kZTtjOyl7aWYoYj1jW3BmXXx8Y1tJZl0pe2M9Yi5hbHRlcm5hdGU7aWYobnVsbCE9PWIuY2hpbGR8fG51bGwhPT1jJiZudWxsIT09Yy5jaGlsZClmb3IoYT1HZihhKTtudWxsIT09YTspe2lmKGM9YVtJZl0pcmV0dXJuIGM7YT1HZihhKX1yZXR1cm4gYn1hPWM7Yz1hLnBhcmVudE5vZGV9cmV0dXJuIG51bGx9ZnVuY3Rpb24gemIoYSl7YT1hW0lmXXx8YVtwZl07cmV0dXJuIWF8fDUhPT1hLnRhZyYmNiE9PWEudGFnJiYxMyE9PWEudGFnJiYzIT09YS50YWc/bnVsbDphfWZ1bmN0aW9uIHBlKGEpe2lmKDU9PT1hLnRhZ3x8Nj09PWEudGFnKXJldHVybiBhLnN0YXRlTm9kZTt0aHJvdyBFcnJvcihwKDMzKSk7fWZ1bmN0aW9uIEFiKGEpe3JldHVybiBhW0pmXXx8bnVsbH12YXIgTWY9W10sTmY9LTE7ZnVuY3Rpb24gT2YoYSl7cmV0dXJue2N1cnJlbnQ6YX19XG5mdW5jdGlvbiBHKGEpezA+TmZ8fChhLmN1cnJlbnQ9TWZbTmZdLE1mW05mXT1udWxsLE5mLS0pfWZ1bmN0aW9uIEgoYSxiKXtOZisrO01mW05mXT1hLmN1cnJlbnQ7YS5jdXJyZW50PWJ9dmFyIFBmPXt9LEk9T2YoUGYpLFFmPU9mKCExKSxSZj1QZjtmdW5jdGlvbiBTZihhLGIpe3ZhciBjPWEudHlwZS5jb250ZXh0VHlwZXM7aWYoIWMpcmV0dXJuIFBmO3ZhciBkPWEuc3RhdGVOb2RlO2lmKGQmJmQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD09PWIpcmV0dXJuIGQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ7dmFyIGU9e30sZjtmb3IoZiBpbiBjKWVbZl09YltmXTtkJiYoYT1hLnN0YXRlTm9kZSxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9YixhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0PWUpO3JldHVybiBlfVxuZnVuY3Rpb24gVGYoYSl7YT1hLmNoaWxkQ29udGV4dFR5cGVzO3JldHVybiBudWxsIT09YSYmdm9pZCAwIT09YX1mdW5jdGlvbiBVZigpe0coUWYpO0coSSl9ZnVuY3Rpb24gVmYoYSxiLGMpe2lmKEkuY3VycmVudCE9PVBmKXRocm93IEVycm9yKHAoMTY4KSk7SChJLGIpO0goUWYsYyl9ZnVuY3Rpb24gV2YoYSxiLGMpe3ZhciBkPWEuc3RhdGVOb2RlO2I9Yi5jaGlsZENvbnRleHRUeXBlcztpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZC5nZXRDaGlsZENvbnRleHQpcmV0dXJuIGM7ZD1kLmdldENoaWxkQ29udGV4dCgpO2Zvcih2YXIgZSBpbiBkKWlmKCEoZSBpbiBiKSl0aHJvdyBFcnJvcihwKDEwOCxQYShhKXx8XCJVbmtub3duXCIsZSkpO3JldHVybiBBKHt9LGMsZCl9XG5mdW5jdGlvbiBYZihhKXthPShhPWEuc3RhdGVOb2RlKSYmYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dHx8UGY7UmY9SS5jdXJyZW50O0goSSxhKTtIKFFmLFFmLmN1cnJlbnQpO3JldHVybiEwfWZ1bmN0aW9uIFlmKGEsYixjKXt2YXIgZD1hLnN0YXRlTm9kZTtpZighZCl0aHJvdyBFcnJvcihwKDE2OSkpO2M/KGE9V2YoYSxiLFJmKSxkLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0PWEsRyhRZiksRyhJKSxIKEksYSkpOkcoUWYpO0goUWYsYyl9dmFyIFpmPW51bGwsJGY9ITEsYWc9ITE7ZnVuY3Rpb24gYmcoYSl7bnVsbD09PVpmP1pmPVthXTpaZi5wdXNoKGEpfWZ1bmN0aW9uIGNnKGEpeyRmPSEwO2JnKGEpfVxuZnVuY3Rpb24gZGcoKXtpZighYWcmJm51bGwhPT1aZil7YWc9ITA7dmFyIGE9MCxiPUU7dHJ5e3ZhciBjPVpmO2ZvcihFPTE7YTxjLmxlbmd0aDthKyspe3ZhciBkPWNbYV07ZG8gZD1kKCEwKTt3aGlsZShudWxsIT09ZCl9WmY9bnVsbDskZj0hMX1jYXRjaChlKXt0aHJvdyBudWxsIT09WmYmJihaZj1aZi5zbGljZShhKzEpKSxZYihjYyxkZyksZTt9ZmluYWxseXtFPWIsYWc9ITF9fXJldHVybiBudWxsfXZhciBlZz1zYS5SZWFjdEN1cnJlbnRCYXRjaENvbmZpZztmdW5jdGlvbiBmZyhhLGIpe2lmKGEmJmEuZGVmYXVsdFByb3BzKXtiPUEoe30sYik7YT1hLmRlZmF1bHRQcm9wcztmb3IodmFyIGMgaW4gYSl2b2lkIDA9PT1iW2NdJiYoYltjXT1hW2NdKTtyZXR1cm4gYn1yZXR1cm4gYn12YXIgZ2c9T2YobnVsbCksaGc9bnVsbCxpZz1udWxsLGpnPW51bGw7ZnVuY3Rpb24ga2coKXtqZz1pZz1oZz1udWxsfVxuZnVuY3Rpb24gbGcoYSl7dmFyIGI9Z2cuY3VycmVudDtHKGdnKTthLl9jdXJyZW50VmFsdWU9Yn1mdW5jdGlvbiBtZyhhLGIsYyl7Zm9yKDtudWxsIT09YTspe3ZhciBkPWEuYWx0ZXJuYXRlOyhhLmNoaWxkTGFuZXMmYikhPT1iPyhhLmNoaWxkTGFuZXN8PWIsbnVsbCE9PWQmJihkLmNoaWxkTGFuZXN8PWIpKTpudWxsIT09ZCYmKGQuY2hpbGRMYW5lcyZiKSE9PWImJihkLmNoaWxkTGFuZXN8PWIpO2lmKGE9PT1jKWJyZWFrO2E9YS5yZXR1cm59fWZ1bmN0aW9uIG5nKGEsYil7aGc9YTtqZz1pZz1udWxsO2E9YS5kZXBlbmRlbmNpZXM7bnVsbCE9PWEmJm51bGwhPT1hLmZpcnN0Q29udGV4dCYmKDAhPT0oYS5sYW5lcyZiKSYmKG9nPSEwKSxhLmZpcnN0Q29udGV4dD1udWxsKX1cbmZ1bmN0aW9uIHBnKGEpe3ZhciBiPWEuX2N1cnJlbnRWYWx1ZTtpZihqZyE9PWEpaWYoYT17Y29udGV4dDphLG1lbW9pemVkVmFsdWU6YixuZXh0Om51bGx9LG51bGw9PT1pZyl7aWYobnVsbD09PWhnKXRocm93IEVycm9yKHAoMzA4KSk7aWc9YTtoZy5kZXBlbmRlbmNpZXM9e2xhbmVzOjAsZmlyc3RDb250ZXh0OmF9fWVsc2UgaWc9aWcubmV4dD1hO3JldHVybiBifXZhciBxZz1udWxsLHJnPSExO2Z1bmN0aW9uIHNnKGEpe2EudXBkYXRlUXVldWU9e2Jhc2VTdGF0ZTphLm1lbW9pemVkU3RhdGUsZmlyc3RCYXNlVXBkYXRlOm51bGwsbGFzdEJhc2VVcGRhdGU6bnVsbCxzaGFyZWQ6e3BlbmRpbmc6bnVsbCxpbnRlcmxlYXZlZDpudWxsLGxhbmVzOjB9LGVmZmVjdHM6bnVsbH19XG5mdW5jdGlvbiB0ZyhhLGIpe2E9YS51cGRhdGVRdWV1ZTtiLnVwZGF0ZVF1ZXVlPT09YSYmKGIudXBkYXRlUXVldWU9e2Jhc2VTdGF0ZTphLmJhc2VTdGF0ZSxmaXJzdEJhc2VVcGRhdGU6YS5maXJzdEJhc2VVcGRhdGUsbGFzdEJhc2VVcGRhdGU6YS5sYXN0QmFzZVVwZGF0ZSxzaGFyZWQ6YS5zaGFyZWQsZWZmZWN0czphLmVmZmVjdHN9KX1mdW5jdGlvbiB1ZyhhLGIpe3JldHVybntldmVudFRpbWU6YSxsYW5lOmIsdGFnOjAscGF5bG9hZDpudWxsLGNhbGxiYWNrOm51bGwsbmV4dDpudWxsfX1cbmZ1bmN0aW9uIHZnKGEsYil7dmFyIGM9YS51cGRhdGVRdWV1ZTtudWxsIT09YyYmKGM9Yy5zaGFyZWQsbnVsbCE9PUomJjAhPT0oYS5tb2RlJjEpJiYwPT09KEsmMik/KGE9Yy5pbnRlcmxlYXZlZCxudWxsPT09YT8oYi5uZXh0PWIsbnVsbD09PXFnP3FnPVtjXTpxZy5wdXNoKGMpKTooYi5uZXh0PWEubmV4dCxhLm5leHQ9YiksYy5pbnRlcmxlYXZlZD1iKTooYT1jLnBlbmRpbmcsbnVsbD09PWE/Yi5uZXh0PWI6KGIubmV4dD1hLm5leHQsYS5uZXh0PWIpLGMucGVuZGluZz1iKSl9ZnVuY3Rpb24gd2coYSxiLGMpe2I9Yi51cGRhdGVRdWV1ZTtpZihudWxsIT09YiYmKGI9Yi5zaGFyZWQsMCE9PShjJjQxOTQyNDApKSl7dmFyIGQ9Yi5sYW5lcztkJj1hLnBlbmRpbmdMYW5lcztjfD1kO2IubGFuZXM9Yzt5YyhhLGMpfX1cbmZ1bmN0aW9uIHhnKGEsYil7dmFyIGM9YS51cGRhdGVRdWV1ZSxkPWEuYWx0ZXJuYXRlO2lmKG51bGwhPT1kJiYoZD1kLnVwZGF0ZVF1ZXVlLGM9PT1kKSl7dmFyIGU9bnVsbCxmPW51bGw7Yz1jLmZpcnN0QmFzZVVwZGF0ZTtpZihudWxsIT09Yyl7ZG97dmFyIGc9e2V2ZW50VGltZTpjLmV2ZW50VGltZSxsYW5lOmMubGFuZSx0YWc6Yy50YWcscGF5bG9hZDpjLnBheWxvYWQsY2FsbGJhY2s6Yy5jYWxsYmFjayxuZXh0Om51bGx9O251bGw9PT1mP2U9Zj1nOmY9Zi5uZXh0PWc7Yz1jLm5leHR9d2hpbGUobnVsbCE9PWMpO251bGw9PT1mP2U9Zj1iOmY9Zi5uZXh0PWJ9ZWxzZSBlPWY9YjtjPXtiYXNlU3RhdGU6ZC5iYXNlU3RhdGUsZmlyc3RCYXNlVXBkYXRlOmUsbGFzdEJhc2VVcGRhdGU6ZixzaGFyZWQ6ZC5zaGFyZWQsZWZmZWN0czpkLmVmZmVjdHN9O2EudXBkYXRlUXVldWU9YztyZXR1cm59YT1jLmxhc3RCYXNlVXBkYXRlO251bGw9PT1hP2MuZmlyc3RCYXNlVXBkYXRlPWI6YS5uZXh0PVxuYjtjLmxhc3RCYXNlVXBkYXRlPWJ9XG5mdW5jdGlvbiB5ZyhhLGIsYyxkKXt2YXIgZT1hLnVwZGF0ZVF1ZXVlO3JnPSExO3ZhciBmPWUuZmlyc3RCYXNlVXBkYXRlLGc9ZS5sYXN0QmFzZVVwZGF0ZSxoPWUuc2hhcmVkLnBlbmRpbmc7aWYobnVsbCE9PWgpe2Uuc2hhcmVkLnBlbmRpbmc9bnVsbDt2YXIgaz1oLGw9ay5uZXh0O2submV4dD1udWxsO251bGw9PT1nP2Y9bDpnLm5leHQ9bDtnPWs7dmFyIG09YS5hbHRlcm5hdGU7bnVsbCE9PW0mJihtPW0udXBkYXRlUXVldWUsaD1tLmxhc3RCYXNlVXBkYXRlLGghPT1nJiYobnVsbD09PWg/bS5maXJzdEJhc2VVcGRhdGU9bDpoLm5leHQ9bCxtLmxhc3RCYXNlVXBkYXRlPWspKX1pZihudWxsIT09Zil7dmFyIHc9ZS5iYXNlU3RhdGU7Zz0wO209bD1rPW51bGw7aD1mO2Rve3ZhciB1PWgubGFuZSx5PWguZXZlbnRUaW1lO2lmKChkJnUpPT09dSl7bnVsbCE9PW0mJihtPW0ubmV4dD17ZXZlbnRUaW1lOnksbGFuZTowLHRhZzpoLnRhZyxwYXlsb2FkOmgucGF5bG9hZCxjYWxsYmFjazpoLmNhbGxiYWNrLFxubmV4dDpudWxsfSk7YTp7dmFyIG49YSx2PWg7dT1iO3k9Yztzd2l0Y2godi50YWcpe2Nhc2UgMTpuPXYucGF5bG9hZDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2Ygbil7dz1uLmNhbGwoeSx3LHUpO2JyZWFrIGF9dz1uO2JyZWFrIGE7Y2FzZSAzOm4uZmxhZ3M9bi5mbGFncyYtNjU1Mzd8MTI4O2Nhc2UgMDpuPXYucGF5bG9hZDt1PVwiZnVuY3Rpb25cIj09PXR5cGVvZiBuP24uY2FsbCh5LHcsdSk6bjtpZihudWxsPT09dXx8dm9pZCAwPT09dSlicmVhayBhO3c9QSh7fSx3LHUpO2JyZWFrIGE7Y2FzZSAyOnJnPSEwfX1udWxsIT09aC5jYWxsYmFjayYmMCE9PWgubGFuZSYmKGEuZmxhZ3N8PTY0LHU9ZS5lZmZlY3RzLG51bGw9PT11P2UuZWZmZWN0cz1baF06dS5wdXNoKGgpKX1lbHNlIHk9e2V2ZW50VGltZTp5LGxhbmU6dSx0YWc6aC50YWcscGF5bG9hZDpoLnBheWxvYWQsY2FsbGJhY2s6aC5jYWxsYmFjayxuZXh0Om51bGx9LG51bGw9PT1tPyhsPW09eSxrPXcpOm09bS5uZXh0PXksZ3w9dTtcbmg9aC5uZXh0O2lmKG51bGw9PT1oKWlmKGg9ZS5zaGFyZWQucGVuZGluZyxudWxsPT09aClicmVhaztlbHNlIHU9aCxoPXUubmV4dCx1Lm5leHQ9bnVsbCxlLmxhc3RCYXNlVXBkYXRlPXUsZS5zaGFyZWQucGVuZGluZz1udWxsfXdoaWxlKDEpO251bGw9PT1tJiYoaz13KTtlLmJhc2VTdGF0ZT1rO2UuZmlyc3RCYXNlVXBkYXRlPWw7ZS5sYXN0QmFzZVVwZGF0ZT1tO2I9ZS5zaGFyZWQuaW50ZXJsZWF2ZWQ7aWYobnVsbCE9PWIpe2U9YjtkbyBnfD1lLmxhbmUsZT1lLm5leHQ7d2hpbGUoZSE9PWIpfWVsc2UgbnVsbD09PWYmJihlLnNoYXJlZC5sYW5lcz0wKTt6Z3w9ZzthLmxhbmVzPWc7YS5tZW1vaXplZFN0YXRlPXd9fVxuZnVuY3Rpb24gQWcoYSxiLGMpe2E9Yi5lZmZlY3RzO2IuZWZmZWN0cz1udWxsO2lmKG51bGwhPT1hKWZvcihiPTA7YjxhLmxlbmd0aDtiKyspe3ZhciBkPWFbYl0sZT1kLmNhbGxiYWNrO2lmKG51bGwhPT1lKXtkLmNhbGxiYWNrPW51bGw7ZD1jO2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBlKXRocm93IEVycm9yKHAoMTkxLGUpKTtlLmNhbGwoZCl9fX12YXIgQmc9KG5ldyBhYS5Db21wb25lbnQpLnJlZnM7ZnVuY3Rpb24gQ2coYSxiLGMsZCl7Yj1hLm1lbW9pemVkU3RhdGU7Yz1jKGQsYik7Yz1udWxsPT09Y3x8dm9pZCAwPT09Yz9iOkEoe30sYixjKTthLm1lbW9pemVkU3RhdGU9YzswPT09YS5sYW5lcyYmKGEudXBkYXRlUXVldWUuYmFzZVN0YXRlPWMpfVxudmFyIEZnPXtpc01vdW50ZWQ6ZnVuY3Rpb24oYSl7cmV0dXJuKGE9YS5fcmVhY3RJbnRlcm5hbHMpP1NiKGEpPT09YTohMX0sZW5xdWV1ZVNldFN0YXRlOmZ1bmN0aW9uKGEsYixjKXthPWEuX3JlYWN0SW50ZXJuYWxzO3ZhciBkPU0oKSxlPURnKGEpLGY9dWcoZCxlKTtmLnBheWxvYWQ9Yjt2b2lkIDAhPT1jJiZudWxsIT09YyYmKGYuY2FsbGJhY2s9Yyk7dmcoYSxmKTtiPUVnKGEsZSxkKTtudWxsIT09YiYmd2coYixhLGUpfSxlbnF1ZXVlUmVwbGFjZVN0YXRlOmZ1bmN0aW9uKGEsYixjKXthPWEuX3JlYWN0SW50ZXJuYWxzO3ZhciBkPU0oKSxlPURnKGEpLGY9dWcoZCxlKTtmLnRhZz0xO2YucGF5bG9hZD1iO3ZvaWQgMCE9PWMmJm51bGwhPT1jJiYoZi5jYWxsYmFjaz1jKTt2ZyhhLGYpO2I9RWcoYSxlLGQpO251bGwhPT1iJiZ3ZyhiLGEsZSl9LGVucXVldWVGb3JjZVVwZGF0ZTpmdW5jdGlvbihhLGIpe2E9YS5fcmVhY3RJbnRlcm5hbHM7dmFyIGM9TSgpLGQ9RGcoYSksZT11ZyhjLFxuZCk7ZS50YWc9Mjt2b2lkIDAhPT1iJiZudWxsIT09YiYmKGUuY2FsbGJhY2s9Yik7dmcoYSxlKTtiPUVnKGEsZCxjKTtudWxsIT09YiYmd2coYixhLGQpfX07ZnVuY3Rpb24gR2coYSxiLGMsZCxlLGYsZyl7YT1hLnN0YXRlTm9kZTtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYS5zaG91bGRDb21wb25lbnRVcGRhdGU/YS5zaG91bGRDb21wb25lbnRVcGRhdGUoZCxmLGcpOmIucHJvdG90eXBlJiZiLnByb3RvdHlwZS5pc1B1cmVSZWFjdENvbXBvbmVudD8hRGUoYyxkKXx8IURlKGUsZik6ITB9XG5mdW5jdGlvbiBIZyhhLGIsYyl7dmFyIGQ9ITEsZT1QZjt2YXIgZj1iLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWY/Zj1wZyhmKTooZT1UZihiKT9SZjpJLmN1cnJlbnQsZD1iLmNvbnRleHRUeXBlcyxmPShkPW51bGwhPT1kJiZ2b2lkIDAhPT1kKT9TZihhLGUpOlBmKTtiPW5ldyBiKGMsZik7YS5tZW1vaXplZFN0YXRlPW51bGwhPT1iLnN0YXRlJiZ2b2lkIDAhPT1iLnN0YXRlP2Iuc3RhdGU6bnVsbDtiLnVwZGF0ZXI9Rmc7YS5zdGF0ZU5vZGU9YjtiLl9yZWFjdEludGVybmFscz1hO2QmJihhPWEuc3RhdGVOb2RlLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD1lLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ9Zik7cmV0dXJuIGJ9XG5mdW5jdGlvbiBJZyhhLGIsYyxkKXthPWIuc3RhdGU7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmYi5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKGMsZCk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJmIuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoYyxkKTtiLnN0YXRlIT09YSYmRmcuZW5xdWV1ZVJlcGxhY2VTdGF0ZShiLGIuc3RhdGUsbnVsbCl9XG5mdW5jdGlvbiBKZyhhLGIsYyxkKXt2YXIgZT1hLnN0YXRlTm9kZTtlLnByb3BzPWM7ZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGU7ZS5yZWZzPUJnO3NnKGEpO3ZhciBmPWIuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09Zj9lLmNvbnRleHQ9cGcoZik6KGY9VGYoYik/UmY6SS5jdXJyZW50LGUuY29udGV4dD1TZihhLGYpKTtlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZTtmPWIuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBmJiYoQ2coYSxiLGYsYyksZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGUpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBiLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wc3x8XCJmdW5jdGlvblwiPT09dHlwZW9mIGUuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBlLmNvbXBvbmVudFdpbGxNb3VudHx8KGI9ZS5zdGF0ZSxcblwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLmNvbXBvbmVudFdpbGxNb3VudCYmZS5jb21wb25lbnRXaWxsTW91bnQoKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQoKSxiIT09ZS5zdGF0ZSYmRmcuZW5xdWV1ZVJlcGxhY2VTdGF0ZShlLGUuc3RhdGUsbnVsbCkseWcoYSxjLGUsZCksZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGUpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBlLmNvbXBvbmVudERpZE1vdW50JiYoYS5mbGFnc3w9NDE5NDMwOCl9dmFyIEtnPVtdLExnPTAsTWc9bnVsbCxOZz0wLE9nPVtdLFBnPTAsUWc9bnVsbCxSZz0xLFNnPVwiXCI7ZnVuY3Rpb24gVGcoYSxiKXtLZ1tMZysrXT1OZztLZ1tMZysrXT1NZztNZz1hO05nPWJ9XG5mdW5jdGlvbiBVZyhhLGIsYyl7T2dbUGcrK109Umc7T2dbUGcrK109U2c7T2dbUGcrK109UWc7UWc9YTt2YXIgZD1SZzthPVNnO3ZhciBlPTMyLWxjKGQpLTE7ZCY9figxPDxlKTtjKz0xO3ZhciBmPTMyLWxjKGIpK2U7aWYoMzA8Zil7dmFyIGc9ZS1lJTU7Zj0oZCYoMTw8ZyktMSkudG9TdHJpbmcoMzIpO2Q+Pj1nO2UtPWc7Umc9MTw8MzItbGMoYikrZXxjPDxlfGQ7U2c9ZithfWVsc2UgUmc9MTw8ZnxjPDxlfGQsU2c9YX1mdW5jdGlvbiBWZyhhKXtudWxsIT09YS5yZXR1cm4mJihUZyhhLDEpLFVnKGEsMSwwKSl9ZnVuY3Rpb24gV2coYSl7Zm9yKDthPT09TWc7KU1nPUtnWy0tTGddLEtnW0xnXT1udWxsLE5nPUtnWy0tTGddLEtnW0xnXT1udWxsO2Zvcig7YT09PVFnOylRZz1PZ1stLVBnXSxPZ1tQZ109bnVsbCxTZz1PZ1stLVBnXSxPZ1tQZ109bnVsbCxSZz1PZ1stLVBnXSxPZ1tQZ109bnVsbH12YXIgWGc9bnVsbCxZZz1udWxsLE49ITEsWmc9bnVsbDtcbmZ1bmN0aW9uICRnKGEsYil7dmFyIGM9YWgoNSxudWxsLG51bGwsMCk7Yy5lbGVtZW50VHlwZT1cIkRFTEVURURcIjtjLnN0YXRlTm9kZT1iO2MucmV0dXJuPWE7Yj1hLmRlbGV0aW9ucztudWxsPT09Yj8oYS5kZWxldGlvbnM9W2NdLGEuZmxhZ3N8PTE2KTpiLnB1c2goYyl9XG5mdW5jdGlvbiBiaChhLGIpe3N3aXRjaChhLnRhZyl7Y2FzZSA1OnZhciBjPWEudHlwZTtiPTEhPT1iLm5vZGVUeXBlfHxjLnRvTG93ZXJDYXNlKCkhPT1iLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk/bnVsbDpiO3JldHVybiBudWxsIT09Yj8oYS5zdGF0ZU5vZGU9YixYZz1hLFlnPUZmKGIuZmlyc3RDaGlsZCksITApOiExO2Nhc2UgNjpyZXR1cm4gYj1cIlwiPT09YS5wZW5kaW5nUHJvcHN8fDMhPT1iLm5vZGVUeXBlP251bGw6YixudWxsIT09Yj8oYS5zdGF0ZU5vZGU9YixYZz1hLFlnPW51bGwsITApOiExO2Nhc2UgMTM6cmV0dXJuIGI9OCE9PWIubm9kZVR5cGU/bnVsbDpiLG51bGwhPT1iPyhjPW51bGwhPT1RZz97aWQ6Umcsb3ZlcmZsb3c6U2d9Om51bGwsYS5tZW1vaXplZFN0YXRlPXtkZWh5ZHJhdGVkOmIsdHJlZUNvbnRleHQ6YyxyZXRyeUxhbmU6MTA3Mzc0MTgyNH0sYz1haCgxOCxudWxsLG51bGwsMCksYy5zdGF0ZU5vZGU9YixjLnJldHVybj1hLGEuY2hpbGQ9YyxYZz1hLFlnPVxubnVsbCwhMCk6ITE7ZGVmYXVsdDpyZXR1cm4hMX19ZnVuY3Rpb24gY2goYSl7cmV0dXJuIDAhPT0oYS5tb2RlJjEpJiYwPT09KGEuZmxhZ3MmMTI4KX1mdW5jdGlvbiBkaChhKXtpZihOKXt2YXIgYj1ZZztpZihiKXt2YXIgYz1iO2lmKCFiaChhLGIpKXtpZihjaChhKSl0aHJvdyBFcnJvcihwKDQxOCkpO2I9RmYoYy5uZXh0U2libGluZyk7dmFyIGQ9WGc7YiYmYmgoYSxiKT8kZyhkLGMpOihhLmZsYWdzPWEuZmxhZ3MmLTQwOTd8MixOPSExLFhnPWEpfX1lbHNle2lmKGNoKGEpKXRocm93IEVycm9yKHAoNDE4KSk7YS5mbGFncz1hLmZsYWdzJi00MDk3fDI7Tj0hMTtYZz1hfX19ZnVuY3Rpb24gZWgoYSl7Zm9yKGE9YS5yZXR1cm47bnVsbCE9PWEmJjUhPT1hLnRhZyYmMyE9PWEudGFnJiYxMyE9PWEudGFnOylhPWEucmV0dXJuO1hnPWF9XG5mdW5jdGlvbiBmaChhKXtpZihhIT09WGcpcmV0dXJuITE7aWYoIU4pcmV0dXJuIGVoKGEpLE49ITAsITE7dmFyIGI7KGI9MyE9PWEudGFnKSYmIShiPTUhPT1hLnRhZykmJihiPWEudHlwZSxiPVwiaGVhZFwiIT09YiYmXCJib2R5XCIhPT1iJiYheWYoYS50eXBlLGEubWVtb2l6ZWRQcm9wcykpO2lmKGImJihiPVlnKSl7aWYoY2goYSkpe2ZvcihhPVlnO2E7KWE9RmYoYS5uZXh0U2libGluZyk7dGhyb3cgRXJyb3IocCg0MTgpKTt9Zm9yKDtiOykkZyhhLGIpLGI9RmYoYi5uZXh0U2libGluZyl9ZWgoYSk7aWYoMTM9PT1hLnRhZyl7YT1hLm1lbW9pemVkU3RhdGU7YT1udWxsIT09YT9hLmRlaHlkcmF0ZWQ6bnVsbDtpZighYSl0aHJvdyBFcnJvcihwKDMxNykpO2E6e2E9YS5uZXh0U2libGluZztmb3IoYj0wO2E7KXtpZig4PT09YS5ub2RlVHlwZSl7dmFyIGM9YS5kYXRhO2lmKFwiLyRcIj09PWMpe2lmKDA9PT1iKXtZZz1GZihhLm5leHRTaWJsaW5nKTticmVhayBhfWItLX1lbHNlXCIkXCIhPT1jJiZcblwiJCFcIiE9PWMmJlwiJD9cIiE9PWN8fGIrK31hPWEubmV4dFNpYmxpbmd9WWc9bnVsbH19ZWxzZSBZZz1YZz9GZihhLnN0YXRlTm9kZS5uZXh0U2libGluZyk6bnVsbDtyZXR1cm4hMH1mdW5jdGlvbiBnaCgpe1lnPVhnPW51bGw7Tj0hMX1mdW5jdGlvbiBoaChhKXtudWxsPT09Wmc/Wmc9W2FdOlpnLnB1c2goYSl9XG5mdW5jdGlvbiBpaChhLGIsYyl7YT1jLnJlZjtpZihudWxsIT09YSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGEmJlwib2JqZWN0XCIhPT10eXBlb2YgYSl7aWYoYy5fb3duZXIpe2M9Yy5fb3duZXI7aWYoYyl7aWYoMSE9PWMudGFnKXRocm93IEVycm9yKHAoMzA5KSk7dmFyIGQ9Yy5zdGF0ZU5vZGV9aWYoIWQpdGhyb3cgRXJyb3IocCgxNDcsYSkpO3ZhciBlPWQsZj1cIlwiK2E7aWYobnVsbCE9PWImJm51bGwhPT1iLnJlZiYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGIucmVmJiZiLnJlZi5fc3RyaW5nUmVmPT09ZilyZXR1cm4gYi5yZWY7Yj1mdW5jdGlvbihhKXt2YXIgYj1lLnJlZnM7Yj09PUJnJiYoYj1lLnJlZnM9e30pO251bGw9PT1hP2RlbGV0ZSBiW2ZdOmJbZl09YX07Yi5fc3RyaW5nUmVmPWY7cmV0dXJuIGJ9aWYoXCJzdHJpbmdcIiE9PXR5cGVvZiBhKXRocm93IEVycm9yKHAoMjg0KSk7aWYoIWMuX293bmVyKXRocm93IEVycm9yKHAoMjkwLGEpKTt9cmV0dXJuIGF9XG5mdW5jdGlvbiBqaChhLGIpe2E9T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGIpO3Rocm93IEVycm9yKHAoMzEsXCJbb2JqZWN0IE9iamVjdF1cIj09PWE/XCJvYmplY3Qgd2l0aCBrZXlzIHtcIitPYmplY3Qua2V5cyhiKS5qb2luKFwiLCBcIikrXCJ9XCI6YSkpO31mdW5jdGlvbiBraChhKXt2YXIgYj1hLl9pbml0O3JldHVybiBiKGEuX3BheWxvYWQpfVxuZnVuY3Rpb24gbGgoYSl7ZnVuY3Rpb24gYihiLGMpe2lmKGEpe3ZhciBkPWIuZGVsZXRpb25zO251bGw9PT1kPyhiLmRlbGV0aW9ucz1bY10sYi5mbGFnc3w9MTYpOmQucHVzaChjKX19ZnVuY3Rpb24gYyhjLGQpe2lmKCFhKXJldHVybiBudWxsO2Zvcig7bnVsbCE9PWQ7KWIoYyxkKSxkPWQuc2libGluZztyZXR1cm4gbnVsbH1mdW5jdGlvbiBkKGEsYil7Zm9yKGE9bmV3IE1hcDtudWxsIT09YjspbnVsbCE9PWIua2V5P2Euc2V0KGIua2V5LGIpOmEuc2V0KGIuaW5kZXgsYiksYj1iLnNpYmxpbmc7cmV0dXJuIGF9ZnVuY3Rpb24gZShhLGIpe2E9bWgoYSxiKTthLmluZGV4PTA7YS5zaWJsaW5nPW51bGw7cmV0dXJuIGF9ZnVuY3Rpb24gZihiLGMsZCl7Yi5pbmRleD1kO2lmKCFhKXJldHVybiBiLmZsYWdzfD0xMDQ4NTc2LGM7ZD1iLmFsdGVybmF0ZTtpZihudWxsIT09ZClyZXR1cm4gZD1kLmluZGV4LGQ8Yz8oYi5mbGFnc3w9MixjKTpkO2IuZmxhZ3N8PTI7cmV0dXJuIGN9ZnVuY3Rpb24gZyhiKXthJiZcbm51bGw9PT1iLmFsdGVybmF0ZSYmKGIuZmxhZ3N8PTIpO3JldHVybiBifWZ1bmN0aW9uIGgoYSxiLGMsZCl7aWYobnVsbD09PWJ8fDYhPT1iLnRhZylyZXR1cm4gYj1uaChjLGEubW9kZSxkKSxiLnJldHVybj1hLGI7Yj1lKGIsYyk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiBrKGEsYixjLGQpe3ZhciBmPWMudHlwZTtpZihmPT09dmEpcmV0dXJuIG0oYSxiLGMucHJvcHMuY2hpbGRyZW4sZCxjLmtleSk7aWYobnVsbCE9PWImJihiLmVsZW1lbnRUeXBlPT09Znx8XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09ZiYmZi4kJHR5cGVvZj09PUZhJiZraChmKT09PWIudHlwZSkpcmV0dXJuIGQ9ZShiLGMucHJvcHMpLGQucmVmPWloKGEsYixjKSxkLnJldHVybj1hLGQ7ZD1vaChjLnR5cGUsYy5rZXksYy5wcm9wcyxudWxsLGEubW9kZSxkKTtkLnJlZj1paChhLGIsYyk7ZC5yZXR1cm49YTtyZXR1cm4gZH1mdW5jdGlvbiBsKGEsYixjLGQpe2lmKG51bGw9PT1ifHw0IT09Yi50YWd8fFxuYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyE9PWMuY29udGFpbmVySW5mb3x8Yi5zdGF0ZU5vZGUuaW1wbGVtZW50YXRpb24hPT1jLmltcGxlbWVudGF0aW9uKXJldHVybiBiPXBoKGMsYS5tb2RlLGQpLGIucmV0dXJuPWEsYjtiPWUoYixjLmNoaWxkcmVufHxbXSk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiBtKGEsYixjLGQsZil7aWYobnVsbD09PWJ8fDchPT1iLnRhZylyZXR1cm4gYj1xaChjLGEubW9kZSxkLGYpLGIucmV0dXJuPWEsYjtiPWUoYixjKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIHcoYSxiLGMpe2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYiYmXCJcIiE9PWJ8fFwibnVtYmVyXCI9PT10eXBlb2YgYilyZXR1cm4gYj1uaChcIlwiK2IsYS5tb2RlLGMpLGIucmV0dXJuPWEsYjtpZihcIm9iamVjdFwiPT09dHlwZW9mIGImJm51bGwhPT1iKXtzd2l0Y2goYi4kJHR5cGVvZil7Y2FzZSB0YTpyZXR1cm4gYz1vaChiLnR5cGUsYi5rZXksYi5wcm9wcyxudWxsLGEubW9kZSxjKSxcbmMucmVmPWloKGEsbnVsbCxiKSxjLnJldHVybj1hLGM7Y2FzZSB1YTpyZXR1cm4gYj1waChiLGEubW9kZSxjKSxiLnJldHVybj1hLGI7Y2FzZSBGYTp2YXIgZD1iLl9pbml0O3JldHVybiB3KGEsZChiLl9wYXlsb2FkKSxjKX1pZihiYihiKXx8SWEoYikpcmV0dXJuIGI9cWgoYixhLm1vZGUsYyxudWxsKSxiLnJldHVybj1hLGI7amgoYSxiKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiB1KGEsYixjLGQpe3ZhciBlPW51bGwhPT1iP2Iua2V5Om51bGw7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBjJiZcIlwiIT09Y3x8XCJudW1iZXJcIj09PXR5cGVvZiBjKXJldHVybiBudWxsIT09ZT9udWxsOmgoYSxiLFwiXCIrYyxkKTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGMmJm51bGwhPT1jKXtzd2l0Y2goYy4kJHR5cGVvZil7Y2FzZSB0YTpyZXR1cm4gYy5rZXk9PT1lP2soYSxiLGMsZCk6bnVsbDtjYXNlIHVhOnJldHVybiBjLmtleT09PWU/bChhLGIsYyxkKTpudWxsO2Nhc2UgRmE6cmV0dXJuIGU9Yy5faW5pdCx1KGEsXG5iLGUoYy5fcGF5bG9hZCksZCl9aWYoYmIoYyl8fElhKGMpKXJldHVybiBudWxsIT09ZT9udWxsOm0oYSxiLGMsZCxudWxsKTtqaChhLGMpfXJldHVybiBudWxsfWZ1bmN0aW9uIHkoYSxiLGMsZCxlKXtpZihcInN0cmluZ1wiPT09dHlwZW9mIGQmJlwiXCIhPT1kfHxcIm51bWJlclwiPT09dHlwZW9mIGQpcmV0dXJuIGE9YS5nZXQoYyl8fG51bGwsaChiLGEsXCJcIitkLGUpO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgZCYmbnVsbCE9PWQpe3N3aXRjaChkLiQkdHlwZW9mKXtjYXNlIHRhOnJldHVybiBhPWEuZ2V0KG51bGw9PT1kLmtleT9jOmQua2V5KXx8bnVsbCxrKGIsYSxkLGUpO2Nhc2UgdWE6cmV0dXJuIGE9YS5nZXQobnVsbD09PWQua2V5P2M6ZC5rZXkpfHxudWxsLGwoYixhLGQsZSk7Y2FzZSBGYTp2YXIgZj1kLl9pbml0O3JldHVybiB5KGEsYixjLGYoZC5fcGF5bG9hZCksZSl9aWYoYmIoZCl8fElhKGQpKXJldHVybiBhPWEuZ2V0KGMpfHxudWxsLG0oYixhLGQsZSxudWxsKTtqaChiLGQpfXJldHVybiBudWxsfVxuZnVuY3Rpb24gbihlLGcsaCxrKXtmb3IodmFyIGw9bnVsbCxuPW51bGwsbT1nLHI9Zz0wLHg9bnVsbDtudWxsIT09bSYmcjxoLmxlbmd0aDtyKyspe20uaW5kZXg+cj8oeD1tLG09bnVsbCk6eD1tLnNpYmxpbmc7dmFyIHQ9dShlLG0saFtyXSxrKTtpZihudWxsPT09dCl7bnVsbD09PW0mJihtPXgpO2JyZWFrfWEmJm0mJm51bGw9PT10LmFsdGVybmF0ZSYmYihlLG0pO2c9Zih0LGcscik7bnVsbD09PW4/bD10Om4uc2libGluZz10O249dDttPXh9aWYocj09PWgubGVuZ3RoKXJldHVybiBjKGUsbSksTiYmVGcoZSxyKSxsO2lmKG51bGw9PT1tKXtmb3IoO3I8aC5sZW5ndGg7cisrKW09dyhlLGhbcl0sayksbnVsbCE9PW0mJihnPWYobSxnLHIpLG51bGw9PT1uP2w9bTpuLnNpYmxpbmc9bSxuPW0pO04mJlRnKGUscik7cmV0dXJuIGx9Zm9yKG09ZChlLG0pO3I8aC5sZW5ndGg7cisrKXg9eShtLGUscixoW3JdLGspLG51bGwhPT14JiYoYSYmbnVsbCE9PXguYWx0ZXJuYXRlJiZtLmRlbGV0ZShudWxsPT09XG54LmtleT9yOngua2V5KSxnPWYoeCxnLHIpLG51bGw9PT1uP2w9eDpuLnNpYmxpbmc9eCxuPXgpO2EmJm0uZm9yRWFjaChmdW5jdGlvbihhKXtyZXR1cm4gYihlLGEpfSk7TiYmVGcoZSxyKTtyZXR1cm4gbH1mdW5jdGlvbiB2KGUsZyxoLGspe3ZhciBsPUlhKGgpO2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBsKXRocm93IEVycm9yKHAoMTUwKSk7aD1sLmNhbGwoaCk7aWYobnVsbD09aCl0aHJvdyBFcnJvcihwKDE1MSkpO2Zvcih2YXIgbT1sPW51bGwsbj1nLHI9Zz0wLHg9bnVsbCx0PWgubmV4dCgpO251bGwhPT1uJiYhdC5kb25lO3IrKyx0PWgubmV4dCgpKXtuLmluZGV4PnI/KHg9bixuPW51bGwpOng9bi5zaWJsaW5nO3ZhciB2PXUoZSxuLHQudmFsdWUsayk7aWYobnVsbD09PXYpe251bGw9PT1uJiYobj14KTticmVha31hJiZuJiZudWxsPT09di5hbHRlcm5hdGUmJmIoZSxuKTtnPWYodixnLHIpO251bGw9PT1tP2w9djptLnNpYmxpbmc9djttPXY7bj14fWlmKHQuZG9uZSlyZXR1cm4gYyhlLFxubiksTiYmVGcoZSxyKSxsO2lmKG51bGw9PT1uKXtmb3IoOyF0LmRvbmU7cisrLHQ9aC5uZXh0KCkpdD13KGUsdC52YWx1ZSxrKSxudWxsIT09dCYmKGc9Zih0LGcsciksbnVsbD09PW0/bD10Om0uc2libGluZz10LG09dCk7TiYmVGcoZSxyKTtyZXR1cm4gbH1mb3Iobj1kKGUsbik7IXQuZG9uZTtyKyssdD1oLm5leHQoKSl0PXkobixlLHIsdC52YWx1ZSxrKSxudWxsIT09dCYmKGEmJm51bGwhPT10LmFsdGVybmF0ZSYmbi5kZWxldGUobnVsbD09PXQua2V5P3I6dC5rZXkpLGc9Zih0LGcsciksbnVsbD09PW0/bD10Om0uc2libGluZz10LG09dCk7YSYmbi5mb3JFYWNoKGZ1bmN0aW9uKGEpe3JldHVybiBiKGUsYSl9KTtOJiZUZyhlLHIpO3JldHVybiBsfWZ1bmN0aW9uIEMoYSxkLGYsaCl7XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09ZiYmZi50eXBlPT09dmEmJm51bGw9PT1mLmtleSYmKGY9Zi5wcm9wcy5jaGlsZHJlbik7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09Zil7c3dpdGNoKGYuJCR0eXBlb2Ype2Nhc2UgdGE6YTp7Zm9yKHZhciBrPVxuZi5rZXksbD1kO251bGwhPT1sOyl7aWYobC5rZXk9PT1rKXtrPWYudHlwZTtpZihrPT09dmEpe2lmKDc9PT1sLnRhZyl7YyhhLGwuc2libGluZyk7ZD1lKGwsZi5wcm9wcy5jaGlsZHJlbik7ZC5yZXR1cm49YTthPWQ7YnJlYWsgYX19ZWxzZSBpZihsLmVsZW1lbnRUeXBlPT09a3x8XCJvYmplY3RcIj09PXR5cGVvZiBrJiZudWxsIT09ayYmay4kJHR5cGVvZj09PUZhJiZraChrKT09PWwudHlwZSl7YyhhLGwuc2libGluZyk7ZD1lKGwsZi5wcm9wcyk7ZC5yZWY9aWgoYSxsLGYpO2QucmV0dXJuPWE7YT1kO2JyZWFrIGF9YyhhLGwpO2JyZWFrfWVsc2UgYihhLGwpO2w9bC5zaWJsaW5nfWYudHlwZT09PXZhPyhkPXFoKGYucHJvcHMuY2hpbGRyZW4sYS5tb2RlLGgsZi5rZXkpLGQucmV0dXJuPWEsYT1kKTooaD1vaChmLnR5cGUsZi5rZXksZi5wcm9wcyxudWxsLGEubW9kZSxoKSxoLnJlZj1paChhLGQsZiksaC5yZXR1cm49YSxhPWgpfXJldHVybiBnKGEpO2Nhc2UgdWE6YTp7Zm9yKGw9Zi5rZXk7bnVsbCE9PVxuZDspe2lmKGQua2V5PT09bClpZig0PT09ZC50YWcmJmQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm89PT1mLmNvbnRhaW5lckluZm8mJmQuc3RhdGVOb2RlLmltcGxlbWVudGF0aW9uPT09Zi5pbXBsZW1lbnRhdGlvbil7YyhhLGQuc2libGluZyk7ZD1lKGQsZi5jaGlsZHJlbnx8W10pO2QucmV0dXJuPWE7YT1kO2JyZWFrIGF9ZWxzZXtjKGEsZCk7YnJlYWt9ZWxzZSBiKGEsZCk7ZD1kLnNpYmxpbmd9ZD1waChmLGEubW9kZSxoKTtkLnJldHVybj1hO2E9ZH1yZXR1cm4gZyhhKTtjYXNlIEZhOnJldHVybiBsPWYuX2luaXQsQyhhLGQsbChmLl9wYXlsb2FkKSxoKX1pZihiYihmKSlyZXR1cm4gbihhLGQsZixoKTtpZihJYShmKSlyZXR1cm4gdihhLGQsZixoKTtqaChhLGYpfXJldHVyblwic3RyaW5nXCI9PT10eXBlb2YgZiYmXCJcIiE9PWZ8fFwibnVtYmVyXCI9PT10eXBlb2YgZj8oZj1cIlwiK2YsbnVsbCE9PWQmJjY9PT1kLnRhZz8oYyhhLGQuc2libGluZyksZD1lKGQsZiksZC5yZXR1cm49YSxhPWQpOlxuKGMoYSxkKSxkPW5oKGYsYS5tb2RlLGgpLGQucmV0dXJuPWEsYT1kKSxnKGEpKTpjKGEsZCl9cmV0dXJuIEN9dmFyIHJoPWxoKCEwKSxzaD1saCghMSksdGg9e30sdWg9T2YodGgpLHZoPU9mKHRoKSx3aD1PZih0aCk7ZnVuY3Rpb24geGgoYSl7aWYoYT09PXRoKXRocm93IEVycm9yKHAoMTc0KSk7cmV0dXJuIGF9ZnVuY3Rpb24geWgoYSxiKXtIKHdoLGIpO0godmgsYSk7SCh1aCx0aCk7YT1iLm5vZGVUeXBlO3N3aXRjaChhKXtjYXNlIDk6Y2FzZSAxMTpiPShiPWIuZG9jdW1lbnRFbGVtZW50KT9iLm5hbWVzcGFjZVVSSTppYihudWxsLFwiXCIpO2JyZWFrO2RlZmF1bHQ6YT04PT09YT9iLnBhcmVudE5vZGU6YixiPWEubmFtZXNwYWNlVVJJfHxudWxsLGE9YS50YWdOYW1lLGI9aWIoYixhKX1HKHVoKTtIKHVoLGIpfWZ1bmN0aW9uIHpoKCl7Ryh1aCk7Ryh2aCk7Ryh3aCl9XG5mdW5jdGlvbiBBaChhKXt4aCh3aC5jdXJyZW50KTt2YXIgYj14aCh1aC5jdXJyZW50KTt2YXIgYz1pYihiLGEudHlwZSk7YiE9PWMmJihIKHZoLGEpLEgodWgsYykpfWZ1bmN0aW9uIEJoKGEpe3ZoLmN1cnJlbnQ9PT1hJiYoRyh1aCksRyh2aCkpfXZhciBQPU9mKDApO1xuZnVuY3Rpb24gQ2goYSl7Zm9yKHZhciBiPWE7bnVsbCE9PWI7KXtpZigxMz09PWIudGFnKXt2YXIgYz1iLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWMmJihjPWMuZGVoeWRyYXRlZCxudWxsPT09Y3x8XCIkP1wiPT09Yy5kYXRhfHxcIiQhXCI9PT1jLmRhdGEpKXJldHVybiBifWVsc2UgaWYoMTk9PT1iLnRhZyYmdm9pZCAwIT09Yi5tZW1vaXplZFByb3BzLnJldmVhbE9yZGVyKXtpZigwIT09KGIuZmxhZ3MmMTI4KSlyZXR1cm4gYn1lbHNlIGlmKG51bGwhPT1iLmNoaWxkKXtiLmNoaWxkLnJldHVybj1iO2I9Yi5jaGlsZDtjb250aW51ZX1pZihiPT09YSlicmVhaztmb3IoO251bGw9PT1iLnNpYmxpbmc7KXtpZihudWxsPT09Yi5yZXR1cm58fGIucmV0dXJuPT09YSlyZXR1cm4gbnVsbDtiPWIucmV0dXJufWIuc2libGluZy5yZXR1cm49Yi5yZXR1cm47Yj1iLnNpYmxpbmd9cmV0dXJuIG51bGx9dmFyIERoPVtdO1xuZnVuY3Rpb24gRWgoKXtmb3IodmFyIGE9MDthPERoLmxlbmd0aDthKyspRGhbYV0uX3dvcmtJblByb2dyZXNzVmVyc2lvblByaW1hcnk9bnVsbDtEaC5sZW5ndGg9MH12YXIgRmg9c2EuUmVhY3RDdXJyZW50RGlzcGF0Y2hlcixHaD1zYS5SZWFjdEN1cnJlbnRCYXRjaENvbmZpZyxIaD0wLFE9bnVsbCxSPW51bGwsUz1udWxsLEloPSExLEpoPSExLEtoPTAsTGg9MDtmdW5jdGlvbiBVKCl7dGhyb3cgRXJyb3IocCgzMjEpKTt9ZnVuY3Rpb24gTWgoYSxiKXtpZihudWxsPT09YilyZXR1cm4hMTtmb3IodmFyIGM9MDtjPGIubGVuZ3RoJiZjPGEubGVuZ3RoO2MrKylpZighQ2UoYVtjXSxiW2NdKSlyZXR1cm4hMTtyZXR1cm4hMH1cbmZ1bmN0aW9uIE5oKGEsYixjLGQsZSxmKXtIaD1mO1E9YjtiLm1lbW9pemVkU3RhdGU9bnVsbDtiLnVwZGF0ZVF1ZXVlPW51bGw7Yi5sYW5lcz0wO0ZoLmN1cnJlbnQ9bnVsbD09PWF8fG51bGw9PT1hLm1lbW9pemVkU3RhdGU/T2g6UGg7YT1jKGQsZSk7aWYoSmgpe2Y9MDtkb3tKaD0hMTtLaD0wO2lmKDI1PD1mKXRocm93IEVycm9yKHAoMzAxKSk7Zis9MTtTPVI9bnVsbDtiLnVwZGF0ZVF1ZXVlPW51bGw7RmguY3VycmVudD1RaDthPWMoZCxlKX13aGlsZShKaCl9RmguY3VycmVudD1SaDtiPW51bGwhPT1SJiZudWxsIT09Ui5uZXh0O0hoPTA7Uz1SPVE9bnVsbDtJaD0hMTtpZihiKXRocm93IEVycm9yKHAoMzAwKSk7cmV0dXJuIGF9ZnVuY3Rpb24gU2goKXt2YXIgYT0wIT09S2g7S2g9MDtyZXR1cm4gYX1cbmZ1bmN0aW9uIFRoKCl7dmFyIGE9e21lbW9pemVkU3RhdGU6bnVsbCxiYXNlU3RhdGU6bnVsbCxiYXNlUXVldWU6bnVsbCxxdWV1ZTpudWxsLG5leHQ6bnVsbH07bnVsbD09PVM/US5tZW1vaXplZFN0YXRlPVM9YTpTPVMubmV4dD1hO3JldHVybiBTfWZ1bmN0aW9uIFVoKCl7aWYobnVsbD09PVIpe3ZhciBhPVEuYWx0ZXJuYXRlO2E9bnVsbCE9PWE/YS5tZW1vaXplZFN0YXRlOm51bGx9ZWxzZSBhPVIubmV4dDt2YXIgYj1udWxsPT09Uz9RLm1lbW9pemVkU3RhdGU6Uy5uZXh0O2lmKG51bGwhPT1iKVM9YixSPWE7ZWxzZXtpZihudWxsPT09YSl0aHJvdyBFcnJvcihwKDMxMCkpO1I9YTthPXttZW1vaXplZFN0YXRlOlIubWVtb2l6ZWRTdGF0ZSxiYXNlU3RhdGU6Ui5iYXNlU3RhdGUsYmFzZVF1ZXVlOlIuYmFzZVF1ZXVlLHF1ZXVlOlIucXVldWUsbmV4dDpudWxsfTtudWxsPT09Uz9RLm1lbW9pemVkU3RhdGU9Uz1hOlM9Uy5uZXh0PWF9cmV0dXJuIFN9XG5mdW5jdGlvbiBWaChhLGIpe3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBiP2IoYSk6Yn1cbmZ1bmN0aW9uIFdoKGEpe3ZhciBiPVVoKCksYz1iLnF1ZXVlO2lmKG51bGw9PT1jKXRocm93IEVycm9yKHAoMzExKSk7Yy5sYXN0UmVuZGVyZWRSZWR1Y2VyPWE7dmFyIGQ9UixlPWQuYmFzZVF1ZXVlLGY9Yy5wZW5kaW5nO2lmKG51bGwhPT1mKXtpZihudWxsIT09ZSl7dmFyIGc9ZS5uZXh0O2UubmV4dD1mLm5leHQ7Zi5uZXh0PWd9ZC5iYXNlUXVldWU9ZT1mO2MucGVuZGluZz1udWxsfWlmKG51bGwhPT1lKXtmPWUubmV4dDtkPWQuYmFzZVN0YXRlO3ZhciBoPWc9bnVsbCxrPW51bGwsbD1mO2Rve3ZhciBtPWwubGFuZTtpZigoSGgmbSk9PT1tKW51bGwhPT1rJiYoaz1rLm5leHQ9e2xhbmU6MCxhY3Rpb246bC5hY3Rpb24saGFzRWFnZXJTdGF0ZTpsLmhhc0VhZ2VyU3RhdGUsZWFnZXJTdGF0ZTpsLmVhZ2VyU3RhdGUsbmV4dDpudWxsfSksZD1sLmhhc0VhZ2VyU3RhdGU/bC5lYWdlclN0YXRlOmEoZCxsLmFjdGlvbik7ZWxzZXt2YXIgdz17bGFuZTptLGFjdGlvbjpsLmFjdGlvbixoYXNFYWdlclN0YXRlOmwuaGFzRWFnZXJTdGF0ZSxcbmVhZ2VyU3RhdGU6bC5lYWdlclN0YXRlLG5leHQ6bnVsbH07bnVsbD09PWs/KGg9az13LGc9ZCk6az1rLm5leHQ9dztRLmxhbmVzfD1tO3pnfD1tfWw9bC5uZXh0fXdoaWxlKG51bGwhPT1sJiZsIT09Zik7bnVsbD09PWs/Zz1kOmsubmV4dD1oO0NlKGQsYi5tZW1vaXplZFN0YXRlKXx8KG9nPSEwKTtiLm1lbW9pemVkU3RhdGU9ZDtiLmJhc2VTdGF0ZT1nO2IuYmFzZVF1ZXVlPWs7Yy5sYXN0UmVuZGVyZWRTdGF0ZT1kfWE9Yy5pbnRlcmxlYXZlZDtpZihudWxsIT09YSl7ZT1hO2RvIGY9ZS5sYW5lLFEubGFuZXN8PWYsemd8PWYsZT1lLm5leHQ7d2hpbGUoZSE9PWEpfWVsc2UgbnVsbD09PWUmJihjLmxhbmVzPTApO3JldHVybltiLm1lbW9pemVkU3RhdGUsYy5kaXNwYXRjaF19XG5mdW5jdGlvbiBYaChhKXt2YXIgYj1VaCgpLGM9Yi5xdWV1ZTtpZihudWxsPT09Yyl0aHJvdyBFcnJvcihwKDMxMSkpO2MubGFzdFJlbmRlcmVkUmVkdWNlcj1hO3ZhciBkPWMuZGlzcGF0Y2gsZT1jLnBlbmRpbmcsZj1iLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWUpe2MucGVuZGluZz1udWxsO3ZhciBnPWU9ZS5uZXh0O2RvIGY9YShmLGcuYWN0aW9uKSxnPWcubmV4dDt3aGlsZShnIT09ZSk7Q2UoZixiLm1lbW9pemVkU3RhdGUpfHwob2c9ITApO2IubWVtb2l6ZWRTdGF0ZT1mO251bGw9PT1iLmJhc2VRdWV1ZSYmKGIuYmFzZVN0YXRlPWYpO2MubGFzdFJlbmRlcmVkU3RhdGU9Zn1yZXR1cm5bZixkXX1mdW5jdGlvbiBZaCgpe31cbmZ1bmN0aW9uIFpoKGEsYil7dmFyIGM9USxkPVVoKCksZT1iKCksZj0hQ2UoZC5tZW1vaXplZFN0YXRlLGUpO2YmJihkLm1lbW9pemVkU3RhdGU9ZSxvZz0hMCk7ZD1kLnF1ZXVlOyRoKGFpLmJpbmQobnVsbCxjLGQsYSksW2FdKTtpZihkLmdldFNuYXBzaG90IT09Ynx8Znx8bnVsbCE9PVMmJlMubWVtb2l6ZWRTdGF0ZS50YWcmMSl7Yy5mbGFnc3w9MjA0ODtiaSg5LGNpLmJpbmQobnVsbCxjLGQsZSxiKSx2b2lkIDAsbnVsbCk7aWYobnVsbD09PUopdGhyb3cgRXJyb3IocCgzNDkpKTswIT09KEhoJjMwKXx8ZGkoYyxiLGUpfXJldHVybiBlfWZ1bmN0aW9uIGRpKGEsYixjKXthLmZsYWdzfD0xNjM4NDthPXtnZXRTbmFwc2hvdDpiLHZhbHVlOmN9O2I9US51cGRhdGVRdWV1ZTtudWxsPT09Yj8oYj17bGFzdEVmZmVjdDpudWxsLHN0b3JlczpudWxsfSxRLnVwZGF0ZVF1ZXVlPWIsYi5zdG9yZXM9W2FdKTooYz1iLnN0b3JlcyxudWxsPT09Yz9iLnN0b3Jlcz1bYV06Yy5wdXNoKGEpKX1cbmZ1bmN0aW9uIGNpKGEsYixjLGQpe2IudmFsdWU9YztiLmdldFNuYXBzaG90PWQ7ZWkoYikmJkVnKGEsMSwtMSl9ZnVuY3Rpb24gYWkoYSxiLGMpe3JldHVybiBjKGZ1bmN0aW9uKCl7ZWkoYikmJkVnKGEsMSwtMSl9KX1mdW5jdGlvbiBlaShhKXt2YXIgYj1hLmdldFNuYXBzaG90O2E9YS52YWx1ZTt0cnl7dmFyIGM9YigpO3JldHVybiFDZShhLGMpfWNhdGNoKGQpe3JldHVybiEwfX1mdW5jdGlvbiBmaShhKXt2YXIgYj1UaCgpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBhJiYoYT1hKCkpO2IubWVtb2l6ZWRTdGF0ZT1iLmJhc2VTdGF0ZT1hO2E9e3BlbmRpbmc6bnVsbCxpbnRlcmxlYXZlZDpudWxsLGxhbmVzOjAsZGlzcGF0Y2g6bnVsbCxsYXN0UmVuZGVyZWRSZWR1Y2VyOlZoLGxhc3RSZW5kZXJlZFN0YXRlOmF9O2IucXVldWU9YTthPWEuZGlzcGF0Y2g9Z2kuYmluZChudWxsLFEsYSk7cmV0dXJuW2IubWVtb2l6ZWRTdGF0ZSxhXX1cbmZ1bmN0aW9uIGJpKGEsYixjLGQpe2E9e3RhZzphLGNyZWF0ZTpiLGRlc3Ryb3k6YyxkZXBzOmQsbmV4dDpudWxsfTtiPVEudXBkYXRlUXVldWU7bnVsbD09PWI/KGI9e2xhc3RFZmZlY3Q6bnVsbCxzdG9yZXM6bnVsbH0sUS51cGRhdGVRdWV1ZT1iLGIubGFzdEVmZmVjdD1hLm5leHQ9YSk6KGM9Yi5sYXN0RWZmZWN0LG51bGw9PT1jP2IubGFzdEVmZmVjdD1hLm5leHQ9YTooZD1jLm5leHQsYy5uZXh0PWEsYS5uZXh0PWQsYi5sYXN0RWZmZWN0PWEpKTtyZXR1cm4gYX1mdW5jdGlvbiBoaSgpe3JldHVybiBVaCgpLm1lbW9pemVkU3RhdGV9ZnVuY3Rpb24gaWkoYSxiLGMsZCl7dmFyIGU9VGgoKTtRLmZsYWdzfD1hO2UubWVtb2l6ZWRTdGF0ZT1iaSgxfGIsYyx2b2lkIDAsdm9pZCAwPT09ZD9udWxsOmQpfVxuZnVuY3Rpb24gamkoYSxiLGMsZCl7dmFyIGU9VWgoKTtkPXZvaWQgMD09PWQ/bnVsbDpkO3ZhciBmPXZvaWQgMDtpZihudWxsIT09Uil7dmFyIGc9Ui5tZW1vaXplZFN0YXRlO2Y9Zy5kZXN0cm95O2lmKG51bGwhPT1kJiZNaChkLGcuZGVwcykpe2UubWVtb2l6ZWRTdGF0ZT1iaShiLGMsZixkKTtyZXR1cm59fVEuZmxhZ3N8PWE7ZS5tZW1vaXplZFN0YXRlPWJpKDF8YixjLGYsZCl9ZnVuY3Rpb24ga2koYSxiKXtyZXR1cm4gaWkoODM5MDY1Niw4LGEsYil9ZnVuY3Rpb24gJGgoYSxiKXtyZXR1cm4gamkoMjA0OCw4LGEsYil9ZnVuY3Rpb24gbGkoYSxiKXtyZXR1cm4gamkoNCwyLGEsYil9ZnVuY3Rpb24gbWkoYSxiKXtyZXR1cm4gamkoNCw0LGEsYil9XG5mdW5jdGlvbiBuaShhLGIpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBiKXJldHVybiBhPWEoKSxiKGEpLGZ1bmN0aW9uKCl7YihudWxsKX07aWYobnVsbCE9PWImJnZvaWQgMCE9PWIpcmV0dXJuIGE9YSgpLGIuY3VycmVudD1hLGZ1bmN0aW9uKCl7Yi5jdXJyZW50PW51bGx9fWZ1bmN0aW9uIG9pKGEsYixjKXtjPW51bGwhPT1jJiZ2b2lkIDAhPT1jP2MuY29uY2F0KFthXSk6bnVsbDtyZXR1cm4gamkoNCw0LG5pLmJpbmQobnVsbCxiLGEpLGMpfWZ1bmN0aW9uIHBpKCl7fWZ1bmN0aW9uIHFpKGEsYil7dmFyIGM9VWgoKTtiPXZvaWQgMD09PWI/bnVsbDpiO3ZhciBkPWMubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZCYmbnVsbCE9PWImJk1oKGIsZFsxXSkpcmV0dXJuIGRbMF07Yy5tZW1vaXplZFN0YXRlPVthLGJdO3JldHVybiBhfVxuZnVuY3Rpb24gcmkoYSxiKXt2YXIgYz1VaCgpO2I9dm9pZCAwPT09Yj9udWxsOmI7dmFyIGQ9Yy5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1kJiZudWxsIT09YiYmTWgoYixkWzFdKSlyZXR1cm4gZFswXTthPWEoKTtjLm1lbW9pemVkU3RhdGU9W2EsYl07cmV0dXJuIGF9ZnVuY3Rpb24gc2koYSxiKXt2YXIgYz1FO0U9MCE9PWMmJjQ+Yz9jOjQ7YSghMCk7dmFyIGQ9R2gudHJhbnNpdGlvbjtHaC50cmFuc2l0aW9uPXt9O3RyeXthKCExKSxiKCl9ZmluYWxseXtFPWMsR2gudHJhbnNpdGlvbj1kfX1mdW5jdGlvbiB0aSgpe3JldHVybiBVaCgpLm1lbW9pemVkU3RhdGV9ZnVuY3Rpb24gdWkoYSxiLGMpe3ZhciBkPURnKGEpO2M9e2xhbmU6ZCxhY3Rpb246YyxoYXNFYWdlclN0YXRlOiExLGVhZ2VyU3RhdGU6bnVsbCxuZXh0Om51bGx9O3ZpKGEpP3dpKGIsYyk6KHhpKGEsYixjKSxjPU0oKSxhPUVnKGEsZCxjKSxudWxsIT09YSYmeWkoYSxiLGQpKX1cbmZ1bmN0aW9uIGdpKGEsYixjKXt2YXIgZD1EZyhhKSxlPXtsYW5lOmQsYWN0aW9uOmMsaGFzRWFnZXJTdGF0ZTohMSxlYWdlclN0YXRlOm51bGwsbmV4dDpudWxsfTtpZih2aShhKSl3aShiLGUpO2Vsc2V7eGkoYSxiLGUpO3ZhciBmPWEuYWx0ZXJuYXRlO2lmKDA9PT1hLmxhbmVzJiYobnVsbD09PWZ8fDA9PT1mLmxhbmVzKSYmKGY9Yi5sYXN0UmVuZGVyZWRSZWR1Y2VyLG51bGwhPT1mKSl0cnl7dmFyIGc9Yi5sYXN0UmVuZGVyZWRTdGF0ZSxoPWYoZyxjKTtlLmhhc0VhZ2VyU3RhdGU9ITA7ZS5lYWdlclN0YXRlPWg7aWYoQ2UoaCxnKSlyZXR1cm59Y2F0Y2goayl7fWZpbmFsbHl7fWM9TSgpO2E9RWcoYSxkLGMpO251bGwhPT1hJiZ5aShhLGIsZCl9fWZ1bmN0aW9uIHZpKGEpe3ZhciBiPWEuYWx0ZXJuYXRlO3JldHVybiBhPT09UXx8bnVsbCE9PWImJmI9PT1RfVxuZnVuY3Rpb24gd2koYSxiKXtKaD1JaD0hMDt2YXIgYz1hLnBlbmRpbmc7bnVsbD09PWM/Yi5uZXh0PWI6KGIubmV4dD1jLm5leHQsYy5uZXh0PWIpO2EucGVuZGluZz1ifWZ1bmN0aW9uIHhpKGEsYixjKXtudWxsIT09SiYmMCE9PShhLm1vZGUmMSkmJjA9PT0oSyYyKT8oYT1iLmludGVybGVhdmVkLG51bGw9PT1hPyhjLm5leHQ9YyxudWxsPT09cWc/cWc9W2JdOnFnLnB1c2goYikpOihjLm5leHQ9YS5uZXh0LGEubmV4dD1jKSxiLmludGVybGVhdmVkPWMpOihhPWIucGVuZGluZyxudWxsPT09YT9jLm5leHQ9YzooYy5uZXh0PWEubmV4dCxhLm5leHQ9YyksYi5wZW5kaW5nPWMpfWZ1bmN0aW9uIHlpKGEsYixjKXtpZigwIT09KGMmNDE5NDI0MCkpe3ZhciBkPWIubGFuZXM7ZCY9YS5wZW5kaW5nTGFuZXM7Y3w9ZDtiLmxhbmVzPWM7eWMoYSxjKX19XG52YXIgUmg9e3JlYWRDb250ZXh0OnBnLHVzZUNhbGxiYWNrOlUsdXNlQ29udGV4dDpVLHVzZUVmZmVjdDpVLHVzZUltcGVyYXRpdmVIYW5kbGU6VSx1c2VJbnNlcnRpb25FZmZlY3Q6VSx1c2VMYXlvdXRFZmZlY3Q6VSx1c2VNZW1vOlUsdXNlUmVkdWNlcjpVLHVzZVJlZjpVLHVzZVN0YXRlOlUsdXNlRGVidWdWYWx1ZTpVLHVzZURlZmVycmVkVmFsdWU6VSx1c2VUcmFuc2l0aW9uOlUsdXNlTXV0YWJsZVNvdXJjZTpVLHVzZVN5bmNFeHRlcm5hbFN0b3JlOlUsdXNlSWQ6VSx1bnN0YWJsZV9pc05ld1JlY29uY2lsZXI6ITF9LE9oPXtyZWFkQ29udGV4dDpwZyx1c2VDYWxsYmFjazpmdW5jdGlvbihhLGIpe1RoKCkubWVtb2l6ZWRTdGF0ZT1bYSx2b2lkIDA9PT1iP251bGw6Yl07cmV0dXJuIGF9LHVzZUNvbnRleHQ6cGcsdXNlRWZmZWN0OmtpLHVzZUltcGVyYXRpdmVIYW5kbGU6ZnVuY3Rpb24oYSxiLGMpe2M9bnVsbCE9PWMmJnZvaWQgMCE9PWM/Yy5jb25jYXQoW2FdKTpudWxsO3JldHVybiBpaSg0MTk0MzA4LFxuNCxuaS5iaW5kKG51bGwsYixhKSxjKX0sdXNlTGF5b3V0RWZmZWN0OmZ1bmN0aW9uKGEsYil7cmV0dXJuIGlpKDQxOTQzMDgsNCxhLGIpfSx1c2VJbnNlcnRpb25FZmZlY3Q6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gaWkoNCwyLGEsYil9LHVzZU1lbW86ZnVuY3Rpb24oYSxiKXt2YXIgYz1UaCgpO2I9dm9pZCAwPT09Yj9udWxsOmI7YT1hKCk7Yy5tZW1vaXplZFN0YXRlPVthLGJdO3JldHVybiBhfSx1c2VSZWR1Y2VyOmZ1bmN0aW9uKGEsYixjKXt2YXIgZD1UaCgpO2I9dm9pZCAwIT09Yz9jKGIpOmI7ZC5tZW1vaXplZFN0YXRlPWQuYmFzZVN0YXRlPWI7YT17cGVuZGluZzpudWxsLGludGVybGVhdmVkOm51bGwsbGFuZXM6MCxkaXNwYXRjaDpudWxsLGxhc3RSZW5kZXJlZFJlZHVjZXI6YSxsYXN0UmVuZGVyZWRTdGF0ZTpifTtkLnF1ZXVlPWE7YT1hLmRpc3BhdGNoPXVpLmJpbmQobnVsbCxRLGEpO3JldHVybltkLm1lbW9pemVkU3RhdGUsYV19LHVzZVJlZjpmdW5jdGlvbihhKXt2YXIgYj1cblRoKCk7YT17Y3VycmVudDphfTtyZXR1cm4gYi5tZW1vaXplZFN0YXRlPWF9LHVzZVN0YXRlOmZpLHVzZURlYnVnVmFsdWU6cGksdXNlRGVmZXJyZWRWYWx1ZTpmdW5jdGlvbihhKXt2YXIgYj1maShhKSxjPWJbMF0sZD1iWzFdO2tpKGZ1bmN0aW9uKCl7dmFyIGI9R2gudHJhbnNpdGlvbjtHaC50cmFuc2l0aW9uPXt9O3RyeXtkKGEpfWZpbmFsbHl7R2gudHJhbnNpdGlvbj1ifX0sW2FdKTtyZXR1cm4gY30sdXNlVHJhbnNpdGlvbjpmdW5jdGlvbigpe3ZhciBhPWZpKCExKSxiPWFbMF07YT1zaS5iaW5kKG51bGwsYVsxXSk7VGgoKS5tZW1vaXplZFN0YXRlPWE7cmV0dXJuW2IsYV19LHVzZU11dGFibGVTb3VyY2U6ZnVuY3Rpb24oKXt9LHVzZVN5bmNFeHRlcm5hbFN0b3JlOmZ1bmN0aW9uKGEsYixjKXt2YXIgZD1RLGU9VGgoKTtpZihOKXtpZih2b2lkIDA9PT1jKXRocm93IEVycm9yKHAoNDA3KSk7Yz1jKCl9ZWxzZXtjPWIoKTtpZihudWxsPT09Sil0aHJvdyBFcnJvcihwKDM0OSkpO1xuMCE9PShIaCYzMCl8fGRpKGQsYixjKX1lLm1lbW9pemVkU3RhdGU9Yzt2YXIgZj17dmFsdWU6YyxnZXRTbmFwc2hvdDpifTtlLnF1ZXVlPWY7a2koYWkuYmluZChudWxsLGQsZixhKSxbYV0pO2QuZmxhZ3N8PTIwNDg7YmkoOSxjaS5iaW5kKG51bGwsZCxmLGMsYiksdm9pZCAwLG51bGwpO3JldHVybiBjfSx1c2VJZDpmdW5jdGlvbigpe3ZhciBhPVRoKCksYj1KLmlkZW50aWZpZXJQcmVmaXg7aWYoTil7dmFyIGM9U2c7dmFyIGQ9Umc7Yz0oZCZ+KDE8PDMyLWxjKGQpLTEpKS50b1N0cmluZygzMikrYztiPVwiOlwiK2IrXCJSXCIrYztjPUtoKys7MDxjJiYoYis9XCJIXCIrYy50b1N0cmluZygzMikpO2IrPVwiOlwifWVsc2UgYz1MaCsrLGI9XCI6XCIrYitcInJcIitjLnRvU3RyaW5nKDMyKStcIjpcIjtyZXR1cm4gYS5tZW1vaXplZFN0YXRlPWJ9LHVuc3RhYmxlX2lzTmV3UmVjb25jaWxlcjohMX0sUGg9e3JlYWRDb250ZXh0OnBnLHVzZUNhbGxiYWNrOnFpLHVzZUNvbnRleHQ6cGcsdXNlRWZmZWN0OiRoLHVzZUltcGVyYXRpdmVIYW5kbGU6b2ksXG51c2VJbnNlcnRpb25FZmZlY3Q6bGksdXNlTGF5b3V0RWZmZWN0Om1pLHVzZU1lbW86cmksdXNlUmVkdWNlcjpXaCx1c2VSZWY6aGksdXNlU3RhdGU6ZnVuY3Rpb24oKXtyZXR1cm4gV2goVmgpfSx1c2VEZWJ1Z1ZhbHVlOnBpLHVzZURlZmVycmVkVmFsdWU6ZnVuY3Rpb24oYSl7dmFyIGI9V2goVmgpLGM9YlswXSxkPWJbMV07JGgoZnVuY3Rpb24oKXt2YXIgYj1HaC50cmFuc2l0aW9uO0doLnRyYW5zaXRpb249e307dHJ5e2QoYSl9ZmluYWxseXtHaC50cmFuc2l0aW9uPWJ9fSxbYV0pO3JldHVybiBjfSx1c2VUcmFuc2l0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9V2goVmgpWzBdLGI9VWgoKS5tZW1vaXplZFN0YXRlO3JldHVyblthLGJdfSx1c2VNdXRhYmxlU291cmNlOlloLHVzZVN5bmNFeHRlcm5hbFN0b3JlOlpoLHVzZUlkOnRpLHVuc3RhYmxlX2lzTmV3UmVjb25jaWxlcjohMX0sUWg9e3JlYWRDb250ZXh0OnBnLHVzZUNhbGxiYWNrOnFpLHVzZUNvbnRleHQ6cGcsdXNlRWZmZWN0OiRoLFxudXNlSW1wZXJhdGl2ZUhhbmRsZTpvaSx1c2VJbnNlcnRpb25FZmZlY3Q6bGksdXNlTGF5b3V0RWZmZWN0Om1pLHVzZU1lbW86cmksdXNlUmVkdWNlcjpYaCx1c2VSZWY6aGksdXNlU3RhdGU6ZnVuY3Rpb24oKXtyZXR1cm4gWGgoVmgpfSx1c2VEZWJ1Z1ZhbHVlOnBpLHVzZURlZmVycmVkVmFsdWU6ZnVuY3Rpb24oYSl7dmFyIGI9WGgoVmgpLGM9YlswXSxkPWJbMV07JGgoZnVuY3Rpb24oKXt2YXIgYj1HaC50cmFuc2l0aW9uO0doLnRyYW5zaXRpb249e307dHJ5e2QoYSl9ZmluYWxseXtHaC50cmFuc2l0aW9uPWJ9fSxbYV0pO3JldHVybiBjfSx1c2VUcmFuc2l0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9WGgoVmgpWzBdLGI9VWgoKS5tZW1vaXplZFN0YXRlO3JldHVyblthLGJdfSx1c2VNdXRhYmxlU291cmNlOlloLHVzZVN5bmNFeHRlcm5hbFN0b3JlOlpoLHVzZUlkOnRpLHVuc3RhYmxlX2lzTmV3UmVjb25jaWxlcjohMX07XG5mdW5jdGlvbiB6aShhLGIpe3RyeXt2YXIgYz1cIlwiLGQ9YjtkbyBjKz1OYShkKSxkPWQucmV0dXJuO3doaWxlKGQpO3ZhciBlPWN9Y2F0Y2goZil7ZT1cIlxcbkVycm9yIGdlbmVyYXRpbmcgc3RhY2s6IFwiK2YubWVzc2FnZStcIlxcblwiK2Yuc3RhY2t9cmV0dXJue3ZhbHVlOmEsc291cmNlOmIsc3RhY2s6ZX19ZnVuY3Rpb24gQWkoYSxiKXt0cnl7Y29uc29sZS5lcnJvcihiLnZhbHVlKX1jYXRjaChjKXtzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7dGhyb3cgYzt9KX19dmFyIEJpPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBXZWFrTWFwP1dlYWtNYXA6TWFwO2Z1bmN0aW9uIENpKGEsYixjKXtjPXVnKC0xLGMpO2MudGFnPTM7Yy5wYXlsb2FkPXtlbGVtZW50Om51bGx9O3ZhciBkPWIudmFsdWU7Yy5jYWxsYmFjaz1mdW5jdGlvbigpe0RpfHwoRGk9ITAsRWk9ZCk7QWkoYSxiKX07cmV0dXJuIGN9XG5mdW5jdGlvbiBGaShhLGIsYyl7Yz11ZygtMSxjKTtjLnRhZz0zO3ZhciBkPWEudHlwZS5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3I7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGQpe3ZhciBlPWIudmFsdWU7Yy5wYXlsb2FkPWZ1bmN0aW9uKCl7cmV0dXJuIGQoZSl9O2MuY2FsbGJhY2s9ZnVuY3Rpb24oKXtBaShhLGIpfX12YXIgZj1hLnN0YXRlTm9kZTtudWxsIT09ZiYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGYuY29tcG9uZW50RGlkQ2F0Y2gmJihjLmNhbGxiYWNrPWZ1bmN0aW9uKCl7QWkoYSxiKTtcImZ1bmN0aW9uXCIhPT10eXBlb2YgZCYmKG51bGw9PT1HaT9HaT1uZXcgU2V0KFt0aGlzXSk6R2kuYWRkKHRoaXMpKTt2YXIgYz1iLnN0YWNrO3RoaXMuY29tcG9uZW50RGlkQ2F0Y2goYi52YWx1ZSx7Y29tcG9uZW50U3RhY2s6bnVsbCE9PWM/YzpcIlwifSl9KTtyZXR1cm4gY31cbmZ1bmN0aW9uIEhpKGEsYixjKXt2YXIgZD1hLnBpbmdDYWNoZTtpZihudWxsPT09ZCl7ZD1hLnBpbmdDYWNoZT1uZXcgQmk7dmFyIGU9bmV3IFNldDtkLnNldChiLGUpfWVsc2UgZT1kLmdldChiKSx2b2lkIDA9PT1lJiYoZT1uZXcgU2V0LGQuc2V0KGIsZSkpO2UuaGFzKGMpfHwoZS5hZGQoYyksYT1JaS5iaW5kKG51bGwsYSxiLGMpLGIudGhlbihhLGEpKX1mdW5jdGlvbiBKaShhKXtkb3t2YXIgYjtpZihiPTEzPT09YS50YWcpYj1hLm1lbW9pemVkU3RhdGUsYj1udWxsIT09Yj9udWxsIT09Yi5kZWh5ZHJhdGVkPyEwOiExOiEwO2lmKGIpcmV0dXJuIGE7YT1hLnJldHVybn13aGlsZShudWxsIT09YSk7cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBLaShhLGIsYyxkLGUpe2lmKDA9PT0oYS5tb2RlJjEpKXJldHVybiBhPT09Yj9hLmZsYWdzfD02NTUzNjooYS5mbGFnc3w9MTI4LGMuZmxhZ3N8PTEzMTA3MixjLmZsYWdzJj0tNTI4MDUsMT09PWMudGFnJiYobnVsbD09PWMuYWx0ZXJuYXRlP2MudGFnPTE3OihiPXVnKC0xLDEpLGIudGFnPTIsdmcoYyxiKSkpLGMubGFuZXN8PTEpLGE7YS5mbGFnc3w9NjU1MzY7YS5sYW5lcz1lO3JldHVybiBhfXZhciBMaSxNaSxOaSxPaTtcbkxpPWZ1bmN0aW9uKGEsYil7Zm9yKHZhciBjPWIuY2hpbGQ7bnVsbCE9PWM7KXtpZig1PT09Yy50YWd8fDY9PT1jLnRhZylhLmFwcGVuZENoaWxkKGMuc3RhdGVOb2RlKTtlbHNlIGlmKDQhPT1jLnRhZyYmbnVsbCE9PWMuY2hpbGQpe2MuY2hpbGQucmV0dXJuPWM7Yz1jLmNoaWxkO2NvbnRpbnVlfWlmKGM9PT1iKWJyZWFrO2Zvcig7bnVsbD09PWMuc2libGluZzspe2lmKG51bGw9PT1jLnJldHVybnx8Yy5yZXR1cm49PT1iKXJldHVybjtjPWMucmV0dXJufWMuc2libGluZy5yZXR1cm49Yy5yZXR1cm47Yz1jLnNpYmxpbmd9fTtNaT1mdW5jdGlvbigpe307XG5OaT1mdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1hLm1lbW9pemVkUHJvcHM7aWYoZSE9PWQpe2E9Yi5zdGF0ZU5vZGU7eGgodWguY3VycmVudCk7dmFyIGY9bnVsbDtzd2l0Y2goYyl7Y2FzZSBcImlucHV0XCI6ZT1XYShhLGUpO2Q9V2EoYSxkKTtmPVtdO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjplPUEoe30sZSx7dmFsdWU6dm9pZCAwfSk7ZD1BKHt9LGQse3ZhbHVlOnZvaWQgMH0pO2Y9W107YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6ZT1kYihhLGUpO2Q9ZGIoYSxkKTtmPVtdO2JyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiIT09dHlwZW9mIGUub25DbGljayYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGQub25DbGljayYmKGEub25jbGljaz13Zil9cmIoYyxkKTt2YXIgZztjPW51bGw7Zm9yKGwgaW4gZSlpZighZC5oYXNPd25Qcm9wZXJ0eShsKSYmZS5oYXNPd25Qcm9wZXJ0eShsKSYmbnVsbCE9ZVtsXSlpZihcInN0eWxlXCI9PT1sKXt2YXIgaD1lW2xdO2ZvcihnIGluIGgpaC5oYXNPd25Qcm9wZXJ0eShnKSYmXG4oY3x8KGM9e30pLGNbZ109XCJcIil9ZWxzZVwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIiE9PWwmJlwiY2hpbGRyZW5cIiE9PWwmJlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1sJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09bCYmXCJhdXRvRm9jdXNcIiE9PWwmJihkYS5oYXNPd25Qcm9wZXJ0eShsKT9mfHwoZj1bXSk6KGY9Znx8W10pLnB1c2gobCxudWxsKSk7Zm9yKGwgaW4gZCl7dmFyIGs9ZFtsXTtoPW51bGwhPWU/ZVtsXTp2b2lkIDA7aWYoZC5oYXNPd25Qcm9wZXJ0eShsKSYmayE9PWgmJihudWxsIT1rfHxudWxsIT1oKSlpZihcInN0eWxlXCI9PT1sKWlmKGgpe2ZvcihnIGluIGgpIWguaGFzT3duUHJvcGVydHkoZyl8fGsmJmsuaGFzT3duUHJvcGVydHkoZyl8fChjfHwoYz17fSksY1tnXT1cIlwiKTtmb3IoZyBpbiBrKWsuaGFzT3duUHJvcGVydHkoZykmJmhbZ10hPT1rW2ddJiYoY3x8KGM9e30pLGNbZ109a1tnXSl9ZWxzZSBjfHwoZnx8KGY9W10pLGYucHVzaChsLFxuYykpLGM9aztlbHNlXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09bD8oaz1rP2suX19odG1sOnZvaWQgMCxoPWg/aC5fX2h0bWw6dm9pZCAwLG51bGwhPWsmJmghPT1rJiYoZj1mfHxbXSkucHVzaChsLGspKTpcImNoaWxkcmVuXCI9PT1sP1wic3RyaW5nXCIhPT10eXBlb2YgayYmXCJudW1iZXJcIiE9PXR5cGVvZiBrfHwoZj1mfHxbXSkucHVzaChsLFwiXCIrayk6XCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWwmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1sJiYoZGEuaGFzT3duUHJvcGVydHkobCk/KG51bGwhPWsmJlwib25TY3JvbGxcIj09PWwmJkYoXCJzY3JvbGxcIixhKSxmfHxoPT09a3x8KGY9W10pKTooZj1mfHxbXSkucHVzaChsLGspKX1jJiYoZj1mfHxbXSkucHVzaChcInN0eWxlXCIsYyk7dmFyIGw9ZjtpZihiLnVwZGF0ZVF1ZXVlPWwpYi5mbGFnc3w9NH19O09pPWZ1bmN0aW9uKGEsYixjLGQpe2MhPT1kJiYoYi5mbGFnc3w9NCl9O1xuZnVuY3Rpb24gUGkoYSxiKXtpZighTilzd2l0Y2goYS50YWlsTW9kZSl7Y2FzZSBcImhpZGRlblwiOmI9YS50YWlsO2Zvcih2YXIgYz1udWxsO251bGwhPT1iOyludWxsIT09Yi5hbHRlcm5hdGUmJihjPWIpLGI9Yi5zaWJsaW5nO251bGw9PT1jP2EudGFpbD1udWxsOmMuc2libGluZz1udWxsO2JyZWFrO2Nhc2UgXCJjb2xsYXBzZWRcIjpjPWEudGFpbDtmb3IodmFyIGQ9bnVsbDtudWxsIT09YzspbnVsbCE9PWMuYWx0ZXJuYXRlJiYoZD1jKSxjPWMuc2libGluZztudWxsPT09ZD9ifHxudWxsPT09YS50YWlsP2EudGFpbD1udWxsOmEudGFpbC5zaWJsaW5nPW51bGw6ZC5zaWJsaW5nPW51bGx9fVxuZnVuY3Rpb24gVihhKXt2YXIgYj1udWxsIT09YS5hbHRlcm5hdGUmJmEuYWx0ZXJuYXRlLmNoaWxkPT09YS5jaGlsZCxjPTAsZD0wO2lmKGIpZm9yKHZhciBlPWEuY2hpbGQ7bnVsbCE9PWU7KWN8PWUubGFuZXN8ZS5jaGlsZExhbmVzLGR8PWUuc3VidHJlZUZsYWdzJjE0NjgwMDY0LGR8PWUuZmxhZ3MmMTQ2ODAwNjQsZS5yZXR1cm49YSxlPWUuc2libGluZztlbHNlIGZvcihlPWEuY2hpbGQ7bnVsbCE9PWU7KWN8PWUubGFuZXN8ZS5jaGlsZExhbmVzLGR8PWUuc3VidHJlZUZsYWdzLGR8PWUuZmxhZ3MsZS5yZXR1cm49YSxlPWUuc2libGluZzthLnN1YnRyZWVGbGFnc3w9ZDthLmNoaWxkTGFuZXM9YztyZXR1cm4gYn1cbmZ1bmN0aW9uIFFpKGEsYixjKXt2YXIgZD1iLnBlbmRpbmdQcm9wcztXZyhiKTtzd2l0Y2goYi50YWcpe2Nhc2UgMjpjYXNlIDE2OmNhc2UgMTU6Y2FzZSAwOmNhc2UgMTE6Y2FzZSA3OmNhc2UgODpjYXNlIDEyOmNhc2UgOTpjYXNlIDE0OnJldHVybiBWKGIpLG51bGw7Y2FzZSAxOnJldHVybiBUZihiLnR5cGUpJiZVZigpLFYoYiksbnVsbDtjYXNlIDM6ZD1iLnN0YXRlTm9kZTt6aCgpO0coUWYpO0coSSk7RWgoKTtkLnBlbmRpbmdDb250ZXh0JiYoZC5jb250ZXh0PWQucGVuZGluZ0NvbnRleHQsZC5wZW5kaW5nQ29udGV4dD1udWxsKTtpZihudWxsPT09YXx8bnVsbD09PWEuY2hpbGQpZmgoYik/Yi5mbGFnc3w9NDpudWxsPT09YXx8YS5tZW1vaXplZFN0YXRlLmlzRGVoeWRyYXRlZCYmMD09PShiLmZsYWdzJjI1Nil8fChiLmZsYWdzfD0xMDI0LG51bGwhPT1aZyYmKFJpKFpnKSxaZz1udWxsKSk7TWkoYSxiKTtWKGIpO3JldHVybiBudWxsO2Nhc2UgNTpCaChiKTt2YXIgZT14aCh3aC5jdXJyZW50KTtcbmM9Yi50eXBlO2lmKG51bGwhPT1hJiZudWxsIT1iLnN0YXRlTm9kZSlOaShhLGIsYyxkLGUpLGEucmVmIT09Yi5yZWYmJihiLmZsYWdzfD01MTIsYi5mbGFnc3w9MjA5NzE1Mik7ZWxzZXtpZighZCl7aWYobnVsbD09PWIuc3RhdGVOb2RlKXRocm93IEVycm9yKHAoMTY2KSk7VihiKTtyZXR1cm4gbnVsbH1hPXhoKHVoLmN1cnJlbnQpO2lmKGZoKGIpKXtkPWIuc3RhdGVOb2RlO2M9Yi50eXBlO3ZhciBmPWIubWVtb2l6ZWRQcm9wcztkW0lmXT1iO2RbSmZdPWY7YT0wIT09KGIubW9kZSYxKTtzd2l0Y2goYyl7Y2FzZSBcImRpYWxvZ1wiOkYoXCJjYW5jZWxcIixkKTtGKFwiY2xvc2VcIixkKTticmVhaztjYXNlIFwiaWZyYW1lXCI6Y2FzZSBcIm9iamVjdFwiOmNhc2UgXCJlbWJlZFwiOkYoXCJsb2FkXCIsZCk7YnJlYWs7Y2FzZSBcInZpZGVvXCI6Y2FzZSBcImF1ZGlvXCI6Zm9yKGU9MDtlPGZmLmxlbmd0aDtlKyspRihmZltlXSxkKTticmVhaztjYXNlIFwic291cmNlXCI6RihcImVycm9yXCIsZCk7YnJlYWs7Y2FzZSBcImltZ1wiOmNhc2UgXCJpbWFnZVwiOmNhc2UgXCJsaW5rXCI6RihcImVycm9yXCIsXG5kKTtGKFwibG9hZFwiLGQpO2JyZWFrO2Nhc2UgXCJkZXRhaWxzXCI6RihcInRvZ2dsZVwiLGQpO2JyZWFrO2Nhc2UgXCJpbnB1dFwiOlhhKGQsZik7RihcImludmFsaWRcIixkKTticmVhaztjYXNlIFwic2VsZWN0XCI6ZC5fd3JhcHBlclN0YXRlPXt3YXNNdWx0aXBsZTohIWYubXVsdGlwbGV9O0YoXCJpbnZhbGlkXCIsZCk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6ZWIoZCxmKSxGKFwiaW52YWxpZFwiLGQpfXJiKGMsZik7ZT1udWxsO2Zvcih2YXIgZyBpbiBmKWlmKGYuaGFzT3duUHJvcGVydHkoZykpe3ZhciBoPWZbZ107XCJjaGlsZHJlblwiPT09Zz9cInN0cmluZ1wiPT09dHlwZW9mIGg/ZC50ZXh0Q29udGVudCE9PWgmJih2ZihkLnRleHRDb250ZW50LGgsYSksZT1bXCJjaGlsZHJlblwiLGhdKTpcIm51bWJlclwiPT09dHlwZW9mIGgmJmQudGV4dENvbnRlbnQhPT1cIlwiK2gmJih2ZihkLnRleHRDb250ZW50LGgsYSksZT1bXCJjaGlsZHJlblwiLFwiXCIraF0pOmRhLmhhc093blByb3BlcnR5KGcpJiZudWxsIT1oJiZcIm9uU2Nyb2xsXCI9PT1cbmcmJkYoXCJzY3JvbGxcIixkKX1zd2l0Y2goYyl7Y2FzZSBcImlucHV0XCI6VGEoZCk7YWIoZCxmLCEwKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpUYShkKTtnYihkKTticmVhaztjYXNlIFwic2VsZWN0XCI6Y2FzZSBcIm9wdGlvblwiOmJyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiPT09dHlwZW9mIGYub25DbGljayYmKGQub25jbGljaz13Zil9ZD1lO2IudXBkYXRlUXVldWU9ZDtudWxsIT09ZCYmKGIuZmxhZ3N8PTQpfWVsc2V7Zz05PT09ZS5ub2RlVHlwZT9lOmUub3duZXJEb2N1bWVudDtcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIj09PWEmJihhPWhiKGMpKTtcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIj09PWE/XCJzY3JpcHRcIj09PWM/KGE9Zy5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLGEuaW5uZXJIVE1MPVwiPHNjcmlwdD5cXHgzYy9zY3JpcHQ+XCIsYT1hLnJlbW92ZUNoaWxkKGEuZmlyc3RDaGlsZCkpOlwic3RyaW5nXCI9PT10eXBlb2YgZC5pcz9hPWcuY3JlYXRlRWxlbWVudChjLHtpczpkLmlzfSk6XG4oYT1nLmNyZWF0ZUVsZW1lbnQoYyksXCJzZWxlY3RcIj09PWMmJihnPWEsZC5tdWx0aXBsZT9nLm11bHRpcGxlPSEwOmQuc2l6ZSYmKGcuc2l6ZT1kLnNpemUpKSk6YT1nLmNyZWF0ZUVsZW1lbnROUyhhLGMpO2FbSWZdPWI7YVtKZl09ZDtMaShhLGIsITEsITEpO2Iuc3RhdGVOb2RlPWE7YTp7Zz1zYihjLGQpO3N3aXRjaChjKXtjYXNlIFwiZGlhbG9nXCI6RihcImNhbmNlbFwiLGEpO0YoXCJjbG9zZVwiLGEpO2U9ZDticmVhaztjYXNlIFwiaWZyYW1lXCI6Y2FzZSBcIm9iamVjdFwiOmNhc2UgXCJlbWJlZFwiOkYoXCJsb2FkXCIsYSk7ZT1kO2JyZWFrO2Nhc2UgXCJ2aWRlb1wiOmNhc2UgXCJhdWRpb1wiOmZvcihlPTA7ZTxmZi5sZW5ndGg7ZSsrKUYoZmZbZV0sYSk7ZT1kO2JyZWFrO2Nhc2UgXCJzb3VyY2VcIjpGKFwiZXJyb3JcIixhKTtlPWQ7YnJlYWs7Y2FzZSBcImltZ1wiOmNhc2UgXCJpbWFnZVwiOmNhc2UgXCJsaW5rXCI6RihcImVycm9yXCIsYSk7RihcImxvYWRcIixhKTtlPWQ7YnJlYWs7Y2FzZSBcImRldGFpbHNcIjpGKFwidG9nZ2xlXCIsXG5hKTtlPWQ7YnJlYWs7Y2FzZSBcImlucHV0XCI6WGEoYSxkKTtlPVdhKGEsZCk7RihcImludmFsaWRcIixhKTticmVhaztjYXNlIFwib3B0aW9uXCI6ZT1kO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjphLl93cmFwcGVyU3RhdGU9e3dhc011bHRpcGxlOiEhZC5tdWx0aXBsZX07ZT1BKHt9LGQse3ZhbHVlOnZvaWQgMH0pO0YoXCJpbnZhbGlkXCIsYSk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6ZWIoYSxkKTtlPWRiKGEsZCk7RihcImludmFsaWRcIixhKTticmVhaztkZWZhdWx0OmU9ZH1yYihjLGUpO2g9ZTtmb3IoZiBpbiBoKWlmKGguaGFzT3duUHJvcGVydHkoZikpe3ZhciBrPWhbZl07XCJzdHlsZVwiPT09Zj9wYihhLGspOlwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWY/KGs9az9rLl9faHRtbDp2b2lkIDAsbnVsbCE9ayYma2IoYSxrKSk6XCJjaGlsZHJlblwiPT09Zj9cInN0cmluZ1wiPT09dHlwZW9mIGs/KFwidGV4dGFyZWFcIiE9PWN8fFwiXCIhPT1rKSYmbGIoYSxrKTpcIm51bWJlclwiPT09dHlwZW9mIGsmJmxiKGEsXG5cIlwiK2spOlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1mJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09ZiYmXCJhdXRvRm9jdXNcIiE9PWYmJihkYS5oYXNPd25Qcm9wZXJ0eShmKT9udWxsIT1rJiZcIm9uU2Nyb2xsXCI9PT1mJiZGKFwic2Nyb2xsXCIsYSk6bnVsbCE9ayYmcmEoYSxmLGssZykpfXN3aXRjaChjKXtjYXNlIFwiaW5wdXRcIjpUYShhKTthYihhLGQsITEpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOlRhKGEpO2diKGEpO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjpudWxsIT1kLnZhbHVlJiZhLnNldEF0dHJpYnV0ZShcInZhbHVlXCIsXCJcIitRYShkLnZhbHVlKSk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmEubXVsdGlwbGU9ISFkLm11bHRpcGxlO2Y9ZC52YWx1ZTtudWxsIT1mP2NiKGEsISFkLm11bHRpcGxlLGYsITEpOm51bGwhPWQuZGVmYXVsdFZhbHVlJiZjYihhLCEhZC5tdWx0aXBsZSxkLmRlZmF1bHRWYWx1ZSwhMCk7YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5vbkNsaWNrJiZcbihhLm9uY2xpY2s9d2YpfXN3aXRjaChjKXtjYXNlIFwiYnV0dG9uXCI6Y2FzZSBcImlucHV0XCI6Y2FzZSBcInNlbGVjdFwiOmNhc2UgXCJ0ZXh0YXJlYVwiOmQ9ISFkLmF1dG9Gb2N1czticmVhayBhO2Nhc2UgXCJpbWdcIjpkPSEwO2JyZWFrIGE7ZGVmYXVsdDpkPSExfX1kJiYoYi5mbGFnc3w9NCl9bnVsbCE9PWIucmVmJiYoYi5mbGFnc3w9NTEyLGIuZmxhZ3N8PTIwOTcxNTIpfVYoYik7cmV0dXJuIG51bGw7Y2FzZSA2OmlmKGEmJm51bGwhPWIuc3RhdGVOb2RlKU9pKGEsYixhLm1lbW9pemVkUHJvcHMsZCk7ZWxzZXtpZihcInN0cmluZ1wiIT09dHlwZW9mIGQmJm51bGw9PT1iLnN0YXRlTm9kZSl0aHJvdyBFcnJvcihwKDE2NikpO2M9eGgod2guY3VycmVudCk7eGgodWguY3VycmVudCk7aWYoZmgoYikpe2Q9Yi5zdGF0ZU5vZGU7Yz1iLm1lbW9pemVkUHJvcHM7ZFtJZl09YjtpZihmPWQubm9kZVZhbHVlIT09YylpZihhPVhnLG51bGwhPT1hKXN3aXRjaChnPTAhPT0oYS5tb2RlJjEpLGEudGFnKXtjYXNlIDM6dmYoZC5ub2RlVmFsdWUsXG5jLGcpO2JyZWFrO2Nhc2UgNTohMCE9PWEubWVtb2l6ZWRQcm9wc1t2b2lkIDBdJiZ2ZihkLm5vZGVWYWx1ZSxjLGcpfWYmJihiLmZsYWdzfD00KX1lbHNlIGQ9KDk9PT1jLm5vZGVUeXBlP2M6Yy5vd25lckRvY3VtZW50KS5jcmVhdGVUZXh0Tm9kZShkKSxkW0lmXT1iLGIuc3RhdGVOb2RlPWR9VihiKTtyZXR1cm4gbnVsbDtjYXNlIDEzOkcoUCk7ZD1iLm1lbW9pemVkU3RhdGU7aWYoTiYmbnVsbCE9PVlnJiYwIT09KGIubW9kZSYxKSYmMD09PShiLmZsYWdzJjEyOCkpe2ZvcihkPVlnO2Q7KWQ9RmYoZC5uZXh0U2libGluZyk7Z2goKTtiLmZsYWdzfD05ODU2MDtyZXR1cm4gYn1pZihudWxsIT09ZCYmbnVsbCE9PWQuZGVoeWRyYXRlZCl7ZD1maChiKTtpZihudWxsPT09YSl7aWYoIWQpdGhyb3cgRXJyb3IocCgzMTgpKTtkPWIubWVtb2l6ZWRTdGF0ZTtkPW51bGwhPT1kP2QuZGVoeWRyYXRlZDpudWxsO2lmKCFkKXRocm93IEVycm9yKHAoMzE3KSk7ZFtJZl09Yn1lbHNlIGdoKCksMD09PVxuKGIuZmxhZ3MmMTI4KSYmKGIubWVtb2l6ZWRTdGF0ZT1udWxsKSxiLmZsYWdzfD00O1YoYik7cmV0dXJuIG51bGx9bnVsbCE9PVpnJiYoUmkoWmcpLFpnPW51bGwpO2lmKDAhPT0oYi5mbGFncyYxMjgpKXJldHVybiBiLmxhbmVzPWMsYjtkPW51bGwhPT1kO2M9ITE7bnVsbD09PWE/ZmgoYik6Yz1udWxsIT09YS5tZW1vaXplZFN0YXRlO2QmJiFjJiYoYi5jaGlsZC5mbGFnc3w9ODE5MiwwIT09KGIubW9kZSYxKSYmKG51bGw9PT1hfHwwIT09KFAuY3VycmVudCYxKT8wPT09VyYmKFc9Myk6U2koKSkpO251bGwhPT1iLnVwZGF0ZVF1ZXVlJiYoYi5mbGFnc3w9NCk7VihiKTtyZXR1cm4gbnVsbDtjYXNlIDQ6cmV0dXJuIHpoKCksTWkoYSxiKSxudWxsPT09YSYmbmYoYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyksVihiKSxudWxsO2Nhc2UgMTA6cmV0dXJuIGxnKGIudHlwZS5fY29udGV4dCksVihiKSxudWxsO2Nhc2UgMTc6cmV0dXJuIFRmKGIudHlwZSkmJlVmKCksVihiKSxudWxsO2Nhc2UgMTk6RyhQKTtcbmY9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGw9PT1mKXJldHVybiBWKGIpLG51bGw7ZD0wIT09KGIuZmxhZ3MmMTI4KTtnPWYucmVuZGVyaW5nO2lmKG51bGw9PT1nKWlmKGQpUGkoZiwhMSk7ZWxzZXtpZigwIT09V3x8bnVsbCE9PWEmJjAhPT0oYS5mbGFncyYxMjgpKWZvcihhPWIuY2hpbGQ7bnVsbCE9PWE7KXtnPUNoKGEpO2lmKG51bGwhPT1nKXtiLmZsYWdzfD0xMjg7UGkoZiwhMSk7ZD1nLnVwZGF0ZVF1ZXVlO251bGwhPT1kJiYoYi51cGRhdGVRdWV1ZT1kLGIuZmxhZ3N8PTQpO2Iuc3VidHJlZUZsYWdzPTA7ZD1jO2ZvcihjPWIuY2hpbGQ7bnVsbCE9PWM7KWY9YyxhPWQsZi5mbGFncyY9MTQ2ODAwNjYsZz1mLmFsdGVybmF0ZSxudWxsPT09Zz8oZi5jaGlsZExhbmVzPTAsZi5sYW5lcz1hLGYuY2hpbGQ9bnVsbCxmLnN1YnRyZWVGbGFncz0wLGYubWVtb2l6ZWRQcm9wcz1udWxsLGYubWVtb2l6ZWRTdGF0ZT1udWxsLGYudXBkYXRlUXVldWU9bnVsbCxmLmRlcGVuZGVuY2llcz1udWxsLFxuZi5zdGF0ZU5vZGU9bnVsbCk6KGYuY2hpbGRMYW5lcz1nLmNoaWxkTGFuZXMsZi5sYW5lcz1nLmxhbmVzLGYuY2hpbGQ9Zy5jaGlsZCxmLnN1YnRyZWVGbGFncz0wLGYuZGVsZXRpb25zPW51bGwsZi5tZW1vaXplZFByb3BzPWcubWVtb2l6ZWRQcm9wcyxmLm1lbW9pemVkU3RhdGU9Zy5tZW1vaXplZFN0YXRlLGYudXBkYXRlUXVldWU9Zy51cGRhdGVRdWV1ZSxmLnR5cGU9Zy50eXBlLGE9Zy5kZXBlbmRlbmNpZXMsZi5kZXBlbmRlbmNpZXM9bnVsbD09PWE/bnVsbDp7bGFuZXM6YS5sYW5lcyxmaXJzdENvbnRleHQ6YS5maXJzdENvbnRleHR9KSxjPWMuc2libGluZztIKFAsUC5jdXJyZW50JjF8Mik7cmV0dXJuIGIuY2hpbGR9YT1hLnNpYmxpbmd9bnVsbCE9PWYudGFpbCYmRCgpPlRpJiYoYi5mbGFnc3w9MTI4LGQ9ITAsUGkoZiwhMSksYi5sYW5lcz00MTk0MzA0KX1lbHNle2lmKCFkKWlmKGE9Q2goZyksbnVsbCE9PWEpe2lmKGIuZmxhZ3N8PTEyOCxkPSEwLGM9YS51cGRhdGVRdWV1ZSxcbm51bGwhPT1jJiYoYi51cGRhdGVRdWV1ZT1jLGIuZmxhZ3N8PTQpLFBpKGYsITApLG51bGw9PT1mLnRhaWwmJlwiaGlkZGVuXCI9PT1mLnRhaWxNb2RlJiYhZy5hbHRlcm5hdGUmJiFOKXJldHVybiBWKGIpLG51bGx9ZWxzZSAyKkQoKS1mLnJlbmRlcmluZ1N0YXJ0VGltZT5UaSYmMTA3Mzc0MTgyNCE9PWMmJihiLmZsYWdzfD0xMjgsZD0hMCxQaShmLCExKSxiLmxhbmVzPTQxOTQzMDQpO2YuaXNCYWNrd2FyZHM/KGcuc2libGluZz1iLmNoaWxkLGIuY2hpbGQ9Zyk6KGM9Zi5sYXN0LG51bGwhPT1jP2Muc2libGluZz1nOmIuY2hpbGQ9ZyxmLmxhc3Q9Zyl9aWYobnVsbCE9PWYudGFpbClyZXR1cm4gYj1mLnRhaWwsZi5yZW5kZXJpbmc9YixmLnRhaWw9Yi5zaWJsaW5nLGYucmVuZGVyaW5nU3RhcnRUaW1lPUQoKSxiLnNpYmxpbmc9bnVsbCxjPVAuY3VycmVudCxIKFAsZD9jJjF8MjpjJjEpLGI7VihiKTtyZXR1cm4gbnVsbDtjYXNlIDIyOmNhc2UgMjM6cmV0dXJuIFVpKCksZD1udWxsIT09XG5iLm1lbW9pemVkU3RhdGUsbnVsbCE9PWEmJm51bGwhPT1hLm1lbW9pemVkU3RhdGUhPT1kJiYoYi5mbGFnc3w9ODE5MiksZCYmMCE9PShiLm1vZGUmMSk/MCE9PShWaSYxMDczNzQxODI0KSYmKFYoYiksYi5zdWJ0cmVlRmxhZ3MmNiYmKGIuZmxhZ3N8PTgxOTIpKTpWKGIpLG51bGw7Y2FzZSAyNDpyZXR1cm4gbnVsbDtjYXNlIDI1OnJldHVybiBudWxsfXRocm93IEVycm9yKHAoMTU2LGIudGFnKSk7fXZhciBXaT1zYS5SZWFjdEN1cnJlbnRPd25lcixvZz0hMTtmdW5jdGlvbiBYaShhLGIsYyxkKXtiLmNoaWxkPW51bGw9PT1hP3NoKGIsbnVsbCxjLGQpOnJoKGIsYS5jaGlsZCxjLGQpfVxuZnVuY3Rpb24gWWkoYSxiLGMsZCxlKXtjPWMucmVuZGVyO3ZhciBmPWIucmVmO25nKGIsZSk7ZD1OaChhLGIsYyxkLGYsZSk7Yz1TaCgpO2lmKG51bGwhPT1hJiYhb2cpcmV0dXJuIGIudXBkYXRlUXVldWU9YS51cGRhdGVRdWV1ZSxiLmZsYWdzJj0tMjA1MyxhLmxhbmVzJj1+ZSxaaShhLGIsZSk7TiYmYyYmVmcoYik7Yi5mbGFnc3w9MTtYaShhLGIsZCxlKTtyZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uICRpKGEsYixjLGQsZSl7aWYobnVsbD09PWEpe3ZhciBmPWMudHlwZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZiYmIWFqKGYpJiZ2b2lkIDA9PT1mLmRlZmF1bHRQcm9wcyYmbnVsbD09PWMuY29tcGFyZSYmdm9pZCAwPT09Yy5kZWZhdWx0UHJvcHMpcmV0dXJuIGIudGFnPTE1LGIudHlwZT1mLGJqKGEsYixmLGQsZSk7YT1vaChjLnR5cGUsbnVsbCxkLGIsYi5tb2RlLGUpO2EucmVmPWIucmVmO2EucmV0dXJuPWI7cmV0dXJuIGIuY2hpbGQ9YX1mPWEuY2hpbGQ7aWYoMD09PShhLmxhbmVzJmUpKXt2YXIgZz1mLm1lbW9pemVkUHJvcHM7Yz1jLmNvbXBhcmU7Yz1udWxsIT09Yz9jOkRlO2lmKGMoZyxkKSYmYS5yZWY9PT1iLnJlZilyZXR1cm4gWmkoYSxiLGUpfWIuZmxhZ3N8PTE7YT1taChmLGQpO2EucmVmPWIucmVmO2EucmV0dXJuPWI7cmV0dXJuIGIuY2hpbGQ9YX1cbmZ1bmN0aW9uIGJqKGEsYixjLGQsZSl7aWYobnVsbCE9PWEmJkRlKGEubWVtb2l6ZWRQcm9wcyxkKSYmYS5yZWY9PT1iLnJlZilpZihvZz0hMSwwIT09KGEubGFuZXMmZSkpMCE9PShhLmZsYWdzJjEzMTA3MikmJihvZz0hMCk7ZWxzZSByZXR1cm4gYi5sYW5lcz1hLmxhbmVzLFppKGEsYixlKTtyZXR1cm4gY2ooYSxiLGMsZCxlKX1cbmZ1bmN0aW9uIGRqKGEsYixjKXt2YXIgZD1iLnBlbmRpbmdQcm9wcyxlPWQuY2hpbGRyZW4sZj1udWxsIT09YT9hLm1lbW9pemVkU3RhdGU6bnVsbDtpZihcImhpZGRlblwiPT09ZC5tb2RlKWlmKDA9PT0oYi5tb2RlJjEpKWIubWVtb2l6ZWRTdGF0ZT17YmFzZUxhbmVzOjAsY2FjaGVQb29sOm51bGx9LEgoZWosVmkpLFZpfD1jO2Vsc2UgaWYoMCE9PShjJjEwNzM3NDE4MjQpKWIubWVtb2l6ZWRTdGF0ZT17YmFzZUxhbmVzOjAsY2FjaGVQb29sOm51bGx9LGQ9bnVsbCE9PWY/Zi5iYXNlTGFuZXM6YyxIKGVqLFZpKSxWaXw9ZDtlbHNlIHJldHVybiBhPW51bGwhPT1mP2YuYmFzZUxhbmVzfGM6YyxiLmxhbmVzPWIuY2hpbGRMYW5lcz0xMDczNzQxODI0LGIubWVtb2l6ZWRTdGF0ZT17YmFzZUxhbmVzOmEsY2FjaGVQb29sOm51bGx9LGIudXBkYXRlUXVldWU9bnVsbCxIKGVqLFZpKSxWaXw9YSxudWxsO2Vsc2UgbnVsbCE9PWY/KGQ9Zi5iYXNlTGFuZXN8YyxiLm1lbW9pemVkU3RhdGU9bnVsbCk6XG5kPWMsSChlaixWaSksVml8PWQ7WGkoYSxiLGUsYyk7cmV0dXJuIGIuY2hpbGR9ZnVuY3Rpb24gZmooYSxiKXt2YXIgYz1iLnJlZjtpZihudWxsPT09YSYmbnVsbCE9PWN8fG51bGwhPT1hJiZhLnJlZiE9PWMpYi5mbGFnc3w9NTEyLGIuZmxhZ3N8PTIwOTcxNTJ9ZnVuY3Rpb24gY2ooYSxiLGMsZCxlKXt2YXIgZj1UZihjKT9SZjpJLmN1cnJlbnQ7Zj1TZihiLGYpO25nKGIsZSk7Yz1OaChhLGIsYyxkLGYsZSk7ZD1TaCgpO2lmKG51bGwhPT1hJiYhb2cpcmV0dXJuIGIudXBkYXRlUXVldWU9YS51cGRhdGVRdWV1ZSxiLmZsYWdzJj0tMjA1MyxhLmxhbmVzJj1+ZSxaaShhLGIsZSk7TiYmZCYmVmcoYik7Yi5mbGFnc3w9MTtYaShhLGIsYyxlKTtyZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIGdqKGEsYixjLGQsZSl7aWYoVGYoYykpe3ZhciBmPSEwO1hmKGIpfWVsc2UgZj0hMTtuZyhiLGUpO2lmKG51bGw9PT1iLnN0YXRlTm9kZSludWxsIT09YSYmKGEuYWx0ZXJuYXRlPW51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmZsYWdzfD0yKSxIZyhiLGMsZCksSmcoYixjLGQsZSksZD0hMDtlbHNlIGlmKG51bGw9PT1hKXt2YXIgZz1iLnN0YXRlTm9kZSxoPWIubWVtb2l6ZWRQcm9wcztnLnByb3BzPWg7dmFyIGs9Zy5jb250ZXh0LGw9Yy5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGwmJm51bGwhPT1sP2w9cGcobCk6KGw9VGYoYyk/UmY6SS5jdXJyZW50LGw9U2YoYixsKSk7dmFyIG09Yy5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMsdz1cImZ1bmN0aW9uXCI9PT10eXBlb2YgbXx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGU7d3x8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJlxuXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wc3x8KGghPT1kfHxrIT09bCkmJklnKGIsZyxkLGwpO3JnPSExO3ZhciB1PWIubWVtb2l6ZWRTdGF0ZTtnLnN0YXRlPXU7eWcoYixkLGcsZSk7az1iLm1lbW9pemVkU3RhdGU7aCE9PWR8fHUhPT1rfHxRZi5jdXJyZW50fHxyZz8oXCJmdW5jdGlvblwiPT09dHlwZW9mIG0mJihDZyhiLGMsbSxkKSxrPWIubWVtb2l6ZWRTdGF0ZSksKGg9cmd8fEdnKGIsYyxoLGQsdSxrLGwpKT8od3x8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbE1vdW50fHwoXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50V2lsbE1vdW50JiZnLmNvbXBvbmVudFdpbGxNb3VudCgpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJmcuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCgpKSxcImZ1bmN0aW9uXCI9PT1cbnR5cGVvZiBnLmNvbXBvbmVudERpZE1vdW50JiYoYi5mbGFnc3w9NDE5NDMwOCkpOihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnREaWRNb3VudCYmKGIuZmxhZ3N8PTQxOTQzMDgpLGIubWVtb2l6ZWRQcm9wcz1kLGIubWVtb2l6ZWRTdGF0ZT1rKSxnLnByb3BzPWQsZy5zdGF0ZT1rLGcuY29udGV4dD1sLGQ9aCk6KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZE1vdW50JiYoYi5mbGFnc3w9NDE5NDMwOCksZD0hMSl9ZWxzZXtnPWIuc3RhdGVOb2RlO3RnKGEsYik7aD1iLm1lbW9pemVkUHJvcHM7bD1iLnR5cGU9PT1iLmVsZW1lbnRUeXBlP2g6ZmcoYi50eXBlLGgpO2cucHJvcHM9bDt3PWIucGVuZGluZ1Byb3BzO3U9Zy5jb250ZXh0O2s9Yy5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGsmJm51bGwhPT1rP2s9cGcoayk6KGs9VGYoYyk/UmY6SS5jdXJyZW50LGs9U2YoYixrKSk7dmFyIHk9Yy5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM7KG09XCJmdW5jdGlvblwiPT09XG50eXBlb2YgeXx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUpfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wc3x8KGghPT13fHx1IT09aykmJklnKGIsZyxkLGspO3JnPSExO3U9Yi5tZW1vaXplZFN0YXRlO2cuc3RhdGU9dTt5ZyhiLGQsZyxlKTt2YXIgbj1iLm1lbW9pemVkU3RhdGU7aCE9PXd8fHUhPT1ufHxRZi5jdXJyZW50fHxyZz8oXCJmdW5jdGlvblwiPT09dHlwZW9mIHkmJihDZyhiLGMseSxkKSxuPWIubWVtb2l6ZWRTdGF0ZSksKGw9cmd8fEdnKGIsYyxsLGQsdSxuLGspfHwhMSk/KG18fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsVXBkYXRlfHwoXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFVwZGF0ZSYmXG5nLmNvbXBvbmVudFdpbGxVcGRhdGUoZCxuLGspLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlJiZnLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlKGQsbixrKSksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlJiYoYi5mbGFnc3w9NCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUmJihiLmZsYWdzfD0xMDI0KSk6KFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmdT09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZmxhZ3N8PTQpLFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZ1PT09YS5tZW1vaXplZFN0YXRlfHwoYi5mbGFnc3w9MTAyNCksYi5tZW1vaXplZFByb3BzPWQsYi5tZW1vaXplZFN0YXRlPW4pLGcucHJvcHM9ZCxnLnN0YXRlPW4sZy5jb250ZXh0PVxuayxkPWwpOihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnREaWRVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJnU9PT1hLm1lbW9pemVkU3RhdGV8fChiLmZsYWdzfD00KSxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmdT09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZmxhZ3N8PTEwMjQpLGQ9ITEpfXJldHVybiBoaihhLGIsYyxkLGYsZSl9XG5mdW5jdGlvbiBoaihhLGIsYyxkLGUsZil7ZmooYSxiKTt2YXIgZz0wIT09KGIuZmxhZ3MmMTI4KTtpZighZCYmIWcpcmV0dXJuIGUmJllmKGIsYywhMSksWmkoYSxiLGYpO2Q9Yi5zdGF0ZU5vZGU7V2kuY3VycmVudD1iO3ZhciBoPWcmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBjLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcj9udWxsOmQucmVuZGVyKCk7Yi5mbGFnc3w9MTtudWxsIT09YSYmZz8oYi5jaGlsZD1yaChiLGEuY2hpbGQsbnVsbCxmKSxiLmNoaWxkPXJoKGIsbnVsbCxoLGYpKTpYaShhLGIsaCxmKTtiLm1lbW9pemVkU3RhdGU9ZC5zdGF0ZTtlJiZZZihiLGMsITApO3JldHVybiBiLmNoaWxkfWZ1bmN0aW9uIGlqKGEpe3ZhciBiPWEuc3RhdGVOb2RlO2IucGVuZGluZ0NvbnRleHQ/VmYoYSxiLnBlbmRpbmdDb250ZXh0LGIucGVuZGluZ0NvbnRleHQhPT1iLmNvbnRleHQpOmIuY29udGV4dCYmVmYoYSxiLmNvbnRleHQsITEpO3loKGEsYi5jb250YWluZXJJbmZvKX1cbmZ1bmN0aW9uIGpqKGEsYixjLGQsZSl7Z2goKTtoaChlKTtiLmZsYWdzfD0yNTY7WGkoYSxiLGMsZCk7cmV0dXJuIGIuY2hpbGR9dmFyIGtqPXtkZWh5ZHJhdGVkOm51bGwsdHJlZUNvbnRleHQ6bnVsbCxyZXRyeUxhbmU6MH07ZnVuY3Rpb24gbGooYSl7cmV0dXJue2Jhc2VMYW5lczphLGNhY2hlUG9vbDpudWxsfX1cbmZ1bmN0aW9uIG1qKGEsYixjKXt2YXIgZD1iLnBlbmRpbmdQcm9wcyxlPVAuY3VycmVudCxmPSExLGc9MCE9PShiLmZsYWdzJjEyOCksaDsoaD1nKXx8KGg9bnVsbCE9PWEmJm51bGw9PT1hLm1lbW9pemVkU3RhdGU/ITE6MCE9PShlJjIpKTtpZihoKWY9ITAsYi5mbGFncyY9LTEyOTtlbHNlIGlmKG51bGw9PT1hfHxudWxsIT09YS5tZW1vaXplZFN0YXRlKWV8PTE7SChQLGUmMSk7aWYobnVsbD09PWEpe2RoKGIpO2E9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1hJiYoYT1hLmRlaHlkcmF0ZWQsbnVsbCE9PWEpKXJldHVybiAwPT09KGIubW9kZSYxKT9iLmxhbmVzPTE6XCIkIVwiPT09YS5kYXRhP2IubGFuZXM9ODpiLmxhbmVzPTEwNzM3NDE4MjQsbnVsbDtlPWQuY2hpbGRyZW47YT1kLmZhbGxiYWNrO3JldHVybiBmPyhkPWIubW9kZSxmPWIuY2hpbGQsZT17bW9kZTpcImhpZGRlblwiLGNoaWxkcmVuOmV9LDA9PT0oZCYxKSYmbnVsbCE9PWY/KGYuY2hpbGRMYW5lcz0wLGYucGVuZGluZ1Byb3BzPVxuZSk6Zj1uaihlLGQsMCxudWxsKSxhPXFoKGEsZCxjLG51bGwpLGYucmV0dXJuPWIsYS5yZXR1cm49YixmLnNpYmxpbmc9YSxiLmNoaWxkPWYsYi5jaGlsZC5tZW1vaXplZFN0YXRlPWxqKGMpLGIubWVtb2l6ZWRTdGF0ZT1raixhKTpvaihiLGUpfWU9YS5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1lKXtoPWUuZGVoeWRyYXRlZDtpZihudWxsIT09aCl7aWYoZyl7aWYoYi5mbGFncyYyNTYpcmV0dXJuIGIuZmxhZ3MmPS0yNTcscGooYSxiLGMsRXJyb3IocCg0MjIpKSk7aWYobnVsbCE9PWIubWVtb2l6ZWRTdGF0ZSlyZXR1cm4gYi5jaGlsZD1hLmNoaWxkLGIuZmxhZ3N8PTEyOCxudWxsO2Y9ZC5mYWxsYmFjaztlPWIubW9kZTtkPW5qKHttb2RlOlwidmlzaWJsZVwiLGNoaWxkcmVuOmQuY2hpbGRyZW59LGUsMCxudWxsKTtmPXFoKGYsZSxjLG51bGwpO2YuZmxhZ3N8PTI7ZC5yZXR1cm49YjtmLnJldHVybj1iO2Quc2libGluZz1mO2IuY2hpbGQ9ZDswIT09KGIubW9kZSYxKSYmcmgoYixhLmNoaWxkLFxubnVsbCxjKTtiLmNoaWxkLm1lbW9pemVkU3RhdGU9bGooYyk7Yi5tZW1vaXplZFN0YXRlPWtqO3JldHVybiBmfWlmKDA9PT0oYi5tb2RlJjEpKWI9cGooYSxiLGMsbnVsbCk7ZWxzZSBpZihcIiQhXCI9PT1oLmRhdGEpYj1waihhLGIsYyxFcnJvcihwKDQxOSkpKTtlbHNlIGlmKGQ9MCE9PShjJmEuY2hpbGRMYW5lcyksb2d8fGQpe2Q9SjtpZihudWxsIT09ZCl7c3dpdGNoKGMmLWMpe2Nhc2UgNDpmPTI7YnJlYWs7Y2FzZSAxNjpmPTg7YnJlYWs7Y2FzZSA2NDpjYXNlIDEyODpjYXNlIDI1NjpjYXNlIDUxMjpjYXNlIDEwMjQ6Y2FzZSAyMDQ4OmNhc2UgNDA5NjpjYXNlIDgxOTI6Y2FzZSAxNjM4NDpjYXNlIDMyNzY4OmNhc2UgNjU1MzY6Y2FzZSAxMzEwNzI6Y2FzZSAyNjIxNDQ6Y2FzZSA1MjQyODg6Y2FzZSAxMDQ4NTc2OmNhc2UgMjA5NzE1MjpjYXNlIDQxOTQzMDQ6Y2FzZSA4Mzg4NjA4OmNhc2UgMTY3NzcyMTY6Y2FzZSAzMzU1NDQzMjpjYXNlIDY3MTA4ODY0OmY9MzI7YnJlYWs7Y2FzZSA1MzY4NzA5MTI6Zj1cbjI2ODQzNTQ1NjticmVhaztkZWZhdWx0OmY9MH1kPTAhPT0oZiYoZC5zdXNwZW5kZWRMYW5lc3xjKSk/MDpmOzAhPT1kJiZkIT09ZS5yZXRyeUxhbmUmJihlLnJldHJ5TGFuZT1kLEVnKGEsZCwtMSkpfVNpKCk7Yj1waihhLGIsYyxFcnJvcihwKDQyMSkpKX1lbHNlXCIkP1wiPT09aC5kYXRhPyhiLmZsYWdzfD0xMjgsYi5jaGlsZD1hLmNoaWxkLGI9cWouYmluZChudWxsLGEpLGguX3JlYWN0UmV0cnk9YixiPW51bGwpOihjPWUudHJlZUNvbnRleHQsWWc9RmYoaC5uZXh0U2libGluZyksWGc9YixOPSEwLFpnPW51bGwsbnVsbCE9PWMmJihPZ1tQZysrXT1SZyxPZ1tQZysrXT1TZyxPZ1tQZysrXT1RZyxSZz1jLmlkLFNnPWMub3ZlcmZsb3csUWc9YiksYj1vaihiLGIucGVuZGluZ1Byb3BzLmNoaWxkcmVuKSxiLmZsYWdzfD00MDk2KTtyZXR1cm4gYn1pZihmKXJldHVybiBkPXJqKGEsYixkLmNoaWxkcmVuLGQuZmFsbGJhY2ssYyksZj1iLmNoaWxkLGU9YS5jaGlsZC5tZW1vaXplZFN0YXRlLFxuZi5tZW1vaXplZFN0YXRlPW51bGw9PT1lP2xqKGMpOntiYXNlTGFuZXM6ZS5iYXNlTGFuZXN8YyxjYWNoZVBvb2w6bnVsbH0sZi5jaGlsZExhbmVzPWEuY2hpbGRMYW5lcyZ+YyxiLm1lbW9pemVkU3RhdGU9a2osZDtjPXNqKGEsYixkLmNoaWxkcmVuLGMpO2IubWVtb2l6ZWRTdGF0ZT1udWxsO3JldHVybiBjfWlmKGYpcmV0dXJuIGQ9cmooYSxiLGQuY2hpbGRyZW4sZC5mYWxsYmFjayxjKSxmPWIuY2hpbGQsZT1hLmNoaWxkLm1lbW9pemVkU3RhdGUsZi5tZW1vaXplZFN0YXRlPW51bGw9PT1lP2xqKGMpOntiYXNlTGFuZXM6ZS5iYXNlTGFuZXN8YyxjYWNoZVBvb2w6bnVsbH0sZi5jaGlsZExhbmVzPWEuY2hpbGRMYW5lcyZ+YyxiLm1lbW9pemVkU3RhdGU9a2osZDtjPXNqKGEsYixkLmNoaWxkcmVuLGMpO2IubWVtb2l6ZWRTdGF0ZT1udWxsO3JldHVybiBjfVxuZnVuY3Rpb24gb2ooYSxiKXtiPW5qKHttb2RlOlwidmlzaWJsZVwiLGNoaWxkcmVuOmJ9LGEubW9kZSwwLG51bGwpO2IucmV0dXJuPWE7cmV0dXJuIGEuY2hpbGQ9Yn1mdW5jdGlvbiBzaihhLGIsYyxkKXt2YXIgZT1hLmNoaWxkO2E9ZS5zaWJsaW5nO2M9bWgoZSx7bW9kZTpcInZpc2libGVcIixjaGlsZHJlbjpjfSk7MD09PShiLm1vZGUmMSkmJihjLmxhbmVzPWQpO2MucmV0dXJuPWI7Yy5zaWJsaW5nPW51bGw7bnVsbCE9PWEmJihkPWIuZGVsZXRpb25zLG51bGw9PT1kPyhiLmRlbGV0aW9ucz1bYV0sYi5mbGFnc3w9MTYpOmQucHVzaChhKSk7cmV0dXJuIGIuY2hpbGQ9Y31cbmZ1bmN0aW9uIHJqKGEsYixjLGQsZSl7dmFyIGY9Yi5tb2RlO2E9YS5jaGlsZDt2YXIgZz1hLnNpYmxpbmcsaD17bW9kZTpcImhpZGRlblwiLGNoaWxkcmVuOmN9OzA9PT0oZiYxKSYmYi5jaGlsZCE9PWE/KGM9Yi5jaGlsZCxjLmNoaWxkTGFuZXM9MCxjLnBlbmRpbmdQcm9wcz1oLGIuZGVsZXRpb25zPW51bGwpOihjPW1oKGEsaCksYy5zdWJ0cmVlRmxhZ3M9YS5zdWJ0cmVlRmxhZ3MmMTQ2ODAwNjQpO251bGwhPT1nP2Q9bWgoZyxkKTooZD1xaChkLGYsZSxudWxsKSxkLmZsYWdzfD0yKTtkLnJldHVybj1iO2MucmV0dXJuPWI7Yy5zaWJsaW5nPWQ7Yi5jaGlsZD1jO3JldHVybiBkfWZ1bmN0aW9uIHBqKGEsYixjLGQpe251bGwhPT1kJiZoaChkKTtyaChiLGEuY2hpbGQsbnVsbCxjKTthPW9qKGIsYi5wZW5kaW5nUHJvcHMuY2hpbGRyZW4pO2EuZmxhZ3N8PTI7Yi5tZW1vaXplZFN0YXRlPW51bGw7cmV0dXJuIGF9XG5mdW5jdGlvbiB0aihhLGIsYyl7YS5sYW5lc3w9Yjt2YXIgZD1hLmFsdGVybmF0ZTtudWxsIT09ZCYmKGQubGFuZXN8PWIpO21nKGEucmV0dXJuLGIsYyl9ZnVuY3Rpb24gdWooYSxiLGMsZCxlKXt2YXIgZj1hLm1lbW9pemVkU3RhdGU7bnVsbD09PWY/YS5tZW1vaXplZFN0YXRlPXtpc0JhY2t3YXJkczpiLHJlbmRlcmluZzpudWxsLHJlbmRlcmluZ1N0YXJ0VGltZTowLGxhc3Q6ZCx0YWlsOmMsdGFpbE1vZGU6ZX06KGYuaXNCYWNrd2FyZHM9YixmLnJlbmRlcmluZz1udWxsLGYucmVuZGVyaW5nU3RhcnRUaW1lPTAsZi5sYXN0PWQsZi50YWlsPWMsZi50YWlsTW9kZT1lKX1cbmZ1bmN0aW9uIHZqKGEsYixjKXt2YXIgZD1iLnBlbmRpbmdQcm9wcyxlPWQucmV2ZWFsT3JkZXIsZj1kLnRhaWw7WGkoYSxiLGQuY2hpbGRyZW4sYyk7ZD1QLmN1cnJlbnQ7aWYoMCE9PShkJjIpKWQ9ZCYxfDIsYi5mbGFnc3w9MTI4O2Vsc2V7aWYobnVsbCE9PWEmJjAhPT0oYS5mbGFncyYxMjgpKWE6Zm9yKGE9Yi5jaGlsZDtudWxsIT09YTspe2lmKDEzPT09YS50YWcpbnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSYmdGooYSxjLGIpO2Vsc2UgaWYoMTk9PT1hLnRhZyl0aihhLGMsYik7ZWxzZSBpZihudWxsIT09YS5jaGlsZCl7YS5jaGlsZC5yZXR1cm49YTthPWEuY2hpbGQ7Y29udGludWV9aWYoYT09PWIpYnJlYWsgYTtmb3IoO251bGw9PT1hLnNpYmxpbmc7KXtpZihudWxsPT09YS5yZXR1cm58fGEucmV0dXJuPT09YilicmVhayBhO2E9YS5yZXR1cm59YS5zaWJsaW5nLnJldHVybj1hLnJldHVybjthPWEuc2libGluZ31kJj0xfUgoUCxkKTtpZigwPT09KGIubW9kZSYxKSliLm1lbW9pemVkU3RhdGU9XG5udWxsO2Vsc2Ugc3dpdGNoKGUpe2Nhc2UgXCJmb3J3YXJkc1wiOmM9Yi5jaGlsZDtmb3IoZT1udWxsO251bGwhPT1jOylhPWMuYWx0ZXJuYXRlLG51bGwhPT1hJiZudWxsPT09Q2goYSkmJihlPWMpLGM9Yy5zaWJsaW5nO2M9ZTtudWxsPT09Yz8oZT1iLmNoaWxkLGIuY2hpbGQ9bnVsbCk6KGU9Yy5zaWJsaW5nLGMuc2libGluZz1udWxsKTt1aihiLCExLGUsYyxmKTticmVhaztjYXNlIFwiYmFja3dhcmRzXCI6Yz1udWxsO2U9Yi5jaGlsZDtmb3IoYi5jaGlsZD1udWxsO251bGwhPT1lOyl7YT1lLmFsdGVybmF0ZTtpZihudWxsIT09YSYmbnVsbD09PUNoKGEpKXtiLmNoaWxkPWU7YnJlYWt9YT1lLnNpYmxpbmc7ZS5zaWJsaW5nPWM7Yz1lO2U9YX11aihiLCEwLGMsbnVsbCxmKTticmVhaztjYXNlIFwidG9nZXRoZXJcIjp1aihiLCExLG51bGwsbnVsbCx2b2lkIDApO2JyZWFrO2RlZmF1bHQ6Yi5tZW1vaXplZFN0YXRlPW51bGx9cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiBaaShhLGIsYyl7bnVsbCE9PWEmJihiLmRlcGVuZGVuY2llcz1hLmRlcGVuZGVuY2llcyk7emd8PWIubGFuZXM7aWYoMD09PShjJmIuY2hpbGRMYW5lcykpcmV0dXJuIG51bGw7aWYobnVsbCE9PWEmJmIuY2hpbGQhPT1hLmNoaWxkKXRocm93IEVycm9yKHAoMTUzKSk7aWYobnVsbCE9PWIuY2hpbGQpe2E9Yi5jaGlsZDtjPW1oKGEsYS5wZW5kaW5nUHJvcHMpO2IuY2hpbGQ9Yztmb3IoYy5yZXR1cm49YjtudWxsIT09YS5zaWJsaW5nOylhPWEuc2libGluZyxjPWMuc2libGluZz1taChhLGEucGVuZGluZ1Byb3BzKSxjLnJldHVybj1iO2Muc2libGluZz1udWxsfXJldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gd2ooYSxiLGMpe3N3aXRjaChiLnRhZyl7Y2FzZSAzOmlqKGIpO2doKCk7YnJlYWs7Y2FzZSA1OkFoKGIpO2JyZWFrO2Nhc2UgMTpUZihiLnR5cGUpJiZYZihiKTticmVhaztjYXNlIDQ6eWgoYixiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKTticmVhaztjYXNlIDEwOnZhciBkPWIudHlwZS5fY29udGV4dCxlPWIubWVtb2l6ZWRQcm9wcy52YWx1ZTtIKGdnLGQuX2N1cnJlbnRWYWx1ZSk7ZC5fY3VycmVudFZhbHVlPWU7YnJlYWs7Y2FzZSAxMzpkPWIubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZCl7aWYobnVsbCE9PWQuZGVoeWRyYXRlZClyZXR1cm4gSChQLFAuY3VycmVudCYxKSxiLmZsYWdzfD0xMjgsbnVsbDtpZigwIT09KGMmYi5jaGlsZC5jaGlsZExhbmVzKSlyZXR1cm4gbWooYSxiLGMpO0goUCxQLmN1cnJlbnQmMSk7YT1aaShhLGIsYyk7cmV0dXJuIG51bGwhPT1hP2Euc2libGluZzpudWxsfUgoUCxQLmN1cnJlbnQmMSk7YnJlYWs7Y2FzZSAxOTpkPTAhPT0oYyZcbmIuY2hpbGRMYW5lcyk7aWYoMCE9PShhLmZsYWdzJjEyOCkpe2lmKGQpcmV0dXJuIHZqKGEsYixjKTtiLmZsYWdzfD0xMjh9ZT1iLm1lbW9pemVkU3RhdGU7bnVsbCE9PWUmJihlLnJlbmRlcmluZz1udWxsLGUudGFpbD1udWxsLGUubGFzdEVmZmVjdD1udWxsKTtIKFAsUC5jdXJyZW50KTtpZihkKWJyZWFrO2Vsc2UgcmV0dXJuIG51bGw7Y2FzZSAyMjpjYXNlIDIzOnJldHVybiBiLmxhbmVzPTAsZGooYSxiLGMpfXJldHVybiBaaShhLGIsYyl9XG5mdW5jdGlvbiB4aihhLGIpe1dnKGIpO3N3aXRjaChiLnRhZyl7Y2FzZSAxOnJldHVybiBUZihiLnR5cGUpJiZVZigpLGE9Yi5mbGFncyxhJjY1NTM2PyhiLmZsYWdzPWEmLTY1NTM3fDEyOCxiKTpudWxsO2Nhc2UgMzpyZXR1cm4gemgoKSxHKFFmKSxHKEkpLEVoKCksYT1iLmZsYWdzLDAhPT0oYSY2NTUzNikmJjA9PT0oYSYxMjgpPyhiLmZsYWdzPWEmLTY1NTM3fDEyOCxiKTpudWxsO2Nhc2UgNTpyZXR1cm4gQmgoYiksbnVsbDtjYXNlIDEzOkcoUCk7YT1iLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWEmJm51bGwhPT1hLmRlaHlkcmF0ZWQpe2lmKG51bGw9PT1iLmFsdGVybmF0ZSl0aHJvdyBFcnJvcihwKDM0MCkpO2doKCl9YT1iLmZsYWdzO3JldHVybiBhJjY1NTM2PyhiLmZsYWdzPWEmLTY1NTM3fDEyOCxiKTpudWxsO2Nhc2UgMTk6cmV0dXJuIEcoUCksbnVsbDtjYXNlIDQ6cmV0dXJuIHpoKCksbnVsbDtjYXNlIDEwOnJldHVybiBsZyhiLnR5cGUuX2NvbnRleHQpLG51bGw7Y2FzZSAyMjpjYXNlIDIzOnJldHVybiBVaSgpLFxubnVsbDtjYXNlIDI0OnJldHVybiBudWxsO2RlZmF1bHQ6cmV0dXJuIG51bGx9fXZhciB5aj0hMSx6aj0hMSxBaj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgV2Vha1NldD9XZWFrU2V0OlNldCxYPW51bGw7ZnVuY3Rpb24gQmooYSxiKXt2YXIgYz1hLnJlZjtpZihudWxsIT09YylpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYyl0cnl7YyhudWxsKX1jYXRjaChkKXtDaihhLGIsZCl9ZWxzZSBjLmN1cnJlbnQ9bnVsbH1mdW5jdGlvbiBEaihhLGIsYyl7dHJ5e2MoKX1jYXRjaChkKXtDaihhLGIsZCl9fXZhciBFaj0hMTtcbmZ1bmN0aW9uIEZqKGEsYil7YT1IZSgpO2lmKEllKGEpKXtpZihcInNlbGVjdGlvblN0YXJ0XCJpbiBhKXZhciBjPXtzdGFydDphLnNlbGVjdGlvblN0YXJ0LGVuZDphLnNlbGVjdGlvbkVuZH07ZWxzZSBhOntjPShjPWEub3duZXJEb2N1bWVudCkmJmMuZGVmYXVsdFZpZXd8fHdpbmRvdzt2YXIgZD1jLmdldFNlbGVjdGlvbiYmYy5nZXRTZWxlY3Rpb24oKTtpZihkJiYwIT09ZC5yYW5nZUNvdW50KXtjPWQuYW5jaG9yTm9kZTt2YXIgZT1kLmFuY2hvck9mZnNldCxmPWQuZm9jdXNOb2RlO2Q9ZC5mb2N1c09mZnNldDt0cnl7Yy5ub2RlVHlwZSxmLm5vZGVUeXBlfWNhdGNoKE8pe2M9bnVsbDticmVhayBhfXZhciBnPTAsaD0tMSxrPS0xLGw9MCxtPTAsdz1hLHU9bnVsbDtiOmZvcig7Oyl7Zm9yKHZhciB5Ozspe3chPT1jfHwwIT09ZSYmMyE9PXcubm9kZVR5cGV8fChoPWcrZSk7dyE9PWZ8fDAhPT1kJiYzIT09dy5ub2RlVHlwZXx8KGs9ZytkKTszPT09dy5ub2RlVHlwZSYmKGcrPXcubm9kZVZhbHVlLmxlbmd0aCk7XG5pZihudWxsPT09KHk9dy5maXJzdENoaWxkKSlicmVhazt1PXc7dz15fWZvcig7Oyl7aWYodz09PWEpYnJlYWsgYjt1PT09YyYmKytsPT09ZSYmKGg9Zyk7dT09PWYmJisrbT09PWQmJihrPWcpO2lmKG51bGwhPT0oeT13Lm5leHRTaWJsaW5nKSlicmVhazt3PXU7dT13LnBhcmVudE5vZGV9dz15fWM9LTE9PT1ofHwtMT09PWs/bnVsbDp7c3RhcnQ6aCxlbmQ6a319ZWxzZSBjPW51bGx9Yz1jfHx7c3RhcnQ6MCxlbmQ6MH19ZWxzZSBjPW51bGw7eGY9e2ZvY3VzZWRFbGVtOmEsc2VsZWN0aW9uUmFuZ2U6Y307Zm9yKFg9YjtudWxsIT09WDspaWYoYj1YLGE9Yi5jaGlsZCwwIT09KGIuc3VidHJlZUZsYWdzJjEwMjgpJiZudWxsIT09YSlhLnJldHVybj1iLFg9YTtlbHNlIGZvcig7bnVsbCE9PVg7KXtiPVg7dHJ5e3ZhciBuPWIuYWx0ZXJuYXRlO2lmKDAhPT0oYi5mbGFncyYxMDI0KSlzd2l0Y2goYi50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6YnJlYWs7Y2FzZSAxOmlmKG51bGwhPT1cbm4pe3ZhciB2PW4ubWVtb2l6ZWRQcm9wcyxDPW4ubWVtb2l6ZWRTdGF0ZSx0PWIuc3RhdGVOb2RlLHI9dC5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZShiLmVsZW1lbnRUeXBlPT09Yi50eXBlP3Y6ZmcoYi50eXBlLHYpLEMpO3QuX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGU9cn1icmVhaztjYXNlIDM6dmFyIHg9Yi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztpZigxPT09eC5ub2RlVHlwZSl4LnRleHRDb250ZW50PVwiXCI7ZWxzZSBpZig5PT09eC5ub2RlVHlwZSl7dmFyIEI9eC5ib2R5O251bGwhPUImJihCLnRleHRDb250ZW50PVwiXCIpfWJyZWFrO2Nhc2UgNTpjYXNlIDY6Y2FzZSA0OmNhc2UgMTc6YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcihwKDE2MykpO319Y2F0Y2goTyl7Q2ooYixiLnJldHVybixPKX1hPWIuc2libGluZztpZihudWxsIT09YSl7YS5yZXR1cm49Yi5yZXR1cm47WD1hO2JyZWFrfVg9Yi5yZXR1cm59bj1FajtFaj0hMTtyZXR1cm4gbn1cbmZ1bmN0aW9uIEdqKGEsYixjKXt2YXIgZD1iLnVwZGF0ZVF1ZXVlO2Q9bnVsbCE9PWQ/ZC5sYXN0RWZmZWN0Om51bGw7aWYobnVsbCE9PWQpe3ZhciBlPWQ9ZC5uZXh0O2Rve2lmKChlLnRhZyZhKT09PWEpe3ZhciBmPWUuZGVzdHJveTtlLmRlc3Ryb3k9dm9pZCAwO3ZvaWQgMCE9PWYmJkRqKGIsYyxmKX1lPWUubmV4dH13aGlsZShlIT09ZCl9fWZ1bmN0aW9uIEhqKGEsYil7Yj1iLnVwZGF0ZVF1ZXVlO2I9bnVsbCE9PWI/Yi5sYXN0RWZmZWN0Om51bGw7aWYobnVsbCE9PWIpe3ZhciBjPWI9Yi5uZXh0O2Rve2lmKChjLnRhZyZhKT09PWEpe3ZhciBkPWMuY3JlYXRlO2MuZGVzdHJveT1kKCl9Yz1jLm5leHR9d2hpbGUoYyE9PWIpfX1mdW5jdGlvbiBJaihhKXt2YXIgYj1hLnJlZjtpZihudWxsIT09Yil7dmFyIGM9YS5zdGF0ZU5vZGU7c3dpdGNoKGEudGFnKXtjYXNlIDU6YT1jO2JyZWFrO2RlZmF1bHQ6YT1jfVwiZnVuY3Rpb25cIj09PXR5cGVvZiBiP2IoYSk6Yi5jdXJyZW50PWF9fVxuZnVuY3Rpb24gSmooYSxiLGMpe2lmKGljJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgaWMub25Db21taXRGaWJlclVubW91bnQpdHJ5e2ljLm9uQ29tbWl0RmliZXJVbm1vdW50KGhjLGIpfWNhdGNoKGcpe31zd2l0Y2goYi50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTQ6Y2FzZSAxNTphPWIudXBkYXRlUXVldWU7aWYobnVsbCE9PWEmJihhPWEubGFzdEVmZmVjdCxudWxsIT09YSkpe3ZhciBkPWE9YS5uZXh0O2Rve3ZhciBlPWQsZj1lLmRlc3Ryb3k7ZT1lLnRhZzt2b2lkIDAhPT1mJiYoMCE9PShlJjIpP0RqKGIsYyxmKTowIT09KGUmNCkmJkRqKGIsYyxmKSk7ZD1kLm5leHR9d2hpbGUoZCE9PWEpfWJyZWFrO2Nhc2UgMTpCaihiLGMpO2E9Yi5zdGF0ZU5vZGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEuY29tcG9uZW50V2lsbFVubW91bnQpdHJ5e2EucHJvcHM9Yi5tZW1vaXplZFByb3BzLGEuc3RhdGU9Yi5tZW1vaXplZFN0YXRlLGEuY29tcG9uZW50V2lsbFVubW91bnQoKX1jYXRjaChnKXtDaihiLFxuYyxnKX1icmVhaztjYXNlIDU6QmooYixjKTticmVhaztjYXNlIDQ6S2ooYSxiLGMpfX1mdW5jdGlvbiBMaihhKXt2YXIgYj1hLmFsdGVybmF0ZTtudWxsIT09YiYmKGEuYWx0ZXJuYXRlPW51bGwsTGooYikpO2EuY2hpbGQ9bnVsbDthLmRlbGV0aW9ucz1udWxsO2Euc2libGluZz1udWxsOzU9PT1hLnRhZyYmKGI9YS5zdGF0ZU5vZGUsbnVsbCE9PWImJihkZWxldGUgYltJZl0sZGVsZXRlIGJbSmZdLGRlbGV0ZSBiW2pmXSxkZWxldGUgYltLZl0sZGVsZXRlIGJbTGZdKSk7YS5zdGF0ZU5vZGU9bnVsbDthLnJldHVybj1udWxsO2EuZGVwZW5kZW5jaWVzPW51bGw7YS5tZW1vaXplZFByb3BzPW51bGw7YS5tZW1vaXplZFN0YXRlPW51bGw7YS5wZW5kaW5nUHJvcHM9bnVsbDthLnN0YXRlTm9kZT1udWxsO2EudXBkYXRlUXVldWU9bnVsbH1mdW5jdGlvbiBNaihhKXtyZXR1cm4gNT09PWEudGFnfHwzPT09YS50YWd8fDQ9PT1hLnRhZ31cbmZ1bmN0aW9uIE5qKGEpe2E6Zm9yKDs7KXtmb3IoO251bGw9PT1hLnNpYmxpbmc7KXtpZihudWxsPT09YS5yZXR1cm58fE1qKGEucmV0dXJuKSlyZXR1cm4gbnVsbDthPWEucmV0dXJufWEuc2libGluZy5yZXR1cm49YS5yZXR1cm47Zm9yKGE9YS5zaWJsaW5nOzUhPT1hLnRhZyYmNiE9PWEudGFnJiYxOCE9PWEudGFnOyl7aWYoYS5mbGFncyYyKWNvbnRpbnVlIGE7aWYobnVsbD09PWEuY2hpbGR8fDQ9PT1hLnRhZyljb250aW51ZSBhO2Vsc2UgYS5jaGlsZC5yZXR1cm49YSxhPWEuY2hpbGR9aWYoIShhLmZsYWdzJjIpKXJldHVybiBhLnN0YXRlTm9kZX19XG5mdW5jdGlvbiBPaihhKXthOntmb3IodmFyIGI9YS5yZXR1cm47bnVsbCE9PWI7KXtpZihNaihiKSlicmVhayBhO2I9Yi5yZXR1cm59dGhyb3cgRXJyb3IocCgxNjApKTt9dmFyIGM9Yjtzd2l0Y2goYy50YWcpe2Nhc2UgNTpiPWMuc3RhdGVOb2RlO2MuZmxhZ3MmMzImJihsYihiLFwiXCIpLGMuZmxhZ3MmPS0zMyk7Yz1OaihhKTtQaihhLGMsYik7YnJlYWs7Y2FzZSAzOmNhc2UgNDpiPWMuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87Yz1OaihhKTtRaihhLGMsYik7YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcihwKDE2MSkpO319XG5mdW5jdGlvbiBRaihhLGIsYyl7dmFyIGQ9YS50YWc7aWYoNT09PWR8fDY9PT1kKWE9YS5zdGF0ZU5vZGUsYj84PT09Yy5ub2RlVHlwZT9jLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGEsYik6Yy5pbnNlcnRCZWZvcmUoYSxiKTooOD09PWMubm9kZVR5cGU/KGI9Yy5wYXJlbnROb2RlLGIuaW5zZXJ0QmVmb3JlKGEsYykpOihiPWMsYi5hcHBlbmRDaGlsZChhKSksYz1jLl9yZWFjdFJvb3RDb250YWluZXIsbnVsbCE9PWMmJnZvaWQgMCE9PWN8fG51bGwhPT1iLm9uY2xpY2t8fChiLm9uY2xpY2s9d2YpKTtlbHNlIGlmKDQhPT1kJiYoYT1hLmNoaWxkLG51bGwhPT1hKSlmb3IoUWooYSxiLGMpLGE9YS5zaWJsaW5nO251bGwhPT1hOylRaihhLGIsYyksYT1hLnNpYmxpbmd9XG5mdW5jdGlvbiBQaihhLGIsYyl7dmFyIGQ9YS50YWc7aWYoNT09PWR8fDY9PT1kKWE9YS5zdGF0ZU5vZGUsYj9jLmluc2VydEJlZm9yZShhLGIpOmMuYXBwZW5kQ2hpbGQoYSk7ZWxzZSBpZig0IT09ZCYmKGE9YS5jaGlsZCxudWxsIT09YSkpZm9yKFBqKGEsYixjKSxhPWEuc2libGluZztudWxsIT09YTspUGooYSxiLGMpLGE9YS5zaWJsaW5nfVxuZnVuY3Rpb24gS2ooYSxiLGMpe2Zvcih2YXIgZD1iLGU9ITEsZixnOzspe2lmKCFlKXtlPWQucmV0dXJuO2E6Zm9yKDs7KXtpZihudWxsPT09ZSl0aHJvdyBFcnJvcihwKDE2MCkpO2Y9ZS5zdGF0ZU5vZGU7c3dpdGNoKGUudGFnKXtjYXNlIDU6Zz0hMTticmVhayBhO2Nhc2UgMzpmPWYuY29udGFpbmVySW5mbztnPSEwO2JyZWFrIGE7Y2FzZSA0OmY9Zi5jb250YWluZXJJbmZvO2c9ITA7YnJlYWsgYX1lPWUucmV0dXJufWU9ITB9aWYoNT09PWQudGFnfHw2PT09ZC50YWcpe2E6Zm9yKHZhciBoPWEsaz1kLGw9YyxtPWs7OylpZihKaihoLG0sbCksbnVsbCE9PW0uY2hpbGQmJjQhPT1tLnRhZyltLmNoaWxkLnJldHVybj1tLG09bS5jaGlsZDtlbHNle2lmKG09PT1rKWJyZWFrIGE7Zm9yKDtudWxsPT09bS5zaWJsaW5nOyl7aWYobnVsbD09PW0ucmV0dXJufHxtLnJldHVybj09PWspYnJlYWsgYTttPW0ucmV0dXJufW0uc2libGluZy5yZXR1cm49bS5yZXR1cm47bT1tLnNpYmxpbmd9Zz8oaD1cbmYsaz1kLnN0YXRlTm9kZSw4PT09aC5ub2RlVHlwZT9oLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoayk6aC5yZW1vdmVDaGlsZChrKSk6Zi5yZW1vdmVDaGlsZChkLnN0YXRlTm9kZSl9ZWxzZSBpZigxOD09PWQudGFnKWc/KGg9ZixrPWQuc3RhdGVOb2RlLDg9PT1oLm5vZGVUeXBlP0VmKGgucGFyZW50Tm9kZSxrKToxPT09aC5ub2RlVHlwZSYmRWYoaCxrKSxZYyhoKSk6RWYoZixkLnN0YXRlTm9kZSk7ZWxzZSBpZig0PT09ZC50YWcpe2lmKG51bGwhPT1kLmNoaWxkKXtmPWQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87Zz0hMDtkLmNoaWxkLnJldHVybj1kO2Q9ZC5jaGlsZDtjb250aW51ZX19ZWxzZSBpZihKaihhLGQsYyksbnVsbCE9PWQuY2hpbGQpe2QuY2hpbGQucmV0dXJuPWQ7ZD1kLmNoaWxkO2NvbnRpbnVlfWlmKGQ9PT1iKWJyZWFrO2Zvcig7bnVsbD09PWQuc2libGluZzspe2lmKG51bGw9PT1kLnJldHVybnx8ZC5yZXR1cm49PT1iKXJldHVybjtkPWQucmV0dXJuOzQ9PT1kLnRhZyYmXG4oZT0hMSl9ZC5zaWJsaW5nLnJldHVybj1kLnJldHVybjtkPWQuc2libGluZ319XG5mdW5jdGlvbiBSaihhLGIpe3N3aXRjaChiLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNDpjYXNlIDE1OkdqKDMsYixiLnJldHVybik7SGooMyxiKTtHaig1LGIsYi5yZXR1cm4pO3JldHVybjtjYXNlIDE6cmV0dXJuO2Nhc2UgNTp2YXIgYz1iLnN0YXRlTm9kZTtpZihudWxsIT1jKXt2YXIgZD1iLm1lbW9pemVkUHJvcHMsZT1udWxsIT09YT9hLm1lbW9pemVkUHJvcHM6ZDthPWIudHlwZTt2YXIgZj1iLnVwZGF0ZVF1ZXVlO2IudXBkYXRlUXVldWU9bnVsbDtpZihudWxsIT09Zil7XCJpbnB1dFwiPT09YSYmXCJyYWRpb1wiPT09ZC50eXBlJiZudWxsIT1kLm5hbWUmJllhKGMsZCk7c2IoYSxlKTtiPXNiKGEsZCk7Zm9yKGU9MDtlPGYubGVuZ3RoO2UrPTIpe3ZhciBnPWZbZV0saD1mW2UrMV07XCJzdHlsZVwiPT09Zz9wYihjLGgpOlwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWc/a2IoYyxoKTpcImNoaWxkcmVuXCI9PT1nP2xiKGMsaCk6cmEoYyxnLGgsYil9c3dpdGNoKGEpe2Nhc2UgXCJpbnB1dFwiOlphKGMsXG5kKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpmYihjLGQpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjphPWMuX3dyYXBwZXJTdGF0ZS53YXNNdWx0aXBsZSxjLl93cmFwcGVyU3RhdGUud2FzTXVsdGlwbGU9ISFkLm11bHRpcGxlLGY9ZC52YWx1ZSxudWxsIT1mP2NiKGMsISFkLm11bHRpcGxlLGYsITEpOmEhPT0hIWQubXVsdGlwbGUmJihudWxsIT1kLmRlZmF1bHRWYWx1ZT9jYihjLCEhZC5tdWx0aXBsZSxkLmRlZmF1bHRWYWx1ZSwhMCk6Y2IoYywhIWQubXVsdGlwbGUsZC5tdWx0aXBsZT9bXTpcIlwiLCExKSl9Y1tKZl09ZH19cmV0dXJuO2Nhc2UgNjppZihudWxsPT09Yi5zdGF0ZU5vZGUpdGhyb3cgRXJyb3IocCgxNjIpKTtiLnN0YXRlTm9kZS5ub2RlVmFsdWU9Yi5tZW1vaXplZFByb3BzO3JldHVybjtjYXNlIDM6bnVsbCE9PWEmJmEubWVtb2l6ZWRTdGF0ZS5pc0RlaHlkcmF0ZWQmJlljKGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pO3JldHVybjtjYXNlIDEyOnJldHVybjtjYXNlIDEzOlNqKGIpO1xucmV0dXJuO2Nhc2UgMTk6U2ooYik7cmV0dXJuO2Nhc2UgMTc6cmV0dXJufXRocm93IEVycm9yKHAoMTYzKSk7fWZ1bmN0aW9uIFNqKGEpe3ZhciBiPWEudXBkYXRlUXVldWU7aWYobnVsbCE9PWIpe2EudXBkYXRlUXVldWU9bnVsbDt2YXIgYz1hLnN0YXRlTm9kZTtudWxsPT09YyYmKGM9YS5zdGF0ZU5vZGU9bmV3IEFqKTtiLmZvckVhY2goZnVuY3Rpb24oYil7dmFyIGQ9VGouYmluZChudWxsLGEsYik7Yy5oYXMoYil8fChjLmFkZChiKSxiLnRoZW4oZCxkKSl9KX19XG5mdW5jdGlvbiBVaihhLGIpe2ZvcihYPWI7bnVsbCE9PVg7KXtiPVg7dmFyIGM9Yi5kZWxldGlvbnM7aWYobnVsbCE9PWMpZm9yKHZhciBkPTA7ZDxjLmxlbmd0aDtkKyspe3ZhciBlPWNbZF07dHJ5e0tqKGEsZSxiKTt2YXIgZj1lLmFsdGVybmF0ZTtudWxsIT09ZiYmKGYucmV0dXJuPW51bGwpO2UucmV0dXJuPW51bGx9Y2F0Y2goTCl7Q2ooZSxiLEwpfX1jPWIuY2hpbGQ7aWYoMCE9PShiLnN1YnRyZWVGbGFncyYxMjg1NCkmJm51bGwhPT1jKWMucmV0dXJuPWIsWD1jO2Vsc2UgZm9yKDtudWxsIT09WDspe2I9WDt0cnl7dmFyIGc9Yi5mbGFncztnJjMyJiZsYihiLnN0YXRlTm9kZSxcIlwiKTtpZihnJjUxMil7dmFyIGg9Yi5hbHRlcm5hdGU7aWYobnVsbCE9PWgpe3ZhciBrPWgucmVmO251bGwhPT1rJiYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGs/ayhudWxsKTprLmN1cnJlbnQ9bnVsbCl9fWlmKGcmODE5Milzd2l0Y2goYi50YWcpe2Nhc2UgMTM6aWYobnVsbCE9PWIubWVtb2l6ZWRTdGF0ZSl7dmFyIGw9XG5iLmFsdGVybmF0ZTtpZihudWxsPT09bHx8bnVsbD09PWwubWVtb2l6ZWRTdGF0ZSlWaj1EKCl9YnJlYWs7Y2FzZSAyMjp2YXIgbT1udWxsIT09Yi5tZW1vaXplZFN0YXRlLHc9Yi5hbHRlcm5hdGUsdT1udWxsIT09dyYmbnVsbCE9PXcubWVtb2l6ZWRTdGF0ZTtjPWI7YTp7ZD1jO2U9bTtmb3IodmFyIHk9bnVsbCxuPWQ7Oyl7aWYoNT09PW4udGFnKXtpZihudWxsPT09eSl7eT1uO3ZhciB2PW4uc3RhdGVOb2RlO2lmKGUpe3ZhciBDPXYuc3R5bGU7XCJmdW5jdGlvblwiPT09dHlwZW9mIEMuc2V0UHJvcGVydHk/Qy5zZXRQcm9wZXJ0eShcImRpc3BsYXlcIixcIm5vbmVcIixcImltcG9ydGFudFwiKTpDLmRpc3BsYXk9XCJub25lXCJ9ZWxzZXt2YXIgdD1uLnN0YXRlTm9kZSxyPW4ubWVtb2l6ZWRQcm9wcy5zdHlsZSx4PXZvaWQgMCE9PXImJm51bGwhPT1yJiZyLmhhc093blByb3BlcnR5KFwiZGlzcGxheVwiKT9yLmRpc3BsYXk6bnVsbDt0LnN0eWxlLmRpc3BsYXk9b2IoXCJkaXNwbGF5XCIseCl9fX1lbHNlIGlmKDY9PT1cbm4udGFnKW51bGw9PT15JiYobi5zdGF0ZU5vZGUubm9kZVZhbHVlPWU/XCJcIjpuLm1lbW9pemVkUHJvcHMpO2Vsc2UgaWYoKDIyIT09bi50YWcmJjIzIT09bi50YWd8fG51bGw9PT1uLm1lbW9pemVkU3RhdGV8fG49PT1kKSYmbnVsbCE9PW4uY2hpbGQpe24uY2hpbGQucmV0dXJuPW47bj1uLmNoaWxkO2NvbnRpbnVlfWlmKG49PT1kKWJyZWFrO2Zvcig7bnVsbD09PW4uc2libGluZzspe2lmKG51bGw9PT1uLnJldHVybnx8bi5yZXR1cm49PT1kKWJyZWFrIGE7eT09PW4mJih5PW51bGwpO249bi5yZXR1cm59eT09PW4mJih5PW51bGwpO24uc2libGluZy5yZXR1cm49bi5yZXR1cm47bj1uLnNpYmxpbmd9fWlmKG0mJiF1JiYwIT09KGMubW9kZSYxKSl7WD1jO2Zvcih2YXIgQj1jLmNoaWxkO251bGwhPT1COyl7Zm9yKGM9WD1CO251bGwhPT1YOyl7ZD1YO3ZhciBPPWQuY2hpbGQ7c3dpdGNoKGQudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE0OmNhc2UgMTU6R2ooNCxkLGQucmV0dXJuKTticmVhaztcbmNhc2UgMTpCaihkLGQucmV0dXJuKTt2YXIgVD1kLnN0YXRlTm9kZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgVC5jb21wb25lbnRXaWxsVW5tb3VudCl7dmFyIHphPWQucmV0dXJuO3RyeXtULnByb3BzPWQubWVtb2l6ZWRQcm9wcyxULnN0YXRlPWQubWVtb2l6ZWRTdGF0ZSxULmNvbXBvbmVudFdpbGxVbm1vdW50KCl9Y2F0Y2goTCl7Q2ooZCx6YSxMKX19YnJlYWs7Y2FzZSA1OkJqKGQsZC5yZXR1cm4pO2JyZWFrO2Nhc2UgMjI6aWYobnVsbCE9PWQubWVtb2l6ZWRTdGF0ZSl7V2ooYyk7Y29udGludWV9fW51bGwhPT1PPyhPLnJldHVybj1kLFg9Tyk6V2ooYyl9Qj1CLnNpYmxpbmd9fX1zd2l0Y2goZyY0MTAyKXtjYXNlIDI6T2ooYik7Yi5mbGFncyY9LTM7YnJlYWs7Y2FzZSA2Ok9qKGIpO2IuZmxhZ3MmPS0zO1JqKGIuYWx0ZXJuYXRlLGIpO2JyZWFrO2Nhc2UgNDA5NjpiLmZsYWdzJj0tNDA5NzticmVhaztjYXNlIDQxMDA6Yi5mbGFncyY9LTQwOTc7UmooYi5hbHRlcm5hdGUsYik7XG5icmVhaztjYXNlIDQ6UmooYi5hbHRlcm5hdGUsYil9fWNhdGNoKEwpe0NqKGIsYi5yZXR1cm4sTCl9Yz1iLnNpYmxpbmc7aWYobnVsbCE9PWMpe2MucmV0dXJuPWIucmV0dXJuO1g9YzticmVha31YPWIucmV0dXJufX19ZnVuY3Rpb24gWGooYSxiLGMpe1g9YTtZaihhLGIsYyl9XG5mdW5jdGlvbiBZaihhLGIsYyl7Zm9yKHZhciBkPTAhPT0oYS5tb2RlJjEpO251bGwhPT1YOyl7dmFyIGU9WCxmPWUuY2hpbGQ7aWYoMjI9PT1lLnRhZyYmZCl7dmFyIGc9bnVsbCE9PWUubWVtb2l6ZWRTdGF0ZXx8eWo7aWYoIWcpe3ZhciBoPWUuYWx0ZXJuYXRlLGs9bnVsbCE9PWgmJm51bGwhPT1oLm1lbW9pemVkU3RhdGV8fHpqO2g9eWo7dmFyIGw9emo7eWo9ZztpZigoemo9aykmJiFsKWZvcihYPWU7bnVsbCE9PVg7KWc9WCxrPWcuY2hpbGQsMjI9PT1nLnRhZyYmbnVsbCE9PWcubWVtb2l6ZWRTdGF0ZT9aaihlKTpudWxsIT09az8oay5yZXR1cm49ZyxYPWspOlpqKGUpO2Zvcig7bnVsbCE9PWY7KVg9ZixZaihmLGIsYyksZj1mLnNpYmxpbmc7WD1lO3lqPWg7emo9bH1hayhhLGIsYyl9ZWxzZSAwIT09KGUuc3VidHJlZUZsYWdzJjg3NzIpJiZudWxsIT09Zj8oZi5yZXR1cm49ZSxYPWYpOmFrKGEsYixjKX19XG5mdW5jdGlvbiBhayhhKXtmb3IoO251bGwhPT1YOyl7dmFyIGI9WDtpZigwIT09KGIuZmxhZ3MmODc3Mikpe3ZhciBjPWIuYWx0ZXJuYXRlO3RyeXtpZigwIT09KGIuZmxhZ3MmODc3Mikpc3dpdGNoKGIudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OnpqfHxIaig1LGIpO2JyZWFrO2Nhc2UgMTp2YXIgZD1iLnN0YXRlTm9kZTtpZihiLmZsYWdzJjQmJiF6ailpZihudWxsPT09YylkLmNvbXBvbmVudERpZE1vdW50KCk7ZWxzZXt2YXIgZT1iLmVsZW1lbnRUeXBlPT09Yi50eXBlP2MubWVtb2l6ZWRQcm9wczpmZyhiLnR5cGUsYy5tZW1vaXplZFByb3BzKTtkLmNvbXBvbmVudERpZFVwZGF0ZShlLGMubWVtb2l6ZWRTdGF0ZSxkLl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlKX12YXIgZj1iLnVwZGF0ZVF1ZXVlO251bGwhPT1mJiZBZyhiLGYsZCk7YnJlYWs7Y2FzZSAzOnZhciBnPWIudXBkYXRlUXVldWU7aWYobnVsbCE9PWcpe2M9bnVsbDtpZihudWxsIT09Yi5jaGlsZClzd2l0Y2goYi5jaGlsZC50YWcpe2Nhc2UgNTpjPVxuYi5jaGlsZC5zdGF0ZU5vZGU7YnJlYWs7Y2FzZSAxOmM9Yi5jaGlsZC5zdGF0ZU5vZGV9QWcoYixnLGMpfWJyZWFrO2Nhc2UgNTp2YXIgaD1iLnN0YXRlTm9kZTtpZihudWxsPT09YyYmYi5mbGFncyY0KXtjPWg7dmFyIGs9Yi5tZW1vaXplZFByb3BzO3N3aXRjaChiLnR5cGUpe2Nhc2UgXCJidXR0b25cIjpjYXNlIFwiaW5wdXRcIjpjYXNlIFwic2VsZWN0XCI6Y2FzZSBcInRleHRhcmVhXCI6ay5hdXRvRm9jdXMmJmMuZm9jdXMoKTticmVhaztjYXNlIFwiaW1nXCI6ay5zcmMmJihjLnNyYz1rLnNyYyl9fWJyZWFrO2Nhc2UgNjpicmVhaztjYXNlIDQ6YnJlYWs7Y2FzZSAxMjpicmVhaztjYXNlIDEzOmlmKG51bGw9PT1iLm1lbW9pemVkU3RhdGUpe3ZhciBsPWIuYWx0ZXJuYXRlO2lmKG51bGwhPT1sKXt2YXIgbT1sLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PW0pe3ZhciB3PW0uZGVoeWRyYXRlZDtudWxsIT09dyYmWWModyl9fX1icmVhaztjYXNlIDE5OmNhc2UgMTc6Y2FzZSAyMTpjYXNlIDIyOmNhc2UgMjM6YnJlYWs7XG5kZWZhdWx0OnRocm93IEVycm9yKHAoMTYzKSk7fXpqfHxiLmZsYWdzJjUxMiYmSWooYil9Y2F0Y2godSl7Q2ooYixiLnJldHVybix1KX19aWYoYj09PWEpe1g9bnVsbDticmVha31jPWIuc2libGluZztpZihudWxsIT09Yyl7Yy5yZXR1cm49Yi5yZXR1cm47WD1jO2JyZWFrfVg9Yi5yZXR1cm59fWZ1bmN0aW9uIFdqKGEpe2Zvcig7bnVsbCE9PVg7KXt2YXIgYj1YO2lmKGI9PT1hKXtYPW51bGw7YnJlYWt9dmFyIGM9Yi5zaWJsaW5nO2lmKG51bGwhPT1jKXtjLnJldHVybj1iLnJldHVybjtYPWM7YnJlYWt9WD1iLnJldHVybn19XG5mdW5jdGlvbiBaaihhKXtmb3IoO251bGwhPT1YOyl7dmFyIGI9WDt0cnl7c3dpdGNoKGIudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OnZhciBjPWIucmV0dXJuO3RyeXtIaig0LGIpfWNhdGNoKGspe0NqKGIsYyxrKX1icmVhaztjYXNlIDE6dmFyIGQ9Yi5zdGF0ZU5vZGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGQuY29tcG9uZW50RGlkTW91bnQpe3ZhciBlPWIucmV0dXJuO3RyeXtkLmNvbXBvbmVudERpZE1vdW50KCl9Y2F0Y2goayl7Q2ooYixlLGspfX12YXIgZj1iLnJldHVybjt0cnl7SWooYil9Y2F0Y2goayl7Q2ooYixmLGspfWJyZWFrO2Nhc2UgNTp2YXIgZz1iLnJldHVybjt0cnl7SWooYil9Y2F0Y2goayl7Q2ooYixnLGspfX19Y2F0Y2goayl7Q2ooYixiLnJldHVybixrKX1pZihiPT09YSl7WD1udWxsO2JyZWFrfXZhciBoPWIuc2libGluZztpZihudWxsIT09aCl7aC5yZXR1cm49Yi5yZXR1cm47WD1oO2JyZWFrfVg9Yi5yZXR1cm59fVxudmFyIGJrPU1hdGguY2VpbCxjaz1zYS5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLGRrPXNhLlJlYWN0Q3VycmVudE93bmVyLGVrPXNhLlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnLEs9MCxKPW51bGwsWT1udWxsLFo9MCxWaT0wLGVqPU9mKDApLFc9MCxmaz1udWxsLHpnPTAsZ2s9MCxoaz0wLGlrPW51bGwsams9bnVsbCxWaj0wLFRpPUluZmluaXR5LERpPSExLEVpPW51bGwsR2k9bnVsbCxraz0hMSxsaz1udWxsLG1rPTAsbms9MCxvaz1udWxsLHBrPS0xLHFrPTA7ZnVuY3Rpb24gTSgpe3JldHVybiAwIT09KEsmNik/RCgpOi0xIT09cGs/cGs6cGs9RCgpfVxuZnVuY3Rpb24gRGcoYSl7aWYoMD09PShhLm1vZGUmMSkpcmV0dXJuIDE7aWYoMCE9PShLJjIpJiYwIT09WilyZXR1cm4gWiYtWjtpZihudWxsIT09ZWcudHJhbnNpdGlvbilyZXR1cm4gMD09PXFrJiYoYT1vYyxvYzw8PTEsMD09PShvYyY0MTk0MjQwKSYmKG9jPTY0KSxxaz1hKSxxazthPUU7aWYoMCE9PWEpcmV0dXJuIGE7YT13aW5kb3cuZXZlbnQ7YT12b2lkIDA9PT1hPzE2OmVkKGEudHlwZSk7cmV0dXJuIGF9ZnVuY3Rpb24gRWcoYSxiLGMpe2lmKDUwPG5rKXRocm93IG5rPTAsb2s9bnVsbCxFcnJvcihwKDE4NSkpO3ZhciBkPXJrKGEsYik7aWYobnVsbD09PWQpcmV0dXJuIG51bGw7d2MoZCxiLGMpO2lmKDA9PT0oSyYyKXx8ZCE9PUopZD09PUomJigwPT09KEsmMikmJihna3w9YiksND09PVcmJnNrKGQsWikpLHRrKGQsYyksMT09PWImJjA9PT1LJiYwPT09KGEubW9kZSYxKSYmKFRpPUQoKSs1MDAsJGYmJmRnKCkpO3JldHVybiBkfVxuZnVuY3Rpb24gcmsoYSxiKXthLmxhbmVzfD1iO3ZhciBjPWEuYWx0ZXJuYXRlO251bGwhPT1jJiYoYy5sYW5lc3w9Yik7Yz1hO2ZvcihhPWEucmV0dXJuO251bGwhPT1hOylhLmNoaWxkTGFuZXN8PWIsYz1hLmFsdGVybmF0ZSxudWxsIT09YyYmKGMuY2hpbGRMYW5lc3w9YiksYz1hLGE9YS5yZXR1cm47cmV0dXJuIDM9PT1jLnRhZz9jLnN0YXRlTm9kZTpudWxsfVxuZnVuY3Rpb24gdGsoYSxiKXt2YXIgYz1hLmNhbGxiYWNrTm9kZTt0YyhhLGIpO3ZhciBkPXJjKGEsYT09PUo/WjowKTtpZigwPT09ZCludWxsIT09YyYmWmIoYyksYS5jYWxsYmFja05vZGU9bnVsbCxhLmNhbGxiYWNrUHJpb3JpdHk9MDtlbHNlIGlmKGI9ZCYtZCxhLmNhbGxiYWNrUHJpb3JpdHkhPT1iKXtudWxsIT1jJiZaYihjKTtpZigxPT09YikwPT09YS50YWc/Y2codWsuYmluZChudWxsLGEpKTpiZyh1ay5iaW5kKG51bGwsYSkpLERmKGZ1bmN0aW9uKCl7MD09PUsmJmRnKCl9KSxjPW51bGw7ZWxzZXtzd2l0Y2goemMoZCkpe2Nhc2UgMTpjPWNjO2JyZWFrO2Nhc2UgNDpjPWRjO2JyZWFrO2Nhc2UgMTY6Yz1lYzticmVhaztjYXNlIDUzNjg3MDkxMjpjPWdjO2JyZWFrO2RlZmF1bHQ6Yz1lY31jPXZrKGMsd2suYmluZChudWxsLGEpKX1hLmNhbGxiYWNrUHJpb3JpdHk9YjthLmNhbGxiYWNrTm9kZT1jfX1cbmZ1bmN0aW9uIHdrKGEsYil7cGs9LTE7cWs9MDtpZigwIT09KEsmNikpdGhyb3cgRXJyb3IocCgzMjcpKTt2YXIgYz1hLmNhbGxiYWNrTm9kZTtpZih4aygpJiZhLmNhbGxiYWNrTm9kZSE9PWMpcmV0dXJuIG51bGw7dmFyIGQ9cmMoYSxhPT09Sj9aOjApO2lmKDA9PT1kKXJldHVybiBudWxsO2lmKDAhPT0oZCYzMCl8fDAhPT0oZCZhLmV4cGlyZWRMYW5lcyl8fGIpYj15ayhhLGQpO2Vsc2V7Yj1kO3ZhciBlPUs7S3w9Mjt2YXIgZj16aygpO2lmKEohPT1hfHxaIT09YilUaT1EKCkrNTAwLEFrKGEsYik7ZG8gdHJ5e0JrKCk7YnJlYWt9Y2F0Y2goaCl7Q2soYSxoKX13aGlsZSgxKTtrZygpO2NrLmN1cnJlbnQ9ZjtLPWU7bnVsbCE9PVk/Yj0wOihKPW51bGwsWj0wLGI9Vyl9aWYoMCE9PWIpezI9PT1iJiYoZT11YyhhKSwwIT09ZSYmKGQ9ZSxiPURrKGEsZSkpKTtpZigxPT09Yil0aHJvdyBjPWZrLEFrKGEsMCksc2soYSxkKSx0ayhhLEQoKSksYztpZig2PT09YilzayhhLGQpO2Vsc2V7ZT1cbmEuY3VycmVudC5hbHRlcm5hdGU7aWYoMD09PShkJjMwKSYmIUVrKGUpJiYoYj15ayhhLGQpLDI9PT1iJiYoZj11YyhhKSwwIT09ZiYmKGQ9ZixiPURrKGEsZikpKSwxPT09YikpdGhyb3cgYz1mayxBayhhLDApLHNrKGEsZCksdGsoYSxEKCkpLGM7YS5maW5pc2hlZFdvcms9ZTthLmZpbmlzaGVkTGFuZXM9ZDtzd2l0Y2goYil7Y2FzZSAwOmNhc2UgMTp0aHJvdyBFcnJvcihwKDM0NSkpO2Nhc2UgMjpGayhhLGprKTticmVhaztjYXNlIDM6c2soYSxkKTtpZigoZCYxMzAwMjM0MjQpPT09ZCYmKGI9VmorNTAwLUQoKSwxMDxiKSl7aWYoMCE9PXJjKGEsMCkpYnJlYWs7ZT1hLnN1c3BlbmRlZExhbmVzO2lmKChlJmQpIT09ZCl7TSgpO2EucGluZ2VkTGFuZXN8PWEuc3VzcGVuZGVkTGFuZXMmZTticmVha31hLnRpbWVvdXRIYW5kbGU9emYoRmsuYmluZChudWxsLGEsamspLGIpO2JyZWFrfUZrKGEsamspO2JyZWFrO2Nhc2UgNDpzayhhLGQpO2lmKChkJjQxOTQyNDApPT09ZClicmVhaztiPVxuYS5ldmVudFRpbWVzO2ZvcihlPS0xOzA8ZDspe3ZhciBnPTMxLWxjKGQpO2Y9MTw8ZztnPWJbZ107Zz5lJiYoZT1nKTtkJj1+Zn1kPWU7ZD1EKCktZDtkPSgxMjA+ZD8xMjA6NDgwPmQ/NDgwOjEwODA+ZD8xMDgwOjE5MjA+ZD8xOTIwOjNFMz5kPzNFMzo0MzIwPmQ/NDMyMDoxOTYwKmJrKGQvMTk2MCkpLWQ7aWYoMTA8ZCl7YS50aW1lb3V0SGFuZGxlPXpmKEZrLmJpbmQobnVsbCxhLGprKSxkKTticmVha31GayhhLGprKTticmVhaztjYXNlIDU6RmsoYSxqayk7YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcihwKDMyOSkpO319fXRrKGEsRCgpKTtyZXR1cm4gYS5jYWxsYmFja05vZGU9PT1jP3drLmJpbmQobnVsbCxhKTpudWxsfWZ1bmN0aW9uIERrKGEsYil7dmFyIGM9aWs7YS5jdXJyZW50Lm1lbW9pemVkU3RhdGUuaXNEZWh5ZHJhdGVkJiYoQWsoYSxiKS5mbGFnc3w9MjU2KTthPXlrKGEsYik7MiE9PWEmJihiPWprLGprPWMsbnVsbCE9PWImJlJpKGIpKTtyZXR1cm4gYX1cbmZ1bmN0aW9uIFJpKGEpe251bGw9PT1qaz9qaz1hOmprLnB1c2guYXBwbHkoamssYSl9ZnVuY3Rpb24gRWsoYSl7Zm9yKHZhciBiPWE7Oyl7aWYoYi5mbGFncyYxNjM4NCl7dmFyIGM9Yi51cGRhdGVRdWV1ZTtpZihudWxsIT09YyYmKGM9Yy5zdG9yZXMsbnVsbCE9PWMpKWZvcih2YXIgZD0wO2Q8Yy5sZW5ndGg7ZCsrKXt2YXIgZT1jW2RdLGY9ZS5nZXRTbmFwc2hvdDtlPWUudmFsdWU7dHJ5e2lmKCFDZShmKCksZSkpcmV0dXJuITF9Y2F0Y2goZyl7cmV0dXJuITF9fX1jPWIuY2hpbGQ7aWYoYi5zdWJ0cmVlRmxhZ3MmMTYzODQmJm51bGwhPT1jKWMucmV0dXJuPWIsYj1jO2Vsc2V7aWYoYj09PWEpYnJlYWs7Zm9yKDtudWxsPT09Yi5zaWJsaW5nOyl7aWYobnVsbD09PWIucmV0dXJufHxiLnJldHVybj09PWEpcmV0dXJuITA7Yj1iLnJldHVybn1iLnNpYmxpbmcucmV0dXJuPWIucmV0dXJuO2I9Yi5zaWJsaW5nfX1yZXR1cm4hMH1cbmZ1bmN0aW9uIHNrKGEsYil7YiY9fmhrO2ImPX5nazthLnN1c3BlbmRlZExhbmVzfD1iO2EucGluZ2VkTGFuZXMmPX5iO2ZvcihhPWEuZXhwaXJhdGlvblRpbWVzOzA8Yjspe3ZhciBjPTMxLWxjKGIpLGQ9MTw8YzthW2NdPS0xO2ImPX5kfX1mdW5jdGlvbiB1ayhhKXtpZigwIT09KEsmNikpdGhyb3cgRXJyb3IocCgzMjcpKTt4aygpO3ZhciBiPXJjKGEsMCk7aWYoMD09PShiJjEpKXJldHVybiB0ayhhLEQoKSksbnVsbDt2YXIgYz15ayhhLGIpO2lmKDAhPT1hLnRhZyYmMj09PWMpe3ZhciBkPXVjKGEpOzAhPT1kJiYoYj1kLGM9RGsoYSxkKSl9aWYoMT09PWMpdGhyb3cgYz1mayxBayhhLDApLHNrKGEsYiksdGsoYSxEKCkpLGM7aWYoNj09PWMpdGhyb3cgRXJyb3IocCgzNDUpKTthLmZpbmlzaGVkV29yaz1hLmN1cnJlbnQuYWx0ZXJuYXRlO2EuZmluaXNoZWRMYW5lcz1iO0ZrKGEsamspO3RrKGEsRCgpKTtyZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIEdrKGEsYil7dmFyIGM9SztLfD0xO3RyeXtyZXR1cm4gYShiKX1maW5hbGx5e0s9YywwPT09SyYmKFRpPUQoKSs1MDAsJGYmJmRnKCkpfX1mdW5jdGlvbiBIayhhKXtudWxsIT09bGsmJjA9PT1say50YWcmJjA9PT0oSyY2KSYmeGsoKTt2YXIgYj1LO0t8PTE7dmFyIGM9ZWsudHJhbnNpdGlvbixkPUU7dHJ5e2lmKGVrLnRyYW5zaXRpb249bnVsbCxFPTEsYSlyZXR1cm4gYSgpfWZpbmFsbHl7RT1kLGVrLnRyYW5zaXRpb249YyxLPWIsMD09PShLJjYpJiZkZygpfX1mdW5jdGlvbiBVaSgpe1ZpPWVqLmN1cnJlbnQ7Ryhlail9XG5mdW5jdGlvbiBBayhhLGIpe2EuZmluaXNoZWRXb3JrPW51bGw7YS5maW5pc2hlZExhbmVzPTA7dmFyIGM9YS50aW1lb3V0SGFuZGxlOy0xIT09YyYmKGEudGltZW91dEhhbmRsZT0tMSxBZihjKSk7aWYobnVsbCE9PVkpZm9yKGM9WS5yZXR1cm47bnVsbCE9PWM7KXt2YXIgZD1jO1dnKGQpO3N3aXRjaChkLnRhZyl7Y2FzZSAxOmQ9ZC50eXBlLmNoaWxkQ29udGV4dFR5cGVzO251bGwhPT1kJiZ2b2lkIDAhPT1kJiZVZigpO2JyZWFrO2Nhc2UgMzp6aCgpO0coUWYpO0coSSk7RWgoKTticmVhaztjYXNlIDU6QmgoZCk7YnJlYWs7Y2FzZSA0OnpoKCk7YnJlYWs7Y2FzZSAxMzpHKFApO2JyZWFrO2Nhc2UgMTk6RyhQKTticmVhaztjYXNlIDEwOmxnKGQudHlwZS5fY29udGV4dCk7YnJlYWs7Y2FzZSAyMjpjYXNlIDIzOlVpKCl9Yz1jLnJldHVybn1KPWE7WT1hPW1oKGEuY3VycmVudCxudWxsKTtaPVZpPWI7Vz0wO2ZrPW51bGw7aGs9Z2s9emc9MDtqaz1paz1udWxsO2lmKG51bGwhPT1xZyl7Zm9yKGI9XG4wO2I8cWcubGVuZ3RoO2IrKylpZihjPXFnW2JdLGQ9Yy5pbnRlcmxlYXZlZCxudWxsIT09ZCl7Yy5pbnRlcmxlYXZlZD1udWxsO3ZhciBlPWQubmV4dCxmPWMucGVuZGluZztpZihudWxsIT09Zil7dmFyIGc9Zi5uZXh0O2YubmV4dD1lO2QubmV4dD1nfWMucGVuZGluZz1kfXFnPW51bGx9cmV0dXJuIGF9XG5mdW5jdGlvbiBDayhhLGIpe2Rve3ZhciBjPVk7dHJ5e2tnKCk7RmguY3VycmVudD1SaDtpZihJaCl7Zm9yKHZhciBkPVEubWVtb2l6ZWRTdGF0ZTtudWxsIT09ZDspe3ZhciBlPWQucXVldWU7bnVsbCE9PWUmJihlLnBlbmRpbmc9bnVsbCk7ZD1kLm5leHR9SWg9ITF9SGg9MDtTPVI9UT1udWxsO0poPSExO0toPTA7ZGsuY3VycmVudD1udWxsO2lmKG51bGw9PT1jfHxudWxsPT09Yy5yZXR1cm4pe1c9MTtmaz1iO1k9bnVsbDticmVha31hOnt2YXIgZj1hLGc9Yy5yZXR1cm4saD1jLGs9YjtiPVo7aC5mbGFnc3w9MzI3Njg7aWYobnVsbCE9PWsmJlwib2JqZWN0XCI9PT10eXBlb2YgayYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGsudGhlbil7dmFyIGw9ayxtPWgsdz1tLnRhZztpZigwPT09KG0ubW9kZSYxKSYmKDA9PT13fHwxMT09PXd8fDE1PT09dykpe3ZhciB1PW0uYWx0ZXJuYXRlO3U/KG0udXBkYXRlUXVldWU9dS51cGRhdGVRdWV1ZSxtLm1lbW9pemVkU3RhdGU9dS5tZW1vaXplZFN0YXRlLFxubS5sYW5lcz11LmxhbmVzKToobS51cGRhdGVRdWV1ZT1udWxsLG0ubWVtb2l6ZWRTdGF0ZT1udWxsKX12YXIgeT1KaShnKTtpZihudWxsIT09eSl7eS5mbGFncyY9LTI1NztLaSh5LGcsaCxmLGIpO3kubW9kZSYxJiZIaShmLGwsYik7Yj15O2s9bDt2YXIgbj1iLnVwZGF0ZVF1ZXVlO2lmKG51bGw9PT1uKXt2YXIgdj1uZXcgU2V0O3YuYWRkKGspO2IudXBkYXRlUXVldWU9dn1lbHNlIG4uYWRkKGspO2JyZWFrIGF9ZWxzZXtpZigwPT09KGImMSkpe0hpKGYsbCxiKTtTaSgpO2JyZWFrIGF9az1FcnJvcihwKDQyNikpfX1lbHNlIGlmKE4mJmgubW9kZSYxKXt2YXIgQz1KaShnKTtpZihudWxsIT09Qyl7MD09PShDLmZsYWdzJjY1NTM2KSYmKEMuZmxhZ3N8PTI1Nik7S2koQyxnLGgsZixiKTtoaChrKTticmVhayBhfX1mPWs7NCE9PVcmJihXPTIpO251bGw9PT1paz9paz1bZl06aWsucHVzaChmKTtrPXppKGssaCk7aD1nO2Rve3N3aXRjaChoLnRhZyl7Y2FzZSAzOmguZmxhZ3N8PTY1NTM2O1xuYiY9LWI7aC5sYW5lc3w9Yjt2YXIgdD1DaShoLGssYik7eGcoaCx0KTticmVhayBhO2Nhc2UgMTpmPWs7dmFyIHI9aC50eXBlLHg9aC5zdGF0ZU5vZGU7aWYoMD09PShoLmZsYWdzJjEyOCkmJihcImZ1bmN0aW9uXCI9PT10eXBlb2Ygci5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3J8fG51bGwhPT14JiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgeC5jb21wb25lbnREaWRDYXRjaCYmKG51bGw9PT1HaXx8IUdpLmhhcyh4KSkpKXtoLmZsYWdzfD02NTUzNjtiJj0tYjtoLmxhbmVzfD1iO3ZhciBCPUZpKGgsZixiKTt4ZyhoLEIpO2JyZWFrIGF9fWg9aC5yZXR1cm59d2hpbGUobnVsbCE9PWgpfUlrKGMpfWNhdGNoKE8pe2I9TztZPT09YyYmbnVsbCE9PWMmJihZPWM9Yy5yZXR1cm4pO2NvbnRpbnVlfWJyZWFrfXdoaWxlKDEpfWZ1bmN0aW9uIHprKCl7dmFyIGE9Y2suY3VycmVudDtjay5jdXJyZW50PVJoO3JldHVybiBudWxsPT09YT9SaDphfVxuZnVuY3Rpb24gU2koKXtpZigwPT09V3x8Mz09PVd8fDI9PT1XKVc9NDtudWxsPT09Snx8MD09PSh6ZyYyNjg0MzU0NTUpJiYwPT09KGdrJjI2ODQzNTQ1NSl8fHNrKEosWil9ZnVuY3Rpb24geWsoYSxiKXt2YXIgYz1LO0t8PTI7dmFyIGQ9emsoKTtKPT09YSYmWj09PWJ8fEFrKGEsYik7ZG8gdHJ5e0prKCk7YnJlYWt9Y2F0Y2goZSl7Q2soYSxlKX13aGlsZSgxKTtrZygpO0s9Yztjay5jdXJyZW50PWQ7aWYobnVsbCE9PVkpdGhyb3cgRXJyb3IocCgyNjEpKTtKPW51bGw7Wj0wO3JldHVybiBXfWZ1bmN0aW9uIEprKCl7Zm9yKDtudWxsIT09WTspS2soWSl9ZnVuY3Rpb24gQmsoKXtmb3IoO251bGwhPT1ZJiYhJGIoKTspS2soWSl9ZnVuY3Rpb24gS2soYSl7dmFyIGI9TGsoYS5hbHRlcm5hdGUsYSxWaSk7YS5tZW1vaXplZFByb3BzPWEucGVuZGluZ1Byb3BzO251bGw9PT1iP0lrKGEpOlk9Yjtkay5jdXJyZW50PW51bGx9XG5mdW5jdGlvbiBJayhhKXt2YXIgYj1hO2Rve3ZhciBjPWIuYWx0ZXJuYXRlO2E9Yi5yZXR1cm47aWYoMD09PShiLmZsYWdzJjMyNzY4KSl7aWYoYz1RaShjLGIsVmkpLG51bGwhPT1jKXtZPWM7cmV0dXJufX1lbHNle2M9eGooYyxiKTtpZihudWxsIT09Yyl7Yy5mbGFncyY9MzI3Njc7WT1jO3JldHVybn1pZihudWxsIT09YSlhLmZsYWdzfD0zMjc2OCxhLnN1YnRyZWVGbGFncz0wLGEuZGVsZXRpb25zPW51bGw7ZWxzZXtXPTY7WT1udWxsO3JldHVybn19Yj1iLnNpYmxpbmc7aWYobnVsbCE9PWIpe1k9YjtyZXR1cm59WT1iPWF9d2hpbGUobnVsbCE9PWIpOzA9PT1XJiYoVz01KX1mdW5jdGlvbiBGayhhLGIpe3ZhciBjPUUsZD1lay50cmFuc2l0aW9uO3RyeXtlay50cmFuc2l0aW9uPW51bGwsRT0xLE1rKGEsYixjKX1maW5hbGx5e2VrLnRyYW5zaXRpb249ZCxFPWN9cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBNayhhLGIsYyl7ZG8geGsoKTt3aGlsZShudWxsIT09bGspO2lmKDAhPT0oSyY2KSl0aHJvdyBFcnJvcihwKDMyNykpO3ZhciBkPWEuZmluaXNoZWRXb3JrLGU9YS5maW5pc2hlZExhbmVzO2lmKG51bGw9PT1kKXJldHVybiBudWxsO2EuZmluaXNoZWRXb3JrPW51bGw7YS5maW5pc2hlZExhbmVzPTA7aWYoZD09PWEuY3VycmVudCl0aHJvdyBFcnJvcihwKDE3NykpO2EuY2FsbGJhY2tOb2RlPW51bGw7YS5jYWxsYmFja1ByaW9yaXR5PTA7dmFyIGY9ZC5sYW5lc3xkLmNoaWxkTGFuZXM7eGMoYSxmKTthPT09SiYmKFk9Sj1udWxsLFo9MCk7MD09PShkLnN1YnRyZWVGbGFncyYyMDY0KSYmMD09PShkLmZsYWdzJjIwNjQpfHxra3x8KGtrPSEwLHZrKGVjLGZ1bmN0aW9uKCl7eGsoKTtyZXR1cm4gbnVsbH0pKTtmPTAhPT0oZC5mbGFncyYxNTk5MCk7aWYoMCE9PShkLnN1YnRyZWVGbGFncyYxNTk5MCl8fGYpe2Y9ZWsudHJhbnNpdGlvbjtlay50cmFuc2l0aW9uPW51bGw7dmFyIGc9XG5FO0U9MTt2YXIgaD1LO0t8PTQ7ZGsuY3VycmVudD1udWxsO0ZqKGEsZCk7VWooYSxkLGUpO0plKHhmKTt4Zj1udWxsO2EuY3VycmVudD1kO1hqKGQsYSxlKTthYygpO0s9aDtFPWc7ZWsudHJhbnNpdGlvbj1mfWVsc2UgYS5jdXJyZW50PWQ7a2smJihraz0hMSxsaz1hLG1rPWUpO2Y9YS5wZW5kaW5nTGFuZXM7MD09PWYmJihHaT1udWxsKTtqYyhkLnN0YXRlTm9kZSxjKTt0ayhhLEQoKSk7aWYobnVsbCE9PWIpZm9yKGM9YS5vblJlY292ZXJhYmxlRXJyb3IsZD0wO2Q8Yi5sZW5ndGg7ZCsrKWMoYltkXSk7aWYoRGkpdGhyb3cgRGk9ITEsYT1FaSxFaT1udWxsLGE7MCE9PShtayYxKSYmMCE9PWEudGFnJiZ4aygpO2Y9YS5wZW5kaW5nTGFuZXM7MCE9PShmJjEpP2E9PT1vaz9uaysrOihuaz0wLG9rPWEpOm5rPTA7ZGcoKTtyZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIHhrKCl7aWYobnVsbCE9PWxrKXt2YXIgYT16YyhtayksYj1lay50cmFuc2l0aW9uLGM9RTt0cnl7ZWsudHJhbnNpdGlvbj1udWxsO0U9MTY+YT8xNjphO2lmKG51bGw9PT1sayl2YXIgZD0hMTtlbHNle2E9bGs7bGs9bnVsbDttaz0wO2lmKDAhPT0oSyY2KSl0aHJvdyBFcnJvcihwKDMzMSkpO3ZhciBlPUs7S3w9NDtmb3IoWD1hLmN1cnJlbnQ7bnVsbCE9PVg7KXt2YXIgZj1YLGc9Zi5jaGlsZDtpZigwIT09KFguZmxhZ3MmMTYpKXt2YXIgaD1mLmRlbGV0aW9ucztpZihudWxsIT09aCl7Zm9yKHZhciBrPTA7azxoLmxlbmd0aDtrKyspe3ZhciBsPWhba107Zm9yKFg9bDtudWxsIT09WDspe3ZhciBtPVg7c3dpdGNoKG0udGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OkdqKDgsbSxmKX12YXIgdz1tLmNoaWxkO2lmKG51bGwhPT13KXcucmV0dXJuPW0sWD13O2Vsc2UgZm9yKDtudWxsIT09WDspe209WDt2YXIgdT1tLnNpYmxpbmcseT1tLnJldHVybjtMaihtKTtpZihtPT09XG5sKXtYPW51bGw7YnJlYWt9aWYobnVsbCE9PXUpe3UucmV0dXJuPXk7WD11O2JyZWFrfVg9eX19fXZhciBuPWYuYWx0ZXJuYXRlO2lmKG51bGwhPT1uKXt2YXIgdj1uLmNoaWxkO2lmKG51bGwhPT12KXtuLmNoaWxkPW51bGw7ZG97dmFyIEM9di5zaWJsaW5nO3Yuc2libGluZz1udWxsO3Y9Q313aGlsZShudWxsIT09dil9fVg9Zn19aWYoMCE9PShmLnN1YnRyZWVGbGFncyYyMDY0KSYmbnVsbCE9PWcpZy5yZXR1cm49ZixYPWc7ZWxzZSBiOmZvcig7bnVsbCE9PVg7KXtmPVg7aWYoMCE9PShmLmZsYWdzJjIwNDgpKXN3aXRjaChmLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTpHaig5LGYsZi5yZXR1cm4pfXZhciB0PWYuc2libGluZztpZihudWxsIT09dCl7dC5yZXR1cm49Zi5yZXR1cm47WD10O2JyZWFrIGJ9WD1mLnJldHVybn19dmFyIHI9YS5jdXJyZW50O2ZvcihYPXI7bnVsbCE9PVg7KXtnPVg7dmFyIHg9Zy5jaGlsZDtpZigwIT09KGcuc3VidHJlZUZsYWdzJjIwNjQpJiZudWxsIT09XG54KXgucmV0dXJuPWcsWD14O2Vsc2UgYjpmb3IoZz1yO251bGwhPT1YOyl7aD1YO2lmKDAhPT0oaC5mbGFncyYyMDQ4KSl0cnl7c3dpdGNoKGgudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OkhqKDksaCl9fWNhdGNoKE8pe0NqKGgsaC5yZXR1cm4sTyl9aWYoaD09PWcpe1g9bnVsbDticmVhayBifXZhciBCPWguc2libGluZztpZihudWxsIT09Qil7Qi5yZXR1cm49aC5yZXR1cm47WD1CO2JyZWFrIGJ9WD1oLnJldHVybn19Sz1lO2RnKCk7aWYoaWMmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBpYy5vblBvc3RDb21taXRGaWJlclJvb3QpdHJ5e2ljLm9uUG9zdENvbW1pdEZpYmVyUm9vdChoYyxhKX1jYXRjaChPKXt9ZD0hMH1yZXR1cm4gZH1maW5hbGx5e0U9Yyxlay50cmFuc2l0aW9uPWJ9fXJldHVybiExfWZ1bmN0aW9uIE5rKGEsYixjKXtiPXppKGMsYik7Yj1DaShhLGIsMSk7dmcoYSxiKTtiPU0oKTthPXJrKGEsMSk7bnVsbCE9PWEmJih3YyhhLDEsYiksdGsoYSxiKSl9XG5mdW5jdGlvbiBDaihhLGIsYyl7aWYoMz09PWEudGFnKU5rKGEsYSxjKTtlbHNlIGZvcig7bnVsbCE9PWI7KXtpZigzPT09Yi50YWcpe05rKGIsYSxjKTticmVha31lbHNlIGlmKDE9PT1iLnRhZyl7dmFyIGQ9Yi5zdGF0ZU5vZGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGIudHlwZS5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3J8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLmNvbXBvbmVudERpZENhdGNoJiYobnVsbD09PUdpfHwhR2kuaGFzKGQpKSl7YT16aShjLGEpO2E9RmkoYixhLDEpO3ZnKGIsYSk7YT1NKCk7Yj1yayhiLDEpO251bGwhPT1iJiYod2MoYiwxLGEpLHRrKGIsYSkpO2JyZWFrfX1iPWIucmV0dXJufX1cbmZ1bmN0aW9uIElpKGEsYixjKXt2YXIgZD1hLnBpbmdDYWNoZTtudWxsIT09ZCYmZC5kZWxldGUoYik7Yj1NKCk7YS5waW5nZWRMYW5lc3w9YS5zdXNwZW5kZWRMYW5lcyZjO0o9PT1hJiYoWiZjKT09PWMmJig0PT09V3x8Mz09PVcmJihaJjEzMDAyMzQyNCk9PT1aJiY1MDA+RCgpLVZqP0FrKGEsMCk6aGt8PWMpO3RrKGEsYil9ZnVuY3Rpb24gT2soYSxiKXswPT09YiYmKDA9PT0oYS5tb2RlJjEpP2I9MTooYj1wYyxwYzw8PTEsMD09PShwYyYxMzAwMjM0MjQpJiYocGM9NDE5NDMwNCkpKTt2YXIgYz1NKCk7YT1yayhhLGIpO251bGwhPT1hJiYod2MoYSxiLGMpLHRrKGEsYykpfWZ1bmN0aW9uIHFqKGEpe3ZhciBiPWEubWVtb2l6ZWRTdGF0ZSxjPTA7bnVsbCE9PWImJihjPWIucmV0cnlMYW5lKTtPayhhLGMpfVxuZnVuY3Rpb24gVGooYSxiKXt2YXIgYz0wO3N3aXRjaChhLnRhZyl7Y2FzZSAxMzp2YXIgZD1hLnN0YXRlTm9kZTt2YXIgZT1hLm1lbW9pemVkU3RhdGU7bnVsbCE9PWUmJihjPWUucmV0cnlMYW5lKTticmVhaztjYXNlIDE5OmQ9YS5zdGF0ZU5vZGU7YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcihwKDMxNCkpO31udWxsIT09ZCYmZC5kZWxldGUoYik7T2soYSxjKX12YXIgTGs7XG5Maz1mdW5jdGlvbihhLGIsYyl7aWYobnVsbCE9PWEpaWYoYS5tZW1vaXplZFByb3BzIT09Yi5wZW5kaW5nUHJvcHN8fFFmLmN1cnJlbnQpb2c9ITA7ZWxzZXtpZigwPT09KGEubGFuZXMmYykmJjA9PT0oYi5mbGFncyYxMjgpKXJldHVybiBvZz0hMSx3aihhLGIsYyk7b2c9MCE9PShhLmZsYWdzJjEzMTA3Mik/ITA6ITF9ZWxzZSBvZz0hMSxOJiYwIT09KGIuZmxhZ3MmMTA0ODU3NikmJlVnKGIsTmcsYi5pbmRleCk7Yi5sYW5lcz0wO3N3aXRjaChiLnRhZyl7Y2FzZSAyOnZhciBkPWIudHlwZTtudWxsIT09YSYmKGEuYWx0ZXJuYXRlPW51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmZsYWdzfD0yKTthPWIucGVuZGluZ1Byb3BzO3ZhciBlPVNmKGIsSS5jdXJyZW50KTtuZyhiLGMpO2U9TmgobnVsbCxiLGQsYSxlLGMpO3ZhciBmPVNoKCk7Yi5mbGFnc3w9MTtcIm9iamVjdFwiPT09dHlwZW9mIGUmJm51bGwhPT1lJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5yZW5kZXImJnZvaWQgMD09PWUuJCR0eXBlb2Y/XG4oYi50YWc9MSxiLm1lbW9pemVkU3RhdGU9bnVsbCxiLnVwZGF0ZVF1ZXVlPW51bGwsVGYoZCk/KGY9ITAsWGYoYikpOmY9ITEsYi5tZW1vaXplZFN0YXRlPW51bGwhPT1lLnN0YXRlJiZ2b2lkIDAhPT1lLnN0YXRlP2Uuc3RhdGU6bnVsbCxzZyhiKSxlLnVwZGF0ZXI9RmcsYi5zdGF0ZU5vZGU9ZSxlLl9yZWFjdEludGVybmFscz1iLEpnKGIsZCxhLGMpLGI9aGoobnVsbCxiLGQsITAsZixjKSk6KGIudGFnPTAsTiYmZiYmVmcoYiksWGkobnVsbCxiLGUsYyksYj1iLmNoaWxkKTtyZXR1cm4gYjtjYXNlIDE2OmQ9Yi5lbGVtZW50VHlwZTthOntudWxsIT09YSYmKGEuYWx0ZXJuYXRlPW51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmZsYWdzfD0yKTthPWIucGVuZGluZ1Byb3BzO2U9ZC5faW5pdDtkPWUoZC5fcGF5bG9hZCk7Yi50eXBlPWQ7ZT1iLnRhZz1QayhkKTthPWZnKGQsYSk7c3dpdGNoKGUpe2Nhc2UgMDpiPWNqKG51bGwsYixkLGEsYyk7YnJlYWsgYTtjYXNlIDE6Yj1naihudWxsLGIsXG5kLGEsYyk7YnJlYWsgYTtjYXNlIDExOmI9WWkobnVsbCxiLGQsYSxjKTticmVhayBhO2Nhc2UgMTQ6Yj0kaShudWxsLGIsZCxmZyhkLnR5cGUsYSksYyk7YnJlYWsgYX10aHJvdyBFcnJvcihwKDMwNixkLFwiXCIpKTt9cmV0dXJuIGI7Y2FzZSAwOnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PWQ/ZTpmZyhkLGUpLGNqKGEsYixkLGUsYyk7Y2FzZSAxOnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PWQ/ZTpmZyhkLGUpLGdqKGEsYixkLGUsYyk7Y2FzZSAzOmE6e2lqKGIpO2lmKG51bGw9PT1hKXRocm93IEVycm9yKHAoMzg3KSk7ZD1iLnBlbmRpbmdQcm9wcztmPWIubWVtb2l6ZWRTdGF0ZTtlPWYuZWxlbWVudDt0ZyhhLGIpO3lnKGIsZCxudWxsLGMpO3ZhciBnPWIubWVtb2l6ZWRTdGF0ZTtkPWcuZWxlbWVudDtpZihmLmlzRGVoeWRyYXRlZClpZihmPXtlbGVtZW50OmQsaXNEZWh5ZHJhdGVkOiExLFxuY2FjaGU6Zy5jYWNoZSx0cmFuc2l0aW9uczpnLnRyYW5zaXRpb25zfSxiLnVwZGF0ZVF1ZXVlLmJhc2VTdGF0ZT1mLGIubWVtb2l6ZWRTdGF0ZT1mLGIuZmxhZ3MmMjU2KXtlPUVycm9yKHAoNDIzKSk7Yj1qaihhLGIsZCxjLGUpO2JyZWFrIGF9ZWxzZSBpZihkIT09ZSl7ZT1FcnJvcihwKDQyNCkpO2I9amooYSxiLGQsYyxlKTticmVhayBhfWVsc2UgZm9yKFlnPUZmKGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8uZmlyc3RDaGlsZCksWGc9YixOPSEwLFpnPW51bGwsYz1zaChiLG51bGwsZCxjKSxiLmNoaWxkPWM7YzspYy5mbGFncz1jLmZsYWdzJi0zfDQwOTYsYz1jLnNpYmxpbmc7ZWxzZXtnaCgpO2lmKGQ9PT1lKXtiPVppKGEsYixjKTticmVhayBhfVhpKGEsYixkLGMpfWI9Yi5jaGlsZH1yZXR1cm4gYjtjYXNlIDU6cmV0dXJuIEFoKGIpLG51bGw9PT1hJiZkaChiKSxkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGY9bnVsbCE9PWE/YS5tZW1vaXplZFByb3BzOm51bGwsZz1lLmNoaWxkcmVuLFxueWYoZCxlKT9nPW51bGw6bnVsbCE9PWYmJnlmKGQsZikmJihiLmZsYWdzfD0zMiksZmooYSxiKSxYaShhLGIsZyxjKSxiLmNoaWxkO2Nhc2UgNjpyZXR1cm4gbnVsbD09PWEmJmRoKGIpLG51bGw7Y2FzZSAxMzpyZXR1cm4gbWooYSxiLGMpO2Nhc2UgNDpyZXR1cm4geWgoYixiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKSxkPWIucGVuZGluZ1Byb3BzLG51bGw9PT1hP2IuY2hpbGQ9cmgoYixudWxsLGQsYyk6WGkoYSxiLGQsYyksYi5jaGlsZDtjYXNlIDExOnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PWQ/ZTpmZyhkLGUpLFlpKGEsYixkLGUsYyk7Y2FzZSA3OnJldHVybiBYaShhLGIsYi5wZW5kaW5nUHJvcHMsYyksYi5jaGlsZDtjYXNlIDg6cmV0dXJuIFhpKGEsYixiLnBlbmRpbmdQcm9wcy5jaGlsZHJlbixjKSxiLmNoaWxkO2Nhc2UgMTI6cmV0dXJuIFhpKGEsYixiLnBlbmRpbmdQcm9wcy5jaGlsZHJlbixjKSxiLmNoaWxkO2Nhc2UgMTA6YTp7ZD1cbmIudHlwZS5fY29udGV4dDtlPWIucGVuZGluZ1Byb3BzO2Y9Yi5tZW1vaXplZFByb3BzO2c9ZS52YWx1ZTtIKGdnLGQuX2N1cnJlbnRWYWx1ZSk7ZC5fY3VycmVudFZhbHVlPWc7aWYobnVsbCE9PWYpaWYoQ2UoZi52YWx1ZSxnKSl7aWYoZi5jaGlsZHJlbj09PWUuY2hpbGRyZW4mJiFRZi5jdXJyZW50KXtiPVppKGEsYixjKTticmVhayBhfX1lbHNlIGZvcihmPWIuY2hpbGQsbnVsbCE9PWYmJihmLnJldHVybj1iKTtudWxsIT09Zjspe3ZhciBoPWYuZGVwZW5kZW5jaWVzO2lmKG51bGwhPT1oKXtnPWYuY2hpbGQ7Zm9yKHZhciBrPWguZmlyc3RDb250ZXh0O251bGwhPT1rOyl7aWYoay5jb250ZXh0PT09ZCl7aWYoMT09PWYudGFnKXtrPXVnKC0xLGMmLWMpO2sudGFnPTI7dmFyIGw9Zi51cGRhdGVRdWV1ZTtpZihudWxsIT09bCl7bD1sLnNoYXJlZDt2YXIgbT1sLnBlbmRpbmc7bnVsbD09PW0/ay5uZXh0PWs6KGsubmV4dD1tLm5leHQsbS5uZXh0PWspO2wucGVuZGluZz1rfX1mLmxhbmVzfD1cbmM7az1mLmFsdGVybmF0ZTtudWxsIT09ayYmKGsubGFuZXN8PWMpO21nKGYucmV0dXJuLGMsYik7aC5sYW5lc3w9YzticmVha31rPWsubmV4dH19ZWxzZSBpZigxMD09PWYudGFnKWc9Zi50eXBlPT09Yi50eXBlP251bGw6Zi5jaGlsZDtlbHNlIGlmKDE4PT09Zi50YWcpe2c9Zi5yZXR1cm47aWYobnVsbD09PWcpdGhyb3cgRXJyb3IocCgzNDEpKTtnLmxhbmVzfD1jO2g9Zy5hbHRlcm5hdGU7bnVsbCE9PWgmJihoLmxhbmVzfD1jKTttZyhnLGMsYik7Zz1mLnNpYmxpbmd9ZWxzZSBnPWYuY2hpbGQ7aWYobnVsbCE9PWcpZy5yZXR1cm49ZjtlbHNlIGZvcihnPWY7bnVsbCE9PWc7KXtpZihnPT09Yil7Zz1udWxsO2JyZWFrfWY9Zy5zaWJsaW5nO2lmKG51bGwhPT1mKXtmLnJldHVybj1nLnJldHVybjtnPWY7YnJlYWt9Zz1nLnJldHVybn1mPWd9WGkoYSxiLGUuY2hpbGRyZW4sYyk7Yj1iLmNoaWxkfXJldHVybiBiO2Nhc2UgOTpyZXR1cm4gZT1iLnR5cGUsZD1iLnBlbmRpbmdQcm9wcy5jaGlsZHJlbixcbm5nKGIsYyksZT1wZyhlKSxkPWQoZSksYi5mbGFnc3w9MSxYaShhLGIsZCxjKSxiLmNoaWxkO2Nhc2UgMTQ6cmV0dXJuIGQ9Yi50eXBlLGU9ZmcoZCxiLnBlbmRpbmdQcm9wcyksZT1mZyhkLnR5cGUsZSksJGkoYSxiLGQsZSxjKTtjYXNlIDE1OnJldHVybiBiaihhLGIsYi50eXBlLGIucGVuZGluZ1Byb3BzLGMpO2Nhc2UgMTc6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOmZnKGQsZSksbnVsbCE9PWEmJihhLmFsdGVybmF0ZT1udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5mbGFnc3w9MiksYi50YWc9MSxUZihkKT8oYT0hMCxYZihiKSk6YT0hMSxuZyhiLGMpLEhnKGIsZCxlKSxKZyhiLGQsZSxjKSxoaihudWxsLGIsZCwhMCxhLGMpO2Nhc2UgMTk6cmV0dXJuIHZqKGEsYixjKTtjYXNlIDIyOnJldHVybiBkaihhLGIsYyl9dGhyb3cgRXJyb3IocCgxNTYsYi50YWcpKTt9O2Z1bmN0aW9uIHZrKGEsYil7cmV0dXJuIFliKGEsYil9XG5mdW5jdGlvbiBRayhhLGIsYyxkKXt0aGlzLnRhZz1hO3RoaXMua2V5PWM7dGhpcy5zaWJsaW5nPXRoaXMuY2hpbGQ9dGhpcy5yZXR1cm49dGhpcy5zdGF0ZU5vZGU9dGhpcy50eXBlPXRoaXMuZWxlbWVudFR5cGU9bnVsbDt0aGlzLmluZGV4PTA7dGhpcy5yZWY9bnVsbDt0aGlzLnBlbmRpbmdQcm9wcz1iO3RoaXMuZGVwZW5kZW5jaWVzPXRoaXMubWVtb2l6ZWRTdGF0ZT10aGlzLnVwZGF0ZVF1ZXVlPXRoaXMubWVtb2l6ZWRQcm9wcz1udWxsO3RoaXMubW9kZT1kO3RoaXMuc3VidHJlZUZsYWdzPXRoaXMuZmxhZ3M9MDt0aGlzLmRlbGV0aW9ucz1udWxsO3RoaXMuY2hpbGRMYW5lcz10aGlzLmxhbmVzPTA7dGhpcy5hbHRlcm5hdGU9bnVsbH1mdW5jdGlvbiBhaChhLGIsYyxkKXtyZXR1cm4gbmV3IFFrKGEsYixjLGQpfWZ1bmN0aW9uIGFqKGEpe2E9YS5wcm90b3R5cGU7cmV0dXJuISghYXx8IWEuaXNSZWFjdENvbXBvbmVudCl9XG5mdW5jdGlvbiBQayhhKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSlyZXR1cm4gYWooYSk/MTowO2lmKHZvaWQgMCE9PWEmJm51bGwhPT1hKXthPWEuJCR0eXBlb2Y7aWYoYT09PUJhKXJldHVybiAxMTtpZihhPT09RWEpcmV0dXJuIDE0fXJldHVybiAyfVxuZnVuY3Rpb24gbWgoYSxiKXt2YXIgYz1hLmFsdGVybmF0ZTtudWxsPT09Yz8oYz1haChhLnRhZyxiLGEua2V5LGEubW9kZSksYy5lbGVtZW50VHlwZT1hLmVsZW1lbnRUeXBlLGMudHlwZT1hLnR5cGUsYy5zdGF0ZU5vZGU9YS5zdGF0ZU5vZGUsYy5hbHRlcm5hdGU9YSxhLmFsdGVybmF0ZT1jKTooYy5wZW5kaW5nUHJvcHM9YixjLnR5cGU9YS50eXBlLGMuZmxhZ3M9MCxjLnN1YnRyZWVGbGFncz0wLGMuZGVsZXRpb25zPW51bGwpO2MuZmxhZ3M9YS5mbGFncyYxNDY4MDA2NDtjLmNoaWxkTGFuZXM9YS5jaGlsZExhbmVzO2MubGFuZXM9YS5sYW5lcztjLmNoaWxkPWEuY2hpbGQ7Yy5tZW1vaXplZFByb3BzPWEubWVtb2l6ZWRQcm9wcztjLm1lbW9pemVkU3RhdGU9YS5tZW1vaXplZFN0YXRlO2MudXBkYXRlUXVldWU9YS51cGRhdGVRdWV1ZTtiPWEuZGVwZW5kZW5jaWVzO2MuZGVwZW5kZW5jaWVzPW51bGw9PT1iP251bGw6e2xhbmVzOmIubGFuZXMsZmlyc3RDb250ZXh0OmIuZmlyc3RDb250ZXh0fTtcbmMuc2libGluZz1hLnNpYmxpbmc7Yy5pbmRleD1hLmluZGV4O2MucmVmPWEucmVmO3JldHVybiBjfVxuZnVuY3Rpb24gb2goYSxiLGMsZCxlLGYpe3ZhciBnPTI7ZD1hO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhKWFqKGEpJiYoZz0xKTtlbHNlIGlmKFwic3RyaW5nXCI9PT10eXBlb2YgYSlnPTU7ZWxzZSBhOnN3aXRjaChhKXtjYXNlIHZhOnJldHVybiBxaChjLmNoaWxkcmVuLGUsZixiKTtjYXNlIHdhOmc9ODtlfD04O2JyZWFrO2Nhc2UgeGE6cmV0dXJuIGE9YWgoMTIsYyxiLGV8MiksYS5lbGVtZW50VHlwZT14YSxhLmxhbmVzPWYsYTtjYXNlIENhOnJldHVybiBhPWFoKDEzLGMsYixlKSxhLmVsZW1lbnRUeXBlPUNhLGEubGFuZXM9ZixhO2Nhc2UgRGE6cmV0dXJuIGE9YWgoMTksYyxiLGUpLGEuZWxlbWVudFR5cGU9RGEsYS5sYW5lcz1mLGE7Y2FzZSBHYTpyZXR1cm4gbmooYyxlLGYsYik7ZGVmYXVsdDppZihcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hKXN3aXRjaChhLiQkdHlwZW9mKXtjYXNlIHlhOmc9MTA7YnJlYWsgYTtjYXNlIEFhOmc9OTticmVhayBhO2Nhc2UgQmE6Zz0xMTtcbmJyZWFrIGE7Y2FzZSBFYTpnPTE0O2JyZWFrIGE7Y2FzZSBGYTpnPTE2O2Q9bnVsbDticmVhayBhfXRocm93IEVycm9yKHAoMTMwLG51bGw9PWE/YTp0eXBlb2YgYSxcIlwiKSk7fWI9YWgoZyxjLGIsZSk7Yi5lbGVtZW50VHlwZT1hO2IudHlwZT1kO2IubGFuZXM9ZjtyZXR1cm4gYn1mdW5jdGlvbiBxaChhLGIsYyxkKXthPWFoKDcsYSxkLGIpO2EubGFuZXM9YztyZXR1cm4gYX1mdW5jdGlvbiBuaihhLGIsYyxkKXthPWFoKDIyLGEsZCxiKTthLmVsZW1lbnRUeXBlPUdhO2EubGFuZXM9YzthLnN0YXRlTm9kZT17fTtyZXR1cm4gYX1mdW5jdGlvbiBuaChhLGIsYyl7YT1haCg2LGEsbnVsbCxiKTthLmxhbmVzPWM7cmV0dXJuIGF9XG5mdW5jdGlvbiBwaChhLGIsYyl7Yj1haCg0LG51bGwhPT1hLmNoaWxkcmVuP2EuY2hpbGRyZW46W10sYS5rZXksYik7Yi5sYW5lcz1jO2Iuc3RhdGVOb2RlPXtjb250YWluZXJJbmZvOmEuY29udGFpbmVySW5mbyxwZW5kaW5nQ2hpbGRyZW46bnVsbCxpbXBsZW1lbnRhdGlvbjphLmltcGxlbWVudGF0aW9ufTtyZXR1cm4gYn1cbmZ1bmN0aW9uIFJrKGEsYixjLGQsZSl7dGhpcy50YWc9Yjt0aGlzLmNvbnRhaW5lckluZm89YTt0aGlzLmZpbmlzaGVkV29yaz10aGlzLnBpbmdDYWNoZT10aGlzLmN1cnJlbnQ9dGhpcy5wZW5kaW5nQ2hpbGRyZW49bnVsbDt0aGlzLnRpbWVvdXRIYW5kbGU9LTE7dGhpcy5jYWxsYmFja05vZGU9dGhpcy5wZW5kaW5nQ29udGV4dD10aGlzLmNvbnRleHQ9bnVsbDt0aGlzLmNhbGxiYWNrUHJpb3JpdHk9MDt0aGlzLmV2ZW50VGltZXM9dmMoMCk7dGhpcy5leHBpcmF0aW9uVGltZXM9dmMoLTEpO3RoaXMuZW50YW5nbGVkTGFuZXM9dGhpcy5maW5pc2hlZExhbmVzPXRoaXMubXV0YWJsZVJlYWRMYW5lcz10aGlzLmV4cGlyZWRMYW5lcz10aGlzLnBpbmdlZExhbmVzPXRoaXMuc3VzcGVuZGVkTGFuZXM9dGhpcy5wZW5kaW5nTGFuZXM9MDt0aGlzLmVudGFuZ2xlbWVudHM9dmMoMCk7dGhpcy5pZGVudGlmaWVyUHJlZml4PWQ7dGhpcy5vblJlY292ZXJhYmxlRXJyb3I9ZTt0aGlzLm11dGFibGVTb3VyY2VFYWdlckh5ZHJhdGlvbkRhdGE9XG5udWxsfWZ1bmN0aW9uIFNrKGEsYixjLGQsZSxmLGcsaCxrKXthPW5ldyBSayhhLGIsYyxoLGspOzE9PT1iPyhiPTEsITA9PT1mJiYoYnw9OCkpOmI9MDtmPWFoKDMsbnVsbCxudWxsLGIpO2EuY3VycmVudD1mO2Yuc3RhdGVOb2RlPWE7Zi5tZW1vaXplZFN0YXRlPXtlbGVtZW50OmQsaXNEZWh5ZHJhdGVkOmMsY2FjaGU6bnVsbCx0cmFuc2l0aW9uczpudWxsfTtzZyhmKTtyZXR1cm4gYX1mdW5jdGlvbiBUayhhLGIsYyl7dmFyIGQ9Mzxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbM10/YXJndW1lbnRzWzNdOm51bGw7cmV0dXJueyQkdHlwZW9mOnVhLGtleTpudWxsPT1kP251bGw6XCJcIitkLGNoaWxkcmVuOmEsY29udGFpbmVySW5mbzpiLGltcGxlbWVudGF0aW9uOmN9fVxuZnVuY3Rpb24gVWsoYSl7aWYoIWEpcmV0dXJuIFBmO2E9YS5fcmVhY3RJbnRlcm5hbHM7YTp7aWYoU2IoYSkhPT1hfHwxIT09YS50YWcpdGhyb3cgRXJyb3IocCgxNzApKTt2YXIgYj1hO2Rve3N3aXRjaChiLnRhZyl7Y2FzZSAzOmI9Yi5zdGF0ZU5vZGUuY29udGV4dDticmVhayBhO2Nhc2UgMTppZihUZihiLnR5cGUpKXtiPWIuc3RhdGVOb2RlLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0O2JyZWFrIGF9fWI9Yi5yZXR1cm59d2hpbGUobnVsbCE9PWIpO3Rocm93IEVycm9yKHAoMTcxKSk7fWlmKDE9PT1hLnRhZyl7dmFyIGM9YS50eXBlO2lmKFRmKGMpKXJldHVybiBXZihhLGMsYil9cmV0dXJuIGJ9XG5mdW5jdGlvbiBWayhhLGIsYyxkLGUsZixnLGgsayl7YT1TayhjLGQsITAsYSxlLGYsZyxoLGspO2EuY29udGV4dD1VayhudWxsKTtjPWEuY3VycmVudDtkPU0oKTtlPURnKGMpO2Y9dWcoZCxlKTtmLmNhbGxiYWNrPXZvaWQgMCE9PWImJm51bGwhPT1iP2I6bnVsbDt2ZyhjLGYpO2EuY3VycmVudC5sYW5lcz1lO3djKGEsZSxkKTt0ayhhLGQpO3JldHVybiBhfWZ1bmN0aW9uIFdrKGEsYixjLGQpe3ZhciBlPWIuY3VycmVudCxmPU0oKSxnPURnKGUpO2M9VWsoYyk7bnVsbD09PWIuY29udGV4dD9iLmNvbnRleHQ9YzpiLnBlbmRpbmdDb250ZXh0PWM7Yj11ZyhmLGcpO2IucGF5bG9hZD17ZWxlbWVudDphfTtkPXZvaWQgMD09PWQ/bnVsbDpkO251bGwhPT1kJiYoYi5jYWxsYmFjaz1kKTt2ZyhlLGIpO2E9RWcoZSxnLGYpO251bGwhPT1hJiZ3ZyhhLGUsZyk7cmV0dXJuIGd9XG5mdW5jdGlvbiBYayhhKXthPWEuY3VycmVudDtpZighYS5jaGlsZClyZXR1cm4gbnVsbDtzd2l0Y2goYS5jaGlsZC50YWcpe2Nhc2UgNTpyZXR1cm4gYS5jaGlsZC5zdGF0ZU5vZGU7ZGVmYXVsdDpyZXR1cm4gYS5jaGlsZC5zdGF0ZU5vZGV9fWZ1bmN0aW9uIFlrKGEsYil7YT1hLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWEmJm51bGwhPT1hLmRlaHlkcmF0ZWQpe3ZhciBjPWEucmV0cnlMYW5lO2EucmV0cnlMYW5lPTAhPT1jJiZjPGI/YzpifX1mdW5jdGlvbiBaayhhLGIpe1lrKGEsYik7KGE9YS5hbHRlcm5hdGUpJiZZayhhLGIpfWZ1bmN0aW9uICRrKCl7cmV0dXJuIG51bGx9dmFyIGFsPVwiZnVuY3Rpb25cIj09PXR5cGVvZiByZXBvcnRFcnJvcj9yZXBvcnRFcnJvcjpmdW5jdGlvbihhKXtjb25zb2xlLmVycm9yKGEpfTtmdW5jdGlvbiBibChhKXt0aGlzLl9pbnRlcm5hbFJvb3Q9YX1cbmNsLnByb3RvdHlwZS5yZW5kZXI9YmwucHJvdG90eXBlLnJlbmRlcj1mdW5jdGlvbihhKXt2YXIgYj10aGlzLl9pbnRlcm5hbFJvb3Q7aWYobnVsbD09PWIpdGhyb3cgRXJyb3IocCg0MDkpKTtXayhhLGIsbnVsbCxudWxsKX07Y2wucHJvdG90eXBlLnVubW91bnQ9YmwucHJvdG90eXBlLnVubW91bnQ9ZnVuY3Rpb24oKXt2YXIgYT10aGlzLl9pbnRlcm5hbFJvb3Q7aWYobnVsbCE9PWEpe3RoaXMuX2ludGVybmFsUm9vdD1udWxsO3ZhciBiPWEuY29udGFpbmVySW5mbztIayhmdW5jdGlvbigpe1drKG51bGwsYSxudWxsLG51bGwpfSk7YltwZl09bnVsbH19O2Z1bmN0aW9uIGNsKGEpe3RoaXMuX2ludGVybmFsUm9vdD1hfVxuY2wucHJvdG90eXBlLnVuc3RhYmxlX3NjaGVkdWxlSHlkcmF0aW9uPWZ1bmN0aW9uKGEpe2lmKGEpe3ZhciBiPURjKCk7YT17YmxvY2tlZE9uOm51bGwsdGFyZ2V0OmEscHJpb3JpdHk6Yn07Zm9yKHZhciBjPTA7YzxNYy5sZW5ndGgmJjAhPT1iJiZiPE1jW2NdLnByaW9yaXR5O2MrKyk7TWMuc3BsaWNlKGMsMCxhKTswPT09YyYmUmMoYSl9fTtmdW5jdGlvbiBkbChhKXtyZXR1cm4hKCFhfHwxIT09YS5ub2RlVHlwZSYmOSE9PWEubm9kZVR5cGUmJjExIT09YS5ub2RlVHlwZSl9ZnVuY3Rpb24gZWwoYSl7cmV0dXJuISghYXx8MSE9PWEubm9kZVR5cGUmJjkhPT1hLm5vZGVUeXBlJiYxMSE9PWEubm9kZVR5cGUmJig4IT09YS5ub2RlVHlwZXx8XCIgcmVhY3QtbW91bnQtcG9pbnQtdW5zdGFibGUgXCIhPT1hLm5vZGVWYWx1ZSkpfWZ1bmN0aW9uIGZsKCl7fVxuZnVuY3Rpb24gZ2woYSxiLGMsZCxlKXtpZihlKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZCl7dmFyIGY9ZDtkPWZ1bmN0aW9uKCl7dmFyIGE9WGsoZyk7Zi5jYWxsKGEpfX12YXIgZz1WayhiLGQsYSwwLG51bGwsITEsITEsXCJcIixmbCk7YS5fcmVhY3RSb290Q29udGFpbmVyPWc7YVtwZl09Zy5jdXJyZW50O25mKDg9PT1hLm5vZGVUeXBlP2EucGFyZW50Tm9kZTphKTtIaygpO3JldHVybiBnfWZvcig7ZT1hLmxhc3RDaGlsZDspYS5yZW1vdmVDaGlsZChlKTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZCl7dmFyIGg9ZDtkPWZ1bmN0aW9uKCl7dmFyIGE9WGsoayk7aC5jYWxsKGEpfX12YXIgaz1TayhhLDAsITEsbnVsbCxudWxsLCExLCExLFwiXCIsZmwpO2EuX3JlYWN0Um9vdENvbnRhaW5lcj1rO2FbcGZdPWsuY3VycmVudDtuZig4PT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGU6YSk7SGsoZnVuY3Rpb24oKXtXayhiLGssYyxkKX0pO3JldHVybiBrfVxuZnVuY3Rpb24gaGwoYSxiLGMsZCxlKXt2YXIgZj1jLl9yZWFjdFJvb3RDb250YWluZXI7aWYoZil7dmFyIGc9ZjtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZSl7dmFyIGg9ZTtlPWZ1bmN0aW9uKCl7dmFyIGE9WGsoZyk7aC5jYWxsKGEpfX1XayhiLGcsYSxlKX1lbHNlIGc9Z2woYyxiLGEsZSxkKTtyZXR1cm4gWGsoZyl9QWM9ZnVuY3Rpb24oYSl7c3dpdGNoKGEudGFnKXtjYXNlIDM6dmFyIGI9YS5zdGF0ZU5vZGU7aWYoYi5jdXJyZW50Lm1lbW9pemVkU3RhdGUuaXNEZWh5ZHJhdGVkKXt2YXIgYz1xYyhiLnBlbmRpbmdMYW5lcyk7MCE9PWMmJih5YyhiLGN8MSksdGsoYixEKCkpLDA9PT0oSyY2KSYmKFRpPUQoKSs1MDAsZGcoKSkpfWJyZWFrO2Nhc2UgMTM6dmFyIGQ9TSgpO0hrKGZ1bmN0aW9uKCl7cmV0dXJuIEVnKGEsMSxkKX0pO1prKGEsMSl9fTtCYz1mdW5jdGlvbihhKXtpZigxMz09PWEudGFnKXt2YXIgYj1NKCk7RWcoYSwxMzQyMTc3MjgsYik7WmsoYSwxMzQyMTc3MjgpfX07XG5DYz1mdW5jdGlvbihhKXtpZigxMz09PWEudGFnKXt2YXIgYj1NKCksYz1EZyhhKTtFZyhhLGMsYik7WmsoYSxjKX19O0RjPWZ1bmN0aW9uKCl7cmV0dXJuIEV9O0VjPWZ1bmN0aW9uKGEsYil7dmFyIGM9RTt0cnl7cmV0dXJuIEU9YSxiKCl9ZmluYWxseXtFPWN9fTtcbnZiPWZ1bmN0aW9uKGEsYixjKXtzd2l0Y2goYil7Y2FzZSBcImlucHV0XCI6WmEoYSxjKTtiPWMubmFtZTtpZihcInJhZGlvXCI9PT1jLnR5cGUmJm51bGwhPWIpe2ZvcihjPWE7Yy5wYXJlbnROb2RlOyljPWMucGFyZW50Tm9kZTtjPWMucXVlcnlTZWxlY3RvckFsbChcImlucHV0W25hbWU9XCIrSlNPTi5zdHJpbmdpZnkoXCJcIitiKSsnXVt0eXBlPVwicmFkaW9cIl0nKTtmb3IoYj0wO2I8Yy5sZW5ndGg7YisrKXt2YXIgZD1jW2JdO2lmKGQhPT1hJiZkLmZvcm09PT1hLmZvcm0pe3ZhciBlPUFiKGQpO2lmKCFlKXRocm93IEVycm9yKHAoOTApKTtVYShkKTtaYShkLGUpfX19YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6ZmIoYSxjKTticmVhaztjYXNlIFwic2VsZWN0XCI6Yj1jLnZhbHVlLG51bGwhPWImJmNiKGEsISFjLm11bHRpcGxlLGIsITEpfX07RGI9R2s7RWI9SGs7XG52YXIgaWw9e3VzaW5nQ2xpZW50RW50cnlQb2ludDohMSxFdmVudHM6W3piLHBlLEFiLEJiLENiLEdrXX0samw9e2ZpbmRGaWJlckJ5SG9zdEluc3RhbmNlOlNjLGJ1bmRsZVR5cGU6MCx2ZXJzaW9uOlwiMTguMC4wLWZjNDZkYmE2Ny0yMDIyMDMyOVwiLHJlbmRlcmVyUGFja2FnZU5hbWU6XCJyZWFjdC1kb21cIn07XG52YXIga2w9e2J1bmRsZVR5cGU6amwuYnVuZGxlVHlwZSx2ZXJzaW9uOmpsLnZlcnNpb24scmVuZGVyZXJQYWNrYWdlTmFtZTpqbC5yZW5kZXJlclBhY2thZ2VOYW1lLHJlbmRlcmVyQ29uZmlnOmpsLnJlbmRlcmVyQ29uZmlnLG92ZXJyaWRlSG9va1N0YXRlOm51bGwsb3ZlcnJpZGVIb29rU3RhdGVEZWxldGVQYXRoOm51bGwsb3ZlcnJpZGVIb29rU3RhdGVSZW5hbWVQYXRoOm51bGwsb3ZlcnJpZGVQcm9wczpudWxsLG92ZXJyaWRlUHJvcHNEZWxldGVQYXRoOm51bGwsb3ZlcnJpZGVQcm9wc1JlbmFtZVBhdGg6bnVsbCxzZXRFcnJvckhhbmRsZXI6bnVsbCxzZXRTdXNwZW5zZUhhbmRsZXI6bnVsbCxzY2hlZHVsZVVwZGF0ZTpudWxsLGN1cnJlbnREaXNwYXRjaGVyUmVmOnNhLlJlYWN0Q3VycmVudERpc3BhdGNoZXIsZmluZEhvc3RJbnN0YW5jZUJ5RmliZXI6ZnVuY3Rpb24oYSl7YT1XYihhKTtyZXR1cm4gbnVsbD09PWE/bnVsbDphLnN0YXRlTm9kZX0sZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U6amwuZmluZEZpYmVyQnlIb3N0SW5zdGFuY2V8fFxuJGssZmluZEhvc3RJbnN0YW5jZXNGb3JSZWZyZXNoOm51bGwsc2NoZWR1bGVSZWZyZXNoOm51bGwsc2NoZWR1bGVSb290Om51bGwsc2V0UmVmcmVzaEhhbmRsZXI6bnVsbCxnZXRDdXJyZW50RmliZXI6bnVsbCxyZWNvbmNpbGVyVmVyc2lvbjpcIjE4LjAuMC1mYzQ2ZGJhNjctMjAyMjAzMjlcIn07aWYoXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18pe3ZhciBsbD1fX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX187aWYoIWxsLmlzRGlzYWJsZWQmJmxsLnN1cHBvcnRzRmliZXIpdHJ5e2hjPWxsLmluamVjdChrbCksaWM9bGx9Y2F0Y2goYSl7fX1leHBvcnRzLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEPWlsO1xuZXhwb3J0cy5jcmVhdGVQb3J0YWw9ZnVuY3Rpb24oYSxiKXt2YXIgYz0yPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06bnVsbDtpZighZGwoYikpdGhyb3cgRXJyb3IocCgyMDApKTtyZXR1cm4gVGsoYSxiLG51bGwsYyl9O2V4cG9ydHMuY3JlYXRlUm9vdD1mdW5jdGlvbihhLGIpe2lmKCFkbChhKSl0aHJvdyBFcnJvcihwKDI5OSkpO3ZhciBjPSExLGQ9XCJcIixlPWFsO251bGwhPT1iJiZ2b2lkIDAhPT1iJiYoITA9PT1iLnVuc3RhYmxlX3N0cmljdE1vZGUmJihjPSEwKSx2b2lkIDAhPT1iLmlkZW50aWZpZXJQcmVmaXgmJihkPWIuaWRlbnRpZmllclByZWZpeCksdm9pZCAwIT09Yi5vblJlY292ZXJhYmxlRXJyb3ImJihlPWIub25SZWNvdmVyYWJsZUVycm9yKSk7Yj1TayhhLDEsITEsbnVsbCxudWxsLGMsITEsZCxlKTthW3BmXT1iLmN1cnJlbnQ7bmYoOD09PWEubm9kZVR5cGU/YS5wYXJlbnROb2RlOmEpO3JldHVybiBuZXcgYmwoYil9O1xuZXhwb3J0cy5maW5kRE9NTm9kZT1mdW5jdGlvbihhKXtpZihudWxsPT1hKXJldHVybiBudWxsO2lmKDE9PT1hLm5vZGVUeXBlKXJldHVybiBhO3ZhciBiPWEuX3JlYWN0SW50ZXJuYWxzO2lmKHZvaWQgMD09PWIpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhLnJlbmRlcil0aHJvdyBFcnJvcihwKDE4OCkpO2E9T2JqZWN0LmtleXMoYSkuam9pbihcIixcIik7dGhyb3cgRXJyb3IocCgyNjgsYSkpO31hPVdiKGIpO2E9bnVsbD09PWE/bnVsbDphLnN0YXRlTm9kZTtyZXR1cm4gYX07ZXhwb3J0cy5mbHVzaFN5bmM9ZnVuY3Rpb24oYSl7cmV0dXJuIEhrKGEpfTtleHBvcnRzLmh5ZHJhdGU9ZnVuY3Rpb24oYSxiLGMpe2lmKCFlbChiKSl0aHJvdyBFcnJvcihwKDIwMCkpO3JldHVybiBobChudWxsLGEsYiwhMCxjKX07XG5leHBvcnRzLmh5ZHJhdGVSb290PWZ1bmN0aW9uKGEsYixjKXtpZighZGwoYSkpdGhyb3cgRXJyb3IocCg0MDUpKTt2YXIgZD1udWxsIT1jJiZjLmh5ZHJhdGVkU291cmNlc3x8bnVsbCxlPSExLGY9XCJcIixnPWFsO251bGwhPT1jJiZ2b2lkIDAhPT1jJiYoITA9PT1jLnVuc3RhYmxlX3N0cmljdE1vZGUmJihlPSEwKSx2b2lkIDAhPT1jLmlkZW50aWZpZXJQcmVmaXgmJihmPWMuaWRlbnRpZmllclByZWZpeCksdm9pZCAwIT09Yy5vblJlY292ZXJhYmxlRXJyb3ImJihnPWMub25SZWNvdmVyYWJsZUVycm9yKSk7Yj1WayhiLG51bGwsYSwxLG51bGwhPWM/YzpudWxsLGUsITEsZixnKTthW3BmXT1iLmN1cnJlbnQ7bmYoYSk7aWYoZClmb3IoYT0wO2E8ZC5sZW5ndGg7YSsrKWM9ZFthXSxlPWMuX2dldFZlcnNpb24sZT1lKGMuX3NvdXJjZSksbnVsbD09Yi5tdXRhYmxlU291cmNlRWFnZXJIeWRyYXRpb25EYXRhP2IubXV0YWJsZVNvdXJjZUVhZ2VySHlkcmF0aW9uRGF0YT1bYyxlXTpiLm11dGFibGVTb3VyY2VFYWdlckh5ZHJhdGlvbkRhdGEucHVzaChjLFxuZSk7cmV0dXJuIG5ldyBjbChiKX07ZXhwb3J0cy5yZW5kZXI9ZnVuY3Rpb24oYSxiLGMpe2lmKCFlbChiKSl0aHJvdyBFcnJvcihwKDIwMCkpO3JldHVybiBobChudWxsLGEsYiwhMSxjKX07ZXhwb3J0cy51bm1vdW50Q29tcG9uZW50QXROb2RlPWZ1bmN0aW9uKGEpe2lmKCFlbChhKSl0aHJvdyBFcnJvcihwKDQwKSk7cmV0dXJuIGEuX3JlYWN0Um9vdENvbnRhaW5lcj8oSGsoZnVuY3Rpb24oKXtobChudWxsLG51bGwsYSwhMSxmdW5jdGlvbigpe2EuX3JlYWN0Um9vdENvbnRhaW5lcj1udWxsO2FbcGZdPW51bGx9KX0pLCEwKTohMX07ZXhwb3J0cy51bnN0YWJsZV9iYXRjaGVkVXBkYXRlcz1HaztcbmV4cG9ydHMudW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXI9ZnVuY3Rpb24oYSxiLGMsZCl7aWYoIWVsKGMpKXRocm93IEVycm9yKHAoMjAwKSk7aWYobnVsbD09YXx8dm9pZCAwPT09YS5fcmVhY3RJbnRlcm5hbHMpdGhyb3cgRXJyb3IocCgzOCkpO3JldHVybiBobChhLGIsYywhMSxkKX07ZXhwb3J0cy52ZXJzaW9uPVwiMTguMC4wLWZjNDZkYmE2Ny0yMDIyMDMyOVwiO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgbSA9IHJlcXVpcmUoJ3JlYWN0LWRvbScpO1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgZXhwb3J0cy5jcmVhdGVSb290ID0gbS5jcmVhdGVSb290O1xuICBleHBvcnRzLmh5ZHJhdGVSb290ID0gbS5oeWRyYXRlUm9vdDtcbn0gZWxzZSB7XG4gIHZhciBpID0gbS5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRDtcbiAgZXhwb3J0cy5jcmVhdGVSb290ID0gZnVuY3Rpb24oYywgbykge1xuICAgIGkudXNpbmdDbGllbnRFbnRyeVBvaW50ID0gdHJ1ZTtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIG0uY3JlYXRlUm9vdChjLCBvKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgaS51c2luZ0NsaWVudEVudHJ5UG9pbnQgPSBmYWxzZTtcbiAgICB9XG4gIH07XG4gIGV4cG9ydHMuaHlkcmF0ZVJvb3QgPSBmdW5jdGlvbihjLCBoLCBvKSB7XG4gICAgaS51c2luZ0NsaWVudEVudHJ5UG9pbnQgPSB0cnVlO1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gbS5oeWRyYXRlUm9vdChjLCBoLCBvKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgaS51c2luZ0NsaWVudEVudHJ5UG9pbnQgPSBmYWxzZTtcbiAgICB9XG4gIH07XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIGNoZWNrRENFKCkge1xuICAvKiBnbG9iYWwgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fICovXG4gIGlmIChcbiAgICB0eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fID09PSAndW5kZWZpbmVkJyB8fFxuICAgIHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18uY2hlY2tEQ0UgIT09ICdmdW5jdGlvbidcbiAgKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgLy8gVGhpcyBicmFuY2ggaXMgdW5yZWFjaGFibGUgYmVjYXVzZSB0aGlzIGZ1bmN0aW9uIGlzIG9ubHkgY2FsbGVkXG4gICAgLy8gaW4gcHJvZHVjdGlvbiwgYnV0IHRoZSBjb25kaXRpb24gaXMgdHJ1ZSBvbmx5IGluIGRldmVsb3BtZW50LlxuICAgIC8vIFRoZXJlZm9yZSBpZiB0aGUgYnJhbmNoIGlzIHN0aWxsIGhlcmUsIGRlYWQgY29kZSBlbGltaW5hdGlvbiB3YXNuJ3RcbiAgICAvLyBwcm9wZXJseSBhcHBsaWVkLlxuICAgIC8vIERvbid0IGNoYW5nZSB0aGUgbWVzc2FnZS4gUmVhY3QgRGV2VG9vbHMgcmVsaWVzIG9uIGl0LiBBbHNvIG1ha2Ugc3VyZVxuICAgIC8vIHRoaXMgbWVzc2FnZSBkb2Vzbid0IG9jY3VyIGVsc2V3aGVyZSBpbiB0aGlzIGZ1bmN0aW9uLCBvciBpdCB3aWxsIGNhdXNlXG4gICAgLy8gYSBmYWxzZSBwb3NpdGl2ZS5cbiAgICB0aHJvdyBuZXcgRXJyb3IoJ15fXicpO1xuICB9XG4gIHRyeSB7XG4gICAgLy8gVmVyaWZ5IHRoYXQgdGhlIGNvZGUgYWJvdmUgaGFzIGJlZW4gZGVhZCBjb2RlIGVsaW1pbmF0ZWQgKERDRSdkKS5cbiAgICBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18uY2hlY2tEQ0UoY2hlY2tEQ0UpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICAvLyBEZXZUb29scyBzaG91bGRuJ3QgY3Jhc2ggUmVhY3QsIG5vIG1hdHRlciB3aGF0LlxuICAgIC8vIFdlIHNob3VsZCBzdGlsbCByZXBvcnQgaW4gY2FzZSB3ZSBicmVhayB0aGlzIGNvZGUuXG4gICAgY29uc29sZS5lcnJvcihlcnIpO1xuICB9XG59XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIC8vIERDRSBjaGVjayBzaG91bGQgaGFwcGVuIGJlZm9yZSBSZWFjdERPTSBidW5kbGUgZXhlY3V0ZXMgc28gdGhhdFxuICAvLyBEZXZUb29scyBjYW4gcmVwb3J0IGJhZCBtaW5pZmljYXRpb24gZHVyaW5nIGluamVjdGlvbi5cbiAgY2hlY2tEQ0UoKTtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtZG9tLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIvKipcbiAqIEBsaWNlbnNlIFJlYWN0XG4gKiByZWFjdC1qc3gtcnVudGltZS5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG4ndXNlIHN0cmljdCc7dmFyIGY9cmVxdWlyZShcInJlYWN0XCIpLGs9U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIiksbD1TeW1ib2wuZm9yKFwicmVhY3QuZnJhZ21lbnRcIiksbT1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LG49Zi5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRC5SZWFjdEN1cnJlbnRPd25lcixwPXtrZXk6ITAscmVmOiEwLF9fc2VsZjohMCxfX3NvdXJjZTohMH07XG5mdW5jdGlvbiBxKGMsYSxnKXt2YXIgYixkPXt9LGU9bnVsbCxoPW51bGw7dm9pZCAwIT09ZyYmKGU9XCJcIitnKTt2b2lkIDAhPT1hLmtleSYmKGU9XCJcIithLmtleSk7dm9pZCAwIT09YS5yZWYmJihoPWEucmVmKTtmb3IoYiBpbiBhKW0uY2FsbChhLGIpJiYhcC5oYXNPd25Qcm9wZXJ0eShiKSYmKGRbYl09YVtiXSk7aWYoYyYmYy5kZWZhdWx0UHJvcHMpZm9yKGIgaW4gYT1jLmRlZmF1bHRQcm9wcyxhKXZvaWQgMD09PWRbYl0mJihkW2JdPWFbYl0pO3JldHVybnskJHR5cGVvZjprLHR5cGU6YyxrZXk6ZSxyZWY6aCxwcm9wczpkLF9vd25lcjpuLmN1cnJlbnR9fWV4cG9ydHMuRnJhZ21lbnQ9bDtleHBvcnRzLmpzeD1xO2V4cG9ydHMuanN4cz1xO1xuIiwiLyoqXG4gKiBAbGljZW5zZSBSZWFjdFxuICogcmVhY3QucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuJ3VzZSBzdHJpY3QnO3ZhciBsPVN5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpLG49U3ltYm9sLmZvcihcInJlYWN0LnBvcnRhbFwiKSxwPVN5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKSxxPVN5bWJvbC5mb3IoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKSxyPVN5bWJvbC5mb3IoXCJyZWFjdC5wcm9maWxlclwiKSx0PVN5bWJvbC5mb3IoXCJyZWFjdC5wcm92aWRlclwiKSx1PVN5bWJvbC5mb3IoXCJyZWFjdC5jb250ZXh0XCIpLHY9U3ltYm9sLmZvcihcInJlYWN0LmZvcndhcmRfcmVmXCIpLHc9U3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlXCIpLHg9U3ltYm9sLmZvcihcInJlYWN0Lm1lbW9cIikseT1TeW1ib2wuZm9yKFwicmVhY3QubGF6eVwiKSx6PVN5bWJvbC5pdGVyYXRvcjtmdW5jdGlvbiBBKGEpe2lmKG51bGw9PT1hfHxcIm9iamVjdFwiIT09dHlwZW9mIGEpcmV0dXJuIG51bGw7YT16JiZhW3pdfHxhW1wiQEBpdGVyYXRvclwiXTtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYT9hOm51bGx9XG52YXIgQj17aXNNb3VudGVkOmZ1bmN0aW9uKCl7cmV0dXJuITF9LGVucXVldWVGb3JjZVVwZGF0ZTpmdW5jdGlvbigpe30sZW5xdWV1ZVJlcGxhY2VTdGF0ZTpmdW5jdGlvbigpe30sZW5xdWV1ZVNldFN0YXRlOmZ1bmN0aW9uKCl7fX0sQz1PYmplY3QuYXNzaWduLEQ9e307ZnVuY3Rpb24gRShhLGIsZSl7dGhpcy5wcm9wcz1hO3RoaXMuY29udGV4dD1iO3RoaXMucmVmcz1EO3RoaXMudXBkYXRlcj1lfHxCfUUucHJvdG90eXBlLmlzUmVhY3RDb21wb25lbnQ9e307XG5FLnByb3RvdHlwZS5zZXRTdGF0ZT1mdW5jdGlvbihhLGIpe2lmKFwib2JqZWN0XCIhPT10eXBlb2YgYSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGEmJm51bGwhPWEpdGhyb3cgRXJyb3IoXCJzZXRTdGF0ZSguLi4pOiB0YWtlcyBhbiBvYmplY3Qgb2Ygc3RhdGUgdmFyaWFibGVzIHRvIHVwZGF0ZSBvciBhIGZ1bmN0aW9uIHdoaWNoIHJldHVybnMgYW4gb2JqZWN0IG9mIHN0YXRlIHZhcmlhYmxlcy5cIik7dGhpcy51cGRhdGVyLmVucXVldWVTZXRTdGF0ZSh0aGlzLGEsYixcInNldFN0YXRlXCIpfTtFLnByb3RvdHlwZS5mb3JjZVVwZGF0ZT1mdW5jdGlvbihhKXt0aGlzLnVwZGF0ZXIuZW5xdWV1ZUZvcmNlVXBkYXRlKHRoaXMsYSxcImZvcmNlVXBkYXRlXCIpfTtmdW5jdGlvbiBGKCl7fUYucHJvdG90eXBlPUUucHJvdG90eXBlO2Z1bmN0aW9uIEcoYSxiLGUpe3RoaXMucHJvcHM9YTt0aGlzLmNvbnRleHQ9Yjt0aGlzLnJlZnM9RDt0aGlzLnVwZGF0ZXI9ZXx8Qn12YXIgSD1HLnByb3RvdHlwZT1uZXcgRjtcbkguY29uc3RydWN0b3I9RztDKEgsRS5wcm90b3R5cGUpO0guaXNQdXJlUmVhY3RDb21wb25lbnQ9ITA7dmFyIEk9QXJyYXkuaXNBcnJheSxKPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksSz17Y3VycmVudDpudWxsfSxMPXtrZXk6ITAscmVmOiEwLF9fc2VsZjohMCxfX3NvdXJjZTohMH07XG5mdW5jdGlvbiBNKGEsYixlKXt2YXIgZCxjPXt9LGs9bnVsbCxoPW51bGw7aWYobnVsbCE9Yilmb3IoZCBpbiB2b2lkIDAhPT1iLnJlZiYmKGg9Yi5yZWYpLHZvaWQgMCE9PWIua2V5JiYoaz1cIlwiK2Iua2V5KSxiKUouY2FsbChiLGQpJiYhTC5oYXNPd25Qcm9wZXJ0eShkKSYmKGNbZF09YltkXSk7dmFyIGc9YXJndW1lbnRzLmxlbmd0aC0yO2lmKDE9PT1nKWMuY2hpbGRyZW49ZTtlbHNlIGlmKDE8Zyl7Zm9yKHZhciBmPUFycmF5KGcpLG09MDttPGc7bSsrKWZbbV09YXJndW1lbnRzW20rMl07Yy5jaGlsZHJlbj1mfWlmKGEmJmEuZGVmYXVsdFByb3BzKWZvcihkIGluIGc9YS5kZWZhdWx0UHJvcHMsZyl2b2lkIDA9PT1jW2RdJiYoY1tkXT1nW2RdKTtyZXR1cm57JCR0eXBlb2Y6bCx0eXBlOmEsa2V5OmsscmVmOmgscHJvcHM6Yyxfb3duZXI6Sy5jdXJyZW50fX1cbmZ1bmN0aW9uIE4oYSxiKXtyZXR1cm57JCR0eXBlb2Y6bCx0eXBlOmEudHlwZSxrZXk6YixyZWY6YS5yZWYscHJvcHM6YS5wcm9wcyxfb3duZXI6YS5fb3duZXJ9fWZ1bmN0aW9uIE8oYSl7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmYS4kJHR5cGVvZj09PWx9ZnVuY3Rpb24gZXNjYXBlKGEpe3ZhciBiPXtcIj1cIjpcIj0wXCIsXCI6XCI6XCI9MlwifTtyZXR1cm5cIiRcIithLnJlcGxhY2UoL1s9Ol0vZyxmdW5jdGlvbihhKXtyZXR1cm4gYlthXX0pfXZhciBQPS9cXC8rL2c7ZnVuY3Rpb24gUShhLGIpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJm51bGwhPWEua2V5P2VzY2FwZShcIlwiK2Eua2V5KTpiLnRvU3RyaW5nKDM2KX1cbmZ1bmN0aW9uIFIoYSxiLGUsZCxjKXt2YXIgaz10eXBlb2YgYTtpZihcInVuZGVmaW5lZFwiPT09a3x8XCJib29sZWFuXCI9PT1rKWE9bnVsbDt2YXIgaD0hMTtpZihudWxsPT09YSloPSEwO2Vsc2Ugc3dpdGNoKGspe2Nhc2UgXCJzdHJpbmdcIjpjYXNlIFwibnVtYmVyXCI6aD0hMDticmVhaztjYXNlIFwib2JqZWN0XCI6c3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgbDpjYXNlIG46aD0hMH19aWYoaClyZXR1cm4gaD1hLGM9YyhoKSxhPVwiXCI9PT1kP1wiLlwiK1EoaCwwKTpkLEkoYyk/KGU9XCJcIixudWxsIT1hJiYoZT1hLnJlcGxhY2UoUCxcIiQmL1wiKStcIi9cIiksUihjLGIsZSxcIlwiLGZ1bmN0aW9uKGEpe3JldHVybiBhfSkpOm51bGwhPWMmJihPKGMpJiYoYz1OKGMsZSsoIWMua2V5fHxoJiZoLmtleT09PWMua2V5P1wiXCI6KFwiXCIrYy5rZXkpLnJlcGxhY2UoUCxcIiQmL1wiKStcIi9cIikrYSkpLGIucHVzaChjKSksMTtoPTA7ZD1cIlwiPT09ZD9cIi5cIjpkK1wiOlwiO2lmKEkoYSkpZm9yKHZhciBnPTA7ZzxhLmxlbmd0aDtnKyspe2s9XG5hW2ddO3ZhciBmPWQrUShrLGcpO2grPVIoayxiLGUsZixjKX1lbHNlIGlmKGY9QShhKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZilmb3IoYT1mLmNhbGwoYSksZz0wOyEoaz1hLm5leHQoKSkuZG9uZTspaz1rLnZhbHVlLGY9ZCtRKGssZysrKSxoKz1SKGssYixlLGYsYyk7ZWxzZSBpZihcIm9iamVjdFwiPT09ayl0aHJvdyBiPVN0cmluZyhhKSxFcnJvcihcIk9iamVjdHMgYXJlIG5vdCB2YWxpZCBhcyBhIFJlYWN0IGNoaWxkIChmb3VuZDogXCIrKFwiW29iamVjdCBPYmplY3RdXCI9PT1iP1wib2JqZWN0IHdpdGgga2V5cyB7XCIrT2JqZWN0LmtleXMoYSkuam9pbihcIiwgXCIpK1wifVwiOmIpK1wiKS4gSWYgeW91IG1lYW50IHRvIHJlbmRlciBhIGNvbGxlY3Rpb24gb2YgY2hpbGRyZW4sIHVzZSBhbiBhcnJheSBpbnN0ZWFkLlwiKTtyZXR1cm4gaH1cbmZ1bmN0aW9uIFMoYSxiLGUpe2lmKG51bGw9PWEpcmV0dXJuIGE7dmFyIGQ9W10sYz0wO1IoYSxkLFwiXCIsXCJcIixmdW5jdGlvbihhKXtyZXR1cm4gYi5jYWxsKGUsYSxjKyspfSk7cmV0dXJuIGR9ZnVuY3Rpb24gVChhKXtpZigtMT09PWEuX3N0YXR1cyl7dmFyIGI9YS5fcmVzdWx0O2I9YigpO2IudGhlbihmdW5jdGlvbihiKXtpZigwPT09YS5fc3RhdHVzfHwtMT09PWEuX3N0YXR1cylhLl9zdGF0dXM9MSxhLl9yZXN1bHQ9Yn0sZnVuY3Rpb24oYil7aWYoMD09PWEuX3N0YXR1c3x8LTE9PT1hLl9zdGF0dXMpYS5fc3RhdHVzPTIsYS5fcmVzdWx0PWJ9KTstMT09PWEuX3N0YXR1cyYmKGEuX3N0YXR1cz0wLGEuX3Jlc3VsdD1iKX1pZigxPT09YS5fc3RhdHVzKXJldHVybiBhLl9yZXN1bHQuZGVmYXVsdDt0aHJvdyBhLl9yZXN1bHQ7fVxudmFyIFU9e2N1cnJlbnQ6bnVsbH0sVj17dHJhbnNpdGlvbjpudWxsfSxXPXtSZWFjdEN1cnJlbnREaXNwYXRjaGVyOlUsUmVhY3RDdXJyZW50QmF0Y2hDb25maWc6VixSZWFjdEN1cnJlbnRPd25lcjpLfTtleHBvcnRzLkNoaWxkcmVuPXttYXA6Uyxmb3JFYWNoOmZ1bmN0aW9uKGEsYixlKXtTKGEsZnVuY3Rpb24oKXtiLmFwcGx5KHRoaXMsYXJndW1lbnRzKX0sZSl9LGNvdW50OmZ1bmN0aW9uKGEpe3ZhciBiPTA7UyhhLGZ1bmN0aW9uKCl7YisrfSk7cmV0dXJuIGJ9LHRvQXJyYXk6ZnVuY3Rpb24oYSl7cmV0dXJuIFMoYSxmdW5jdGlvbihhKXtyZXR1cm4gYX0pfHxbXX0sb25seTpmdW5jdGlvbihhKXtpZighTyhhKSl0aHJvdyBFcnJvcihcIlJlYWN0LkNoaWxkcmVuLm9ubHkgZXhwZWN0ZWQgdG8gcmVjZWl2ZSBhIHNpbmdsZSBSZWFjdCBlbGVtZW50IGNoaWxkLlwiKTtyZXR1cm4gYX19O2V4cG9ydHMuQ29tcG9uZW50PUU7ZXhwb3J0cy5GcmFnbWVudD1wO1xuZXhwb3J0cy5Qcm9maWxlcj1yO2V4cG9ydHMuUHVyZUNvbXBvbmVudD1HO2V4cG9ydHMuU3RyaWN0TW9kZT1xO2V4cG9ydHMuU3VzcGVuc2U9dztleHBvcnRzLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEPVc7XG5leHBvcnRzLmNsb25lRWxlbWVudD1mdW5jdGlvbihhLGIsZSl7aWYobnVsbD09PWF8fHZvaWQgMD09PWEpdGhyb3cgRXJyb3IoXCJSZWFjdC5jbG9uZUVsZW1lbnQoLi4uKTogVGhlIGFyZ3VtZW50IG11c3QgYmUgYSBSZWFjdCBlbGVtZW50LCBidXQgeW91IHBhc3NlZCBcIithK1wiLlwiKTt2YXIgZD1DKHt9LGEucHJvcHMpLGM9YS5rZXksaz1hLnJlZixoPWEuX293bmVyO2lmKG51bGwhPWIpe3ZvaWQgMCE9PWIucmVmJiYoaz1iLnJlZixoPUsuY3VycmVudCk7dm9pZCAwIT09Yi5rZXkmJihjPVwiXCIrYi5rZXkpO2lmKGEudHlwZSYmYS50eXBlLmRlZmF1bHRQcm9wcyl2YXIgZz1hLnR5cGUuZGVmYXVsdFByb3BzO2ZvcihmIGluIGIpSi5jYWxsKGIsZikmJiFMLmhhc093blByb3BlcnR5KGYpJiYoZFtmXT12b2lkIDA9PT1iW2ZdJiZ2b2lkIDAhPT1nP2dbZl06YltmXSl9dmFyIGY9YXJndW1lbnRzLmxlbmd0aC0yO2lmKDE9PT1mKWQuY2hpbGRyZW49ZTtlbHNlIGlmKDE8Zil7Zz1BcnJheShmKTtcbmZvcih2YXIgbT0wO208ZjttKyspZ1ttXT1hcmd1bWVudHNbbSsyXTtkLmNoaWxkcmVuPWd9cmV0dXJueyQkdHlwZW9mOmwsdHlwZTphLnR5cGUsa2V5OmMscmVmOmsscHJvcHM6ZCxfb3duZXI6aH19O2V4cG9ydHMuY3JlYXRlQ29udGV4dD1mdW5jdGlvbihhKXthPXskJHR5cGVvZjp1LF9jdXJyZW50VmFsdWU6YSxfY3VycmVudFZhbHVlMjphLF90aHJlYWRDb3VudDowLFByb3ZpZGVyOm51bGwsQ29uc3VtZXI6bnVsbCxfZGVmYXVsdFZhbHVlOm51bGwsX2dsb2JhbE5hbWU6bnVsbH07YS5Qcm92aWRlcj17JCR0eXBlb2Y6dCxfY29udGV4dDphfTtyZXR1cm4gYS5Db25zdW1lcj1hfTtleHBvcnRzLmNyZWF0ZUVsZW1lbnQ9TTtleHBvcnRzLmNyZWF0ZUZhY3Rvcnk9ZnVuY3Rpb24oYSl7dmFyIGI9TS5iaW5kKG51bGwsYSk7Yi50eXBlPWE7cmV0dXJuIGJ9O2V4cG9ydHMuY3JlYXRlUmVmPWZ1bmN0aW9uKCl7cmV0dXJue2N1cnJlbnQ6bnVsbH19O1xuZXhwb3J0cy5mb3J3YXJkUmVmPWZ1bmN0aW9uKGEpe3JldHVybnskJHR5cGVvZjp2LHJlbmRlcjphfX07ZXhwb3J0cy5pc1ZhbGlkRWxlbWVudD1PO2V4cG9ydHMubGF6eT1mdW5jdGlvbihhKXtyZXR1cm57JCR0eXBlb2Y6eSxfcGF5bG9hZDp7X3N0YXR1czotMSxfcmVzdWx0OmF9LF9pbml0OlR9fTtleHBvcnRzLm1lbW89ZnVuY3Rpb24oYSxiKXtyZXR1cm57JCR0eXBlb2Y6eCx0eXBlOmEsY29tcGFyZTp2b2lkIDA9PT1iP251bGw6Yn19O2V4cG9ydHMuc3RhcnRUcmFuc2l0aW9uPWZ1bmN0aW9uKGEpe3ZhciBiPVYudHJhbnNpdGlvbjtWLnRyYW5zaXRpb249e307dHJ5e2EoKX1maW5hbGx5e1YudHJhbnNpdGlvbj1ifX07ZXhwb3J0cy51bnN0YWJsZV9hY3Q9ZnVuY3Rpb24oKXt0aHJvdyBFcnJvcihcImFjdCguLi4pIGlzIG5vdCBzdXBwb3J0ZWQgaW4gcHJvZHVjdGlvbiBidWlsZHMgb2YgUmVhY3QuXCIpO307XG5leHBvcnRzLnVzZUNhbGxiYWNrPWZ1bmN0aW9uKGEsYil7cmV0dXJuIFUuY3VycmVudC51c2VDYWxsYmFjayhhLGIpfTtleHBvcnRzLnVzZUNvbnRleHQ9ZnVuY3Rpb24oYSl7cmV0dXJuIFUuY3VycmVudC51c2VDb250ZXh0KGEpfTtleHBvcnRzLnVzZURlYnVnVmFsdWU9ZnVuY3Rpb24oKXt9O2V4cG9ydHMudXNlRGVmZXJyZWRWYWx1ZT1mdW5jdGlvbihhKXtyZXR1cm4gVS5jdXJyZW50LnVzZURlZmVycmVkVmFsdWUoYSl9O2V4cG9ydHMudXNlRWZmZWN0PWZ1bmN0aW9uKGEsYil7cmV0dXJuIFUuY3VycmVudC51c2VFZmZlY3QoYSxiKX07ZXhwb3J0cy51c2VJZD1mdW5jdGlvbigpe3JldHVybiBVLmN1cnJlbnQudXNlSWQoKX07ZXhwb3J0cy51c2VJbXBlcmF0aXZlSGFuZGxlPWZ1bmN0aW9uKGEsYixlKXtyZXR1cm4gVS5jdXJyZW50LnVzZUltcGVyYXRpdmVIYW5kbGUoYSxiLGUpfTtcbmV4cG9ydHMudXNlSW5zZXJ0aW9uRWZmZWN0PWZ1bmN0aW9uKGEsYil7cmV0dXJuIFUuY3VycmVudC51c2VJbnNlcnRpb25FZmZlY3QoYSxiKX07ZXhwb3J0cy51c2VMYXlvdXRFZmZlY3Q9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVS5jdXJyZW50LnVzZUxheW91dEVmZmVjdChhLGIpfTtleHBvcnRzLnVzZU1lbW89ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVS5jdXJyZW50LnVzZU1lbW8oYSxiKX07ZXhwb3J0cy51c2VSZWR1Y2VyPWZ1bmN0aW9uKGEsYixlKXtyZXR1cm4gVS5jdXJyZW50LnVzZVJlZHVjZXIoYSxiLGUpfTtleHBvcnRzLnVzZVJlZj1mdW5jdGlvbihhKXtyZXR1cm4gVS5jdXJyZW50LnVzZVJlZihhKX07ZXhwb3J0cy51c2VTdGF0ZT1mdW5jdGlvbihhKXtyZXR1cm4gVS5jdXJyZW50LnVzZVN0YXRlKGEpfTtleHBvcnRzLnVzZVN5bmNFeHRlcm5hbFN0b3JlPWZ1bmN0aW9uKGEsYixlKXtyZXR1cm4gVS5jdXJyZW50LnVzZVN5bmNFeHRlcm5hbFN0b3JlKGEsYixlKX07XG5leHBvcnRzLnVzZVRyYW5zaXRpb249ZnVuY3Rpb24oKXtyZXR1cm4gVS5jdXJyZW50LnVzZVRyYW5zaXRpb24oKX07ZXhwb3J0cy52ZXJzaW9uPVwiMTguMC4wLWZjNDZkYmE2Ny0yMDIyMDMyOVwiO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtanN4LXJ1bnRpbWUucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtanN4LXJ1bnRpbWUuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIi8qKlxuICogQGxpY2Vuc2UgUmVhY3RcbiAqIHNjaGVkdWxlci5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG4ndXNlIHN0cmljdCc7ZnVuY3Rpb24gZihhLGIpe3ZhciBjPWEubGVuZ3RoO2EucHVzaChiKTthOmZvcig7MDxjOyl7dmFyIGQ9Yy0xPj4+MSxlPWFbZF07aWYoMDxnKGUsYikpYVtkXT1iLGFbY109ZSxjPWQ7ZWxzZSBicmVhayBhfX1mdW5jdGlvbiBoKGEpe3JldHVybiAwPT09YS5sZW5ndGg/bnVsbDphWzBdfWZ1bmN0aW9uIGsoYSl7aWYoMD09PWEubGVuZ3RoKXJldHVybiBudWxsO3ZhciBiPWFbMF0sYz1hLnBvcCgpO2lmKGMhPT1iKXthWzBdPWM7YTpmb3IodmFyIGQ9MCxlPWEubGVuZ3RoLHc9ZT4+PjE7ZDx3Oyl7dmFyIG09MiooZCsxKS0xLEM9YVttXSxuPW0rMSx4PWFbbl07aWYoMD5nKEMsYykpbjxlJiYwPmcoeCxDKT8oYVtkXT14LGFbbl09YyxkPW4pOihhW2RdPUMsYVttXT1jLGQ9bSk7ZWxzZSBpZihuPGUmJjA+Zyh4LGMpKWFbZF09eCxhW25dPWMsZD1uO2Vsc2UgYnJlYWsgYX19cmV0dXJuIGJ9XG5mdW5jdGlvbiBnKGEsYil7dmFyIGM9YS5zb3J0SW5kZXgtYi5zb3J0SW5kZXg7cmV0dXJuIDAhPT1jP2M6YS5pZC1iLmlkfWlmKFwib2JqZWN0XCI9PT10eXBlb2YgcGVyZm9ybWFuY2UmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBwZXJmb3JtYW5jZS5ub3cpe3ZhciBsPXBlcmZvcm1hbmNlO2V4cG9ydHMudW5zdGFibGVfbm93PWZ1bmN0aW9uKCl7cmV0dXJuIGwubm93KCl9fWVsc2V7dmFyIHA9RGF0ZSxxPXAubm93KCk7ZXhwb3J0cy51bnN0YWJsZV9ub3c9ZnVuY3Rpb24oKXtyZXR1cm4gcC5ub3coKS1xfX12YXIgcj1bXSx0PVtdLHU9MSx2PW51bGwseT0zLHo9ITEsQT0hMSxCPSExLEQ9XCJmdW5jdGlvblwiPT09dHlwZW9mIHNldFRpbWVvdXQ/c2V0VGltZW91dDpudWxsLEU9XCJmdW5jdGlvblwiPT09dHlwZW9mIGNsZWFyVGltZW91dD9jbGVhclRpbWVvdXQ6bnVsbCxGPVwidW5kZWZpbmVkXCIhPT10eXBlb2Ygc2V0SW1tZWRpYXRlP3NldEltbWVkaWF0ZTpudWxsO1xuXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBuYXZpZ2F0b3ImJnZvaWQgMCE9PW5hdmlnYXRvci5zY2hlZHVsaW5nJiZ2b2lkIDAhPT1uYXZpZ2F0b3Iuc2NoZWR1bGluZy5pc0lucHV0UGVuZGluZyYmbmF2aWdhdG9yLnNjaGVkdWxpbmcuaXNJbnB1dFBlbmRpbmcuYmluZChuYXZpZ2F0b3Iuc2NoZWR1bGluZyk7ZnVuY3Rpb24gRyhhKXtmb3IodmFyIGI9aCh0KTtudWxsIT09Yjspe2lmKG51bGw9PT1iLmNhbGxiYWNrKWsodCk7ZWxzZSBpZihiLnN0YXJ0VGltZTw9YSlrKHQpLGIuc29ydEluZGV4PWIuZXhwaXJhdGlvblRpbWUsZihyLGIpO2Vsc2UgYnJlYWs7Yj1oKHQpfX1mdW5jdGlvbiBIKGEpe0I9ITE7RyhhKTtpZighQSlpZihudWxsIT09aChyKSlBPSEwLEkoSik7ZWxzZXt2YXIgYj1oKHQpO251bGwhPT1iJiZLKEgsYi5zdGFydFRpbWUtYSl9fVxuZnVuY3Rpb24gSihhLGIpe0E9ITE7QiYmKEI9ITEsRShMKSxMPS0xKTt6PSEwO3ZhciBjPXk7dHJ5e0coYik7Zm9yKHY9aChyKTtudWxsIT09diYmKCEodi5leHBpcmF0aW9uVGltZT5iKXx8YSYmIU0oKSk7KXt2YXIgZD12LmNhbGxiYWNrO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkKXt2LmNhbGxiYWNrPW51bGw7eT12LnByaW9yaXR5TGV2ZWw7dmFyIGU9ZCh2LmV4cGlyYXRpb25UaW1lPD1iKTtiPWV4cG9ydHMudW5zdGFibGVfbm93KCk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGU/di5jYWxsYmFjaz1lOnY9PT1oKHIpJiZrKHIpO0coYil9ZWxzZSBrKHIpO3Y9aChyKX1pZihudWxsIT09dil2YXIgdz0hMDtlbHNle3ZhciBtPWgodCk7bnVsbCE9PW0mJksoSCxtLnN0YXJ0VGltZS1iKTt3PSExfXJldHVybiB3fWZpbmFsbHl7dj1udWxsLHk9Yyx6PSExfX12YXIgTj0hMSxPPW51bGwsTD0tMSxQPTUsUT0tMTtcbmZ1bmN0aW9uIE0oKXtyZXR1cm4gZXhwb3J0cy51bnN0YWJsZV9ub3coKS1RPFA/ITE6ITB9ZnVuY3Rpb24gUigpe2lmKG51bGwhPT1PKXt2YXIgYT1leHBvcnRzLnVuc3RhYmxlX25vdygpO1E9YTt2YXIgYj0hMDt0cnl7Yj1PKCEwLGEpfWZpbmFsbHl7Yj9TKCk6KE49ITEsTz1udWxsKX19ZWxzZSBOPSExfXZhciBTO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBGKVM9ZnVuY3Rpb24oKXtGKFIpfTtlbHNlIGlmKFwidW5kZWZpbmVkXCIhPT10eXBlb2YgTWVzc2FnZUNoYW5uZWwpe3ZhciBUPW5ldyBNZXNzYWdlQ2hhbm5lbCxVPVQucG9ydDI7VC5wb3J0MS5vbm1lc3NhZ2U9UjtTPWZ1bmN0aW9uKCl7VS5wb3N0TWVzc2FnZShudWxsKX19ZWxzZSBTPWZ1bmN0aW9uKCl7RChSLDApfTtmdW5jdGlvbiBJKGEpe089YTtOfHwoTj0hMCxTKCkpfWZ1bmN0aW9uIEsoYSxiKXtMPUQoZnVuY3Rpb24oKXthKGV4cG9ydHMudW5zdGFibGVfbm93KCkpfSxiKX1cbmV4cG9ydHMudW5zdGFibGVfSWRsZVByaW9yaXR5PTU7ZXhwb3J0cy51bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eT0xO2V4cG9ydHMudW5zdGFibGVfTG93UHJpb3JpdHk9NDtleHBvcnRzLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5PTM7ZXhwb3J0cy51bnN0YWJsZV9Qcm9maWxpbmc9bnVsbDtleHBvcnRzLnVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5PTI7ZXhwb3J0cy51bnN0YWJsZV9jYW5jZWxDYWxsYmFjaz1mdW5jdGlvbihhKXthLmNhbGxiYWNrPW51bGx9O2V4cG9ydHMudW5zdGFibGVfY29udGludWVFeGVjdXRpb249ZnVuY3Rpb24oKXtBfHx6fHwoQT0hMCxJKEopKX07XG5leHBvcnRzLnVuc3RhYmxlX2ZvcmNlRnJhbWVSYXRlPWZ1bmN0aW9uKGEpezA+YXx8MTI1PGE/Y29uc29sZS5lcnJvcihcImZvcmNlRnJhbWVSYXRlIHRha2VzIGEgcG9zaXRpdmUgaW50IGJldHdlZW4gMCBhbmQgMTI1LCBmb3JjaW5nIGZyYW1lIHJhdGVzIGhpZ2hlciB0aGFuIDEyNSBmcHMgaXMgbm90IHN1cHBvcnRlZFwiKTpQPTA8YT9NYXRoLmZsb29yKDFFMy9hKTo1fTtleHBvcnRzLnVuc3RhYmxlX2dldEN1cnJlbnRQcmlvcml0eUxldmVsPWZ1bmN0aW9uKCl7cmV0dXJuIHl9O2V4cG9ydHMudW5zdGFibGVfZ2V0Rmlyc3RDYWxsYmFja05vZGU9ZnVuY3Rpb24oKXtyZXR1cm4gaChyKX07ZXhwb3J0cy51bnN0YWJsZV9uZXh0PWZ1bmN0aW9uKGEpe3N3aXRjaCh5KXtjYXNlIDE6Y2FzZSAyOmNhc2UgMzp2YXIgYj0zO2JyZWFrO2RlZmF1bHQ6Yj15fXZhciBjPXk7eT1iO3RyeXtyZXR1cm4gYSgpfWZpbmFsbHl7eT1jfX07ZXhwb3J0cy51bnN0YWJsZV9wYXVzZUV4ZWN1dGlvbj1mdW5jdGlvbigpe307XG5leHBvcnRzLnVuc3RhYmxlX3JlcXVlc3RQYWludD1mdW5jdGlvbigpe307ZXhwb3J0cy51bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHk9ZnVuY3Rpb24oYSxiKXtzd2l0Y2goYSl7Y2FzZSAxOmNhc2UgMjpjYXNlIDM6Y2FzZSA0OmNhc2UgNTpicmVhaztkZWZhdWx0OmE9M312YXIgYz15O3k9YTt0cnl7cmV0dXJuIGIoKX1maW5hbGx5e3k9Y319O1xuZXhwb3J0cy51bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrPWZ1bmN0aW9uKGEsYixjKXt2YXIgZD1leHBvcnRzLnVuc3RhYmxlX25vdygpO1wib2JqZWN0XCI9PT10eXBlb2YgYyYmbnVsbCE9PWM/KGM9Yy5kZWxheSxjPVwibnVtYmVyXCI9PT10eXBlb2YgYyYmMDxjP2QrYzpkKTpjPWQ7c3dpdGNoKGEpe2Nhc2UgMTp2YXIgZT0tMTticmVhaztjYXNlIDI6ZT0yNTA7YnJlYWs7Y2FzZSA1OmU9MTA3Mzc0MTgyMzticmVhaztjYXNlIDQ6ZT0xRTQ7YnJlYWs7ZGVmYXVsdDplPTVFM31lPWMrZTthPXtpZDp1KyssY2FsbGJhY2s6Yixwcmlvcml0eUxldmVsOmEsc3RhcnRUaW1lOmMsZXhwaXJhdGlvblRpbWU6ZSxzb3J0SW5kZXg6LTF9O2M+ZD8oYS5zb3J0SW5kZXg9YyxmKHQsYSksbnVsbD09PWgocikmJmE9PT1oKHQpJiYoQj8oRShMKSxMPS0xKTpCPSEwLEsoSCxjLWQpKSk6KGEuc29ydEluZGV4PWUsZihyLGEpLEF8fHp8fChBPSEwLEkoSikpKTtyZXR1cm4gYX07XG5leHBvcnRzLnVuc3RhYmxlX3Nob3VsZFlpZWxkPU07ZXhwb3J0cy51bnN0YWJsZV93cmFwQ2FsbGJhY2s9ZnVuY3Rpb24oYSl7dmFyIGI9eTtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgYz15O3k9Yjt0cnl7cmV0dXJuIGEuYXBwbHkodGhpcyxhcmd1bWVudHMpfWZpbmFsbHl7eT1jfX19O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3NjaGVkdWxlci5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9zY2hlZHVsZXIuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4vLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuX193ZWJwYWNrX3JlcXVpcmVfXy5tID0gX193ZWJwYWNrX21vZHVsZXNfXztcblxuIiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5mID0ge307XG4vLyBUaGlzIGZpbGUgY29udGFpbnMgb25seSB0aGUgZW50cnkgY2h1bmsuXG4vLyBUaGUgY2h1bmsgbG9hZGluZyBmdW5jdGlvbiBmb3IgYWRkaXRpb25hbCBjaHVua3Ncbl9fd2VicGFja19yZXF1aXJlX18uZSA9IChjaHVua0lkKSA9PiB7XG5cdHJldHVybiBQcm9taXNlLmFsbChPYmplY3Qua2V5cyhfX3dlYnBhY2tfcmVxdWlyZV9fLmYpLnJlZHVjZSgocHJvbWlzZXMsIGtleSkgPT4ge1xuXHRcdF9fd2VicGFja19yZXF1aXJlX18uZltrZXldKGNodW5rSWQsIHByb21pc2VzKTtcblx0XHRyZXR1cm4gcHJvbWlzZXM7XG5cdH0sIFtdKSk7XG59OyIsIi8vIFRoaXMgZnVuY3Rpb24gYWxsb3cgdG8gcmVmZXJlbmNlIGFzeW5jIGNodW5rc1xuX193ZWJwYWNrX3JlcXVpcmVfXy51ID0gKGNodW5rSWQpID0+IHtcblx0Ly8gcmV0dXJuIHVybCBmb3IgZmlsZW5hbWVzIGJhc2VkIG9uIHRlbXBsYXRlXG5cdHJldHVybiBcIlwiICsgY2h1bmtJZCArIFwiLmluZGV4LmpzXCI7XG59OyIsIi8vIFRoaXMgZnVuY3Rpb24gYWxsb3cgdG8gcmVmZXJlbmNlIGFsbCBjaHVua3Ncbl9fd2VicGFja19yZXF1aXJlX18ubWluaUNzc0YgPSAoY2h1bmtJZCkgPT4ge1xuXHQvLyByZXR1cm4gdXJsIGZvciBmaWxlbmFtZXMgYmFzZWQgb24gdGVtcGxhdGVcblx0cmV0dXJuIFwiY3NzL1wiICsgKGNodW5rSWQgPT09IDkwMSA/IFwic2RrdGVzdFwiIDogY2h1bmtJZCkgKyBcIi5jc3NcIjtcbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5nID0gKGZ1bmN0aW9uKCkge1xuXHRpZiAodHlwZW9mIGdsb2JhbFRoaXMgPT09ICdvYmplY3QnKSByZXR1cm4gZ2xvYmFsVGhpcztcblx0dHJ5IHtcblx0XHRyZXR1cm4gdGhpcyB8fCBuZXcgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdGlmICh0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0JykgcmV0dXJuIHdpbmRvdztcblx0fVxufSkoKTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwiLy8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5yID0gKGV4cG9ydHMpID0+IHtcblx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cdH1cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbn07IiwidmFyIHNjcmlwdFVybDtcbmlmIChfX3dlYnBhY2tfcmVxdWlyZV9fLmcuaW1wb3J0U2NyaXB0cykgc2NyaXB0VXJsID0gX193ZWJwYWNrX3JlcXVpcmVfXy5nLmxvY2F0aW9uICsgXCJcIjtcbnZhciBkb2N1bWVudCA9IF9fd2VicGFja19yZXF1aXJlX18uZy5kb2N1bWVudDtcbmlmICghc2NyaXB0VXJsICYmIGRvY3VtZW50KSB7XG5cdGlmIChkb2N1bWVudC5jdXJyZW50U2NyaXB0KVxuXHRcdHNjcmlwdFVybCA9IGRvY3VtZW50LmN1cnJlbnRTY3JpcHQuc3JjXG5cdGlmICghc2NyaXB0VXJsKSB7XG5cdFx0dmFyIHNjcmlwdHMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcInNjcmlwdFwiKTtcblx0XHRpZihzY3JpcHRzLmxlbmd0aCkgc2NyaXB0VXJsID0gc2NyaXB0c1tzY3JpcHRzLmxlbmd0aCAtIDFdLnNyY1xuXHR9XG59XG4vLyBXaGVuIHN1cHBvcnRpbmcgYnJvd3NlcnMgd2hlcmUgYW4gYXV0b21hdGljIHB1YmxpY1BhdGggaXMgbm90IHN1cHBvcnRlZCB5b3UgbXVzdCBzcGVjaWZ5IGFuIG91dHB1dC5wdWJsaWNQYXRoIG1hbnVhbGx5IHZpYSBjb25maWd1cmF0aW9uXG4vLyBvciBwYXNzIGFuIGVtcHR5IHN0cmluZyAoXCJcIikgYW5kIHNldCB0aGUgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gdmFyaWFibGUgZnJvbSB5b3VyIGNvZGUgdG8gdXNlIHlvdXIgb3duIGxvZ2ljLlxuaWYgKCFzY3JpcHRVcmwpIHRocm93IG5ldyBFcnJvcihcIkF1dG9tYXRpYyBwdWJsaWNQYXRoIGlzIG5vdCBzdXBwb3J0ZWQgaW4gdGhpcyBicm93c2VyXCIpO1xuc2NyaXB0VXJsID0gc2NyaXB0VXJsLnJlcGxhY2UoLyMuKiQvLCBcIlwiKS5yZXBsYWNlKC9cXD8uKiQvLCBcIlwiKS5yZXBsYWNlKC9cXC9bXlxcL10rJC8sIFwiL1wiKTtcbl9fd2VicGFja19yZXF1aXJlX18ucCA9IHNjcmlwdFVybDsiLCIvLyBubyBiYXNlVVJJXG5cbi8vIG9iamVjdCB0byBzdG9yZSBsb2FkZWQgYW5kIGxvYWRpbmcgY2h1bmtzXG4vLyB1bmRlZmluZWQgPSBjaHVuayBub3QgbG9hZGVkLCBudWxsID0gY2h1bmsgcHJlbG9hZGVkL3ByZWZldGNoZWRcbi8vIFtyZXNvbHZlLCByZWplY3QsIFByb21pc2VdID0gY2h1bmsgbG9hZGluZywgMCA9IGNodW5rIGxvYWRlZFxudmFyIGluc3RhbGxlZENodW5rcyA9IHtcblx0OTAxOiAwXG59O1xuXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmYuaiA9IChjaHVua0lkLCBwcm9taXNlcykgPT4ge1xuXHRcdC8vIEpTT05QIGNodW5rIGxvYWRpbmcgZm9yIGphdmFzY3JpcHRcblx0XHR2YXIgaW5zdGFsbGVkQ2h1bmtEYXRhID0gX193ZWJwYWNrX3JlcXVpcmVfXy5vKGluc3RhbGxlZENodW5rcywgY2h1bmtJZCkgPyBpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0gOiB1bmRlZmluZWQ7XG5cdFx0aWYoaW5zdGFsbGVkQ2h1bmtEYXRhICE9PSAwKSB7IC8vIDAgbWVhbnMgXCJhbHJlYWR5IGluc3RhbGxlZFwiLlxuXG5cdFx0XHQvLyBhIFByb21pc2UgbWVhbnMgXCJjdXJyZW50bHkgbG9hZGluZ1wiLlxuXHRcdFx0aWYoaW5zdGFsbGVkQ2h1bmtEYXRhKSB7XG5cdFx0XHRcdHByb21pc2VzLnB1c2goaW5zdGFsbGVkQ2h1bmtEYXRhWzJdKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGlmKHRydWUpIHsgLy8gYWxsIGNodW5rcyBoYXZlIEpTXG5cdFx0XHRcdFx0Ly8gc2V0dXAgUHJvbWlzZSBpbiBjaHVuayBjYWNoZVxuXHRcdFx0XHRcdHZhciBwcm9taXNlID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4gKGluc3RhbGxlZENodW5rRGF0YSA9IGluc3RhbGxlZENodW5rc1tjaHVua0lkXSA9IFtyZXNvbHZlLCByZWplY3RdKSk7XG5cdFx0XHRcdFx0cHJvbWlzZXMucHVzaChpbnN0YWxsZWRDaHVua0RhdGFbMl0gPSBwcm9taXNlKTtcblxuXHRcdFx0XHRcdC8vIHN0YXJ0IGNodW5rIGxvYWRpbmdcblx0XHRcdFx0XHR2YXIgdXJsID0gX193ZWJwYWNrX3JlcXVpcmVfXy5wICsgX193ZWJwYWNrX3JlcXVpcmVfXy51KGNodW5rSWQpO1xuXHRcdFx0XHRcdC8vIGNyZWF0ZSBlcnJvciBiZWZvcmUgc3RhY2sgdW53b3VuZCB0byBnZXQgdXNlZnVsIHN0YWNrdHJhY2UgbGF0ZXJcblx0XHRcdFx0XHR2YXIgZXJyb3IgPSBuZXcgRXJyb3IoKTtcblx0XHRcdFx0XHR2YXIgbG9hZGluZ0VuZGVkID0gKGV2ZW50KSA9PiB7XG5cdFx0XHRcdFx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oaW5zdGFsbGVkQ2h1bmtzLCBjaHVua0lkKSkge1xuXHRcdFx0XHRcdFx0XHRpbnN0YWxsZWRDaHVua0RhdGEgPSBpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF07XG5cdFx0XHRcdFx0XHRcdGlmKGluc3RhbGxlZENodW5rRGF0YSAhPT0gMCkgaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdID0gdW5kZWZpbmVkO1xuXHRcdFx0XHRcdFx0XHRpZihpbnN0YWxsZWRDaHVua0RhdGEpIHtcblx0XHRcdFx0XHRcdFx0XHR2YXIgZXJyb3JUeXBlID0gZXZlbnQgJiYgKGV2ZW50LnR5cGUgPT09ICdsb2FkJyA/ICdtaXNzaW5nJyA6IGV2ZW50LnR5cGUpO1xuXHRcdFx0XHRcdFx0XHRcdHZhciByZWFsU3JjID0gZXZlbnQgJiYgZXZlbnQudGFyZ2V0ICYmIGV2ZW50LnRhcmdldC5zcmM7XG5cdFx0XHRcdFx0XHRcdFx0ZXJyb3IubWVzc2FnZSA9ICdMb2FkaW5nIGNodW5rICcgKyBjaHVua0lkICsgJyBmYWlsZWQuXFxuKCcgKyBlcnJvclR5cGUgKyAnOiAnICsgcmVhbFNyYyArICcpJztcblx0XHRcdFx0XHRcdFx0XHRlcnJvci5uYW1lID0gJ0NodW5rTG9hZEVycm9yJztcblx0XHRcdFx0XHRcdFx0XHRlcnJvci50eXBlID0gZXJyb3JUeXBlO1xuXHRcdFx0XHRcdFx0XHRcdGVycm9yLnJlcXVlc3QgPSByZWFsU3JjO1xuXHRcdFx0XHRcdFx0XHRcdGluc3RhbGxlZENodW5rRGF0YVsxXShlcnJvcik7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdF9fd2VicGFja19yZXF1aXJlX18ubCh1cmwsIGxvYWRpbmdFbmRlZCwgXCJjaHVuay1cIiArIGNodW5rSWQsIGNodW5rSWQpO1xuXHRcdFx0XHR9IGVsc2UgaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdID0gMDtcblx0XHRcdH1cblx0XHR9XG59O1xuXG4vLyBubyBwcmVmZXRjaGluZ1xuXG4vLyBubyBwcmVsb2FkZWRcblxuLy8gbm8gSE1SXG5cbi8vIG5vIEhNUiBtYW5pZmVzdFxuXG4vLyBubyBvbiBjaHVua3MgbG9hZGVkXG5cbi8vIGluc3RhbGwgYSBKU09OUCBjYWxsYmFjayBmb3IgY2h1bmsgbG9hZGluZ1xudmFyIHdlYnBhY2tKc29ucENhbGxiYWNrID0gKHBhcmVudENodW5rTG9hZGluZ0Z1bmN0aW9uLCBkYXRhKSA9PiB7XG5cdHZhciBbY2h1bmtJZHMsIG1vcmVNb2R1bGVzLCBydW50aW1lXSA9IGRhdGE7XG5cdC8vIGFkZCBcIm1vcmVNb2R1bGVzXCIgdG8gdGhlIG1vZHVsZXMgb2JqZWN0LFxuXHQvLyB0aGVuIGZsYWcgYWxsIFwiY2h1bmtJZHNcIiBhcyBsb2FkZWQgYW5kIGZpcmUgY2FsbGJhY2tcblx0dmFyIG1vZHVsZUlkLCBjaHVua0lkLCBpID0gMDtcblx0aWYoY2h1bmtJZHMuc29tZSgoaWQpID0+IChpbnN0YWxsZWRDaHVua3NbaWRdICE9PSAwKSkpIHtcblx0XHRmb3IobW9kdWxlSWQgaW4gbW9yZU1vZHVsZXMpIHtcblx0XHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhtb3JlTW9kdWxlcywgbW9kdWxlSWQpKSB7XG5cdFx0XHRcdF9fd2VicGFja19yZXF1aXJlX18ubVttb2R1bGVJZF0gPSBtb3JlTW9kdWxlc1ttb2R1bGVJZF07XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGlmKHJ1bnRpbWUpIHZhciByZXN1bHQgPSBydW50aW1lKF9fd2VicGFja19yZXF1aXJlX18pO1xuXHR9XG5cdGlmKHBhcmVudENodW5rTG9hZGluZ0Z1bmN0aW9uKSBwYXJlbnRDaHVua0xvYWRpbmdGdW5jdGlvbihkYXRhKTtcblx0Zm9yKDtpIDwgY2h1bmtJZHMubGVuZ3RoOyBpKyspIHtcblx0XHRjaHVua0lkID0gY2h1bmtJZHNbaV07XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGluc3RhbGxlZENodW5rcywgY2h1bmtJZCkgJiYgaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdKSB7XG5cdFx0XHRpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF1bMF0oKTtcblx0XHR9XG5cdFx0aW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdID0gMDtcblx0fVxuXG59XG5cbnZhciBjaHVua0xvYWRpbmdHbG9iYWwgPSBzZWxmW1wid2VicGFja0NodW5rbXBfd2ViZ2xcIl0gPSBzZWxmW1wid2VicGFja0NodW5rbXBfd2ViZ2xcIl0gfHwgW107XG5jaHVua0xvYWRpbmdHbG9iYWwuZm9yRWFjaCh3ZWJwYWNrSnNvbnBDYWxsYmFjay5iaW5kKG51bGwsIDApKTtcbmNodW5rTG9hZGluZ0dsb2JhbC5wdXNoID0gd2VicGFja0pzb25wQ2FsbGJhY2suYmluZChudWxsLCBjaHVua0xvYWRpbmdHbG9iYWwucHVzaC5iaW5kKGNodW5rTG9hZGluZ0dsb2JhbCkpOyIsIi8qIGVzbGludC1kaXNhYmxlICovXG5cbnZhciBzdGF0dXNFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3N0YXR1cycpO1xuZnVuY3Rpb24gcmVwb3J0KHByZWZpeCwgbWVzc2FnZSkge1xuICB2YXIgbXNnID0gKG1lc3NhZ2UpID8gbWVzc2FnZSA6ICcnO1xuICBzdGF0dXNFbGVtZW50LmNsYXNzTmFtZSA9IChwcmVmaXg9PT0nRXJyb3I6ICcpID8gJ2Vycm9yJyA6ICcnO1xuICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjc3RhdHVzIHNwYW4nKS50ZXh0Q29udGVudCA9IHByZWZpeCArIG1lc3NhZ2U7XG4gIGlmIChwcmVmaXggPT09ICdFcnJvcjogJykge1xuICAgIGNvbnNvbGUud2Fybihtc2cpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlcG9ydEVycm9yKG1lc3NhZ2UpIHtcbiAgcmVwb3J0KCdFcnJvcjogJywgbWVzc2FnZSk7XG59XG5mdW5jdGlvbiByZXBvcnRDb21wbGV0aW9uKG1lc3NhZ2UpIHtcbiAgcmVwb3J0KCdPSzogJywgbWVzc2FnZSk7XG59XG5mdW5jdGlvbiByZXBvcnRCdXN5KCkge1xuICByZXBvcnQoJ1dvcmtpbmcgLi4uJyk7XG59XG5cbmZ1bmN0aW9uIGNsZWFyU2VsZWN0b3Ioc2VsZWN0b3IpIHtcbiAgd2hpbGUgKHNlbGVjdG9yLmxhc3RDaGlsZCkge1xuICAgIHNlbGVjdG9yLnJlbW92ZUNoaWxkKHNlbGVjdG9yLmxhc3RDaGlsZCk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG9uQ29ubmVjdChzaG93Y2FzZSwgc2hvd2Nhc2VFbGVtZW50KSB7XG4gIGNvbnNvbGUubG9nKFwiU0hPV0NBU0UgSVMgQ09OTkVDVEVEXCIpO1xuXG4gIHNldHVwTWF0dGVydGFnQ29udHJvbHMoc2hvd2Nhc2UpO1xuXG4gIGNvbnN0IHN3ZWVwQ29sbGVjdGlvbiA9IHt9O1xuICBjb25zdCBzd2VlcFNlbGVjdG9ycyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ3N3ZWVwLXNlbGVjdG9yJyk7XG4gIFtdLnNsaWNlLmNhbGwoc3dlZXBTZWxlY3RvcnMpLmZvckVhY2goZnVuY3Rpb24gKHNlbGVjdG9yKSB7XG4gICAgY2xlYXJTZWxlY3RvcihzZWxlY3Rvcik7XG4gICAgc2hvd2Nhc2UuU3dlZXAuZGF0YS5zdWJzY3JpYmUoe1xuICAgICAgb25BZGRlZChpbmRleCwgaXRlbSkge1xuICAgICAgICBzd2VlcENvbGxlY3Rpb25baW5kZXhdID0gaXRlbTtcbiAgICAgIH0sXG4gICAgICBvblJlbW92ZWQoaW5kZXgpIHtcbiAgICAgICAgZGVsZXRlIHN3ZWVwQ29sbGVjdGlvbltpbmRleF07XG4gICAgICB9LFxuICAgICAgb25Db2xsZWN0aW9uVXBkYXRlZChjb2xsZWN0aW9uKSB7XG4gICAgICAgIGlmIChzZWxlY3Rvci5oYXNDaGlsZE5vZGVzKCkpIHJldHVybjtcbiAgICAgICAgZm9yIChjb25zdCBzd2VlcElkIGluIGNvbGxlY3Rpb24pIHtcbiAgICAgICAgICB2YXIgb3B0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnb3B0aW9uJyk7XG4gICAgICAgICAgb3B0aW9uLnZhbHVlID0gc3dlZXBJZDtcbiAgICAgICAgICBvcHRpb24udGV4dCA9IHN3ZWVwSWQ7XG4gICAgICAgICAgc2VsZWN0b3IuYXBwZW5kQ2hpbGQob3B0aW9uKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9KTtcblxuXG4gIHZhciBjYW1lcmFQb3NlO1xuICB2YXIgdGFncyA9IHt9O1xuXG4gIHNob3djYXNlLk1hdHRlcnRhZy5kYXRhLnN1YnNjcmliZSh7XG4gICAgb25Db2xsZWN0aW9uVXBkYXRlZChjb2xsZWN0aW9uKSB7XG4gICAgICB0YWdzID0gY29sbGVjdGlvbjtcbiAgICB9LFxuICB9KTtcbiAgc2hvd2Nhc2VcbiAgICAub24oc2hvd2Nhc2UuTW9kZWwuRXZlbnQuTU9ERUxfTE9BREVELCBmdW5jdGlvbiAobW9kZWxEYXRhKSB7XG4gICAgICByZXBvcnRDb21wbGV0aW9uKCdNb2RlbCBzdWNjZXNzZnVsbHkgbG9hZGVkJyk7XG4gICAgfSlcbiAgICAub24oc2hvd2Nhc2UuTW9kZS5FdmVudC5DSEFOR0VfU1RBUlQsIGZ1bmN0aW9uIChvbGRNb2RlLCBuZXdNb2RlKSB7XG4gICAgICByZXBvcnRDb21wbGV0aW9uKCdtb3ZlZCB0byBtb2RlOiAnICsgbmV3TW9kZSArICcgZnJvbSAnICsgb2xkTW9kZSk7XG4gICAgfSlcbiAgICAub24oc2hvd2Nhc2UuQ2FtZXJhLkV2ZW50Lk1PVkUsIGZ1bmN0aW9uIChwb3NlKSB7XG4gICAgICBjYW1lcmFQb3NlID0gcG9zZTtcbiAgICB9KVxuICAgIC5vbihzaG93Y2FzZS5NYXR0ZXJ0YWcuRXZlbnQuQ0xJQ0ssIChmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKHRhZ0lkKSB7XG4gICAgICAgIHZhciBjbGlja2VkVGFnID0gdGFnc1t0YWdJZF07XG4gICAgICAgIHZhciBkaXNjV29ybGRQb3NpdGlvbiA9IHt9O1xuICAgICAgICB2YXIgc2NyZWVuUG9zaXRpb24gPSB7fTtcbiAgICAgICAgc2hvd2Nhc2UuTWF0dGVydGFnLmdldERpc2NQb3NpdGlvbihjbGlja2VkVGFnLCBkaXNjV29ybGRQb3NpdGlvbik7XG4gICAgICAgIHNob3djYXNlLkNvbnZlcnNpb24ud29ybGRUb1NjcmVlbihkaXNjV29ybGRQb3NpdGlvbiwgY2FtZXJhUG9zZSwge1xuICAgICAgICAgIHc6IHNob3djYXNlRWxlbWVudC5jbGllbnRXaWR0aCxcbiAgICAgICAgICBoOiBzaG93Y2FzZUVsZW1lbnQuY2xpZW50SGVpZ2h0LFxuICAgICAgICB9LCBzY3JlZW5Qb3NpdGlvbik7XG5cbiAgICAgICAgY29uc29sZS5sb2coJ2NsaWNrZWQnLCB0YWdJZCk7XG4gICAgICAgIGNvbnNvbGUubG9nKCd3aXRoIGEgd29ybGQgcG9zaXRpb24gb2YnLCBkaXNjV29ybGRQb3NpdGlvbik7XG4gICAgICAgIGNvbnNvbGUubG9nKCdhbmQgYSBzY3JlZW4gcG9zaXRpb24gb2YnLCBzY3JlZW5Qb3NpdGlvbik7XG4gICAgICB9XG4gICAgfSkoKSk7XG5cbiAgLy8gTW92ZSBpbiBhIGRpcmVjdGlvblxuICBbXS5zbGljZS5jYWxsKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5uYXZCdXR0b24nKSkuZm9yRWFjaChmdW5jdGlvbiAoYnV0dG9uKSB7XG4gICAgYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICB2YXIgdmFsdWUgPSB0aGlzLmdldEF0dHJpYnV0ZSgnZGF0YS1kaXJlY3Rpb24nKTtcbiAgICAgIHJlcG9ydEJ1c3koKTtcbiAgICAgIHNob3djYXNlLkNhbWVyYS5tb3ZlSW5EaXJlY3Rpb24oc2hvd2Nhc2UuQ2FtZXJhLkRpcmVjdGlvblt2YWx1ZV0pXG4gICAgICAudGhlbihmdW5jdGlvbiAobWVzc2FnZSkge1xuICAgICAgICByZXBvcnRDb21wbGV0aW9uKCBtZXNzYWdlKTtcbiAgICAgIH0sIGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgICAgIHJlcG9ydEVycm9yKGVycm9yKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9KTtcblxuICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncGFuJykuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHBvc2l0aW9uWCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwb3NpdGlvblgnKTtcbiAgICB2YXIgcG9zaXRpb25aID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Bvc2l0aW9uWicpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIHJlcG9ydEJ1c3koKTtcbiAgICAgIHNob3djYXNlLkNhbWVyYS5wYW4oe1xuICAgICAgICB4OiBwYXJzZUZsb2F0KHBvc2l0aW9uWC52YWx1ZSkgfHwgMCxcbiAgICAgICAgejogcGFyc2VGbG9hdChwb3NpdGlvbloudmFsdWUpIHx8IDAsXG4gICAgICB9KVxuICAgICAgICAudGhlbihmdW5jdGlvbiAobWVzc2FnZSkge1xuICAgICAgICAgIHJlcG9ydENvbXBsZXRpb24oXCJDYW1lcmEucGFuIGNvbXBsZXRlXCIpO1xuICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICByZXBvcnRFcnJvcihlcnJvcik7XG4gICAgICAgIH0pO1xuICAgIH07XG4gIH0oKSk7XG5cbiAgLy8gUm90YXRlIGluIGEgc2luZ2xlIGRpcmVjdGlvblxuICBbZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3RpbHRVcCcpLFxuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0aWx0RG93bicpLFxuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyb3RhdGVMZWZ0JyksXG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3JvdGF0ZVJpZ2h0JyldLmZvckVhY2goZnVuY3Rpb24gKGJ1dHRvbikge1xuICAgIHZhciBhbmdsZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyb3RhdGlvbicpO1xuICAgIGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgdmFyIGRpcmVjdGlvbiA9IHRoaXMuZ2V0QXR0cmlidXRlKCdkYXRhLWRpcmVjdGlvbicpO1xuICAgICAgcmVwb3J0QnVzeSgpO1xuICAgICAgc2hvd2Nhc2UuQ2FtZXJhLnJvdGF0ZUluRGlyZWN0aW9uKHNob3djYXNlLkNhbWVyYS5EaXJlY3Rpb25bZGlyZWN0aW9uXSwgcGFyc2VGbG9hdChhbmdsZS52YWx1ZSkpXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uIChtZXNzYWdlKSB7XG4gICAgICAgICAgcmVwb3J0Q29tcGxldGlvbihcIlJvdGF0aW9uIGNvbXBsZXRlOiBcIiApO1xuICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICByZXBvcnRFcnJvcihlcnJvcik7XG4gICAgICAgIH0pO1xuICAgIH0pO1xuICB9KTtcblxuICBzaG93Y2FzZS5DYW1lcmEucm90YXRlSW5EaXJlY3Rpb24gPSBmdW5jdGlvbiAoZGlyZWN0aW9uLCBhbmdsZSkge1xuICAgIHJldHVybiBzaG93Y2FzZS5DYW1lcmEucm90YXRlKFxuICAgICAgZGlyZWN0aW9uID09PSBzaG93Y2FzZS5DYW1lcmEuRGlyZWN0aW9uWydSSUdIVCddID8gYW5nbGUgOiAoZGlyZWN0aW9uID09PSBzaG93Y2FzZS5DYW1lcmEuRGlyZWN0aW9uWydMRUZUJ10gPyAtYW5nbGUgOiAwKSxcbiAgICAgIGRpcmVjdGlvbiA9PT0gc2hvd2Nhc2UuQ2FtZXJhLkRpcmVjdGlvblsnVVAnXSA/IGFuZ2xlIDogIChkaXJlY3Rpb24gPT09IHNob3djYXNlLkNhbWVyYS5EaXJlY3Rpb25bJ0RPV04nXSA/IC1hbmdsZSA6IDApKTtcbiAgfTtcblxuICAvLyBSb3RhdGUgYWxvbmcgdGhlIHggYW5kIHkgY29vcmRpbmF0ZXNcbiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2ZyZWVSb3RhdGUnKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcm90YXRpb25YID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3JvdGF0aW9uWCcpO1xuICAgIHZhciByb3RhdGlvblkgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncm90YXRpb25ZJyk7XG4gICAgdmFyIHJvdGF0aW9uU3BlZWQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncm90YXRpb25TcGVlZCcpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIHZhciB4ID0gcm90YXRpb25YLnZhbHVlIHx8IDA7XG4gICAgICB2YXIgeSA9IHJvdGF0aW9uWS52YWx1ZSB8fCAwO1xuICAgICAgcmVwb3J0QnVzeSgpO1xuICAgICAgc2hvd2Nhc2UuQ2FtZXJhLnJvdGF0ZShwYXJzZUZsb2F0KHgpLCBwYXJzZUZsb2F0KHkpLCB7IHNwZWVkOiBwYXJzZUZsb2F0KHJvdGF0aW9uU3BlZWQudmFsdWUpIH0pXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uIChtZXNzYWdlKSB7XG4gICAgICAgICAgcmVwb3J0Q29tcGxldGlvbignRnJlZSByb3RhdGlvbiBjb21wbGV0ZTonKTtcbiAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgcmVwb3J0RXJyb3IoIGVycm9yKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgfSgpKTtcblxuICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnb3JpZW50JykuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHJvdGF0aW9uWCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyb3RhdGlvblgnKTtcbiAgICB2YXIgcm90YXRpb25ZID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3JvdGF0aW9uWScpO1xuICAgIHZhciByb3RhdGlvblNwZWVkID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3JvdGF0aW9uU3BlZWQnKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICB2YXIgeCA9IHJvdGF0aW9uWC52YWx1ZSB8fCAwO1xuICAgICAgdmFyIHkgPSByb3RhdGlvblkudmFsdWUgfHwgMDtcbiAgICAgIHJlcG9ydEJ1c3koKTtcbiAgICAgIHNob3djYXNlLkNhbWVyYS5zZXRSb3RhdGlvbih7eDogcGFyc2VGbG9hdCh4KSwgeTogcGFyc2VGbG9hdCh5KX0sIHsgc3BlZWQ6IHBhcnNlRmxvYXQocm90YXRpb25TcGVlZC52YWx1ZSkgfSlcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24gKG1lc3NhZ2UpIHtcbiAgICAgICAgICByZXBvcnRDb21wbGV0aW9uKGAgT3JpZW50IGNvbXBsZXRlOiBgKTtcbiAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgcmVwb3J0RXJyb3IoIGVycm9yKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgfSgpKTtcblxuICAvLyBDaGFuZ2UgbW9kZXNcbiAgW10uc2xpY2UuY2FsbChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcubW9kZUJ1dHRvbicpKS5mb3JFYWNoKGZ1bmN0aW9uIChidXR0b24pIHtcbiAgICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIHZhciBmbHlTdHlsZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtb2RlU3R5bGVzJyk7XG4gICAgICB2YXIgdHJhbnNpdGlvbiA9IHNob3djYXNlLk1vZGUuVHJhbnNpdGlvblR5cGVbZmx5U3R5bGUudmFsdWVdO1xuICAgICAgdmFyIHZhbHVlID0gdGhpcy5nZXRBdHRyaWJ1dGUoJ2lkJyk7XG4gICAgICByZXBvcnRCdXN5KCk7XG4gICAgICBzaG93Y2FzZS5Nb2RlLm1vdmVUbyhzaG93Y2FzZS5Nb2RlLk1vZGVbdmFsdWVdLCB7XG4gICAgICAgIHRyYW5zaXRpb246IHRyYW5zaXRpb24sXG4gICAgICB9KVxuICAgICAgICAudGhlbihmdW5jdGlvbiAobWVzc2FnZSkge1xuICAgICAgICAgIHJlcG9ydENvbXBsZXRpb24obWVzc2FnZSk7XG4gICAgICAgIH0sIGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgIHJlcG9ydEVycm9yKGVycm9yKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtb3ZlVG9Td2VlcCcpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xuICAgIHZhciBzd2VlcElkID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3N3ZWVwSWRzJyk7XG4gICAgdmFyIGZseVN0eWxlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2ZseVN0eWxlcycpO1xuICAgIHZhciBzd2VlcFJvdGF0aW9uWCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzd2VlcFJvdGF0aW9uWCcpO1xuICAgIHZhciBzd2VlcFJvdGF0aW9uWSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzd2VlcFJvdGF0aW9uWScpO1xuICAgIHZhciBzd2VlcFRyYW5zaXRpb25UaW1lID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3N3ZWVwVHJhbnNpdGlvblRpbWUnKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICB2YXIgc3dlZXAgPSBzd2VlcElkLnZhbHVlO1xuICAgICAgdmFyIHRyYW5zaXRpb24gPSBzaG93Y2FzZS5Td2VlcC5UcmFuc2l0aW9uW2ZseVN0eWxlLnZhbHVlXTtcbiAgICAgIHZhciByb3RhdGlvbiA9IHtcbiAgICAgICAgeDogc3dlZXBSb3RhdGlvblgudmFsdWUgfHwgMCxcbiAgICAgICAgeTogc3dlZXBSb3RhdGlvblkudmFsdWUgfHwgMCxcbiAgICAgIH1cbiAgICAgIHZhciB0cmFuc2l0aW9uVGltZSA9IHN3ZWVwVHJhbnNpdGlvblRpbWUudmFsdWU7XG4gICAgICByZXBvcnRCdXN5KCk7XG4gICAgICBzaG93Y2FzZS5Td2VlcC5tb3ZlVG8oc3dlZXAsIHtcbiAgICAgICAgcm90YXRpb246IHJvdGF0aW9uLFxuICAgICAgICB0cmFuc2l0aW9uOiB0cmFuc2l0aW9uLFxuICAgICAgICB0cmFuc2l0aW9uVGltZTogdHJhbnNpdGlvblRpbWUsXG4gICAgICB9KVxuICAgICAgICAudGhlbihmdW5jdGlvbiAoc3dlZXBJZCkge1xuICAgICAgICAgIHJlcG9ydENvbXBsZXRpb24oJ21vdmVkIHRvIHN3ZWVwICcgKyBzd2VlcElkKVxuICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICByZXBvcnRFcnJvcihlcnJvcik7XG4gICAgICAgIH0pO1xuICAgIH07XG4gIH0oKSk7XG5cbiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2dldFBvc2UnKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcG9zZVN1YnNjcmlwdGlvbiA9IG51bGw7XG4gICAgdmFyIHBvc2VPdXRwdXQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncG9zZScpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoIXBvc2VTdWJzY3JpcHRpb24pIHtcbiAgICAgICAgcG9zZVN1YnNjcmlwdGlvbiA9IHNob3djYXNlLkNhbWVyYS5wb3NlLnN1YnNjcmliZSh7XG4gICAgICAgICAgb25DaGFuZ2VkOiBmdW5jdGlvbiAocG9zZSkge1xuICAgICAgICAgICAgcG9zZU91dHB1dC5pbm5lclRleHQgPSBKU09OLnN0cmluZ2lmeShwb3NlKTtcbiAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBvc2VTdWJzY3JpcHRpb24uY2FuY2VsKCk7XG4gICAgICAgIHBvc2VTdWJzY3JpcHRpb24gPSBudWxsO1xuICAgICAgfVxuICAgIH07XG4gIH0oKSk7XG5cbiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3NjcmVlbnNob3QnKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcHJldmlldyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzY3JlZW5zaG90LXByZXZpZXcnKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBzaG93Y2FzZS5SZW5kZXJlci50YWtlU2NyZWVuU2hvdCh1bmRlZmluZWQsIHtcbiAgICAgICAgbWF0dGVydGFnczogZmFsc2UsXG4gICAgICB9KVxuICAgICAgLnRoZW4oZnVuY3Rpb24gKHNzVXJsKSB7XG4gICAgICAgIHByZXZpZXcuc2V0QXR0cmlidXRlKCdzcmMnLCBzc1VybCk7XG4gICAgICB9KTtcbiAgICB9O1xuICB9KCkpO1xuXG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdlcXVpcmVjdGFuZ2xlJykuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHByZXZpZXcgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc2NyZWVuc2hvdC1wcmV2aWV3Jyk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgc2hvd2Nhc2UuUmVuZGVyZXIudGFrZUVxdWlyZWN0YW5ndWxhcigpXG4gICAgICAudGhlbihmdW5jdGlvbiAoc3NVcmwpIHtcbiAgICAgICAgcHJldmlldy5zZXRBdHRyaWJ1dGUoJ3NyYycsIHNzVXJsKTtcbiAgICAgIH0pO1xuICAgIH07XG4gIH0oKSk7XG5cbiAgc2hvd2Nhc2UuU3dlZXAuY3VycmVudC5zdWJzY3JpYmUoZnVuY3Rpb24gKGN1cnJlbnRTd2VlcCkge1xuICAgIGlmIChjdXJyZW50U3dlZXAuc2lkID09PSAnJykge1xuICAgICAgY29uc29sZS5sb2coJ05vdCBjdXJyZW50bHkgc3RhdGlvbmVkIGF0IGEgc3dlZXAgcG9zaXRpb24nKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc29sZS5sb2coY3VycmVudFN3ZWVwKTtcbiAgICB9XG4gIH0pO1xuXG4gIC8vIFBvcHVsYXRlIGFsbCBvZiB0aGUgbWF0dGVydGFnIHNlbGVjdG9yc1xuICBwb3B1bGF0ZU1hdHRlcnRhZ1NlbGVjdG9ycyhzaG93Y2FzZSk7XG5cbiAgLy8gVE9VUlNcbiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3RvdXJTdGFydEJ0bicpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24oKSB7XG4gICAgc2hvd2Nhc2UuVG91ci5zdGFydCgpO1xuICB9KTtcbiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3RvdXJTdG9wQnRuJykuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbigpIHtcbiAgICBzaG93Y2FzZS5Ub3VyLnN0b3AoKTtcbiAgfSk7XG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0b3VyUHJldkJ0bicpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24oKSB7XG4gICAgc2hvd2Nhc2UuVG91ci5wcmV2KCk7XG4gIH0pO1xuICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndG91ck5leHRCdG4nKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uKCkge1xuICAgIHNob3djYXNlLlRvdXIubmV4dCgpO1xuICB9KTtcbiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3RvdXJTdGVwcGVkQnRuJykuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbigpIHtcbiAgICB2YXIgaW5kZXggPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndG91ci1zdGVwcGVkJyk7XG4gICAgc2hvd2Nhc2UuVG91ci5zdGVwKHBhcnNlSW50KGluZGV4LnZhbHVlLCAxMCkpO1xuICB9KTtcblxuICB2YXIgcG9pbnRlclN1YnNjcmlwdGlvbiA9IG51bGw7XG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdnZXRQb2ludGVyJykuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHBvaW50ZXJPdXRwdXQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncG9pbnRlcicpO1xuICAgIGlmICghcG9pbnRlclN1YnNjcmlwdGlvbikge1xuICAgICAgcG9pbnRlclN1YnNjcmlwdGlvbiA9IHNob3djYXNlLlBvaW50ZXIuaW50ZXJzZWN0aW9uLnN1YnNjcmliZShmdW5jdGlvbiAobW91c2UpIHtcbiAgICAgICAgcG9pbnRlck91dHB1dC5pbm5lclRleHQgPSBKU09OLnN0cmluZ2lmeShtb3VzZSk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcG9pbnRlclN1YnNjcmlwdGlvbi5jYW5jZWwoKTtcbiAgICAgIHBvaW50ZXJTdWJzY3JpcHRpb24gPSBudWxsO1xuICAgIH1cbiAgfSk7XG5cbiAgc2hvd2Nhc2UuQ2FtZXJhLnpvb20uc3Vic2NyaWJlKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgbGV2ZWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY3VycmVudC16b29tLWxldmVsJyk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICh6b29tKSB7XG4gICAgICBsZXZlbC5pbm5lclRleHQgPSB6b29tLmxldmVsLnRvRml4ZWQoNSk7XG4gICAgfVxuICB9KCkpO1xuXG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd6b29tLWJ5JykuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGRlbHRhID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3pvb20tYnktdmFsJyk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHNob3djYXNlLkNhbWVyYS56b29tQnkoZGVsdGEudmFsdWUpXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uIChuZXdab29tKSB7XG4gICAgICAgICAgcmVwb3J0Q29tcGxldGlvbignWm9vbWVkIGJ5ICcgKyBkZWx0YS52YWx1ZSArICcgdG8gJyArIG5ld1pvb20pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICB9KCkpO1xuXG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd6b29tLXRvJykuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGxldmVsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3pvb20tdG8tdmFsJyk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHNob3djYXNlLkNhbWVyYS56b29tVG8obGV2ZWwudmFsdWUpXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uIChuZXdab29tKSB7XG4gICAgICAgICAgcmVwb3J0Q29tcGxldGlvbignWm9vbWVkIHRvICcgKyBuZXdab29tKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgfSgpKTtcblxuICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnem9vbS1yZXNldCcpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xuICAgIHNob3djYXNlLkNhbWVyYS56b29tUmVzZXQoKVxuICAgICAgLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICByZXBvcnRDb21wbGV0aW9uKCdyZXNldCB6b29tJyk7XG4gICAgICB9KTtcbiAgfSk7XG5cbiAgYWRkU3dlZXBUb2dnbGUoc2hvd2Nhc2UsIHN3ZWVwQ29sbGVjdGlvbik7XG59XG5cbmZ1bmN0aW9uIGFkZFN3ZWVwVG9nZ2xlKHNob3djYXNlLCBzd2VlcENvbGxlY3Rpb24pIHtcbiAgdmFyIHN3ZWVwU2VsZWN0b3IgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc3dlZXAtZW5hYmxlLXNlbGVjdG9yJyk7XG4gIHZhciBjdXJyZW50RW5hYmxlbWVudE1hcCA9IHt9O1xuICB2YXIgZW5hYmxlU3dlZXAgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc3dlZXAtZW5hYmxlJyk7XG5cbiAgc3dlZXBTZWxlY3Rvci5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGN1cnJlbnRFbmFibGVtZW50ID0gc3dlZXBDb2xsZWN0aW9uW3N3ZWVwU2VsZWN0b3IudmFsdWVdLmVuYWJsZWQ7XG4gICAgZW5hYmxlU3dlZXAuY2hlY2tlZCA9IGN1cnJlbnRFbmFibGVtZW50O1xuICB9KTtcblxuICBmdW5jdGlvbiBvbkVuYWJsZWRDaGFuZ2UoKSB7XG4gICAgY3VycmVudEVuYWJsZW1lbnRNYXBbc3dlZXBTZWxlY3Rvci52YWx1ZV0gPSBlbmFibGVTd2VlcC5jaGVja2VkO1xuXG4gICAgaWYgKGVuYWJsZVN3ZWVwLmNoZWNrZWQpIHtcbiAgICAgIHNob3djYXNlLlN3ZWVwLmVuYWJsZShzd2VlcFNlbGVjdG9yLnZhbHVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2hvd2Nhc2UuU3dlZXAuZGlzYWJsZShzd2VlcFNlbGVjdG9yLnZhbHVlKTtcbiAgICB9XG4gIH1cblxuICBlbmFibGVTd2VlcC5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCBvbkVuYWJsZWRDaGFuZ2UpO1xufVxuXG5mdW5jdGlvbiBwb3B1bGF0ZU1hdHRlcnRhZ1NlbGVjdG9ycyhzaG93Y2FzZSkge1xuICBzaG93Y2FzZS5NYXR0ZXJ0YWcuZGF0YS5zdWJzY3JpYmUoZnVuY3Rpb24gKCkge1xuICAgIHZhciB0YWdTZWxlY3RvcnMgPSBbXS5zbGljZS5jYWxsKGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ21hdHRlcnRhZy1zZWxlY3RvcicpKTtcbiAgICB0YWdTZWxlY3RvcnMuZm9yRWFjaChmdW5jdGlvbiAoc2VsZWN0b3IpIHtcbiAgICAgIHdoaWxlIChzZWxlY3Rvci5sYXN0Q2hpbGQpIHtcbiAgICAgICAgc2VsZWN0b3IucmVtb3ZlQ2hpbGQoc2VsZWN0b3IubGFzdENoaWxkKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICB2YXIgdGFnU2VsZWN0b3JPcHRpb25zTWFwID0ge307XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVPcHRpb24odGFnKSB7XG4gICAgICB2YXIgb3B0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnb3B0aW9uJyk7XG4gICAgICBvcHRpb24udmFsdWUgPSB0YWcuc2lkO1xuICAgICAgb3B0aW9uLnRleHQgPSB0YWcubGFiZWwgfHwgJyhubyBsYWJlbCknO1xuXG4gICAgICByZXR1cm4gb3B0aW9uO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgb25BZGRlZChpbmRleCwgdGFnKSB7XG4gICAgICAgIHRhZ1NlbGVjdG9ycy5mb3JFYWNoKGZ1bmN0aW9uIChzZWxlY3Rvcikge1xuICAgICAgICAgIHZhciBvcHRpb24gPSBjcmVhdGVPcHRpb24odGFnKTtcbiAgICAgICAgICB0YWdTZWxlY3Rvck9wdGlvbnNNYXBbaW5kZXhdID0gdGFnU2VsZWN0b3JPcHRpb25zTWFwW2luZGV4XSB8fCBbXTtcbiAgICAgICAgICB0YWdTZWxlY3Rvck9wdGlvbnNNYXBbaW5kZXhdLnB1c2gob3B0aW9uKTtcbiAgICAgICAgICBsZXQgbmV4dENoaWxkID0gc2VsZWN0b3IuZmlyc3RDaGlsZDtcbiAgICAgICAgICB3aGlsZSAobmV4dENoaWxkICYmIG9wdGlvbi50ZXh0LmxvY2FsZUNvbXBhcmUobmV4dENoaWxkLnRleHQpID4gMCkge1xuICAgICAgICAgICAgbmV4dENoaWxkID0gbmV4dENoaWxkLm5leHRTaWJsaW5nO1xuICAgICAgICAgIH1cbiAgICAgICAgICBzZWxlY3Rvci5pbnNlcnRCZWZvcmUob3B0aW9uLCBuZXh0Q2hpbGQpO1xuICAgICAgICB9KTtcbiAgICAgIH0sXG4gICAgICBvblJlbW92ZWQoaW5kZXgpIHtcbiAgICAgICAgdmFyIG9wdGlvbnMgPSB0YWdTZWxlY3Rvck9wdGlvbnNNYXBbaW5kZXhdIHx8IFtdO1xuICAgICAgICBvcHRpb25zLmZvckVhY2goZnVuY3Rpb24gKG9wdGlvbikge1xuICAgICAgICAgIG9wdGlvbi5wYXJlbnRFbGVtZW50LnJlbW92ZUNoaWxkKG9wdGlvbik7XG4gICAgICAgIH0pO1xuICAgICAgICBkZWxldGUgdGFnU2VsZWN0b3JPcHRpb25zTWFwW2luZGV4XTtcbiAgICAgIH0sXG4gICAgICBvblVwZGF0ZWQoaW5kZXgsIHRhZykge1xuICAgICAgICB2YXIgb3B0aW9ucyA9IHRhZ1NlbGVjdG9yT3B0aW9uc01hcFtpbmRleF0gfHwgW107XG4gICAgICAgIG9wdGlvbnMuZm9yRWFjaChmdW5jdGlvbiAob3B0aW9uKSB7XG4gICAgICAgICAgb3B0aW9uLnRleHQgPSB0YWcubGFiZWw7XG4gICAgICAgIH0pO1xuICAgICAgfSxcbiAgICB9O1xuICB9KCkpO1xufVxuXG5cbmZ1bmN0aW9uIHNldHVwTWF0dGVydGFnQ29udHJvbHMoc2hvd2Nhc2UpIHtcbiAgY29uc3Qgc2VsZWN0ZWRUYWcgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbWF0dGVydGFnLXNlbGVjdG9yJyk7XG4gIHNldHVwTWF0dGVydGFnUHJldmVudChzaG93Y2FzZSwgc2VsZWN0ZWRUYWcpO1xuXG4gIC8vIGFkZFxuICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndGFnLWFkZCcpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xuICAgIGNvbnN0IHRpdGxlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3RhZy1hZGQtdGl0bGUnKTtcbiAgICBjb25zdCBkZXNjID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3RhZy1hZGQtZGVzYycpO1xuICAgIGNvbnN0IHBvc1ggPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndGFnLWFkZC1wb3MteCcpO1xuICAgIGNvbnN0IHBvc1kgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndGFnLWFkZC1wb3MteScpO1xuICAgIGNvbnN0IHBvc1ogPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndGFnLWFkZC1wb3MteicpO1xuICAgIGNvbnN0IG5vcm1YID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3RhZy1hZGQtbm9ybS14Jyk7XG4gICAgY29uc3Qgbm9ybVkgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndGFnLWFkZC1ub3JtLXknKTtcbiAgICBjb25zdCBub3JtWiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0YWctYWRkLW5vcm0teicpO1xuICAgIGNvbnN0IG1lZGlhVHlwZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0YWctYWRkLW10eXBlJyk7XG4gICAgY29uc3QgbWVkaWFTcmMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndGFnLWFkZC1tc3JjJyk7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgc2hvd2Nhc2UuTWF0dGVydGFnLmFkZCh7XG4gICAgICAgIGxhYmVsOiB0aXRsZS52YWx1ZSxcbiAgICAgICAgZGVzY3JpcHRpb246IGRlc2MudmFsdWUsXG4gICAgICAgIGFuY2hvclBvc2l0aW9uOiB7XG4gICAgICAgICAgeDogcGFyc2VGbG9hdChwb3NYLnZhbHVlKSxcbiAgICAgICAgICB5OiBwYXJzZUZsb2F0KHBvc1kudmFsdWUpLFxuICAgICAgICAgIHo6IHBhcnNlRmxvYXQocG9zWi52YWx1ZSksXG4gICAgICAgIH0sXG4gICAgICAgIHN0ZW1WZWN0b3I6IHtcbiAgICAgICAgICB4OiBwYXJzZUZsb2F0KG5vcm1YLnZhbHVlKSxcbiAgICAgICAgICB5OiBwYXJzZUZsb2F0KG5vcm1ZLnZhbHVlKSxcbiAgICAgICAgICB6OiBwYXJzZUZsb2F0KG5vcm1aLnZhbHVlKSxcbiAgICAgICAgfSxcbiAgICAgICAgbWVkaWE6IG1lZGlhVHlwZS52YWx1ZSA9PT0gJycgPyB1bmRlZmluZWQgOiB7XG4gICAgICAgICAgdHlwZTptZWRpYVR5cGUudmFsdWUsXG4gICAgICAgICAgc3JjOiBtZWRpYVNyYy52YWx1ZSxcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfTtcbiAgfSgpKTtcblxuICAvLyBtb3ZlXG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0YWctbW92ZScpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xuICAgIGNvbnN0IHBvc1ggPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndGFnLW1vdmUtcG9zLXgnKTtcbiAgICBjb25zdCBwb3NZID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3RhZy1tb3ZlLXBvcy15Jyk7XG4gICAgY29uc3QgcG9zWiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0YWctbW92ZS1wb3MteicpO1xuICAgIGNvbnN0IG5vcm1YID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3RhZy1tb3ZlLW5vcm0teCcpO1xuICAgIGNvbnN0IG5vcm1ZID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3RhZy1tb3ZlLW5vcm0teScpO1xuICAgIGNvbnN0IG5vcm1aID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3RhZy1tb3ZlLW5vcm0teicpO1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHNob3djYXNlLk1hdHRlcnRhZy5lZGl0UG9zaXRpb24oc2VsZWN0ZWRUYWcudmFsdWUsIHtcbiAgICAgICAgYW5jaG9yUG9zaXRpb246IHtcbiAgICAgICAgICB4OiBwYXJzZUZsb2F0KHBvc1gudmFsdWUpLFxuICAgICAgICAgIHk6IHBhcnNlRmxvYXQocG9zWS52YWx1ZSksXG4gICAgICAgICAgejogcGFyc2VGbG9hdChwb3NaLnZhbHVlKSxcbiAgICAgICAgfSxcbiAgICAgICAgc3RlbVZlY3Rvcjoge1xuICAgICAgICAgIHg6IHBhcnNlRmxvYXQobm9ybVgudmFsdWUpLFxuICAgICAgICAgIHk6IHBhcnNlRmxvYXQobm9ybVkudmFsdWUpLFxuICAgICAgICAgIHo6IHBhcnNlRmxvYXQobm9ybVoudmFsdWUpLFxuICAgICAgICB9LFxuICAgICAgfSk7XG4gICAgfTtcbiAgfSgpKTtcblxuICAvLyByZW1vdmVcbiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21hdHRlcnRhZy1yZW1vdmUnKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uICgpIHtcbiAgICBzaG93Y2FzZS5NYXR0ZXJ0YWcucmVtb3ZlKHNlbGVjdGVkVGFnLnZhbHVlKTtcbiAgfSk7XG5cbiAgLy8gcG9wdWxhdGUgbWVkaWEgdHlwZSBzZWxlY3RvcnNcbiAgdmFyIHRhZ01lZGlhdHlwZVNlbGVjdG9ycyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ210YWctbWVkaWEtdHlwZScpO1xuICBmb3IgKGNvbnN0IHNlbGVjdG9yIG9mIHRhZ01lZGlhdHlwZVNlbGVjdG9ycykge1xuICAgIGNsZWFyU2VsZWN0b3Ioc2VsZWN0b3IpO1xuICAgIHZhciBkZWZhdWx0T3B0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnb3B0aW9uJyk7XG4gICAgZGVmYXVsdE9wdGlvbi52YWx1ZSA9ICcnO1xuICAgIGRlZmF1bHRPcHRpb24udGV4dCA9IFwiKHNlbGVjdClcIlxuICAgIHNlbGVjdG9yLmFwcGVuZENoaWxkKGRlZmF1bHRPcHRpb24pO1xuICAgIGZvciAodmFyIG1lZGlhVHlwZSBpbiBzaG93Y2FzZS5NYXR0ZXJ0YWcuTWVkaWFUeXBlKSB7XG4gICAgICB2YXIgb3B0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnb3B0aW9uJyk7XG4gICAgICBvcHRpb24udmFsdWUgPSBzaG93Y2FzZS5NYXR0ZXJ0YWcuTWVkaWFUeXBlW21lZGlhVHlwZV07XG4gICAgICBvcHRpb24udGV4dCA9IG1lZGlhVHlwZTtcbiAgICAgIHNlbGVjdG9yLmFwcGVuZENoaWxkKG9wdGlvbik7XG4gICAgfVxuICB9XG5cbiAgLy8gTWF0dGVydGFnIEVkaXRcbiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21hdHRlcnRhZy1lZGl0JykuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbigpIHtcbiAgICB2YXIgdGFnRWRpdFRpdGxlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3RhZy1lZGl0LXRpdGxlJyk7XG4gICAgdmFyIHRhZ0VkaXRNZWRpYSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0YWctZWRpdC1tZWRpYScpO1xuICAgIHZhciB0YWdFZGl0RGVzYyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0YWctZWRpdC1kZXNjJyk7XG4gICAgdmFyIHRhZ01lZGlhdHlwZVNlbGVjdG9yID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3RhZy1lZGl0LW1lZGlhdHlwZScpXG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgcmVwb3J0QnVzeSgpO1xuICAgICAgc2hvd2Nhc2UuTWF0dGVydGFnLmVkaXRCaWxsYm9hcmQoc2VsZWN0ZWRUYWcudmFsdWUsIHtcbiAgICAgICAgLy8gZG9uJ3Qgc2VuZCBlbXB0eSBzdHJpbmcgaWYgaW5wdXQgZmllbGQgd2FzIGVtcHR5XG4gICAgICAgIGxhYmVsOiB0YWdFZGl0VGl0bGUudmFsdWUgfHwgdW5kZWZpbmVkLFxuICAgICAgICBkZXNjcmlwdGlvbjogdGFnRWRpdERlc2MudmFsdWUgfHwgdW5kZWZpbmVkLFxuICAgICAgICBtZWRpYTogdGFnTWVkaWF0eXBlU2VsZWN0b3IudmFsdWUgIT09ICcnID8ge1xuICAgICAgICAgIHNyYzogdGFnRWRpdE1lZGlhLnZhbHVlLFxuICAgICAgICAgIHR5cGU6IHRhZ01lZGlhdHlwZVNlbGVjdG9yLnZhbHVlLFxuICAgICAgICB9IDogdW5kZWZpbmVkLFxuICAgICAgfSlcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHRhZ0xhYmVsID0gc2VsZWN0ZWRUYWcub3B0aW9uc1tzZWxlY3RlZFRhZy5zZWxlY3RlZEluZGV4XS5pbm5lclRleHQ7XG4gICAgICAgICAgICByZXBvcnRDb21wbGV0aW9uKGBlZGl0ZWQgWyR7dGFnTGFiZWx9XSwgKFNJRD0ke3NlbGVjdGVkVGFnLnZhbHVlfSlgKTtcbiAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgIHJlcG9ydEVycm9yKGVycm9yKTtcbiAgICAgICAgICB9KTtcbiAgICB9O1xuICB9KCkpO1xuXG4gIC8vIGNvbG9yXG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0YWctZWRpdC1jb2xvcicpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xuICAgIGNvbnN0IHIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndGFnLWNvbG9yLXInKTtcbiAgICBjb25zdCBnID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3RhZy1jb2xvci1nJyk7XG4gICAgY29uc3QgYiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0YWctY29sb3ItYicpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBzaG93Y2FzZS5NYXR0ZXJ0YWcuZWRpdENvbG9yKHNlbGVjdGVkVGFnLnZhbHVlLCB7XG4gICAgICAgIHI6IHBhcnNlRmxvYXQoci52YWx1ZSksXG4gICAgICAgIGc6IHBhcnNlRmxvYXQoZy52YWx1ZSksXG4gICAgICAgIGI6IHBhcnNlRmxvYXQoYi52YWx1ZSksXG4gICAgICB9KTtcbiAgICB9O1xuICB9KCkpO1xuXG4gIC8vIHN0ZW1cbiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3RhZy1lZGl0LXN0ZW0nKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uICgpIHtcbiAgICBjb25zdCBzdGVtSGVpZ2h0RWx0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3N0ZW0taGVpZ2h0Jyk7XG4gICAgY29uc3Qgc3RlbVZpc2libGVFbHQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc3RlbS12aXNpYmxlJyk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGNvbnN0IHN0ZW1IZWlnaHQgPSBwYXJzZUZsb2F0KHN0ZW1IZWlnaHRFbHQudmFsdWUpO1xuICAgICAgY29uc3Qgc3RlbVZpc2libGUgPSBzdGVtVmlzaWJsZUVsdC5jaGVja2VkO1xuICAgICAgc2hvd2Nhc2UuTWF0dGVydGFnLmVkaXRTdGVtKHNlbGVjdGVkVGFnLnZhbHVlLCB7XG4gICAgICAgIHN0ZW1IZWlnaHQsIHN0ZW1WaXNpYmxlXG4gICAgICB9KTtcbiAgICB9O1xuICB9KCkpO1xuXG4gIC8vIE1hdHRlcnRhZyBPcGFjaXR5XG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtYXR0ZXJ0YWctb3BhY2l0eS1lZGl0JykuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoKSB7XG4gICAgY29uc3QgdGFnRWRpdE9wYWNpdHkgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbWF0dGVydGFnLW9wYWNpdHknKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgc2hvd2Nhc2UuTWF0dGVydGFnLmVkaXRPcGFjaXR5KHNlbGVjdGVkVGFnLnZhbHVlLCBwYXJzZUZsb2F0KHRhZ0VkaXRPcGFjaXR5LnZhbHVlKSk7XG4gICAgfTtcbiAgfSgpKTtcblxuICAvLyBNYXR0ZXJ0YWcgSW5qZWN0XG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdpbmplY3RIVE1MJykuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoKSB7XG4gICAgY29uc3Qgd2lkZ2V0VyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtYXR0ZXJ0YWctaHRtbC13Jyk7XG4gICAgY29uc3Qgd2lkZ2V0SCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtYXR0ZXJ0YWctaHRtbC1oJyk7XG4gICAgY29uc3Qgd2lkZ2V0U291cmNlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2luamVjdGVkSFRNTCcpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBzaG93Y2FzZS5NYXR0ZXJ0YWcuaW5qZWN0SFRNTChzZWxlY3RlZFRhZy52YWx1ZSwgd2lkZ2V0U291cmNlLnZhbHVlLCB7XG4gICAgICAgIGdsb2JhbFZhcmlhYmxlTWFwOiB7XG4gICAgICAgICAgb246ICdvbicsXG4gICAgICAgICAgb2ZmOiAnb2ZmJyxcbiAgICAgICAgICBzZW5kOiAnc2VuZCcsXG4gICAgICAgICAgdGFnOiAndGFnJyxcbiAgICAgICAgfSxcbiAgICAgICAgc2l6ZToge1xuICAgICAgICAgIHc6IHdpZGdldFcudmFsdWUgfHwgMCxcbiAgICAgICAgICBoOiB3aWRnZXRILnZhbHVlIHx8IDAsXG4gICAgICAgIH0sXG4gICAgICB9KVxuICAgICAgICAudGhlbihmdW5jdGlvbiAocG0pIHtcbiAgICAgICAgICBmdW5jdGlvbiBnZW5Db2xvcigpIHtcbiAgICAgICAgICAgIGxldCByZ2IgPSAnJztcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgNjsgKytpKSB7XG4gICAgICAgICAgICAgIHJnYiArPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAxNikudG9TdHJpbmcoMTYpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuICcjJyArIHJnYjtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gZGlyZWN0bHkgY29tbXVuaWNhdGUgd2l0aCB0aGUgaWZyYW1lIHRoYXQgd2FzIGp1c3QgaW5qZWN0ZWRcbiAgICAgICAgICBwbS5vbignY2xpY2snLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ3BhZ2UgcmVjZWl2ZWQnLCBlKTtcbiAgICAgICAgICAgIGNvbnN0IG5ld0NvbG9yID0gZ2VuQ29sb3IoKTtcbiAgICAgICAgICAgIHBtLnNlbmQoJ3VwZGF0ZS5idXR0b24nLCBuZXdDb2xvciwgbmV3Q29sb3IudG9TdHJpbmcoKSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gIH0oKSk7XG5cbiAgLy8gTWF0dGVydGFnIE5hdmlnYXRpb25cbiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ25hdmlnYXRlVG9UYWcnKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgbmF2aWdhdGlvblR5cGVTZWxlY3RvciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtYXR0ZXJ0YWctbmF2aWdhdGlvbi10eXBlJyk7XG4gICAgdmFyIGZvcmNlTmF2aWdhdGlvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtYXR0ZXJ0YWctbmF2aWdhdGlvbi1mb3JjZScpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXBvcnRCdXN5KCk7XG4gICAgICBzaG93Y2FzZS5NYXR0ZXJ0YWcubmF2aWdhdGVUb1RhZyhzZWxlY3RlZFRhZy52YWx1ZSwgc2hvd2Nhc2UuTWF0dGVydGFnLlRyYW5zaXRpb25bbmF2aWdhdGlvblR5cGVTZWxlY3Rvci52YWx1ZV0sIGZvcmNlTmF2aWdhdGlvbi5jaGVja2VkKVxuICAgICAgICAudGhlbihmdW5jdGlvbiAoaW5mbykge1xuICAgICAgICAgICAgdmFyIHRhZ0xhYmVsID0gc2VsZWN0ZWRUYWcub3B0aW9uc1tzZWxlY3RlZFRhZy5zZWxlY3RlZEluZGV4XS5pbm5lclRleHQ7XG4gICAgICAgICAgICByZXBvcnRDb21wbGV0aW9uKCdtb3ZlZCB0byBbJyArIHRhZ0xhYmVsICsgJ10sIChTSUQ9JyArIHNlbGVjdGVkVGFnLnZhbHVlICsgJyknKTtcbiAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgIHJlcG9ydEVycm9yKGVycm9yKTtcbiAgICAgICAgICB9KTtcbiAgICB9O1xuICB9KCkpO1xufVxuXG5mdW5jdGlvbiBzZXR1cE1hdHRlcnRhZ1ByZXZlbnQoc2hvd2Nhc2UsIHNlbGVjdGVkVGFnKSB7XG4gIHZhciBjdXJyZW50TG9ja3MgPSB7fTtcbiAgICB2YXIgbG9ja0JpbGxib2FyZCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0YWctbG9jay1iYicpO1xuICAgIHZhciBsb2NrTmF2aWdhdGlvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0YWctbG9jay1uYXYnKTtcblxuICAgIGZ1bmN0aW9uIGdldExvY2tzKCkge1xuICAgICAgdmFyIGN1cnJlbnRMb2NrID0gY3VycmVudExvY2tzW3NlbGVjdGVkVGFnLnZhbHVlXTtcbiAgICAgIC8vIHNldCBkZWZhdWx0IGZvciB0aGUgbG9ja3MgaWYgdGhleSBhcmVuJ3QgaW4gdGhlIGNvbnRhaW5lclxuICAgICAgaWYgKCFjdXJyZW50TG9jaykge1xuICAgICAgICBjdXJyZW50TG9jayA9IHtcbiAgICAgICAgICBiaWxsYm9hcmQ6IHRydWUsXG4gICAgICAgICAgbmF2aWdhdGlvbjogdHJ1ZSxcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIGN1cnJlbnRMb2Nrc1tzZWxlY3RlZFRhZy52YWx1ZV0gPSBjdXJyZW50TG9jaztcblxuICAgICAgcmV0dXJuIGN1cnJlbnRMb2NrO1xuICAgIH1cblxuICAgIHNlbGVjdGVkVGFnLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIHNldCB0aGUgY2hlY2tib3hlcyB0byB0aGUgY3VycmVudCBzdGF0ZSBvZiB0aGVcbiAgICAgIHZhciBjdXJyZW50TG9jayA9IGdldExvY2tzKCk7XG4gICAgICBsb2NrQmlsbGJvYXJkLmNoZWNrZWQgPSBjdXJyZW50TG9jay5iaWxsYm9hcmQ7XG4gICAgICBsb2NrTmF2aWdhdGlvbi5jaGVja2VkID0gY3VycmVudExvY2submF2aWdhdGlvbjtcbiAgICB9KTtcblxuICAgIGZ1bmN0aW9uIG9uTG9ja3NDaGFuZ2UoKSB7XG4gICAgICAvLyB1cGRhdGUgdGhlIHN0YXRlIG9mIHRoZSBsb2Nrc1xuICAgICAgdmFyIGN1cnJlbnRMb2NrID0gZ2V0TG9ja3MoKTtcbiAgICAgIGN1cnJlbnRMb2NrLmJpbGxib2FyZCA9IGxvY2tCaWxsYm9hcmQuY2hlY2tlZDtcbiAgICAgIGN1cnJlbnRMb2NrLm5hdmlnYXRpb24gPSBsb2NrTmF2aWdhdGlvbi5jaGVja2VkO1xuXG4gICAgICBzaG93Y2FzZS5NYXR0ZXJ0YWcucHJldmVudEFjdGlvbihzZWxlY3RlZFRhZy52YWx1ZSwge1xuICAgICAgICBvcGVuaW5nOiAhY3VycmVudExvY2suYmlsbGJvYXJkLFxuICAgICAgICBuYXZpZ2F0aW5nOiAhY3VycmVudExvY2submF2aWdhdGlvbixcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGxvY2tCaWxsYm9hcmQuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgb25Mb2Nrc0NoYW5nZSk7XG4gICAgbG9ja05hdmlnYXRpb24uYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgb25Mb2Nrc0NoYW5nZSk7XG59XG4iLCJpbXBvcnQgdHlwZSB7IElPYnNlcnZhYmxlTWFwLCBJU3Vic2NyaXB0aW9uIH0gZnJvbSAnQHNkay90eXBlcyc7XG5pbXBvcnQgdHlwZSB7IENoYW5nZUV2ZW50LCBSZWZPYmplY3QgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBDb21wb25lbnQsIGNyZWF0ZVJlZiB9IGZyb20gJ3JlYWN0JztcblxuZXhwb3J0IGludGVyZmFjZSBTZWxlY3RvclByb3BzPFQ+IHtcbiAgY29sbGVjdGlvbjogSU9ic2VydmFibGVNYXA8VD47XG4gIG9uQ2hhbmdlZD8oa2V5OiBzdHJpbmcsIHZhbHVlOiBUIHwgdW5kZWZpbmVkKTogdm9pZDtcbiAgZmlsdGVyPyhpdGVtOiBUKTogYm9vbGVhbjtcbiAgc29ydD8oaXRlbTE6IFQsIGl0ZW0yOiBUKTogbnVtYmVyO1xuICAvKiogdGhlIHN0cmluZyB0byBzaG93IGZvciBlYWNoIG9wdGlvbiBpbiB0aGUgc2VsZWN0b3IgKi9cbiAgb3B0aW9uTGFiZWw/KGl0ZW06IFQpOiBzdHJpbmc7XG4gIC8qKiB0aGUgc3RyaW5nIHRvIHNob3cgaW4gdGhlIG9wdGlvbidzIGhvdmVyIHRleHQgKi9cbiAgaG92ZXJMYWJlbD8oaXRlbTogVCk6IHN0cmluZztcbn1cblxuaW50ZXJmYWNlIFNlbGVjdG9yU3RhdGU8VD4ge1xuICBhdmFpbGFibGVPcHRpb25zOiBNYXA8c3RyaW5nLCBUPjtcbiAgc2VsZWN0ZWQ6IHN0cmluZztcbn1cblxuLyoqXG4gKiBBIHNlbGVjdG9yIHRoYXQgd2F0Y2hlcyBhbiBTREsgQ29sbGVjdGlvbiBmb3IgY2hhbmdlcyBhbmQgd2lsbCBwb3B1bGF0ZSBpdHMgb3B0aW9ucyBhcyB0aGUgQ29sbGVjdGlvbiBjaGFuZ2VzXG4gKi9cbmV4cG9ydCBjbGFzcyBDb2xsZWN0aW9uU2VsZWN0PFQ+IGV4dGVuZHMgQ29tcG9uZW50PFNlbGVjdG9yUHJvcHM8VD4sIFNlbGVjdG9yU3RhdGU8VD4+IHtcbiAgcHJpdmF0ZSBzdWJzY3JpcHRpb246IElTdWJzY3JpcHRpb247XG4gIHByaXZhdGUgb3B0aW9uTWFwID0gbmV3IE1hcDxzdHJpbmcsIFQ+KCk7XG4gIHByaXZhdGUgb25DaGFuZ2VkOiAoZXZlbnQ6IENoYW5nZUV2ZW50PEhUTUxTZWxlY3RFbGVtZW50PikgPT4gdm9pZDtcbiAgcHJpdmF0ZSBzZWxlY3RSZWY6IFJlZk9iamVjdDxIVE1MU2VsZWN0RWxlbWVudD47XG5cbiAgY29uc3RydWN0b3IocHJvcHM6IFNlbGVjdG9yUHJvcHM8VD4pIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgdGhpcy5vbkNoYW5nZWQgPSAoZXZlbnQ6IENoYW5nZUV2ZW50PEhUTUxTZWxlY3RFbGVtZW50PikgPT4gdGhpcy5vblZhbHVlQ2hhbmdlZChldmVudCk7XG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGF2YWlsYWJsZU9wdGlvbnM6IHRoaXMub3B0aW9uTWFwLFxuICAgICAgc2VsZWN0ZWQ6ICcnLFxuICAgIH07XG4gICAgdGhpcy5zZWxlY3RSZWYgPSBjcmVhdGVSZWYoKTtcbiAgfVxuXG4gIHB1YmxpYyBjb21wb25lbnREaWRNb3VudCgpOiB2b2lkIHtcbiAgICBpZiAoIXRoaXMuc3Vic2NyaXB0aW9uKSB7XG4gICAgICBjb25zdCBzZWxlY3RvciA9IHRoaXM7XG4gICAgICB0aGlzLnN1YnNjcmlwdGlvbiA9IHRoaXMucHJvcHMuY29sbGVjdGlvbi5zdWJzY3JpYmUoe1xuICAgICAgICBvbkFkZGVkKGlkeCwgaXRlbSkge1xuICAgICAgICAgIGlmICghc2VsZWN0b3IucHJvcHMuZmlsdGVyIHx8IHNlbGVjdG9yLnByb3BzLmZpbHRlcihpdGVtKSkge1xuICAgICAgICAgICAgc2VsZWN0b3Iub3B0aW9uTWFwLnNldChpZHgsIGl0ZW0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgb25SZW1vdmVkKGlkeCkge1xuICAgICAgICAgIHNlbGVjdG9yLm9wdGlvbk1hcC5kZWxldGUoaWR4KTtcbiAgICAgICAgfSxcbiAgICAgICAgb25VcGRhdGVkKGlkeCwgaXRlbSkge1xuICAgICAgICAgIGlmICghc2VsZWN0b3IucHJvcHMuZmlsdGVyIHx8IHNlbGVjdG9yLnByb3BzLmZpbHRlcihpdGVtKSkge1xuICAgICAgICAgICAgc2VsZWN0b3Iub3B0aW9uTWFwLnNldChpZHgsIGl0ZW0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzZWxlY3Rvci5vcHRpb25NYXAuZGVsZXRlKGlkeCk7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBvbkNvbGxlY3Rpb25VcGRhdGVkKGNvbGxlY3Rpb24pIHtcbiAgICAgICAgICBzZWxlY3Rvci5zZXRTdGF0ZSgoc3RhdGUpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGtleSA9IGNvbGxlY3Rpb25bc3RhdGUuc2VsZWN0ZWRdID8gc3RhdGUuc2VsZWN0ZWQgOiBPYmplY3Qua2V5cyhjb2xsZWN0aW9uKVswXTtcblxuICAgICAgICAgICAgaWYgKHNlbGVjdG9yLnByb3BzLm9uQ2hhbmdlZCkge1xuICAgICAgICAgICAgICBpZiAoa2V5KSB7XG4gICAgICAgICAgICAgICAgc2VsZWN0b3IucHJvcHMub25DaGFuZ2VkKGtleSwgc2VsZWN0b3Iub3B0aW9uTWFwLmdldChrZXkpIGFzIFQpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHNlbGVjdG9yLnByb3BzLm9uQ2hhbmdlZCgnJywgdW5kZWZpbmVkKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICBhdmFpbGFibGVPcHRpb25zOiBuZXcgTWFwKHNlbGVjdG9yLm9wdGlvbk1hcCksXG4gICAgICAgICAgICAgIHNlbGVjdGVkOiBrZXkgIT09IHVuZGVmaW5lZCA/IGtleSA6ICcnLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBjb21wb25lbnRXaWxsVW5tb3VudCgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5zdWJzY3JpcHRpb24pIHtcbiAgICAgIHRoaXMuc3Vic2NyaXB0aW9uLmNhbmNlbCgpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgb25WYWx1ZUNoYW5nZWQoZXZlbnQ6IENoYW5nZUV2ZW50PEhUTUxTZWxlY3RFbGVtZW50Pikge1xuICAgIHRoaXMuc2V0U3RhdGUoeyBzZWxlY3RlZDogZXZlbnQuY3VycmVudFRhcmdldC52YWx1ZSB9KTtcbiAgICBpZiAodGhpcy5wcm9wcy5vbkNoYW5nZWQpIHtcbiAgICAgIGNvbnN0IGtleSA9IGV2ZW50LnRhcmdldC52YWx1ZTtcbiAgICAgIHRoaXMucHJvcHMub25DaGFuZ2VkKGtleSwgdGhpcy5vcHRpb25NYXAuZ2V0KGtleSkgYXMgVCk7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIHJlbmRlcigpOiBKU1guRWxlbWVudCB7XG4gICAgLy8gc29ydCBiYXNlZCBvbiB0aGUga2V5ICh0aGUgaWQgb2YgaXRlbXMgaW4gdGhlIGNvbGxlY3Rpb24pXG4gICAgY29uc3QgZW50cmllcyA9IFsuLi50aGlzLnN0YXRlLmF2YWlsYWJsZU9wdGlvbnMuZW50cmllcygpXTtcbiAgICBjb25zdCBzb3J0ZWRFbnRyaWVzID0gZW50cmllcy5zb3J0KChbLCBpdGVtMV0sIFssIGl0ZW0yXSkgPT4ge1xuICAgICAgaWYgKHRoaXMucHJvcHMuc29ydCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcm9wcy5zb3J0KGl0ZW0xLCBpdGVtMik7XG4gICAgICB9XG4gICAgICByZXR1cm4gMDtcbiAgICB9KTtcblxuICAgIHJldHVybiAoXG4gICAgICA8c2VsZWN0XG4gICAgICAgIHJlZj17dGhpcy5zZWxlY3RSZWZ9XG4gICAgICAgIGNsYXNzTmFtZT17J2NvbGxlY3Rpb24tc2VsZWN0b3InfVxuICAgICAgICBvbkNoYW5nZT17dGhpcy5vbkNoYW5nZWR9XG4gICAgICAgIHZhbHVlPXt0aGlzLnN0YXRlLnNlbGVjdGVkfVxuICAgICAgPlxuICAgICAgICB7c29ydGVkRW50cmllcy5sZW5ndGggPiAwID9cbiAgICAgICAgICB0aGlzLnJlbmRlck9wdGlvbnMoc29ydGVkRW50cmllcykgOlxuICAgICAgICAgIDxvcHRpb24gdmFsdWU9Jyc+eycobm8gdmFsdWVzKSd9PC9vcHRpb24+fVxuICAgICAgPC9zZWxlY3Q+XG4gICAgKTtcbiAgfVxuXG4gIHByaXZhdGUgcmVuZGVyT3B0aW9ucyhlbnRyaWVzOiBBcnJheTxbc3RyaW5nLCBUXT4pIHtcbiAgICByZXR1cm4gZW50cmllcy5tYXAoKFtrLCB2XSkgPT4ge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgPG9wdGlvblxuICAgICAgICAgIGtleT17a31cbiAgICAgICAgICB2YWx1ZT17a31cbiAgICAgICAgICB0aXRsZT17dGhpcy5wcm9wcy5ob3ZlckxhYmVsICYmIHRoaXMucHJvcHMuaG92ZXJMYWJlbCh2KX1cbiAgICAgICAgPlxuICAgICAgICAgIHt0aGlzLnByb3BzLm9wdGlvbkxhYmVsID8gdGhpcy5wcm9wcy5vcHRpb25MYWJlbCh2KSA6IGt9XG4gICAgICAgIDwvb3B0aW9uPlxuICAgICAgKTtcbiAgICB9KTtcbiAgfVxufVxuIiwiaW1wb3J0IHR5cGUgeyBDU1NQcm9wZXJ0aWVzLCBQcm9wc1dpdGhDaGlsZHJlbiB9IGZyb20gJ3JlYWN0JztcblxuaW50ZXJmYWNlIFByb3BzIHtcbiAgaGVhZGVyOiBzdHJpbmc7XG59XG5cbmNvbnN0IGNvbnRyb2xQYW5lbFN0eWxlOiBDU1NQcm9wZXJ0aWVzID0ge1xuICBvdmVyZmxvd1k6ICdhdXRvJyxcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBDb250cm9sUGFuZWwocHJvcHM6IFByb3BzV2l0aENoaWxkcmVuPFByb3BzPik6IEpTWC5FbGVtZW50IHtcbiAgcmV0dXJuIChcbiAgICA8ZGl2IHN0eWxlPXtjb250cm9sUGFuZWxTdHlsZX0gY2xhc3NOYW1lPXtgY29udHJvbFBhbmVsYH0+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT17YGNvbnRyb2xQYW5lbEhlYWRlcmB9Pntwcm9wcy5oZWFkZXJ9PC9kaXY+XG4gICAgICB7cHJvcHMuY2hpbGRyZW59XG4gICAgPC9kaXY+XG4gICk7XG59XG4iLCJpbXBvcnQgdHlwZSB7IE1wU2RrIH0gZnJvbSAnQHNkay90eXBlcyc7XG5pbXBvcnQgeyB1c2VDYWxsYmFjaywgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgdHlwZSB7IFNlbGVjdG9yUHJvcHMgfSBmcm9tICcuL0NvbGxlY3Rpb25TZWxlY3Rvcic7XG5pbXBvcnQgeyBDb2xsZWN0aW9uU2VsZWN0IH0gZnJvbSAnLi9Db2xsZWN0aW9uU2VsZWN0b3InO1xuaW1wb3J0IHsgQ29udHJvbFBhbmVsIH0gZnJvbSAnLi9Db250cm9sUGFuZWwnO1xuXG50eXBlIFRyYW5zZm9ybXNGb3I8VD4gPSB7XG4gIFtLIGluICBrZXlvZiBUXTogKGl0ZW06IFRbS10pID0+IHVua25vd247XG59XG5cbnR5cGUgUHJvcHM8VD4gPSBTZWxlY3RvclByb3BzPFQ+ICYge1xuICBjb2xsZWN0aW9uOiBNcFNkay5JT2JzZXJ2YWJsZU1hcDxUPjtcbiAgbGFiZWw6IHN0cmluZztcbiAgLyoqIGlmIHRoZSBvYmplY3QgdG8gaW5zZXBjdCBoYXMgZ2V0dGVycywgcHJvdmlkaW5nIHRoZWlyIGtleXMgaGVyZSB3aWxsIGVudW1lcmF0ZSBhbmQgaW5jbHVkZSB0aGVtIGluIHRoZSBvdXRwdXQgKi9cbiAgYWRkaXRpb25hbFByb3BlcnRpZXM/OiBBcnJheTxrZXlvZiBUPjtcbiAgcHJvcGVydHlUcmFuc2Zvcm1zPzogUGFydGlhbDxUcmFuc2Zvcm1zRm9yPFQ+Pjtcbn07XG5cbi8qKlxuICogSW5wc2VjdCBhbiBTREsgQ29sbGVjdGlvbiBieSBzaG93aW5nIHRoZSBzZWxlY3RlZCBpdGVtJ3MgY29udGVudHMgaW4gYSB0ZXh0YXJlYS5cbiAqIFRoaXMgaXMgYW4gZXh0ZW5zaW9ucyBvZiB0aGUgYENvbGxlY3Rpb25TZWxlY3RgIGFuZCBhY2NlcHRzIGFsbCB0aGUgc2FtZSBwcm9wcy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIENvbGxlY3Rpb25JbnNwZWN0b3I8VD4ocHJvcHM6IFByb3BzPFQ+KTogSlNYLkVsZW1lbnQge1xuICBjb25zdCBbc2VsZWN0ZWRJdGVtLCBzZWxlY3RJdGVtXSA9IHVzZVN0YXRlPFQgfCBudWxsPigpO1xuXG4gIGNvbnN0IG9uQ2hhbmdlZCA9IHVzZUNhbGxiYWNrKChpZDogc3RyaW5nLCBpdGVtOiBUIHwgbnVsbCkgPT4ge1xuICAgIGlmICghaXRlbSkge1xuICAgICAgc2VsZWN0SXRlbShudWxsKTtcbiAgICAgIHByb3BzLm9uQ2hhbmdlZD8uKCcnLCB1bmRlZmluZWQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBvdXRwdXQgPSB7IC4uLml0ZW0gfTtcbiAgICAgIChwcm9wcy5hZGRpdGlvbmFsUHJvcGVydGllcyB8fCBbXSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIG91dHB1dFtrZXldID0gaXRlbVtrZXldO1xuICAgICAgfSk7XG5cbiAgICAgIHNlbGVjdEl0ZW0ob3V0cHV0KTtcbiAgICAgIHByb3BzLm9uQ2hhbmdlZD8uKGlkLCBpdGVtKTtcbiAgICB9XG4gIH0sIFtwcm9wc10pO1xuXG4gIGZ1bmN0aW9uIHNlcmlhbGl6ZU91dHB1dChpdGVtOiBUKTogc3RyaW5nIHtcbiAgICBjb25zdCBvdXRwdXQgPSB7IC4uLml0ZW0gfSBhcyBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPjtcbiAgICBpZiAocHJvcHMucHJvcGVydHlUcmFuc2Zvcm1zKSB7XG4gICAgICAvLyB0eXBlc2NyaXB0IG1ha2VzIGl0IFJFRUVFRUFBQUFMTEwgaGFyZCB0byBkbyBhbiBPYmplY3QuZW50cmllcyBmb3IgYW4gb2JqZWN0IHRoYXQgZG9lc24ndCBoYXZlIFwic3RhbmRhcmRcIiBzdHJpbmcga2V5cy4uLlxuICAgICAgY29uc3QgdHJhbnNmb3JtUmVjb3JkID0gcHJvcHMucHJvcGVydHlUcmFuc2Zvcm1zIGFzIFJlY29yZDxzdHJpbmcsIFRyYW5zZm9ybXNGb3I8VD5ba2V5b2YgVF0+O1xuICAgICAgZm9yIChjb25zdCBba2V5LCB0cmFuc2Zvcm1dIG9mIE9iamVjdC5lbnRyaWVzPFRyYW5zZm9ybXNGb3I8VD5ba2V5b2YgVF0+KHRyYW5zZm9ybVJlY29yZCkpIHtcbiAgICAgICAgb3V0cHV0W2tleV0gPSB0cmFuc2Zvcm0oaXRlbVtrZXkgYXMga2V5b2YgVF0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShvdXRwdXQpO1xuICB9XG5cbiAgcmV0dXJuIChcbiAgICA8Q29udHJvbFBhbmVsIGhlYWRlcj17YCR7cHJvcHMubGFiZWx9IC0gU2VsZWN0b3JgfT5cbiAgICAgIDxkaXY+XG4gICAgICAgIHtwcm9wcy5sYWJlbCArICc6J31cbiAgICAgICAgPENvbGxlY3Rpb25TZWxlY3RcbiAgICAgICAgICBjb2xsZWN0aW9uPXtwcm9wcy5jb2xsZWN0aW9ufVxuICAgICAgICAgIG9uQ2hhbmdlZD17b25DaGFuZ2VkfVxuICAgICAgICAgIHNvcnQ9e3Byb3BzLnNvcnR9XG4gICAgICAgICAgb3B0aW9uTGFiZWw9e3Byb3BzLm9wdGlvbkxhYmVsfVxuICAgICAgICAgIGhvdmVyTGFiZWw9e3Byb3BzLmhvdmVyTGFiZWx9XG4gICAgICAgIC8+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXY+XG4gICAgICAgIDx0ZXh0YXJlYVxuICAgICAgICAgIHN0eWxlPXt7IHdpZHRoOiAnMTAwJScsIGhlaWdodDogJzgwJScgfX1cbiAgICAgICAgICByZWFkT25seVxuICAgICAgICAgIHZhbHVlPXtzZWxlY3RlZEl0ZW0gPyBzZXJpYWxpemVPdXRwdXQoc2VsZWN0ZWRJdGVtKSA6ICcnfVxuICAgICAgICAvPlxuICAgICAgPC9kaXY+XG4gICAgPC9Db250cm9sUGFuZWw+XG4gICk7XG59XG4iLCJpbXBvcnQgdHlwZSB7IE1wU2RrIH0gZnJvbSAnQHNkay90eXBlcyc7XG5pbXBvcnQgeyBGcmFnbWVudCwgdXNlQ2FsbGJhY2ssIHVzZUVmZmVjdCwgdXNlUmVmIH0gZnJvbSAncmVhY3QnO1xuXG5pbnRlcmZhY2UgUHJvcHMge1xuICBzZGs6IE1wU2RrO1xuICBvblJlZ2lzdGVyKGlkOiBzdHJpbmcsIHNyYzogc3RyaW5nKTogdm9pZDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIFJlZ2lzdGVyKHByb3BzOiBQcm9wcyk6IEpTWC5FbGVtZW50IHtcbiAgY29uc3QgaWRJbnB1dCA9IHVzZVJlZjxIVE1MSW5wdXRFbGVtZW50PihudWxsKTtcbiAgY29uc3Qgc3JjSW5wdXQgPSB1c2VSZWY8SFRNTElucHV0RWxlbWVudD4obnVsbCk7XG5cbiAgY29uc3QgcmVnaXN0ZXIgPSB1c2VDYWxsYmFjayhhc3luYyAoaWQ6IHN0cmluZywgc3JjOiBzdHJpbmcpID0+IHtcbiAgICBhd2FpdCBwcm9wcy5zZGsuQXNzZXQucmVnaXN0ZXJUZXh0dXJlKGlkLCBzcmMpO1xuICAgIHByb3BzLm9uUmVnaXN0ZXIoaWQsIHNyYyk7XG4gIH0sIFtwcm9wc10pO1xuXG4gIGNvbnN0IHJlZ2lzdGVyVGV4dHVyZSA9IHVzZUNhbGxiYWNrKGFzeW5jICgpID0+IHtcbiAgICBpZiAoaWRJbnB1dC5jdXJyZW50ICYmIHNyY0lucHV0LmN1cnJlbnQpIHtcbiAgICAgIHJlZ2lzdGVyKGlkSW5wdXQuY3VycmVudC52YWx1ZSwgc3JjSW5wdXQuY3VycmVudC52YWx1ZSk7XG4gICAgfVxuICB9LCBbcmVnaXN0ZXJdKTtcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGNvbnN0IGluaXRpYWxJY29uczogUmVjb3JkPHN0cmluZywgc3RyaW5nPiA9IHtcbiAgICAgIENocm9tZTogICdpbWFnZXMvY2hyb21lLnBuZycsXG4gICAgICBGaXJlZm94OiAnaW1hZ2VzL2ZpcmVmb3gucG5nJyxcbiAgICAgIEVkZ2U6ICAgICdpbWFnZXMvZWRnZS5wbmcnLFxuICAgIH07XG4gICAgZm9yIChjb25zdCBrZXkgaW4gaW5pdGlhbEljb25zKSB7XG4gICAgICByZWdpc3RlcihrZXksIGluaXRpYWxJY29uc1trZXldKTtcbiAgICB9XG4gIH0sIFtdKTtcblxuICByZXR1cm4gKFxuICAgIDxGcmFnbWVudD5cbiAgICAgIDxkaXY+XG4gICAgICAgIDxsYWJlbCBodG1sRm9yPSdhc3NldC1pZCc+aWQ6IDwvbGFiZWw+XG4gICAgICAgIDxpbnB1dCByZWY9e2lkSW5wdXR9IGNsYXNzTmFtZT0nc21hbGwtaW5wdXQnIGlkPSdhc3NldC1pZCcgdHlwZT0nc3RyaW5nJy8+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXY+XG4gICAgICAgIDxsYWJlbCBodG1sRm9yPSdhc3NldC1zcmMnPnNyYzogPC9sYWJlbD5cbiAgICAgICAgPGlucHV0IHJlZj17c3JjSW5wdXR9IGNsYXNzTmFtZT0nc21hbGwtaW5wdXQnIGlkPSdhc3NldC1zcmMnIHR5cGU9J3N0cmluZycvPlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2PlxuICAgICAgICA8YnV0dG9uIGlkPSdhc3NldC1yZWdpc3Rlcicgb25DbGljaz17cmVnaXN0ZXJUZXh0dXJlfT5SZWdpc3RlcjwvYnV0dG9uPlxuICAgICAgPC9kaXY+XG4gICAgPC9GcmFnbWVudD5cbiAgKTtcbn1cbiIsImltcG9ydCB0eXBlIHsgTXBTZGsgfSBmcm9tICdAc2RrL3R5cGVzJztcbmltcG9ydCBSZWFjdCwgeyBGcmFnbWVudCwgdXNlQ2FsbGJhY2sgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBDb2xsZWN0aW9uSW5zcGVjdG9yIH0gZnJvbSAnLi4vQ29sbGVjdGlvbkluc3BlY3Rvcic7XG5pbXBvcnQgeyBBc3NldENvbGxlY3Rpb25BZGFwdGVyIH0gZnJvbSAnLi9Bc3NldENvbGxlY3Rpb24nO1xuaW1wb3J0IHsgQ29udHJvbFBhbmVsIH0gZnJvbSAnLi4vQ29udHJvbFBhbmVsJztcbmltcG9ydCB7IFJlZ2lzdGVyIH0gZnJvbSAnLi9SZWdpc3Rlcic7XG5cbmludGVyZmFjZSBQcm9wcyB7XG4gIHNkazogTXBTZGs7XG4gIGFzc2V0czogUmVjb3JkPHN0cmluZywgc3RyaW5nPjtcbiAgc2V0QXNzZXRzOiBSZWFjdC5EaXNwYXRjaDxSZWFjdC5TZXRTdGF0ZUFjdGlvbjxSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+Pj47XG4gIHNldFNlbGVjdGVkQXNzZXQoYXNzZXRJZDogc3RyaW5nKTogdm9pZDtcbn1cblxuY29uc3QgYXNzZXRDb2xsZWN0aW9uID0gbmV3IEFzc2V0Q29sbGVjdGlvbkFkYXB0ZXIoKTtcblxuZXhwb3J0IGZ1bmN0aW9uIEFzc2V0KHByb3BzOiBQcm9wcyk6IEpTWC5FbGVtZW50IHtcbiAgY29uc3Qgb25SZWdpc3RlciA9IHVzZUNhbGxiYWNrKChpZDogc3RyaW5nLCBzcmM6IHN0cmluZykgPT4ge1xuICAgIHByb3BzLnNldEFzc2V0cygoY3VycmVudEFzc2V0cykgPT4gKHtcbiAgICAgIC4uLmN1cnJlbnRBc3NldHMsXG4gICAgICBbaWRdOiBzcmMsXG4gICAgfSkpO1xuICAgIGFzc2V0Q29sbGVjdGlvbi5hZGQoaWQsIHsgaWQsIHNyYyB9KTtcbiAgfSwgW3Byb3BzXSk7XG5cbiAgcmV0dXJuIChcbiAgICA8RnJhZ21lbnQ+XG4gICAgICA8Q29sbGVjdGlvbkluc3BlY3RvclxuICAgICAgICBjb2xsZWN0aW9uPXthc3NldENvbGxlY3Rpb259XG4gICAgICAgIGxhYmVsPXsnQXNzZXQnfVxuICAgICAgICBvbkNoYW5nZWQ9e3Byb3BzLnNldFNlbGVjdGVkQXNzZXR9XG4gICAgICAvPlxuXG4gICAgICA8Q29udHJvbFBhbmVsIGhlYWRlcj17J0Fzc2V0IC0gUmVnaXN0ZXInfT5cbiAgICAgICAgPFJlZ2lzdGVyIHNkaz17cHJvcHMuc2RrfSBvblJlZ2lzdGVyPXtvblJlZ2lzdGVyfSAvPlxuICAgICAgPC9Db250cm9sUGFuZWw+XG4gICAgPC9GcmFnbWVudD5cbiAgKTtcbn1cblxuIiwiaW1wb3J0IHR5cGUgeyBNcFNkayB9IGZyb20gJ0BzZGsvdHlwZXMnO1xuXG5leHBvcnQgdHlwZSBBc3NldCA9IHtcbiAgaWQ6IHN0cmluZztcbiAgc3JjOiBzdHJpbmc7XG59O1xuLyoqXG4gKiBTaW5jZSB3ZSBkb250JyBleHBvc2UgYSBjb2xsZWN0aW9uIG9mIG1wU2RrLkFzc2V0XG4gKi9cbmV4cG9ydCBjbGFzcyBBc3NldENvbGxlY3Rpb25BZGFwdGVyIHtcbiAgcHJpdmF0ZSBvYnNlcnZlcnMgPSBuZXcgU2V0PE1wU2RrLklNYXBPYnNlcnZlcjxBc3NldD4+KCk7XG4gIHByaXZhdGUgYXNzZXRzOiBNcFNkay5EaWN0aW9uYXJ5PEFzc2V0PiA9IHtcbiAgICAqW1N5bWJvbC5pdGVyYXRvcl0oKSB7XG4gICAgICBmb3IgKGNvbnN0IGtleSBpbiB0aGlzLmFzc2V0cykge1xuICAgICAgICB5aWVsZCBba2V5LCB0aGlzLmFzc2V0c1trZXldXTtcbiAgICAgIH1cbiAgICB9LFxuICB9O1xuXG4gIGNvbnN0cnVjdG9yKCkge31cbiAgcHVibGljIHN1YnNjcmliZShvYnNlcnZlcjogTXBTZGsuSU1hcE9ic2VydmVyPEFzc2V0Pik6IE1wU2RrLklTdWJzY3JpcHRpb24ge1xuICAgIHRoaXMub2JzZXJ2ZXJzLmFkZChvYnNlcnZlcik7XG4gICAgcmV0dXJuIHtcbiAgICAgIGNhbmNlbDogKCkgPT4ge1xuICAgICAgICB0aGlzLm9ic2VydmVycy5kZWxldGUob2JzZXJ2ZXIpO1xuICAgICAgfSxcbiAgICB9O1xuICB9XG5cbiAgcHVibGljIGFkZChpZDogc3RyaW5nLCBhc3NldDogQXNzZXQpOiB2b2lkIHtcbiAgICB0aGlzLmFzc2V0c1tpZF0gPSBhc3NldDtcbiAgICBmb3IgKGNvbnN0IG9ic2VydmVyIG9mIHRoaXMub2JzZXJ2ZXJzKSB7XG4gICAgICBvYnNlcnZlci5vbkFkZGVkPy4oaWQsIGFzc2V0LCB0aGlzLmFzc2V0cyk7XG4gICAgICBvYnNlcnZlci5vbkNvbGxlY3Rpb25VcGRhdGVkPy4odGhpcy5hc3NldHMpO1xuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IHsgRnJhZ21lbnQsIHVzZUNhbGxiYWNrLCB1c2VSZWYsIHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHR5cGUgeyBNb3VzZUV2ZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHR5cGUgeyBNcFNkayB9IGZyb20gJ0BzZGsvdHlwZXMnO1xuXG5pbnRlcmZhY2UgUHJvcHMge1xuICBzZGs6IE1wU2RrO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gQ29udmVyc2lvbldvcmxkVG9TY3JlZW4ocHJvcHM6IFByb3BzKTogSlNYLkVsZW1lbnQge1xuICBjb25zdCBbbWVzc2FnZSwgc2V0TWVzc2FnZV0gPSB1c2VTdGF0ZTxzdHJpbmc+KCcnKTtcbiAgY29uc3QgeElucHV0RWxlbWVudCA9IHVzZVJlZjxIVE1MSW5wdXRFbGVtZW50PihudWxsKTtcbiAgY29uc3QgeUlucHV0RWxlbWVudCA9IHVzZVJlZjxIVE1MSW5wdXRFbGVtZW50PihudWxsKTtcbiAgY29uc3QgeklucHV0RWxlbWVudCA9IHVzZVJlZjxIVE1MSW5wdXRFbGVtZW50PihudWxsKTtcblxuICBjb25zdCBleGVjdXRlID0gdXNlQ2FsbGJhY2soKGVsZW1lbnQ6IE1vdXNlRXZlbnQpID0+IHtcbiAgICBjb25zdCBjb21wdXRlVmFsdWUgPSBhc3luYyBmdW5jdGlvbigpIHtcbiAgICAgIGlmICgheElucHV0RWxlbWVudC5jdXJyZW50IHx8ICF5SW5wdXRFbGVtZW50LmN1cnJlbnQgfHwgIXpJbnB1dEVsZW1lbnQuY3VycmVudCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHNkayAgPSBwcm9wcy5zZGs7XG4gICAgICBjb25zdCB4ID0geElucHV0RWxlbWVudC5jdXJyZW50Py52YWx1ZTtcbiAgICAgIGNvbnN0IHkgPSB5SW5wdXRFbGVtZW50LmN1cnJlbnQ/LnZhbHVlO1xuICAgICAgY29uc3QgeiA9IHpJbnB1dEVsZW1lbnQuY3VycmVudD8udmFsdWU7XG5cbiAgICAgIGlmICgheCB8fCAheSB8fCAheikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGxldCBwb3NlOiBhbnkgPSBudWxsO1xuICAgICAgYXdhaXQgc2RrLkNhbWVyYS5wb3NlLndhaXRVbnRpbChmdW5jdGlvbihwb3NlQ2FsbGJhY2spIHtcbiAgICAgICAgcG9zZSA9IHBvc2VDYWxsYmFjaztcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9KTtcblxuICAgICAgY29uc3Qgc2hvd2Nhc2UgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc2hvd2Nhc2UnKSBhcyBIVE1MSUZyYW1lRWxlbWVudDtcbiAgICAgIGNvbnN0IHNob3djYXNlU2l6ZSA9IHtcbiAgICAgICB3OiBzaG93Y2FzZS5jbGllbnRXaWR0aCxcbiAgICAgICBoOiBzaG93Y2FzZS5jbGllbnRIZWlnaHQsXG4gICAgICB9O1xuXG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCAocHJvcHMuc2RrLkNvbnZlcnNpb24ud29ybGRUb1NjcmVlbih7eDogcGFyc2VGbG9hdCh4KSwgeTogcGFyc2VGbG9hdCh5KSwgejogcGFyc2VGbG9hdCh6KX0sIHBvc2UsIHNob3djYXNlU2l6ZSkpO1xuICAgICAgICByZXN1bHQueCA9IE1hdGgudHJ1bmMocmVzdWx0LngpO1xuICAgICAgICByZXN1bHQueSA9IE1hdGgudHJ1bmMocmVzdWx0LnkpO1xuXG4gICAgICAgIHNldE1lc3NhZ2UoYHN1Y2Nlc3MgeDoke3Jlc3VsdC54fSB5OiR7cmVzdWx0Lnl9YCk7XG4gICAgICB9XG4gICAgICBjYXRjaChlKSB7XG4gICAgICAgIHNldE1lc3NhZ2UoYGVycm9yYCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIGNvbXB1dGVWYWx1ZSgpO1xuICB9LCBbXSk7XG5cbiAgcmV0dXJuIChcbiAgICA8RnJhZ21lbnQ+XG4gICAgICA8dHI+XG4gICAgICAgIDx0ZD5cbiAgICAgICAgICA8YnV0dG9uIG9uQ2xpY2s9e2V4ZWN1dGV9PndvcmxkVG9TY3JlZW48L2J1dHRvbj5cbiAgICAgICAgPC90ZD5cbiAgICAgICAgPHRkPlxuICAgICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIGlkPSdjb252ZXJzaW9uLXdvcmxkdG9zY3JlZW4teCcgY2xhc3NOYW1lPVwic21hbGwtaW5wdXRcIiBwbGFjZWhvbGRlcj0neCcgcmVmPXt4SW5wdXRFbGVtZW50fS8+XG4gICAgICAgIDwvdGQ+XG4gICAgICAgIDx0ZD5cbiAgICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBpZD0nY29udmVyc2lvbi13b3JsZHRvc2NyZWVuLXknIGNsYXNzTmFtZT1cInNtYWxsLWlucHV0XCIgcGxhY2Vob2xkZXI9J3knIHJlZj17eUlucHV0RWxlbWVudH0vPlxuICAgICAgICA8L3RkPlxuICAgICAgICA8dGQ+XG4gICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgaWQ9J2NvbnZlcnNpb24td29ybGR0b3NjcmVlbi16JyBjbGFzc05hbWU9XCJzbWFsbC1pbnB1dFwiIHBsYWNlaG9sZGVyPSd6JyByZWY9e3pJbnB1dEVsZW1lbnR9Lz5cbiAgICAgICAgPC90ZD5cbiAgICAgIDwvdHI+XG4gICAgICA8dHI+XG4gICAgICAgIDx0ZCBjb2xTcGFuPXszfT5cbiAgICAgICAgICA8ZGl2IGlkPSdzZXR0aW5ncy11cGRhdGUtbWVzc2FnZSc+e21lc3NhZ2V9PC9kaXY+XG4gICAgICAgIDwvdGQ+XG4gICAgICA8L3RyPlxuICAgIDwvRnJhZ21lbnQ+XG4gICk7XG59XG4iLCJpbXBvcnQgdHlwZSB7IE1wU2RrIH0gZnJvbSAnQHNkay90eXBlcyc7XG5pbXBvcnQgeyBDb252ZXJzaW9uV29ybGRUb1NjcmVlbiB9IGZyb20gJy4vQ29udmVyc2lvbldvcmxkVG9TY3JlZW4nO1xuXG5pbnRlcmZhY2UgUHJvcHMge1xuICBzZGs6IE1wU2RrLFxufVxuXG5leHBvcnQgZnVuY3Rpb24gQ29udmVyc2lvbihwcm9wczogUHJvcHMpOiBKU1guRWxlbWVudCB7XG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9e2Bjb250cm9sUGFuZWxgfT5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPXtgY29udHJvbFBhbmVsSGVhZGVyYH0+e2BDb252ZXJzaW9uYH08L2Rpdj5cbiAgICAgIDx0YWJsZT5cbiAgICAgICAgPHRib2R5PlxuICAgICAgICAgIDxDb252ZXJzaW9uV29ybGRUb1NjcmVlbiBzZGs9e3Byb3BzLnNka30vPlxuICAgICAgICA8L3Rib2R5PlxuICAgICAgPC90YWJsZT5cbiAgICA8L2Rpdj5cbiAgKTtcbn1cbiIsImltcG9ydCB7IHVzZUNhbGxiYWNrLCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHR5cGUgeyBDU1NQcm9wZXJ0aWVzIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHR5cGUgeyBNcFNkaywgRmxvb3IgfSBmcm9tICdAc2RrL3R5cGVzJztcblxuaW50ZXJmYWNlIFByb3BzIHtcbiAgc2RrOiBNcFNkaztcbn1cblxuY29uc3QgdGV4dEFyZWFTdHlsZTogQ1NTUHJvcGVydGllcyA9IHtcbiAgaGVpZ2h0OiA1MCxcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBGbG9vckdldERhdGEocHJvcHM6IFByb3BzKTogSlNYLkVsZW1lbnQge1xuICBjb25zdCBbZmxvb3JzLCBzZXRGbG9vcnNdID0gdXNlU3RhdGU8Rmxvb3IuRmxvb3JzfG51bGw+KG51bGwpO1xuXG4gIGNvbnN0IGNhbGxiYWNrID0gdXNlQ2FsbGJhY2soYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IHNka0Zsb29ycyA9IGF3YWl0IHByb3BzLnNkay5GbG9vci5nZXREYXRhKCk7XG4gICAgc2V0Rmxvb3JzKHNka0Zsb29ycyk7XG4gIH0sIFtdKTtcblxuICBjb25zdCBzZXJpYWxpemVkID0gSlNPTi5zdHJpbmdpZnkoZmxvb3JzKTtcblxuICByZXR1cm4gKFxuICAgIDx0cj5cbiAgICAgIDx0ZCBjb2xTcGFuPXsxfT5cbiAgICAgICAgPGJ1dHRvbiBvbkNsaWNrPXtjYWxsYmFja30+Z2V0RGF0YTwvYnV0dG9uPlxuICAgICAgPC90ZD5cbiAgICAgIDx0ZCBjb2xTcGFuPXsyfT5cbiAgICAgICAgPHRleHRhcmVhIHJvd3M9ezN9IHN0eWxlPXt0ZXh0QXJlYVN0eWxlfSB2YWx1ZT17c2VyaWFsaXplZH0gcmVhZE9ubHk9e3RydWV9Lz5cbiAgICAgIDwvdGQ+XG4gICAgPC90cj5cbiAgKTtcbn1cbiIsImltcG9ydCB7IEZyYWdtZW50LCB1c2VDYWxsYmFjaywgdXNlUmVmLCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB0eXBlIHsgTXBTZGsgfSBmcm9tICdAc2RrL3R5cGVzJztcblxuaW50ZXJmYWNlIFByb3BzIHtcbiAgc2RrOiBNcFNkaztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIEZsb29yTW92ZVRvKHByb3BzOiBQcm9wcyk6IEpTWC5FbGVtZW50IHtcbiAgY29uc3QgW21lc3NhZ2UsIHNldE1lc3NhZ2VdID0gdXNlU3RhdGU8c3RyaW5nPignJyk7XG4gIGNvbnN0IFttb3ZlQ2FtZXJhT3B0aW9uQ2hhbmdlZCwgc2V0TW92ZUNhbWVyYU9wdGlvbkNoYW5nZWRdID0gdXNlU3RhdGU8Ym9vbGVhbj4oZmFsc2UpO1xuXG4gIGNvbnN0IGlucHV0RWxlbWVudCA9IHVzZVJlZjxIVE1MSW5wdXRFbGVtZW50PihudWxsKTtcbiAgY29uc3QgY2hlY2tib3hFbGVtZW50ID0gdXNlUmVmPEhUTUxJbnB1dEVsZW1lbnQ+KG51bGwpO1xuXG4gIGNvbnN0IGNhbGxiYWNrID0gdXNlQ2FsbGJhY2soYXN5bmMgKGVsZW1lbnQ6IGFueSkgPT4ge1xuICAgIGlmICghaW5wdXRFbGVtZW50LmN1cnJlbnQgfHwgIWNoZWNrYm94RWxlbWVudC5jdXJyZW50KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgbGV0IHJlc3VsdDogc3RyaW5nO1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBmbG9vckluZGV4ID0gcGFyc2VJbnQoaW5wdXRFbGVtZW50LmN1cnJlbnQudmFsdWUsIDEwKTtcbiAgICAgIGxldCBuZXdGbG9vcjtcbiAgICAgIGlmIChtb3ZlQ2FtZXJhT3B0aW9uQ2hhbmdlZCkge1xuICAgICAgICBuZXdGbG9vciA9IGF3YWl0ICgocHJvcHMuc2RrIGFzIGFueSkuRmxvb3IubW92ZVRvKGZsb29ySW5kZXgpKSBhcyBzdHJpbmd8dW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIGNvbnN0IHN1cHByZXNzQ2FtZXJhID0gY2hlY2tib3hFbGVtZW50LmN1cnJlbnQuY2hlY2tlZDtcbiAgICAgICAgbmV3Rmxvb3IgPSBhd2FpdCAoKHByb3BzLnNkayBhcyBhbnkpLkZsb29yLm1vdmVUbyhmbG9vckluZGV4LCBzdXBwcmVzc0NhbWVyYSkpIGFzIHN0cmluZ3x1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICAgIHJlc3VsdCA9IGBNb3ZlZCB0byBmbG9vciBpbmRleCAke25ld0Zsb29yfWA7XG4gICAgfVxuICAgIGNhdGNoKGUpIHtcbiAgICAgIHJlc3VsdCA9IGBFcnJvciAke2V9YDtcbiAgICB9XG5cbiAgICBzZXRNZXNzYWdlKHJlc3VsdCk7XG4gIH0sIFtdKTtcblxuICBjb25zdCB0b2dnbGVNb3ZlQ2FtZXJhT3B0aW9uID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgIHNldE1vdmVDYW1lcmFPcHRpb25DaGFuZ2VkKHRydWUpO1xuICB9LCBbXSk7XG5cbiAgY29uc3QgbW92ZUNhbWVyYURlc2MgPSAhbW92ZUNhbWVyYU9wdGlvbkNoYW5nZWQgPyAnTW92ZSBjYW1lcmEodW5zZXQpJyA6ICdNb3ZlIGNhbWVyYShzZXQpJztcbiAgcmV0dXJuIChcbiAgICA8RnJhZ21lbnQ+XG4gICAgICA8dHI+XG4gICAgICAgIDx0ZCBjb2xTcGFuPXsxfT5cbiAgICAgICAgICA8YnV0dG9uIG9uQ2xpY2s9e2NhbGxiYWNrfT5tb3ZlVG88L2J1dHRvbj5cbiAgICAgICAgPC90ZD5cbiAgICAgICAgPHRkIGNvbFNwYW49ezF9PlxuICAgICAgICAgIDxpbnB1dCB0eXBlPVwibnVtYmVyXCIgaWQ9J2Zsb29yLW1vdmV0by1pbmRleCcgY2xhc3NOYW1lPSdzbWFsbC1pbnB1dCcgcGxhY2Vob2xkZXI9J2luZGV4JyByZWY9e2lucHV0RWxlbWVudH0vPlxuICAgICAgICA8L3RkPlxuICAgICAgICA8dGQgY29sU3Bhbj17MX0+XG4gICAgICAgICAgPGRpdj57bW92ZUNhbWVyYURlc2N9PC9kaXY+XG4gICAgICAgICAgPGlucHV0IGlkPSdmbG9vci1tb3ZldG8tbW92ZWNhbWVyYScgdHlwZT0nY2hlY2tib3gnIHJlZj17Y2hlY2tib3hFbGVtZW50fSBkZWZhdWx0Q2hlY2tlZCBvbkNoYW5nZT17dG9nZ2xlTW92ZUNhbWVyYU9wdGlvbn0vPlxuICAgICAgICA8L3RkPlxuICAgICAgPC90cj5cbiAgICAgIDx0cj5cbiAgICAgICAgPHRkIGNvbFNwYW49ezJ9PlxuICAgICAgICAgIDxkaXYgaWQ9J3NldHRpbmdzLWdldC1tZXNzYWdlJz57bWVzc2FnZX08L2Rpdj5cbiAgICAgICAgPC90ZD5cbiAgICAgIDwvdHI+XG4gICAgPC9GcmFnbWVudD5cbiAgKTtcbn1cbiIsImltcG9ydCB7IHVzZUNhbGxiYWNrIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHR5cGUgeyBNcFNkayB9IGZyb20gJ0BzZGsvdHlwZXMnO1xuXG5pbnRlcmZhY2UgUHJvcHMge1xuICBzZGs6IE1wU2RrO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gRmxvb3JTaG93QWxsKHByb3BzOiBQcm9wcyk6IEpTWC5FbGVtZW50IHtcbiAgY29uc3QgY2FsbGJhY2sgPSB1c2VDYWxsYmFjayhhc3luYyAoZWxlbWVudDogYW55KSA9PiB7XG4gICAgYXdhaXQgcHJvcHMuc2RrLkZsb29yLnNob3dBbGwoKTtcbiAgfSwgW10pO1xuXG4gIHJldHVybiAoXG4gICAgPHRyPlxuICAgICAgPHRkIGNvbFNwYW49ezF9PlxuICAgICAgICA8YnV0dG9uIG9uQ2xpY2s9e2NhbGxiYWNrfT5zaG93QWxsPC9idXR0b24+XG4gICAgICA8L3RkPlxuICAgIDwvdHI+XG4gICk7XG59XG4iLCJpbXBvcnQgdHlwZSB7IENTU1Byb3BlcnRpZXMgfSBmcm9tICdyZWFjdCc7XG5cbmNvbnN0IGNzczogQ1NTUHJvcGVydGllcyA9IHtcbiAgaGVpZ2h0OiA1LFxufTtcblxuZXhwb3J0IGZ1bmN0aW9uIFJvd1NwYWNlcigpOiBKU1guRWxlbWVudCB7XG4gIHJldHVybiAoXG4gICAgPHRyIHN0eWxlPXtjc3N9Lz5cbiAgKTtcbn1cbiIsImltcG9ydCB0eXBlIHsgQ1NTUHJvcGVydGllcyAsIFN5bnRoZXRpY0V2ZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgRnJhZ21lbnQgLCB1c2VDYWxsYmFjaywgdXNlUmVmLCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB0eXBlIHsgSU9ic2VydmFibGVNYXAsIERpY3Rpb25hcnkgfSBmcm9tICdAc2RrL3R5cGVzJztcblxuaW50ZXJmYWNlIENvbGxQcm9wczxUPiB7XG4gIG5hbWU6IHN0cmluZztcbiAgY29sbGVjdGlvbjogSU9ic2VydmFibGVNYXA8VD47XG59XG5cbmludGVyZmFjZSBFdmVudCB7XG4gIGNoZWNrZWQ6IGJvb2xlYW47XG4gIHR5cGU6IHN0cmluZztcbiAgcGF5bG9hZDogYW55O1xufVxuXG5jb25zdCBldmVudExpc3RTdHlsZTogQ1NTUHJvcGVydGllcyA9IHtcbiAgd2lkdGg6ICcyMDBweCcsXG4gIGJvcmRlcldpZHRoOiAxLFxuICBib3JkZXJTdHlsZTogJ3NvbGlkJyxcbiAgYm9yZGVyQ29sb3I6ICdsaWdodGdyYXknLFxufTtcblxuY29uc3QgaW5wdXRTdHlsZTogQ1NTUHJvcGVydGllcyA9IHtcbiAgbWF4V2lkdGg6IDIwLFxufTtcblxuY29uc3Qgb2xTdHlsZTogQ1NTUHJvcGVydGllcyA9IHtcbiAgcGFkZGluZzogMixcbiAgaGVpZ2h0OiAnNTAlJyxcbiAgb3ZlcmZsb3c6ICdzY3JvbGwnLFxufTtcblxuY29uc3QgdW5zdWJiZWRTdHlsZTogQ1NTUHJvcGVydGllcyA9IHtcbiAgYmFja2dyb3VuZENvbG9yOiAncmdiYSgyMzksIDIzOSwgMjM5LCAwLjMpJyxcbn07XG5cbmNvbnN0IHRleHRBcmVhU3R5bGUgPSBmdW5jdGlvbihzaG93OiBib29sZWFuKTogQ1NTUHJvcGVydGllcyB7XG4gIHJldHVybiB7XG4gICAgaGVpZ2h0OiAzMixcbiAgICBkaXNwbGF5OiBzaG93ID8gJ2Jsb2NrJyA6ICdub25lJyxcbiAgfTtcbn07XG5cbi8qKlxuICogQSBjb21wb25lbnQgdGhhdCB3aWxsIHN1YnNjaWJlIHRvIFNESyBDb2xsZWN0aW9uIGFuZCByZXBvcnQgYWxsIG9mIHRoZSBldmVudHMgdGhhdCBoYXZlIG9jY3VycmVkIG9uIHRoYXQgY29sbGVjdGlvblxuICogV2hlbiB1bnN1YnNjcmliZWQsIHRoZSBldmVudCBsaXN0IGlzIHVubW9kaWZpZWQuIFdoZW4gKHJlKXN1YnNjcmliaW5nLCB0aGUgZXZlbnQgbGlzdCBpcyBjbGVhcmVkIGFuZCByZS1yZW5kZXJlZFxuICovXG5leHBvcnQgZnVuY3Rpb24gT2JzZXJ2YWJsZUNvbGxlY3Rpb248VD4ocHJvcHM6IENvbGxQcm9wczxUPik6IEpTWC5FbGVtZW50IHtcbiAgY29uc3QgWyBldmVudExpc3QsIHNldEV2ZW50TGlzdCBdID0gdXNlU3RhdGU8RXZlbnRbXT4oW10pO1xuICBjb25zdCBbIGlzU3Vic2NyaWJlZCwgc3Vic2NyaWJlIF0gPSB1c2VTdGF0ZShmYWxzZSk7XG5cbiAgY29uc3Qgc3ViID0gdXNlUmVmPGFueT4obnVsbCk7XG4gIGNvbnN0IGV2ZW50TGlzdFJlZiA9IHVzZVJlZjxFdmVudFtdPigpO1xuICBldmVudExpc3RSZWYuY3VycmVudCA9IGV2ZW50TGlzdDtcblxuICBjb25zdCBzdWJUb0NvbGxlY3Rpb24gPSB1c2VDYWxsYmFjayhmdW5jdGlvbigpIHtcbiAgICBjb25zdCBoYW5kbGVyID0gZnVuY3Rpb24odHlwZTogc3RyaW5nLCBpdGVtOiBhbnksIGluZGV4Pzogc3RyaW5nKSB7XG4gICAgICBjb25zdCBuZXdFdmVudDogRXZlbnQgPSB7XG4gICAgICAgIGNoZWNrZWQ6IGZhbHNlLFxuICAgICAgICB0eXBlLFxuICAgICAgICBwYXlsb2FkOiBpdGVtLFxuICAgICAgfTtcblxuICAgICAgLy8gbW9kaWZ5aW5nIHRoZSBsaXN0IG11bHRpcGxlIHRpbWVzIHBlciBmcmFtZSByZXF1aXJlcyB0aGF0IHdlIHVzZSB0aGUgKG9sZFN0YXRlKSA9PiBuZXdTdGF0ZSBmb3JtIG9mIHRoZSBzZXR0ZXIgZnJvbSBgdXNlU3RhdGVgXG4gICAgICAvLyBvdGhlcndpc2UsIHdoZW4gUmVhY3QgYmF0Y2hlcyB0aGUgY2hhbmdlcyAoc2luY2Ugb3VyIHN0YXRlIGhhc24ndCB1cGRhdGVkKSB3ZSB3aWxsIGJlIHNldHRpbmcgc3RhdGUgYXMgb25seSB0aGUgbGF0ZXN0IGV2ZW50XG4gICAgICBzZXRFdmVudExpc3QoKGN1cnJlbnRFdmVudHMpID0+IFtcbiAgICAgICAgLi4uY3VycmVudEV2ZW50cyxcbiAgICAgICAgbmV3RXZlbnQsXG4gICAgICBdKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIHByb3BzLmNvbGxlY3Rpb24uc3Vic2NyaWJlKHtcbiAgICAgIG9uQWRkZWQ6IChpbmRleDogc3RyaW5nLCBpdGVtOiBUKSA9PiB7XG4gICAgICAgIGhhbmRsZXIoJ29uQWRkZWQnLCBpdGVtLCBpbmRleCk7XG4gICAgICB9LFxuICAgICAgb25SZW1vdmVkOiAoaW5kZXg6IHN0cmluZywgaXRlbTogVCkgPT4ge1xuICAgICAgICBoYW5kbGVyKCdvblJlbW92ZWQnLCBpdGVtLCBpbmRleCk7XG4gICAgICB9LFxuICAgICAgb25VcGRhdGVkOiAoaW5kZXg6IHN0cmluZywgaXRlbTogVCkgPT4ge1xuICAgICAgICBoYW5kbGVyKCdvblVwZGF0ZWQnLCBpdGVtLCBpbmRleCk7XG4gICAgICB9LFxuICAgICAgb25Db2xsZWN0aW9uVXBkYXRlZDogKGNvbGxlY3Rpb246IERpY3Rpb25hcnk8VD4pID0+IHtcbiAgICAgICAgaGFuZGxlcignb25Db2xsZWN0aW9uVXBkYXRlZCcsIGNvbGxlY3Rpb24pO1xuICAgICAgfSxcbiAgICB9KTtcbiAgfSwgW3Byb3BzLmNvbGxlY3Rpb25dKTtcblxuICBjb25zdCBkb1N1YnNjcmlwdGlvbiA9IHVzZUNhbGxiYWNrKChldmVudDogU3ludGhldGljRXZlbnQ8SFRNTElucHV0RWxlbWVudD4pID0+IHtcbiAgICBjb25zdCB7IGN1cnJlbnRUYXJnZXQ6IGNoZWNrYm94IH0gPSBldmVudDtcbiAgICBpZiAoY2hlY2tib3guY2hlY2tlZCkge1xuICAgICAgLy8gY2xlYXIgdGhlIGV2ZW50IGxpc3QgYW5kIHN0YXJ0IHBvcHVsYXRpbmcgaXQgYWdhaW5cbiAgICAgIHNldEV2ZW50TGlzdChbXSk7XG4gICAgICBzdWIuY3VycmVudCA9IHN1YlRvQ29sbGVjdGlvbigpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdWIuY3VycmVudC5jYW5jZWwoKTtcbiAgICAgIHN1Yi5jdXJyZW50ID0gbnVsbDtcbiAgICB9XG5cbiAgICBzdWJzY3JpYmUoY2hlY2tib3guY2hlY2tlZCk7XG4gIH0sIFtzdWJUb0NvbGxlY3Rpb25dKTtcblxuICBjb25zdCBvbkNoZWNrYm94Q2hhbmdlZCA9IHVzZUNhbGxiYWNrKGZ1bmN0aW9uKGVsZW1lbnQ6IFN5bnRoZXRpY0V2ZW50PEhUTUxJbnB1dEVsZW1lbnQ+KSB7XG4gICAgY29uc3QgaW5kZXggPSBwYXJzZUludChlbGVtZW50LmN1cnJlbnRUYXJnZXQudmFsdWUsIDEwKTtcbiAgICBjb25zdCBuZXdBcnJheSA9IFsuLi5ldmVudExpc3RdO1xuICAgIG5ld0FycmF5W2luZGV4XS5jaGVja2VkID0gZWxlbWVudC5jdXJyZW50VGFyZ2V0LmNoZWNrZWQ7XG4gICAgc2V0RXZlbnRMaXN0KG5ld0FycmF5KTtcbiAgfSwgW2V2ZW50TGlzdF0pO1xuXG4gIGNvbnN0IHJlbmRlckV2ZW50cyA9IGZ1bmN0aW9uKCkge1xuICAgIGNvbnN0IGV2ZW50cyA9IGV2ZW50TGlzdC5tYXAoZnVuY3Rpb24oZXZlbnQ6IEV2ZW50LCBpbmRleDogbnVtYmVyKSB7XG4gICAgICByZXR1cm4oXG4gICAgICAgIDxsaSBrZXk9e2luZGV4fT5cbiAgICAgICAgICA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgdmFsdWU9e2luZGV4fSBvbkNoYW5nZT17b25DaGVja2JveENoYW5nZWR9IHN0eWxlPXtpbnB1dFN0eWxlfS8+e2V2ZW50LnR5cGV9XG4gICAgICAgICAgPHRleHRhcmVhIHJvd3M9ezN9IHN0eWxlPXt0ZXh0QXJlYVN0eWxlKGV2ZW50LmNoZWNrZWQpfSBkZWZhdWx0VmFsdWU9e0pTT04uc3RyaW5naWZ5KGV2ZW50LnBheWxvYWQpfS8+XG4gICAgICAgIDwvbGk+XG4gICAgICApO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIGV2ZW50cztcbiAgfTtcblxuICByZXR1cm4gKFxuICAgIDxGcmFnbWVudD5cbiAgICAgIDxkaXY+Q29sbGVjdGlvbjoge3Byb3BzLm5hbWV9PC9kaXY+XG4gICAgICA8ZGl2PlxuICAgICAgICBzdWJzY3JpYmU6IDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBvbkNoYW5nZT17ZG9TdWJzY3JpcHRpb259IC8+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgc3R5bGU9e2lzU3Vic2NyaWJlZCA/IHsgLi4uZXZlbnRMaXN0U3R5bGUgfSA6IHsgLi4uZXZlbnRMaXN0U3R5bGUsIC4uLnVuc3ViYmVkU3R5bGUgfX0+XG4gICAgICAgIDxvbCBzdHlsZT17b2xTdHlsZX0+XG4gICAgICAgICAge3JlbmRlckV2ZW50cygpfVxuICAgICAgICA8L29sPlxuICAgICAgPC9kaXY+XG4gICAgPC9GcmFnbWVudD5cbiAgKTtcbn1cbiIsImltcG9ydCB0eXBlIHsgQ1NTUHJvcGVydGllcywgU3ludGhldGljRXZlbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyB1c2VDYWxsYmFjaywgdXNlUmVmLCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB0eXBlIHsgSU9ic2VydmFibGUgfSBmcm9tICdAc2RrL3R5cGVzJztcblxuaW50ZXJmYWNlIFByb3BzPFQ+IHtcbiAgbmFtZTogc3RyaW5nO1xuICBvYnNlcnZhYmxlOiBJT2JzZXJ2YWJsZTxUPlxufVxuXG5jb25zdCB0ZXh0QXJlYVN0eWxlOiBDU1NQcm9wZXJ0aWVzID0ge1xuICBoZWlnaHQ6IDUwLFxufTtcblxuZXhwb3J0IGZ1bmN0aW9uIE9ic2VydmFibGU8VD4ocHJvcHM6IFByb3BzPFQ+KTogSlNYLkVsZW1lbnQge1xuICBjb25zdCBbIHZhbHVlLCBzZXRWYWx1ZV0gPSB1c2VTdGF0ZTxzdHJpbmc+KCcnKTtcbiAgY29uc3QgWyBpc1N1YnNjcmliZWQsIHN1YnNjcmliZSBdID0gdXNlU3RhdGUoZmFsc2UpO1xuXG4gIGNvbnN0IHN1YiA9IHVzZVJlZjxhbnk+KG51bGwpO1xuXG4gIGNvbnN0IGRvU3Vic2NyaXB0aW9uID0gdXNlQ2FsbGJhY2soKGV2ZW50OiBTeW50aGV0aWNFdmVudDxIVE1MSW5wdXRFbGVtZW50PikgPT4ge1xuICAgIGNvbnN0IHsgY3VycmVudFRhcmdldDogY2hlY2tib3ggfSA9IGV2ZW50O1xuICAgIGlmIChjaGVja2JveC5jaGVja2VkKSB7XG4gICAgICBzdWIuY3VycmVudCA9IHByb3BzLm9ic2VydmFibGUuc3Vic2NyaWJlKHtcbiAgICAgICAgb25DaGFuZ2VkKGRhdGE6IFQpIHtcbiAgICAgICAgICAvLyBpZiB0aGlzIGlzIGFuIG9iamVjdCwgcHJlcGFyZSB0byBtYWtlIGFsdGVyYXRpb25zXG4gICAgICAgICAgaWYgKGRhdGEgIT09IG51bGwgJiYgdHlwZW9mIGRhdGEgPT09ICdvYmplY3QnICYmICFBcnJheS5pc0FycmF5KGRhdGEpKXtcbiAgICAgICAgICAgIGNvbnN0IG5ld1ZhbHVlID0geyAuLi5kYXRhIH0gYXMgUmVjb3JkPHN0cmluZywgdW5rbm93bj47XG4gICAgICAgICAgICAvLyBzcGVjaWFsIGNhc2VzIGZvciB0aGluZ3MgbGlrZSBgU2V0YCB0aGF0IG90aGVyd2lzZSBpdCBzdHJpbmdpZmllcyB0byBge31gXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBvZiBPYmplY3Qua2V5cyhuZXdWYWx1ZSkpIHtcbiAgICAgICAgICAgICAgY29uc3QgcHJvcFZhbHVlID0gZGF0YVtrZXkgYXMga2V5b2YgdHlwZW9mIGRhdGFdO1xuICAgICAgICAgICAgICAvLyBzdHJpbmdpZnkgYSBgU2V0YCB0byBsb29rIGxpa2UgYW4gYXJyYXlcbiAgICAgICAgICAgICAgaWYgKHByb3BWYWx1ZSBpbnN0YW5jZW9mIFNldCkge1xuICAgICAgICAgICAgICAgIG5ld1ZhbHVlW2tleV0gPSBbLi4ucHJvcFZhbHVlLnZhbHVlcygpXTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc2V0VmFsdWUoSlNPTi5zdHJpbmdpZnkobmV3VmFsdWUpKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gaWYgZGF0YSBpc24ndCBhbiBvYmplY3QsIHBhc3MgaXQgYXMtaXNcbiAgICAgICAgICAgIHNldFZhbHVlKEpTT04uc3RyaW5naWZ5KGRhdGEpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3ViLmN1cnJlbnQuY2FuY2VsKCk7XG4gICAgICBzdWIuY3VycmVudCA9IG51bGw7XG5cbiAgICAgIHNldFZhbHVlKCcnKTtcbiAgICB9XG5cbiAgICBzdWJzY3JpYmUoY2hlY2tib3guY2hlY2tlZCk7XG4gIH0sIFtwcm9wcy5vYnNlcnZhYmxlXSk7XG5cbiAgY29uc3Qgc2VyaWFsaXplZCA9IGlzU3Vic2NyaWJlZCA/IHZhbHVlIDogJ25vdCBzdWJiZWQnO1xuXG4gIHJldHVybiAoXG4gICAgPGRpdj5cbiAgICAgIDxkaXY+XG4gICAgICAgIE9ic2VydmFibGU6IHtwcm9wcy5uYW1lfVxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2PlxuICAgICAgICBzdWJzY3JpYmU6IDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBvbkNoYW5nZT17ZG9TdWJzY3JpcHRpb259IC8+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXY+XG4gICAgICAgIDx0ZXh0YXJlYSByb3dzPXszfSBzdHlsZT17dGV4dEFyZWFTdHlsZX0gcmVhZE9ubHkgdmFsdWU9e3NlcmlhbGl6ZWR9IGRpc2FibGVkPXshaXNTdWJzY3JpYmVkfS8+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgKTtcbn1cbiIsImltcG9ydCB7IEZyYWdtZW50LCB1c2VDYWxsYmFjaywgdXNlRWZmZWN0LCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB0eXBlIHsgTXBTZGsgfSBmcm9tICdAc2RrL3R5cGVzJztcblxuaW50ZXJmYWNlIFByb3BzPFQ+IHtcbiAgc2RrOiBNcFNkaztcbiAgZW51bTogVDtcbn1cblxuaW50ZXJmYWNlIEV2ZW50PFQ+IHtcbiAgY2hlY2tlZDogYm9vbGVhbjtcbiAgdHlwZTogVDtcbiAgZGF0YTogc3RyaW5nO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gRXZlbnQ8VD4ocHJvcHM6IFByb3BzPFQ+KTogSlNYLkVsZW1lbnQge1xuICBjb25zdCBbZXZlbnRMaXN0LCBzZXRFdmVudExpc3RdID0gdXNlU3RhdGU8QXJyYXk8RXZlbnQ8VD4+PihbXSk7XG5cbiAgdXNlRWZmZWN0KGZ1bmN0aW9uKCkge1xuICAgIGNvbnN0IHNkayA9IHByb3BzLnNkaztcbiAgICBjb25zdCBoYW5kbGVFdmVudCA9IGZ1bmN0aW9uKGV2ZW50VHlwZTogVCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKC4uLmFyZ3M6IGFueSkge1xuICAgICAgICBjb25zdCByZXN1bHQ6IHN0cmluZ1tdID0gW107XG4gICAgICAgIGZvciAoY29uc3QgYXJnIG9mIGFyZ3MpIHtcbiAgICAgICAgICBpZiAodHlwZW9mKGFyZykgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICByZXN1bHQucHVzaChKU09OLnN0cmluZ2lmeShhcmcpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXN1bHQucHVzaChhcmcpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGV2ZW50TGlzdC5wdXNoKHtcbiAgICAgICAgICBjaGVja2VkOiBmYWxzZSxcbiAgICAgICAgICB0eXBlOiBldmVudFR5cGUsXG4gICAgICAgICAgZGF0YTogcmVzdWx0LmpvaW4oJywnKSxcbiAgICAgICAgfSk7XG4gICAgICAgIHNldEV2ZW50TGlzdChbLi4uZXZlbnRMaXN0XSk7XG4gICAgICB9O1xuICAgIH07XG5cbiAgICBmb3IgKGNvbnN0IGtleSBvZiBPYmplY3QudmFsdWVzKHByb3BzLmVudW0pKSB7XG4gICAgICBzZGsub24oa2V5IGFzIGFueSwgaGFuZGxlRXZlbnQoa2V5KSk7XG4gICAgfVxuICB9LCBbcHJvcHMuc2RrLCBwcm9wcy5lbnVtLCBldmVudExpc3RdKTtcblxuICBjb25zdCBvbkNoZWNrYm94Q2hhbmdlZCA9IHVzZUNhbGxiYWNrKGZ1bmN0aW9uKGVsZW1lbnQ6IGFueSkge1xuICAgIGNvbnN0IGluZGV4ID0gcGFyc2VJbnQoZWxlbWVudC50YXJnZXQudmFsdWUgYXMgc3RyaW5nLCAxMCk7XG4gICAgY29uc3QgbmV3QXJyYXkgPSBbLi4uZXZlbnRMaXN0XTtcbiAgICBuZXdBcnJheVtpbmRleF0uY2hlY2tlZCA9IGVsZW1lbnQudGFyZ2V0LmNoZWNrZWQ7XG4gICAgc2V0RXZlbnRMaXN0KG5ld0FycmF5KTtcbiAgfSwgW2V2ZW50TGlzdF0pO1xuXG4gIGNvbnN0IHJlbmRlckV2ZW50cyA9IGZ1bmN0aW9uKCkge1xuICAgIGNvbnN0IGV2ZW50SW5mbyA9IGV2ZW50TGlzdC5tYXAoZnVuY3Rpb24oZXZlbnQ6IEV2ZW50PFQ+LCBpbmRleDogbnVtYmVyKSB7XG4gICAgICByZXR1cm4oXG4gICAgICAgIDxsaSBrZXk9e2luZGV4fSBzdHlsZT17e2Rpc3BsYXk6ICdmbGV4JywganVzdGlmeUNvbnRlbnQ6ICdmbGV4LXN0YXJ0J319PlxuICAgICAgICAgIDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiB2YWx1ZT17aW5kZXh9IG9uQ2hhbmdlPXtvbkNoZWNrYm94Q2hhbmdlZH0gc3R5bGU9e3ttYXhXaWR0aDogMjB9fS8+XG4gICAgICAgICAge1xuICAgICAgICAgICAgZXZlbnQuY2hlY2tlZCA/IDx0ZXh0YXJlYSByb3dzPXszfSBzdHlsZT17e2hlaWdodDogMzAsIGZsb2F0OiAncmlnaHQnfX0gZGVmYXVsdFZhbHVlPXtldmVudC5kYXRhfS8+IDpcbiAgICAgICAgICAgIDxkaXYgc3R5bGU9e3tmbG9hdDogJ3JpZ2h0J319PntTdHJpbmcoZXZlbnQudHlwZSl9PC9kaXY+XG4gICAgICAgICAgfVxuICAgICAgICA8L2xpPlxuICAgICAgKTtcbiAgICB9KTtcblxuICAgIHJldHVybiBldmVudEluZm87XG4gIH07XG5cbiAgcmV0dXJuIChcbiAgICA8RnJhZ21lbnQ+XG4gICAgICA8dHI+XG4gICAgICAgIDx0ZCBjb2xTcGFuPXsxfT5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17YGNvbnRyb2xQYW5lbEhlYWRlcmB9PkV2ZW50PC9kaXY+XG4gICAgICAgIDwvdGQ+XG4gICAgICA8L3RyPlxuICAgICAgPHRyPlxuICAgICAgICA8dGQgY29sU3Bhbj17M30+XG4gICAgICAgICAgPG9sIHN0eWxlPXt7cGFkZGluZzogMn19PlxuICAgICAgICAgICAge3JlbmRlckV2ZW50cygpfVxuICAgICAgICAgIDwvb2w+XG4gICAgICAgIDwvdGQ+XG4gICAgICA8L3RyPlxuICAgIDwvRnJhZ21lbnQ+XG4gICk7XG59XG4iLCJpbXBvcnQgeyBGcmFnbWVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB0eXBlIHsgTXBTZGsgfSBmcm9tICdAc2RrL3R5cGVzJztcbmltcG9ydCB7IEZsb29yR2V0RGF0YSB9IGZyb20gJy4vRmxvb3JHZXREYXRhJztcbmltcG9ydCB7IEZsb29yTW92ZVRvIH0gZnJvbSAnLi9GbG9vck1vdmVUbyc7XG5pbXBvcnQgeyBGbG9vclNob3dBbGwgfSBmcm9tICcuL0Zsb29yU2hvd0FsbCc7XG5pbXBvcnQgeyBSb3dTcGFjZXIgfSBmcm9tICcuL1Jvd1NwYWNlcic7XG5pbXBvcnQgeyBPYnNlcnZhYmxlQ29sbGVjdGlvbiB9IGZyb20gJy4vT2JzZXJ2YWJsZUNvbGxlY3Rpb24nO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJy4vT2JzZXJ2YWJsZSc7XG5pbXBvcnQgeyBFdmVudCB9IGZyb20gJy4vRXZlbnQnO1xuaW1wb3J0IHsgQ29udHJvbFBhbmVsIH0gZnJvbSAnLi9Db250cm9sUGFuZWwnO1xuaW50ZXJmYWNlIFByb3BzIHtcbiAgc2RrOiBNcFNkaztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIEZsb29yKHByb3BzOiBQcm9wcyk6IEpTWC5FbGVtZW50IHtcbiAgcmV0dXJuIChcbiAgICA8RnJhZ21lbnQ+XG4gICAgICA8Q29udHJvbFBhbmVsIGhlYWRlcj17YEZsb29yYH0+XG4gICAgICAgIDx0YWJsZT5cbiAgICAgICAgICA8dGJvZHk+XG4gICAgICAgICAgICA8Rmxvb3JHZXREYXRhIHNkaz17cHJvcHMuc2RrfS8+XG4gICAgICAgICAgICA8Um93U3BhY2VyLz5cbiAgICAgICAgICAgIDxGbG9vck1vdmVUbyBzZGs9e3Byb3BzLnNka30vPlxuICAgICAgICAgICAgPFJvd1NwYWNlci8+XG4gICAgICAgICAgICA8Rmxvb3JTaG93QWxsIHNkaz17cHJvcHMuc2RrfS8+XG4gICAgICAgICAgPC90Ym9keT5cbiAgICAgICAgPC90YWJsZT5cbiAgICAgIDwvQ29udHJvbFBhbmVsPlxuICAgICAgPENvbnRyb2xQYW5lbCBoZWFkZXI9e2BGbG9vciAtIEN1cnJlbnRgfT5cbiAgICAgICAgPE9ic2VydmFibGUgb2JzZXJ2YWJsZT17cHJvcHMuc2RrLkZsb29yLmN1cnJlbnR9IG5hbWU9J0Zsb29yLmN1cnJlbnQnLz5cbiAgICAgIDwvQ29udHJvbFBhbmVsPlxuICAgICAgPENvbnRyb2xQYW5lbCBoZWFkZXI9e2BGbG9vciAtIENvbGxlY3Rpb25gfT5cbiAgICAgICAgPE9ic2VydmFibGVDb2xsZWN0aW9uIGNvbGxlY3Rpb249e3Byb3BzLnNkay5GbG9vci5kYXRhfSBuYW1lPSdGbG9vci5kYXRhJy8+XG4gICAgICA8L0NvbnRyb2xQYW5lbD5cbiAgICAgIDxDb250cm9sUGFuZWwgaGVhZGVyPXtgRmxvb3IgLSBFdmVudHNgfT5cbiAgICAgICAgPHRhYmxlPlxuICAgICAgICAgIDx0Ym9keT5cbiAgICAgICAgICAgIDxFdmVudCBlbnVtPXtwcm9wcy5zZGsuRmxvb3IuRXZlbnR9IHNkaz17cHJvcHMuc2RrfS8+XG4gICAgICAgICAgPC90Ym9keT5cbiAgICAgICAgPC90YWJsZT5cbiAgICAgIDwvQ29udHJvbFBhbmVsPlxuICAgIDwvRnJhZ21lbnQ+XG4gICk7XG59XG4iLCJpbXBvcnQgeyBGcmFnbWVudCwgdXNlQ2FsbGJhY2ssIHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgdHlwZSB7IENTU1Byb3BlcnRpZXMgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgdHlwZSB7IE1wU2RrLCBMYWJlbCB9IGZyb20gJ0BzZGsvdHlwZXMnO1xuXG5pbnRlcmZhY2UgUHJvcHMge1xuICBzZGs6IE1wU2RrO1xufVxuXG5jb25zdCB0ZXh0QXJlYVN0eWxlOiBDU1NQcm9wZXJ0aWVzID0ge1xuICBoZWlnaHQ6IDUwLFxufTtcblxuZXhwb3J0IGZ1bmN0aW9uIExhYmVsR2V0RGF0YShwcm9wczogUHJvcHMpOiBKU1guRWxlbWVudCB7XG4gIGNvbnN0IFtsYWJlbHMsIHNldExhYmVsc10gPSB1c2VTdGF0ZTxMYWJlbC5MYWJlbFtdPihbXSk7XG4gIGNvbnN0IFtjdXJyZW50TGFiZWxTaWQsIHNldEN1cnJlbnRMYWJlbFNpZF0gPSB1c2VTdGF0ZTxzdHJpbmc+KCcnKTtcblxuICBjb25zdCBnZXREYXRhID0gdXNlQ2FsbGJhY2soYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IHNka0xhYmVscyA9IGF3YWl0IHByb3BzLnNkay5MYWJlbC5nZXREYXRhKCk7XG4gICAgc2V0TGFiZWxzKHNka0xhYmVscyk7XG4gICAgc2V0Q3VycmVudExhYmVsU2lkKHNka0xhYmVscy5sZW5ndGggPiAwPyBzZGtMYWJlbHNbMF0uc2lkIDogJycpO1xuICB9LCBbXSk7XG5cbiAgbGV0IGxhYmVsT3B0aW9uczogSlNYLkVsZW1lbnR8SlNYLkVsZW1lbnRbXSA9IDxvcHRpb24gdmFsdWU9ezB9IGRpc2FibGVkID4obm8gZGF0YSk8L29wdGlvbj47XG4gIGxldCBzZXJpYWxpemVkID0gJyc7XG5cbiAgaWYgKGxhYmVscy5sZW5ndGggPiAwKSB7XG4gICAgbGFiZWxPcHRpb25zID0gbGFiZWxzLm1hcCgobGFiZWwpID0+IHtcbiAgICAgIHJldHVybiA8b3B0aW9uIGtleT17bGFiZWwuc2lkfSB2YWx1ZT17bGFiZWwuc2lkfT57bGFiZWwuc2lkfTwvb3B0aW9uPjtcbiAgICB9KTtcbiAgICBjb25zdCBpbmRleCA9IGxhYmVscy5maW5kSW5kZXgoKGxhYmVsSXRlbSkgPT4gbGFiZWxJdGVtLnNpZCA9PT0gY3VycmVudExhYmVsU2lkICk7XG5cbiAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICBjb25zdCBsYWJlbCA9IGxhYmVsc1tpbmRleF07XG4gICAgICBzZXJpYWxpemVkID0gSlNPTi5zdHJpbmdpZnkobGFiZWwsIG51bGwsIDIpO1xuICAgIH1cbiAgfVxuXG4gIGNvbnN0IG9uU2VsZWN0ZWQgPSB1c2VDYWxsYmFjaygodmFsOiBhbnkpID0+IHNldEN1cnJlbnRMYWJlbFNpZCh2YWwudGFyZ2V0LnZhbHVlKSwgW10pO1xuXG4gIHJldHVybiAoXG4gICAgPEZyYWdtZW50PlxuICAgICAgPHRyPlxuICAgICAgICA8dGQgY29sU3Bhbj17MX0+XG4gICAgICAgICAgPGJ1dHRvbiBvbkNsaWNrPXtnZXREYXRhfT5nZXREYXRhPC9idXR0b24+XG4gICAgICAgIDwvdGQ+XG4gICAgICAgIDx0ZCBjb2xTcGFuPXsyfT5cbiAgICAgICAgICA8c2VsZWN0IHZhbHVlPXtjdXJyZW50TGFiZWxTaWR9IG9uQ2hhbmdlPXtvblNlbGVjdGVkfT5cbiAgICAgICAgICAgIHtsYWJlbE9wdGlvbnN9XG4gICAgICAgICAgPC9zZWxlY3Q+XG4gICAgICAgIDwvdGQ+XG4gICAgICA8L3RyPlxuICAgICAgPHRyPlxuICAgICAgICA8dGQgY29sU3Bhbj17M30+XG4gICAgICAgICAgPHRleHRhcmVhIHJvd3M9ezN9IHN0eWxlPXt0ZXh0QXJlYVN0eWxlfSBkZWZhdWx0VmFsdWU9e3NlcmlhbGl6ZWR9Lz5cbiAgICAgICAgPC90ZD5cbiAgICAgIDwvdHI+XG4gICAgPC9GcmFnbWVudD5cbiAgKTtcbn1cbiIsImltcG9ydCB7IEZyYWdtZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHR5cGUgeyBNcFNkayB9IGZyb20gJ0BzZGsvdHlwZXMnO1xuaW1wb3J0IHsgTGFiZWxHZXREYXRhIH0gZnJvbSAnLi9MYWJlbEdldERhdGEnO1xuaW1wb3J0IHsgRXZlbnQgfSBmcm9tICcuL0V2ZW50JztcbmltcG9ydCB7IENvbGxlY3Rpb25JbnNwZWN0b3IgfSBmcm9tICcuL0NvbGxlY3Rpb25JbnNwZWN0b3InO1xuXG5pbnRlcmZhY2UgUHJvcHMge1xuICBzZGs6IE1wU2RrO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gTGFiZWwocHJvcHM6IFByb3BzKTogSlNYLkVsZW1lbnQge1xuICByZXR1cm4gKFxuICAgIDxGcmFnbWVudD5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPXtgY29udHJvbFBhbmVsYH0+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPXtgY29udHJvbFBhbmVsSGVhZGVyYH0+e2BMYWJlbGB9PC9kaXY+XG4gICAgICAgIDx0YWJsZT5cbiAgICAgICAgICA8dGJvZHk+XG4gICAgICAgICAgICA8RXZlbnQgc2RrPXtwcm9wcy5zZGt9IGVudW09e3Byb3BzLnNkay5MYWJlbC5FdmVudH0vPlxuICAgICAgICAgICAgPExhYmVsR2V0RGF0YSBzZGs9e3Byb3BzLnNka30vPlxuICAgICAgICAgIDwvdGJvZHk+XG4gICAgICAgIDwvdGFibGU+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxDb2xsZWN0aW9uSW5zcGVjdG9yXG4gICAgICAgIGNvbGxlY3Rpb249e3Byb3BzLnNkay5MYWJlbC5kYXRhfVxuICAgICAgICBsYWJlbD17J0xhYmVsJ31cbiAgICAgIC8+XG4gICAgPC9GcmFnbWVudD5cbiAgKTtcbn1cbiIsImltcG9ydCB0eXBlIHsgSU9ic2VydmFibGUgfSBmcm9tICcuL2dsb2JhbCc7XG5cbmV4cG9ydCBuYW1lc3BhY2UgQXBwIHtcbiAgZXhwb3J0IGVudW0gRXZlbnQge1xuICAgIFBIQVNFX0NIQU5HRSA9ICdhcHBsaWNhdGlvbi5waGFzZWNoYW5nZScsXG4gIH1cbiAgLyoqXG4gICAqIEFwcGxpY2F0aW9uIHBoYXNlcyBhcmUgcmV0dXJuZWQgYXMgcGFydCBvZiB0aGUgW1tzdGF0ZV1dIG9ic2VydmFibGUuXG4gICAqXG4gICAqIGBgYFxuICAgKiBtcFNkay5BcHAuc3RhdGUuc3Vic2NyaWJlKGZ1bmN0aW9uIChhcHBTdGF0ZSkge1xuICAgKiAgaWYoYXBwU3RhdGUucGhhc2UgPT09IG1wU2RrLkFwcC5QaGFzZS5MT0FESU5HKSB7XG4gICAqICAgIGNvbnNvbGUubG9nKCdUaGUgYXBwIGhhcyBzdGFydGVkIGxvYWRpbmchJylcbiAgICogIH1cbiAgICogIGlmKGFwcFN0YXRlLnBoYXNlID09PSBtcFNkay5BcHAuUGhhc2UuU1RBUlRJTkcpIHtcbiAgICogICAgY29uc29sZS5sb2coJ1RoZSB0cmFuc2l0aW9uIGludG8gdGhlIHN0YXJ0IGxvY2F0aW9uIGJlZ2lucyEnKVxuICAgKiAgfVxuICAgKiAgaWYoYXBwU3RhdGUucGhhc2UgPT09IG1wU2RrLkFwcC5QaGFzZS5QTEFZSU5HKSB7XG4gICAqICAgIGNvbnNvbGUubG9nKCdUaGUgYXBwIGlzIHJlYWR5IHRvIHRha2UgdXNlciBpbnB1dCBub3chJylcbiAgICogIH1cbiAgICogfSk7XG4gICAqIGBgYFxuICAgKi9cbiAgZXhwb3J0IGVudW0gUGhhc2Uge1xuICAgIFVOSU5JVElBTElaRUQgPSAnYXBwcGhhc2UudW5pbml0aWFsaXplZCcsXG4gICAgV0FJVElORyAgICAgICA9ICdhcHBwaGFzZS53YWl0aW5nJyxcbiAgICBMT0FESU5HICAgICAgID0gJ2FwcHBoYXNlLmxvYWRpbmcnLFxuICAgIFNUQVJUSU5HICAgICAgPSAnYXBwcGhhc2Uuc3RhcnRpbmcnLFxuICAgIFBMQVlJTkcgICAgICAgPSAnYXBwcGhhc2UucGxheWluZycsXG4gICAgRVJST1IgICAgICAgICA9ICdhcHBwaGFzZS5lcnJvcicsXG4gIH1cblxuICAvKipcbiAgICogQXBwbGljYXRpb25cbiAgICovXG4gIGV4cG9ydCBlbnVtIEFwcGxpY2F0aW9uIHtcbiAgICBVTktOT1dOICA9ICdhcHBsaWNhdGlvbi51bmtub3duJyxcbiAgICBXRUJWUiAgICA9ICdhcHBsaWNhdGlvbi53ZWJ2cicsXG4gICAgU0hPV0NBU0UgPSAnYXBwbGljYXRpb24uc2hvd2Nhc2UnLFxuICAgIFdPUktTSE9QID0gJ2FwcGxpY2F0aW9uLndvcmtzaG9wJyxcbiAgfVxuXG4gIC8qKlxuICAgKiBAZGVwcmVjYXRlZCBUaGlzIHR5cGUgaXMgdXNlZCBieSBkZXByZWNhdGVkIGZ1bmN0aW9uYWxpdHkuIFVzZSBbW3N0YXRlXV0gb2JzZXJ2YWJsZS5cbiAgICovXG4gIGV4cG9ydCB0eXBlIEFwcFN0YXRlID0ge1xuICAgIGFwcGxpY2F0aW9uOiBBcHBsaWNhdGlvbjtcbiAgICBwaGFzZTogUGhhc2U7XG4gIH07XG5cbiAgZXhwb3J0IHR5cGUgU3RhdGUgPSB7XG4gICAgYXBwbGljYXRpb246IEFwcGxpY2F0aW9uO1xuICAgIHBoYXNlOiBQaGFzZTtcbiAgICAvKipcbiAgICAgKiBBbiBvYmplY3Qgd2hvc2Uga2V5cyBhcmUgcGhhc2VzIGZyb20gW1tQaGFzZV1dXG4gICAgICogYW5kIHZhbHVlcyBhcmUgZXBvY2ggdGltZSBpbiBtaWxsaXNlY29uZHMuXG4gICAgICogVGhlIHRpbWVzIGFyZSBmaWxsZWQgaW4gYWZ0ZXIgdGhlIHBoYXNlIGhhcyBwYXNzZWQuXG4gICAgICogYGBgXG4gICAgICoge1xuICAgICAqICAgIHBoYXNlVGltZXM6IHtcbiAgICAgKiAgICAgICdhcHBwaGFzZS51bmluaXRpYWxpemVkJzogMTU3MDA4NDE1NjU5MCxcbiAgICAgKiAgICAgICdhcHBwaGFzZS53YWl0aW5nJzogMCxcbiAgICAgKiAgICAgICdhcHBwaGFzZS5sb2FkaW5nJzogMCxcbiAgICAgKiAgICAgICdhcHBwaGFzZS5zdGFydGluZyc6IDAsXG4gICAgICogICAgICAnYXBwcGhhc2UucGxheWluZyc6IDAsXG4gICAgICogICAgICAnYXBwcGhhc2UuZXJyb3InOiAwLFxuICAgICAqICAgIH1cbiAgICAgKiB9XG4gICAgICogYGBgXG4gICAgICovXG4gICAgcGhhc2VUaW1lczoge1xuICAgICAgW3BoYXNlOiBzdHJpbmddOiBudW1iZXI7XG4gICAgfTtcbiAgfTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBBcHAge1xuICBFdmVudDogdHlwZW9mIEFwcC5FdmVudDtcbiAgUGhhc2U6IHR5cGVvZiBBcHAuUGhhc2U7XG4gIEFwcGxpY2F0aW9uOiB0eXBlb2YgQXBwLkFwcGxpY2F0aW9uO1xuXG4gIC8qKlxuICAgKiBAZGVwcmVjYXRlZCBVc2UgW1tzdGF0ZV1dIG9ic2VydmFibGUgdG8gZ2V0IHRoZSBjdXJyZW50IHBoYXNlIG9yIGFwcGxpY2F0aW9uLlxuICAgKi9cbiAgZ2V0U3RhdGUoKTogUHJvbWlzZTxBcHAuQXBwU3RhdGU+O1xuXG4gIC8qKlxuICAgKiBAZGVwcmVjYXRlZCBVc2UgW1tzdGF0ZV1dIG9ic2VydmFibGUgdG8gZ2V0IGxvYWQgdGltZXMuXG4gICAqL1xuICBnZXRMb2FkVGltZXMoKTogUHJvbWlzZTx7W2tleSBpbiBBcHAuUGhhc2VdOiBudWxsIHwgbnVtYmVyfT47XG5cbiAgLyoqXG4gICAqIEFuIG9ic2VydmFibGUgYXBwbGljYXRpb24gc3RhdGUgb2JqZWN0LlxuICAgKlxuICAgKiBgYGBcbiAgICogbXBTZGsuQXBwLnN0YXRlLnN1YnNjcmliZShmdW5jdGlvbiAoYXBwU3RhdGUpIHtcbiAgICogIC8vIGFwcCBzdGF0ZSBoYXMgY2hhbmdlZFxuICAgKiAgY29uc29sZS5sb2coJ1RoZSBjdXJyZW50IGFwcGxpY2F0aW9uOiAnLCBhcHBTdGF0ZS5hcHBsaWNhdGlvbik7XG4gICAqICBjb25zb2xlLmxvZygnVGhlIGN1cnJlbnQgcGhhc2U6ICcsIGFwcFN0YXRlLnBoYXNlKTtcbiAgICogIGNvbnNvbGUubG9nKCdMb2FkZWQgYXQgdGltZSAnLCBhcHBTdGF0ZS5waGFzZVRpbWVzW21wU2RrLkFwcC5QaGFzZS5MT0FESU5HXSk7XG4gICAqICBjb25zb2xlLmxvZygnU3RhcnRlZCBhdCB0aW1lICcsIGFwcFN0YXRlLnBoYXNlVGltZXNbbXBTZGsuQXBwLlBoYXNlLlNUQVJUSU5HXSk7XG4gICAqIH0pO1xuICAgKlxuICAgKiBvdXRwdXRcbiAgICogPiBUaGUgY3VycmVudCBhcHBsaWNhdGlvbjogYXBwbGljYXRpb24uc2hvd2Nhc2VcbiAgICogPiBUaGUgY3VycmVudCBwaGFzZTogYXBwcGhhc2Uud2FpdGluZ1xuICAgKiA+IExvYWRlZCBhdCB0aW1lIDE1NzAwODQxNTY1OTBcbiAgICogPiBTdGFydGVkIGF0IHRpbWUgMTU3MDA4NDE1NjgyNFxuICAgKiA+XG4gICAqIGBgYFxuICAgKi9cbiAgc3RhdGU6IElPYnNlcnZhYmxlPEFwcC5TdGF0ZT47XG59XG4iLCJleHBvcnQgbmFtZXNwYWNlIEFzc2V0IHtcbiAgLyoqXG4gICAqIEBoaWRkZW5cbiAgICogQGludGVybmFsXG4gICAqIEBleHBlcmltZW50YWxcbiAgICovXG4gIGV4cG9ydCB0eXBlIFZyQ29sb3JwbGFuTWV0YWRhdGEgPSB7XG4gICAgaGVpZ2h0OiBudW1iZXIsXG4gICAgaW1hZ2VPcmlnaW5YOiBudW1iZXIsXG4gICAgaW1hZ2VPcmlnaW5ZOiBudW1iZXIsXG4gICAgcmVzb2x1dGlvblBwbTogbnVtYmVyLFxuICAgIHdpZHRoOiBudW1iZXIsXG4gIH1cblxuICAvKipcbiAgICogQGhpZGRlblxuICAgKiBAaW50ZXJuYWxcbiAgICogQGV4cGVyaW1lbnRhbFxuICAgKi9cbiAgZXhwb3J0IHR5cGUgVnJDb2xvcnBsYW5EYXRhID0ge1xuICAgIGRhdGE6IFZyQ29sb3JwbGFuTWV0YWRhdGEsXG4gICAgaW1hZ2VEYXRhVXJsczogc3RyaW5nW10sXG4gIH1cblxuICAvKipcbiAgICogQGhpZGRlblxuICAgKiBAaW50ZXJuYWxcbiAgICogQGV4cGVyaW1lbnRhbFxuICAgKi9cbiAgZXhwb3J0IGludGVyZmFjZSBJQXR0YWNobWVudCB7XG4gICAgaWQ6IHN0cmluZztcbiAgICBjcmVhdGVkOiBEYXRlO1xuICAgIG1lZGlhVHlwZTogTWVkaWFUeXBlO1xuICAgIGNhdGVnb3J5OiBBdHRhY2htZW50Q2F0ZWdvcnk7XG4gICAgcGFyZW50SWQ/OiBzdHJpbmc7XG4gICAgcGFyZW50VHlwZTogUGFyZW50VHlwZTtcbiAgICBmaWxlbmFtZT86IHN0cmluZztcbiAgICBieXRlcz86IG51bWJlcjtcbiAgICBtaW1lVHlwZT86IHN0cmluZztcbiAgICAvKiogc291cmNlIHVybCAtIHByZWZlciBgdXJsLmdldCgpYCBvdmVyIHRoaXMuICovXG4gICAgc3JjOiBzdHJpbmc7XG4gICAgLyoqIGV4cGlyaW5nIHVybCAqL1xuICAgIHVybDogRXhwaXJpbmdSZXNvdXJjZTxzdHJpbmc+O1xuICAgIC8qKiBleHBpcmluZyB0aHVtYm5haWwgdXJsICovXG4gICAgdGh1bWJuYWlsVXJsOiBFeHBpcmluZ1Jlc291cmNlPHN0cmluZz47XG4gICAgaGVpZ2h0OiBudW1iZXI7XG4gICAgd2lkdGg6IG51bWJlcjtcbiAgfVxuXG4gIC8qKlxuICAgKiBAaGlkZGVuXG4gICAqIEBpbnRlcm5hbFxuICAgKiBAZXhwZXJpbWVudGFsXG4gICAqL1xuICBleHBvcnQgZW51bSBNZWRpYVR5cGUge1xuICAgIElNQUdFID0gJ2ltYWdlJyxcbiAgICBQREYgPSAncGRmJyxcbiAgICBWSURFTyA9ICd2aWRlbycsXG4gICAgUklDSCA9ICdyaWNoJyxcbiAgICBaSVAgPSAnemlwJyxcbiAgICBURVhUID0gJ3RleHQnLFxuICAgIEFVRElPID0gJ2F1ZGlvJyxcbiAgICBNT0RFTCA9ICdtb2RlbCcsXG4gICAgQVBQTElDQVRJT04gPSAnYXBwbGljYXRpb24nLFxuICB9XG5cbiAgLyoqXG4gICAqIEBoaWRkZW5cbiAgICogQGludGVybmFsXG4gICAqIEBleHBlcmltZW50YWxcbiAgICovXG4gIGV4cG9ydCBlbnVtIEF0dGFjaG1lbnRDYXRlZ29yeSB7XG4gICAgRVhURVJOQUwgPSAnZXh0ZXJuYWwnLFxuICAgIFVQTE9BRCA9ICd1cGxvYWQnLFxuICAgIFNBTkRCT1ggPSAnc2FuZGJveCcsXG4gIH1cblxuICAvKipcbiAgICogQGhpZGRlblxuICAgKiBAaW50ZXJuYWxcbiAgICogQGV4cGVyaW1lbnRhbFxuICAgKi9cbiAgZXhwb3J0IGVudW0gUGFyZW50VHlwZSB7XG4gICAgQ09NTUVOVCA9ICdjb21tZW50JyxcbiAgICBNQVRURVJUQUcgPSAnbWF0dGVydGFnJ1xuICB9XG5cbiAgLyoqXG4gICAqIEBoaWRkZW5cbiAgICogQGludGVybmFsXG4gICAqIEBleHBlcmltZW50YWxcbiAgICovXG4gIGV4cG9ydCB0eXBlIEV4cGlyaW5nUmVzb3VyY2U8VD4gPSB7XG4gICAgZ2V0KCk6IFByb21pc2U8VD47XG4gICAgb25TdGFsZT86ICgpID0+IFByb21pc2U8dm9pZD47XG4gICAgdmFsaWRVbnRpbDogRGF0ZSB8IG51bGw7XG4gIH1cbn1cblxuZXhwb3J0IGludGVyZmFjZSBBc3NldCB7XG5cbiAgLyoqXG4gICAqIEdldCBjb2xvcnBsYW4gZGF0YSBVUkxzIGFuZCBtZXRhZGF0YS4gVGhlIG9wdGlvbmFsIHNpZCBoYXMgb25lIGNhdmVhdCwgaXQgYXNzdW1lcyB0aGF0IHRoZSBmbG9vciBjb3VudCBvZiB0aGUgb3RoZXIgc3BhY2UgaXMgdGhlIHNhbWUgYXMgdGhlIGN1cnJlbnQgc3BhY2UuXG4gICAqIFNlZSBodHRwczovL21hdHRlcnBvcnQuYXRsYXNzaWFuLm5ldC9icm93c2UvSlNTREstMjE2MFxuICAgKlxuICAgKiBgYGBcbiAgICogY29uc3QgeyBkYXRhLCBpbWFnZURhdGFVcmxzIH0gPSBhd2FpdCBtcFNkay5Bc3NldC5nZXRWckNvbG9ycGxhbnMoKTtcbiAgICogYGBgXG4gICAqXG4gICAqIEBwYXJhbSBzaWQgQW4gb3B0aW9uYWwgc3RyaW5nIHNwYWNlIHNpZC4gVXNlZCB0byBhY2Nlc3MgdGhlIGNvbG9ycGxhbnMgb2Ygb3RoZXIgc3BhY2VzLiBPbWl0dGluZyB0aGlzIHZhbHVlIGRlZmF1bHRzIHRvIHRoZSBjdXJyZW50IHNwYWNlLlxuICAgKlxuICAgKiBAaGlkZGVuXG4gICAqIEBpbnRlcm5hbFxuICAgKiBAZXhwZXJpbWVudGFsXG4gICAqL1xuICBnZXRWckNvbG9ycGxhbnMoKTogUHJvbWlzZTxBc3NldC5WckNvbG9ycGxhbkRhdGE+O1xuICAvKipcbiAqIEBoaWRkZW5cbiAqIEBpbnRlcm5hbFxuICogQGV4cGVyaW1lbnRhbFxuICovXG4gIGdldFZyQ29sb3JwbGFucyhzaWQ6IHN0cmluZyk6IFByb21pc2U8QXNzZXQuVnJDb2xvcnBsYW5EYXRhPjtcblxuICAvKipcbiAgICogUmVnaXN0ZXIgYSB0ZXh0dXJlIHRvIHVzZSB3aXRoIHN1YnNlcXVlbnQgY2FsbHMgbGlrZSBbW1RhZy5lZGl0SWNvbl1dLlxuICAgKlxuICAgKiAqKk5vdGUqKjogSXQgaXMgcmVjb21tZW5kZWQgdG8gaG9zdCB5b3VyIG93biBpbWFnZXMgdG8gbWl0aWdhdGUgY3Jvc3Mgb3JpZ2luIGxpbWl0YXRpb25zLlxuICAgKlxuICAgKiBgYGBcbiAgICogbXBTZGsuQXNzZXQucmVnaXN0ZXJUZXh0dXJlKCdjdXN0b21UZXh0dXJlSWQnLCAnaHR0cHM6Ly9bbGluay50by9pbWFnZV0nKTtcbiAgICogYGBgXG4gICAqXG4gICAqIEBwYXJhbSBpZCBBIHVzZXIgc3BlY2lmaWVkIHN0cmluZyB0byB1c2UgYXMgYSBsb29rdXAgb2YgdGhpcyB0ZXh0dXJlXG4gICAqIEBwYXJhbSBpY29uU3JjIFRoZSBzcmMgb2YgdGhlIGljb24sIGxpa2UgdGhlIHNyYyBvZiBhbiBcXDxpbWc+XG4gICAqXG4gICAqIEBlbWJlZFxuICAgKiBAYnVuZGxlXG4gICAqIEBpbnRyb2R1Y2VkIDMuMS42OC4xMi03LWc4NTg2ODg5NDRhXG4gICAqL1xuICAgcmVnaXN0ZXJUZXh0dXJlKGlkOiBzdHJpbmcsIGljb25TcmM6IHN0cmluZyk6IFByb21pc2U8dm9pZD47XG5cbiAgLyoqXG4gICAqIEdldHMgYW4gYXNzZXQgYnkgc3BlY2lmaWVkIElELiBUaHJvd3MgYW4gZXJyb3IgaWYgbm9cbiAgICogYXNzZXQgd2l0aCB0aGUgZGVzaXJlZCBJRCBleGlzdHMuXG4gICAqIGBgYFxuICAgKiBtcFNkay5Bc3NldC5nZXRBc3NldEJ5SWQoJ3lvdXItYXNzZXQtaWQnKVxuICAgKiAgIC50aGVuKGFzeW5jIGZ1bmN0aW9uKGFzc2V0KXtcbiAgICogICAgIGNvbnNvbGUubG9nKCdBc3NldCBVUkwgaXMnLCBhd2FpdCBhc3NldC51cmwuZ2V0KCkpO1xuICAgKiAgIH0pO1xuICAgKiBgYGBcbiAgICogQHJldHVybiBBIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aXRoIHRoZSBkZXNpcmVkIGFzc2V0LlxuICAgKlxuICAgKiBAaGlkZGVuXG4gICAqIEBpbnRlcm5hbFxuICAgKiBAZXhwZXJpbWVudGFsXG4gICAqL1xuICAgZ2V0QXNzZXRCeUlkKGlkOiBzdHJpbmcpOiBQcm9taXNlPEFzc2V0LklBdHRhY2htZW50PjtcblxuICAgLyoqXG4gICAgKiBSZWZyZXNoIGFzc2V0cyBmcm9tIHNlcnZlciwgZW5zdXJpbmcgdGhhdCBhbGwgYXR0YWNobWVudHMgYXJlIHVwIHRvIGRhdGUuXG4gICAgKlxuICAgICogQGhpZGRlblxuICAgICogQGludGVybmFsXG4gICAgKiBAZXhwZXJpbWVudGFsXG4gICAgKi9cbiAgIHJlZnJlc2hBc3NldHMoKTogUHJvbWlzZTx2b2lkPjtcbn1cbiIsImltcG9ydCB0eXBlIHsgTW9kZSB9IGZyb20gJy4vbW9kZSc7XG5pbXBvcnQgdHlwZSB7IFZlY3RvcjMsIFZlY3RvcjIsIElPYnNlcnZhYmxlLCBSb3RhdGlvbiB9IGZyb20gJy4vZ2xvYmFsJztcblxuZXhwb3J0IG5hbWVzcGFjZSBDYW1lcmEge1xuICBleHBvcnQgdHlwZSBQb3NlID0ge1xuICAgIHBvc2l0aW9uOiBWZWN0b3IzO1xuICAgIHJvdGF0aW9uOiBWZWN0b3IyO1xuICAgIHByb2plY3Rpb246IEZsb2F0MzJBcnJheTtcbiAgICBzd2VlcDogc3RyaW5nO1xuICAgIG1vZGU6IE1vZGUuTW9kZTtcbiAgfTtcblxuICBleHBvcnQgZW51bSBFdmVudCB7XG4gICAgLyoqIEBldmVudCAqL1xuICAgIE1PVkUgPSAnY2FtZXJhLm1vdmUnLFxuICB9XG5cbiAgZXhwb3J0IGVudW0gRGlyZWN0aW9uIHtcbiAgICBGT1JXQVJEID0gJ0ZPUldBUkQnLFxuICAgIExFRlQgPSAnTEVGVCcsXG4gICAgUklHSFQgPSAnUklHSFQnLFxuICAgIEJBQ0sgPSAnQkFDSycsXG4gICAgVVAgPSAnVVAnLFxuICAgIERPV04gPSAnRE9XTicsXG4gIH1cblxuICBleHBvcnQgdHlwZSBSb3RhdGVPcHRpb25zID0ge1xuICAgIC8qKlxuICAgICAqIFJvdGF0aW9uIHNwZWVkIGluIGRlZ3JlZXMgcGVyIHNlY29uZC5cbiAgICAgKi9cbiAgICBzcGVlZD86IG51bWJlcjtcbiAgfTtcblxuICBleHBvcnQgdHlwZSBab29tRGF0YSA9IHtcbiAgICAvKipcbiAgICAgKiBUaGUgY3VycmVudCB6b29tIGxldmVsXG4gICAgICovXG4gICAgbGV2ZWw6IG51bWJlcjtcbiAgfTtcblxufVxuXG5leHBvcnQgaW50ZXJmYWNlIENhbWVyYSB7XG4gIEV2ZW50OiB0eXBlb2YgQ2FtZXJhLkV2ZW50O1xuICBEaXJlY3Rpb246IHR5cGVvZiBDYW1lcmEuRGlyZWN0aW9uO1xuICAvKipcbiAgICogUmV0dXJucyB0aGUgY3VycmVudCBzdGF0ZSBvZiBjYW1lcmEuXG4gICAqIGBgYFxuICAgKiBtcFNkay5DYW1lcmEuZ2V0UG9zZSgpXG4gICAqICAgLnRoZW4oZnVuY3Rpb24ocG9zZSl7XG4gICAqICAgICBjb25zb2xlLmxvZygnQ3VycmVudCBwb3NpdGlvbiBpcyAnLCBwb3NlLnBvc2l0aW9uKTtcbiAgICogICAgIGNvbnNvbGUubG9nKCdSb3RhdGlvbiBhbmdsZSBpcyAnLCBwb3NlLnJvdGF0aW9uKTtcbiAgICogICAgIGNvbnNvbGUubG9nKCdTd2VlcCBVVUlEIGlzICcsIHBvc2Uuc3dlZXApO1xuICAgKiAgICAgY29uc29sZS5sb2coJ1ZpZXcgbW9kZSBpcyAnLCBwb3NlLm1vZGUpO1xuICAgKiAgIH0pO1xuICAgKiBgYGBcbiAgICogQHJldHVybiBBIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aXRoIHRoZSBjdXJyZW50IHN0YXRlIG9mIHRoZSBjYW1lcmEuXG4gICAqIEBkZXByZWNhdGVkIFlvdSBjYW4gdXNlIHRoZSBbW3Bvc2VdXSBvYnNlcnZhYmxlIHByb3BlcnR5IGluc3RlYWQuXG4gICAqL1xuICBnZXRQb3NlKCk6IFByb21pc2U8Q2FtZXJhLlBvc2U+O1xuXG4gIC8qKlxuICAgKiBBbiBvYnNlcnZhYmxlIHBvc2UgZGF0YSBvYmplY3QgdGhhdCBjYW4gYmUgc3Vic2NyaWJlZCB0by5cbiAgICpcbiAgICogYGBgXG4gICAqIG1wU2RrLkNhbWVyYS5wb3NlLnN1YnNjcmliZShmdW5jdGlvbiAocG9zZSkge1xuICAgKiAgIC8vIENoYW5nZXMgdG8gdGhlIENhbWVyYSBwb3NlIGhhdmUgb2NjdXJyZWQuXG4gICAqICAgY29uc29sZS5sb2coJ0N1cnJlbnQgcG9zaXRpb24gaXMgJywgcG9zZS5wb3NpdGlvbik7XG4gICAqICAgY29uc29sZS5sb2coJ1JvdGF0aW9uIGFuZ2xlIGlzICcsIHBvc2Uucm90YXRpb24pO1xuICAgKiAgIGNvbnNvbGUubG9nKCdTd2VlcCBVVUlEIGlzICcsIHBvc2Uuc3dlZXApO1xuICAgKiAgIGNvbnNvbGUubG9nKCdWaWV3IG1vZGUgaXMgJywgcG9zZS5tb2RlKTtcbiAgICogfSk7XG4gICAqIGBgYFxuICAgKi9cbiAgcG9zZTogSU9ic2VydmFibGU8Q2FtZXJhLlBvc2U+O1xuXG4gIC8qKlxuICAgKiBNb3ZlcyB1c2VyIHRvIGEgZGlmZmVyZW50IHN3ZWVwIHJlbGF0aXZlIHRvIHRoZWlyIGN1cnJlbnQgbG9jYXRpb25cbiAgICpcbiAgICogYGBgXG4gICAqIGNvbnN0IG5leHREaXJlY3Rpb24gPSBtcFNkay5DYW1lcmEuRGlyZWN0aW9uLkZPUldBUkQ7XG4gICAqXG4gICAqIG1wU2RrLkNhbWVyYS5tb3ZlSW5EaXJlY3Rpb24obmV4dERpcmVjdGlvbilcbiAgICogICAudGhlbihmdW5jdGlvbigpe1xuICAgKiAgICAgY29uc29sZS5sb2coJ1RoZSBjYW1lcmEgaGFzIG1vdmVkIGZvcndhcmQuJyk7XG4gICAqICAgfSlcbiAgICogICAuY2F0Y2goZnVuY3Rpb24oKXtcbiAgICogICAgIGNvbnNvbGUud2FybmluZygnQW4gZXJyb3Igb2NjdXJlZCB3aGlsZSBtb3ZpbmcgaW4gdGhhdCBkaXJlY3Rpb24uJyk7XG4gICAqICAgfSk7XG4gICAqIGBgYFxuICAgKiBAcGFyYW0gZGlyZWN0aW9uIFRoZSBkaXJlY3Rpb24uXG4gICAqIEByZXR1cm4gQSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2hlbiBhIHN3ZWVwIGhhcyBiZWVuIHJlYWNoZWQuXG4gICAqXG4gICAqICoqRXJyb3JzKipcbiAgICpcbiAgICogKiBGYWlscyBpZiBkaXJlY3Rpb24gaXMgbm90IG9uZSBvZiB0aGUgYWJvdmUgb3B0aW9ucy5cbiAgICogKiBXYXJucyBpZiB5b3UgY2Fu4oCZdCBtb3ZlIGluIHRoYXQgZGlyZWN0aW9uIChoaXQgYSB3YWxsKS5cbiAgICpcbiAgICogKipOb3RlcyoqXG4gICAqXG4gICAqIFRoaXMgaXMgdGhlIHNhbWUgYmVoYXZpb3IgYXMgaWYgdGhlIHVzZXIgcHJlc3NlcyB0aGUgYXJyb3cga2V5cyB3aGlsZSBpbiAzRCBTaG93Y2FzZS5cbiAgICpcbiAgICogKiBDYW1lcmEuRGlyZWN0aW9uLlVQIGlzIGxpa2UgbW92aW5nIGZvcndhcmRzXG4gICAqICogQ2FtZXJhLkRpcmVjdGlvbi5ET1dOIGlzIGxpa2UgbW92aW5nIGJhY2t3YXJkc1xuICAgKlxuICAgKiBUaGlzIGFjdGlvbiBpcyBmb3IgbW92aW5nIGJldHdlZW4gc3dlZXBzIHdoaWxlIGluIEluc2lkZSBWaWV3LlxuICAgKi9cbiAgbW92ZUluRGlyZWN0aW9uKGRpcmVjdGlvbjogQ2FtZXJhLkRpcmVjdGlvbik6IFByb21pc2U8dm9pZD47XG5cbiAgLyoqXG4gICAqIFBhbnMgdGhlIGNhbWVyYS5cbiAgICpcbiAgICogYGBgXG4gICAqIG1wU2RrLkNhbWVyYS5wYW4oeyB4OiAxLCB6OiAxIH0pXG4gICAqICAgLnRoZW4oZnVuY3Rpb24oKSB7XG4gICAqICAgICAvLyBQYW4gY29tcGxldGUuXG4gICAqICAgfSlcbiAgICogICAuY2F0Y2goZnVuY3Rpb24oZXJyb3IpIHtcbiAgICogICAgIC8vIFBhbiBlcnJvci5cbiAgICogICB9KTtcbiAgICogYGBgXG4gICAqXG4gICAqIEBwYXJhbSBwYXJhbXMueCBBYnNvbHV0ZSBwb3NpdGlvbiBvZiB0aGUgc3dlZXAgb24gdGhlIHggYXhpcy5cbiAgICogQHBhcmFtIHBhcmFtcy56IEFic29sdXRlIHBvc2l0aW9uIG9mIHRoZSBzd2VlcCBvbiB0aGUgeiBheGlzLlxuICAgKiBAcmV0dXJuIEEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdoZW4gdGhlIHBhbiBpcyBjb21wbGV0ZS5cbiAgICpcbiAgICogKipFcnJvcnMqKlxuICAgKlxuICAgKiAqIFdhcm5zIGlmIHBhbiB3YXMgc3VjY2Vzc2Z1bCBidXQgeW91IGhpdCB0aGUgbW9kZWwgYm91bmRzLlxuICAgKiAqIEZhaWxzIGlmIHlvdSBhcmUgYWxyZWFkeSBhdCB0aGUgbW9kZWwgYm91bmRzIGFuZCB5b3UgY2Fubm90IG1vdmUgYW55IGZ1cnRoZXIuXG4gICAqXG4gICAqICoqTm90ZXMqKlxuICAgKlxuICAgKiBUaGUgb3JpZW50YXRpb24gb2YgdGhlIGF4ZXMgZGVwZW5kcyBvbiB0aGUgc3dlZXAgeW91IHdlcmUgaW4gYmVmb3JlIGVudGVyaW5nXG4gICAqIEZsb29ycGxhbiBhbmQgdGhlIGFzcGVjdCByYXRpbyBvZiB3aW5kb3cuXG4gICAqXG4gICAqIE9ubHkgYXZhaWxhYmxlIGluIERvbGxob3VzZSBvciBGbG9vcnBsYW4gVmlldy4gVGhpcyBpcyB0aGUgc2FtZSBiZWhhdmlvciBhc1xuICAgKiBpZiB0aGUgdXNlciB1c2VzIHRoZSBrZXlib2FyZCBzaG9ydGN1dHMgVywgQSwgUywgYW5kIEQgb3IgdGhlIGFycm93IGtleXMuXG4gICAqXG4gICAqIFVzZSBgbXBTZGsuQ2FtZXJhLnBhbih7IHg6IDAsIHo6IDAgfSk7YCB0byByZXR1cm4gdG8gZGlyZWN0bHkgYWJvdmUgdGhlXG4gICAqIHZlcnkgZmlyc3Qgc3dlZXAgc2Nhbm5lZC5cbiAgICovXG4gIHBhbihwYXJhbXM6IHsgeDogbnVtYmVyLCB6OiBudW1iZXIgfSk6IFByb21pc2U8dm9pZD47XG5cbiAgLyoqXG4gICAqIFJvdGF0ZXMgdGhlIGNhbWVyYSAodXNlcuKAmXMgdmlld3BvaW50KS5cbiAgICpcbiAgICogYGBgXG4gICAqIG1wU2RrLkNhbWVyYS5yb3RhdGUoMTAsIC0yMCwgeyBzcGVlZDogMiB9KVxuICAgKiAgIC50aGVuKGZ1bmN0aW9uKCkge1xuICAgKiAgICAgLy8gQ2FtZXJhIHJvdGF0aW9uIGNvbXBsZXRlLlxuICAgKiAgIH0pXG4gICAqICAgLmNhdGNoKGZ1bmN0aW9uKGVycm9yKSB7XG4gICAqICAgICAvLyBDYW1lcmEgcm90YXRpb24gZXJyb3IuXG4gICAqICAgfSk7XG4gICAqIGBgYFxuICAgKlxuICAgKiBAcGFyYW0gdmVydGljYWwgSG93IG1hbnkgZGVncmVlcyB0byByb3RhdGUgdXAgb3IgZG93bi5cbiAgICogQHBhcmFtIGhvcml6b250YWwgSG93IG1hbnkgZGVncmVlcyB0byByb3RhdGUgbGVmdCBvciByaWdodC5cbiAgICogQHBhcmFtIG9wdGlvbnNcbiAgICogQHJldHVybiBBIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aGVuIHRoZSByb3RhdGlvbiBpcyBjb21wbGV0ZS5cbiAgICpcbiAgICogKipFcnJvcnMqKlxuICAgKlxuICAgKiAqIFdhcm5zIHRvIGNvbnNvbGUgaWYgeW91IHJvdGF0ZWQsIGJ1dCB0aGVuIHlvdSBoaXQgdGhlIHZlcnRpY2FsIGxpbWl0LlxuICAgKiAqIFdhcm5zIGlmIHRyeWluZyB0byByb3RhdGUgdXAgb3IgZG93biBpbiBGbG9vcnBsYW4gVmlldy5cbiAgICogKiBGYWlscyBpZiBubyBtb3ZlbWVudCBiZWNhdXNlIHlvdSBhcmUgYWxyZWFkeSBhdCBhIHJvdGF0aW9uIGxpbWl0LlxuICAgKlxuICAgKiAqKk5vdGVzKipcbiAgICpcbiAgICogSWYgdXNlciBpcyBpbiBEb2xsaG91c2Ugb3IgRmxvb3JwbGFuIFZpZXcsIHRoZSBlbnRpcmUgTWF0dGVycG9ydCBTcGFjZSBpcyByb3RhdGVkLlxuICAgKiAqIFBvc2l0aXZlIHZhbHVlcyBmb3IgaG9yaXpvbnRhbCBtZWFucyB0aGUgU3BhY2Ugcm90YXRlcyBjbG9ja3dpc2UuXG4gICAqICogTmVnYXRpdmUgdmFsdWVzIGZvciBob3Jpem9udGFsIGNvdW50ZXJjbG9ja3dpc2Ugcm90YXRpb25zLlxuICAgKiAqIEluIERvbGxob3VzZSB2aWV3LCB2ZXJ0aWNhbCByYW5nZXMgZnJvbSAwwrAgKGhvcml6b250YWwpIHRvIDgwwrAgYWJvdmUgdGhlIFNwYWNlLlxuICAgKiAqIEluIEZsb29ycGxhbiB2aWV3LCB0aGUgdmVydGljYWwgdmFsdWUgaXMgaWdub3JlZC5cbiAgICpcbiAgICogSWYgdGhlIHVzZXIgaXMgaW4gSW5zaWRlIFZpZXcgb3IgMzYwwrogVmlldywgdGhlaXIgdmlld3BvaW50IGlzIHJvdGF0ZWQuXG4gICAqICogUG9zaXRpdmUgdmFsdWVzIGZvciBob3Jpem9udGFsIG1lYW5zIHRoZSB1c2VyIHJvdGF0ZXMgY2xvY2t3aXNlLlxuICAgKiAqIE5lZ2F0aXZlIHZhbHVlcyBmb3IgaG9yaXpvbnRhbCBhcmUgY291bnRlcmNsb2Nrd2lzZSByb3RhdGlvbnMuXG4gICAqICogVmVydGljYWwgcmFuZ2VzIGZyb20gLTcwwrAgKGRvd24pIHRvIDcwwrAgKHVwKS5cbiAgICogKiBUaWx0aW5nIHRoZSB2aWV3IChzaW1pbGFyIHRvIHRpbHRpbmcgb25l4oCZcyBoZWFkKSBub3Qgc3VwcG9ydGVkLlxuICAgKlxuICAgKiBSb3RhdGlvbiBpcyByZWxhdGl2ZSB0byB0aGUgdXNlcuKAmXMgY3VycmVudCB2aWV3cG9pbnQuXG4gICAqIFRoaXMgaXMgdGhlIHNhbWUgYmVoYXZpb3IgYXMgaWYgdGhlIHVzZXIgdXNlcyB0aGUga2V5Ym9hcmQgc2hvcnRjdXRzIEksIEosIEssIGFuZCBMLlxuICAgKiBTcGVlZHMgbGVzcyB0aGFuIG9yIGVxdWFsIHRvIHplcm8gYXJlIG5vdCBhbGxvd2VkLlxuICAgKi9cbiAgcm90YXRlKGhvcml6b250YWw6IG51bWJlciwgdmVydGljYWw6IG51bWJlciwgb3B0aW9ucz86IENhbWVyYS5Sb3RhdGVPcHRpb25zKTogUHJvbWlzZTx2b2lkPjtcblxuICAvKipcbiAgICogU2V0cyB0aGUgb3JpZW50YXRpb24gb2YgdGhlIGNhbWVyYSAodXNlcuKAmXMgdmlld3BvaW50KSB3aGlsZSBpbiBQYW5vcmFtYSBWaWV3LlxuICAgKlxuICAgKiBgYGBcbiAgICogbXBTZGsuQ2FtZXJhLnNldFJvdGF0aW9uKHsgeDogMTAsIHk6IC0yMCB9LCB7IHNwZWVkOiAyIH0pXG4gICAqICAgLnRoZW4oZnVuY3Rpb24oKSB7XG4gICAqICAgICAvLyBDYW1lcmEgcm90YXRpb24gY29tcGxldGUuXG4gICAqICAgfSlcbiAgICogICAuY2F0Y2goZnVuY3Rpb24oZXJyb3IpIHtcbiAgICogICAgIC8vIENhbWVyYSByb3RhdGlvbiBlcnJvci5cbiAgICogICB9KTtcbiAgICogYGBgXG4gICAqXG4gICAqIEBwYXJhbSByb3RhdGlvbiBUaGUgdGFyZ2V0IHJvdGF0aW9uXG4gICAqIEBwYXJhbSBvcHRpb25zXG4gICAqIEByZXR1cm4gQSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2hlbiB0aGUgcm90YXRpb24gaXMgY29tcGxldGUuXG4gICAqXG4gICAqICoqRXJyb3JzKipcbiAgICogKiBGYWlscyBpZiB0aGUgY3VycmVudCB2aWV3IG1vZGUgaXMgbm90IFBhbm9yYW1hIFZpZXcuXG4gICAqXG4gICAqICoqTm90ZXMqKlxuICAgKiAqIEEgdGFyZ2V0IHJvdGF0aW9uIGNhbiBiZSByZXRyaWV2ZWQgZnJvbSBbW0NhbWVyYS5wb3NlXV1cbiAgICogKiBSb3RhdGlvbiBpcyBhYnNvbHV0ZSBzbyBtdWx0aXBsZSBjYWxscyB3aWxsIG5vdCBmdXJ0aGVyIGNoYW5nZSBvcmllbnRhdGlvbiAoZmxvYXRpbmcgcG9pbnQgZXJyb3Igbm90d2l0aHN0YW5kaW5nKS5cbiAgICogKiBTcGVlZHMgbGVzcyB0aGFuIG9yIGVxdWFsIHRvIHplcm8gYXJlIG5vdCBhbGxvd2VkLlxuICAgKi9cbiAgc2V0Um90YXRpb24ocm90YXRpb246IFJvdGF0aW9uLCBvcHRpb25zPzogQ2FtZXJhLlJvdGF0ZU9wdGlvbnMpOiBQcm9taXNlPHZvaWQ+O1xuXG4gIC8qKlxuICAgKiBSb3RhdGVzIHRoZSBjYW1lcmEgdG8gYSBzcGVjaWZpYyBzY3JlZW4gY29vcmRpbmF0ZS5cbiAgICogQ29vcmRpbmF0ZXMgYXJlIG1lYXN1cmUgaW4gcGl4ZWxzLCByZWxhdGl2ZSB0byB0aGUgV2ViR0wgQ2FudmFzJyB0b3AgbGVmdCBjb3JuZXIuXG4gICAqIFNlZSBodHRwczovL3d3dy53M3NjaG9vbHMuY29tL2dyYXBoaWNzL2NhbnZhc19jb29yZGluYXRlcy5hc3AgZm9yIG1vcmUgaW5mb3JtYXRpb24gb24gY29vcmRpbmF0ZXMuXG4gICAqXG4gICAqIGBgYFxuICAgKiBtcFNkay5DYW1lcmEubG9va0F0U2NyZWVuQ29vcmRzKDUwMCwgMzIwKVxuICAgKiAgIC50aGVuKGZ1bmN0aW9uKCkge1xuICAgKiAgICAgLy8gQ2FtZXJhIHJvdGF0aW9uIGNvbXBsZXRlLlxuICAgKiAgIH0pXG4gICAqICAgLmNhdGNoKGZ1bmN0aW9uKGVycm9yKSB7XG4gICAqICAgICAvLyBDYW1lcmEgcm90YXRpb24gZXJyb3IuXG4gICAqICAgfSk7XG4gICAqIGBgYFxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0geCBIb3Jpem9udGFsIHBvc2l0aW9uLCBpbiBwaXhlbHMuIFN0YXJ0aW5nIGZyb20gdGhlIGNhbnZhcycgdG9wIGxlZnQgY29ybmVyLlxuICAgKiBAcGFyYW0ge251bWJlcn0geSBWZXJ0aWNhbCBwb3NpdGlvbiwgaW4gcGl4ZWxzLiBTdGFydGluZyBmcm9tIHRoZSBjYW52YXMnIHRvcCBsZWZ0IGNvcm5lci5cbiAgICogQHJldHVybnMge1Byb21pc2U8dm9pZD59IEEgUHJvbWlzZSB0aGF0IHJlc29sdmVzIHdoZW4gdGhlIHJvdGF0aW9uIGlzIGNvbXBsZXRlLlxuICAgKlxuICAgKiAqKkVycm9ycyoqXG4gICAqICogRmFpbHMgaWYgdXNlZCBvdXRzaWRlIG9mIEluc2lkZSBtb2RlLlxuICAgKiAqIFdhcm5zIHRvIGNvbnNvbGUgaWYgeW91IHJvdGF0ZWQsIGJ1dCB0aGVuIHlvdSBoaXQgdGhlIHZlcnRpY2FsIGxpbWl0LlxuICAgKiAqIEZhaWxzIGlmIG5vIG1vdmVtZW50IGJlY2F1c2UgeW91IGFyZSBhbHJlYWR5IGF0IGEgcm90YXRpb24gbGltaXQuXG4gICAqL1xuICBsb29rQXRTY3JlZW5Db29yZHMoeDogbnVtYmVyLCB5OiBudW1iZXIpOiBQcm9taXNlPHZvaWQ+O1xuXG4gIC8qKlxuICAgKiBab29tcyB0aGUgY2FtZXJhIHRvIGEgcGVyY2VudGFnZSBvZiB0aGUgYmFzZSBmaWVsZCBvZiB2aWV3LlxuICAgKlxuICAgKiBFeDogRG91YmxpbmcgdGhlIHpvb20sIGhhbHZlcyB0aGUgZmllbGQgb2Ygdmlldy5cbiAgICpcbiAgICogYGBgXG4gICAqIG1wU2RrLkNhbWVyYS56b29tVG8oMi4wKVxuICAgKiAgLnRoZW4oZnVuY3Rpb24gKG5ld1pvb20pIHtcbiAgICogICAgY29uc29sZS5sb2coJ0NhbWVyYSB6b29tZWQgdG8nLCBuZXdab29tKTtcbiAgICogIH0pO1xuICAgKiBgYGBcbiAgICpcbiAgICogQHBhcmFtIHpvb21MZXZlbFxuICAgKlxuICAgKiAqKkVycm9ycyoqXG4gICAqICogRmFpbHMgaWYgdGhlIGN1cnJlbnQgbW9kZSBpcyBub3QgSW5zaWRlIG1vZGUuXG4gICAqICogV2FybnMgdG8gY29uc29sZSBpZiB0aGUgem9vbSBsZXZlbCBpcyBvdXRzaWRlIG9mIHRoZSB6b29tIHJhbmdlIHN1cHBvcnRlZC5cbiAgICovXG4gIHpvb21Ubyh6b29tTGV2ZWw6IG51bWJlcik6IFByb21pc2U8bnVtYmVyPjtcblxuICAvKipcbiAgICogWm9vbXMgdGhlIGNhbWVyYSBieSBhIHBlcmNlbnRhZ2UuIFRoZSB6b29tIGRlbHRhIGlzIGRlZmluZWQgcmVsYXRpdmUgdG8gdGhlIGJhc2UgZmllbGQgb2Ygdmlldywgbm90IHRoZSBjdXJyZW50IHpvb20uXG4gICAqIFRoaXMgbWVhbnMgdGhhdCB0aGUgZGVsdGEgaXMgc3RyaWN0bHkgYWRkZWQsIGFuZCBub3QgbXVsdGlwbGllZCBieSB0aGUgY3VycmVudCB6b29tIGZpcnN0LlxuICAgKlxuICAgKlxuICAgKiBFeDogSWYgYXQgem9vbSAyLjAsIHpvb21pbmcgYnkgYW5vdGhlciAwLjF4IHdpbGwgYnJpbmcgdGhlIGNhbWVyYSB0byAyLjF4ICgyLjAgKyAwLjEpIG5vdCAyLjJ4ICgyLjAgKyAyLjAgKiAwLjEpXG4gICAqXG4gICAqIGBgYFxuICAgKiBtcFNkay5DYW1lcmEuem9vbUJ5KDAuMSlcbiAgICogICAudGhlbihmdW5jdGlvbiAobmV3Wm9vbSkge1xuICAgKiAgICAgY29uc29sZS5sb2coJ0NhbWVyYSB6b29tZWQgdG8nLCBuZXdab29tKTtcbiAgICogICB9KTtcbiAgICogYGBgXG4gICAqXG4gICAqIEBwYXJhbSB6b29tRGVsdGFcbiAgICpcbiAgICogKipFcnJvcnMqKlxuICAgKiAqIEZhaWxzIGlmIHRoZSBjdXJyZW50IG1vZGUgaXMgbm90IEluc2lkZSBtb2RlLlxuICAgKiAqIFdhcm5zIHRvIGNvbnNvbGUgaWYgdGhlIHpvb20gbGV2ZWwgd291bGQgYmUgb3V0c2lkZSBvZiB0aGUgem9vbSByYW5nZSBzdXBwb3J0ZWQuXG4gICAqL1xuICB6b29tQnkoem9vbURlbHRhOiBudW1iZXIpOiBQcm9taXNlPG51bWJlcj47XG5cbiAgLyoqXG4gICAqIFJlc2V0IHRoZSB6b29tIG9mIHRoZSBjYW1lcmEgYmFjayB0byAxLjB4LlxuICAgKlxuICAgKiBgYGBcbiAgICogbXBTZGsuQ2FtZXJhLnpvb21SZXNldCgpXG4gICAqICAgLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgKiAgICAgY29uc29sZS5sb2coJ0NhbWVyYSB6b29tIGhhcyBiZWVuIHJlc2V0Jyk7XG4gICAqICAgfSlcbiAgICogYGBgXG4gICAqXG4gICAqICoqRXJyb3JzKipcbiAgICogKiBGYWlscyBpZiB0aGUgY3VycmVudCBtb2RlIGlzIG5vdCBJbnNpZGUgbW9kZS5cbiAgICovXG4gIHpvb21SZXNldCgpOiBQcm9taXNlPHZvaWQ+O1xuXG4gIC8qKlxuICAgKiBBbiBvYnNlcnZhYmxlIHpvb20gbGV2ZWwgb2YgdGhlIGNhbWVyYSBpbiBQYW5vcmFtYSBtb2RlLlxuICAgKiBUaGUgem9vbSBsZXZlbCB3aWxsIGJlIDEuMCBmb3IgYWxsIG90aGVyIHZpZXdtb2Rlcy5cbiAgICpcbiAgICogYGBgXG4gICAqIG1wU2RrLkNhbWVyYS56b29tLnN1YnNjcmliZShmdW5jdGlvbiAoem9vbSkge1xuICAgKiAgIC8vIHRoZSB6b29tIGxldmVsIGhhcyBjaGFuZ2VkXG4gICAqICAgY29uc29sZS5sb2coJ0N1cnJlbnQgem9vbSBpcyAnLCB6b29tLmxldmVsKTtcbiAgICogfSk7XG4gICAqIGBgYFxuICAgKi9cbiAgem9vbTogSU9ic2VydmFibGU8Q2FtZXJhLlpvb21EYXRhPjtcbn1cbiIsImltcG9ydCB0eXBlIHsgSU9ic2VydmFibGVNYXAsIElPYnNlcnZhYmxlLCBEaWN0aW9uYXJ5IH0gZnJvbSAnLi9nbG9iYWwnO1xuXG5leHBvcnQgbmFtZXNwYWNlIEZsb29yIHtcbiAgZXhwb3J0IHR5cGUgRmxvb3JzID0ge1xuICAgIGN1cnJlbnRGbG9vcjogbnVtYmVyO1xuICAgIGZsb29yTmFtZXM6IHN0cmluZ1tdO1xuICAgIHRvdGFsRmxvb3JzOiBudW1iZXI7XG4gIH07XG5cbiAgZXhwb3J0IHR5cGUgRmxvb3JEYXRhID0ge1xuICAgIGlkOiBzdHJpbmc7XG4gICAgc2VxdWVuY2U6IG51bWJlcjtcbiAgICBuYW1lOiBzdHJpbmc7XG4gIH07XG5cbiAgZXhwb3J0IHR5cGUgT2JzZXJ2YWJsZUZsb29yRGF0YSA9IHtcbiAgICBpZDogc3RyaW5nIHwgdW5kZWZpbmVkO1xuICAgIHNlcXVlbmNlOiBudW1iZXIgfCB1bmRlZmluZWQ7XG4gICAgbmFtZTogc3RyaW5nO1xuICB9O1xuXG4gIGV4cG9ydCBlbnVtIEV2ZW50IHtcbiAgICAvKiogQGV2ZW50ICovXG4gICAgQ0hBTkdFX1NUQVJUID0gJ2Zsb29ycy5jaGFuZ2VzdGFydCcsXG4gICAgLyoqIEBldmVudCAqL1xuICAgIENIQU5HRV9FTkQgICA9ICdmbG9vcnMuY2hhbmdlZW5kJyxcbiAgfVxuICBleHBvcnQgZGVjbGFyZSBuYW1lc3BhY2UgQ29udmVyc2lvbiB7XG4gICAgLyoqXG4gICAgICogR2VuZXJhdGUgYSBtYXAgYmV0d2VlbiB2MiBJRHMgYW5kIHYxIElEc1xuICAgICAqXG4gICAgICogVGhpcyBtZXRob2Qgd2lsbCBoZWxwIHdpdGggbWlncmF0aW9uIGJldHdlZW4gSURzIHVzZWQgZm9yIGZsb29ycy5cbiAgICAgKlxuICAgICAqIGBgYFxuICAgICAqIGNvbnN0IG1hcHBpbmcgPSBhd2FpdCBtcFNkay5GbG9vci5Db252ZXJzaW9uLmNyZWF0ZUlkTWFwKCk7XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBAcGFyYW0gaW52ZXJ0PzogYm9vbGVhbiAtIGlmIHBhc3NlZCwgcmV0dXJuIG1hcCBvZiB2MS0+djIgaW5zdGVhZFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUlkTWFwKGludmVydD86IGJvb2xlYW4pOiBQcm9taXNlPERpY3Rpb25hcnk8c3RyaW5nPj47XG4gIH1cbn1cblxuZXhwb3J0IGludGVyZmFjZSBGbG9vciB7XG4gIEV2ZW50OiB0eXBlb2YgRmxvb3IuRXZlbnQ7XG4gIENvbnZlcnNpb246IHR5cGVvZiBGbG9vci5Db252ZXJzaW9uO1xuXG4gIC8qKlxuICAgKiBUaGlzIGZ1bmN0aW9uIHJldHVybnMgdGhlIHN0YXRlIG9mIGFsbCBmbG9vcnMuXG4gICAqXG4gICAqIGBgYFxuICAgKiBtcFNkay5GbG9vci5nZXREYXRhKClcbiAgICogICAudGhlbihmdW5jdGlvbihmbG9vcnMpIHtcbiAgICogICAgIC8vIEZsb29yIGRhdGEgcmV0cmVpdmFsIGNvbXBsZXRlLlxuICAgKiAgICAgY29uc29sZS5sb2coJ0N1cnJlbnQgZmxvb3I6ICcgKyBmbG9vcnMuY3VycmVudEZsb29yKTtcbiAgICogICAgIGNvbnNvbGUubG9nKCdUb3RhbCBmbG9vczogJyArIGZsb29ycy50b3RhbEZsb29ycyk7XG4gICAqICAgICBjb25zb2xlLmxvZygnTmFtZSBvZiBmaXJzdCBmbG9vcjogJyArIGZsb29ycy5mbG9vck5hbWVzWzBdKTtcbiAgICogICB9KVxuICAgKiAgIC5jYXRjaChmdW5jdGlvbihlcnJvcikge1xuICAgKiAgICAgLy8gRmxvb3JzIGRhdGEgcmV0cmlldmFsIGVycm9yLlxuICAgKiAgIH0pO1xuICAgKiBgYGBcbiAgICogQGRlcHJlY2F0ZWQgVXNlIHRoZSBvYnNlcnZhYmxlIFtbZGF0YV1dIGNvbGxlY3Rpb24gaW5zdGVhZFxuICAgKi9cbiAgZ2V0RGF0YSgpOiBQcm9taXNlPEZsb29yLkZsb29ycz47XG5cbiAgLyoqXG4gICAqIEFuIG9ic2VydmFibGUgY29sbGVjdGlvbiBvZiBGbG9vciBkYXRhIHRoYXQgY2FuIGJlIHN1YnNjcmliZWQgdG8uXG4gICAqXG4gICAqIFNlZSBbW0lPYnNlcnZhYmxlTWFwXV0gdG8gbGVhcm4gaG93IHRvIHJlY2VpdmUgZGF0YSBmcm9tIHRoZSBjb2xsZWN0aW9uLlxuICAgKlxuICAgKiBgYGBcbiAgICogbXBTZGsuRmxvb3IuZGF0YS5zdWJzY3JpYmUoe1xuICAgKiAgIG9uQ29sbGVjdGlvblVwZGF0ZWQ6IGZ1bmN0aW9uIChjb2xsZWN0aW9uKSB7XG4gICAqICAgICBjb25zb2xlLmxvZygnQ29sbGVjdGlvbiByZWNlaXZlZC4gVGhlcmUgYXJlICcsIE9iamVjdC5rZXlzKGNvbGxlY3Rpb24pLmxlbmd0aCwgJ2Zsb29ycyBpbiB0aGUgY29sbGVjdGlvbicpO1xuICAgKiAgIH1cbiAgICogfSk7XG4gICAqIGBgYFxuICAgKi9cbiAgZGF0YTogSU9ic2VydmFibGVNYXA8Rmxvb3IuRmxvb3JEYXRhPjtcblxuICAvKipcbiAgICogQW4gb2JzZXJ2YWJsZSBmb3IgdGhlIHBsYXllcidzIGN1cnJlbnRseSBhY3RpdmUgZmxvb3IuXG4gICAqXG4gICAqIFRoZSBjdXJyZW50IGZsb29yIGNhbiB0ZWxsIHlvdSB3aGVuIFwiYWxsIGZsb29yc1wiIGFyZSB2aXNpYmxlIGFuZCBlbmNvZGVzIHdoZW4gdGhlIGNhbWVyYSBpcyB0cmFuc2l0aW9uaW5nIGJldHdlZW4gZmxvb3JzLlxuICAgKlxuICAgKiBUaGUgZm9sbG93aW5nIHRhYmxlIHNob3dzIGFsbCA0IHN0YXRlcyBvZiB0aGUgY3VycmVudCBmbG9vciBvYnNlcnZhYmxlXG4gICAqIChJTlNJREU6IGluc2lkZSBtb2RlLCBESDogZG9sbGhvdXNlIG1vZGUsIEZQOiBmbG9vcnBsYW4gbW9kZSkuXG4gICAqXG4gICAqIHwgICAgICAgICAgfCBhdCBzd2VlcCAoSU5TSURFKSBvciBmbG9vciAoREgsIEZQKSB8IGFsbCBmbG9vcnMgKERILCBGUCkgfCB0cmFuc2l0aW9uaW5nIHwgaW4gdW5wbGFjZWQgMzYwwrogdmlldyB8XG4gICAqIHwtLS0tLS0tLS0tfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18LS0tLS0tLS0tLS0tLS0tLS0tLS0tfC0tLS0tLS0tLS0tLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18XG4gICAqIHwgaWQgICAgICAgfCBgJHtjdXJyZW50LmlkfWAgICAgICAgICAgICAgICAgICAgICB8ICcnICAgICAgICAgICAgICAgICAgfCAnJyAgICAgICAgICAgIHwgdW5kZWZpbmVkICAgICAgICAgICAgICB8XG4gICAqIHwgc2VxdWVuY2UgfCBgJHtjdXJyZW50LnNlcXVlbmNlfWAgICAgICAgICAgICAgICB8IC0xICAgICAgICAgICAgICAgICAgfCB1bmRlZmluZWQgICAgIHwgdW5kZWZpbmVkICAgICAgICAgICAgICB8XG4gICAqIHwgbmFtZSAgICAgfCBgJHtjdXJyZW50Lm5hbWV9YCAgICAgICAgICAgICAgICAgICB8ICdhbGwnICAgICAgICAgICAgICAgfCAnJyAgICAgICAgICAgIHwgJycgICAgICAgICAgICAgICAgICAgICB8XG4gICAqXG4gICAqIGBgYFxuICAgKiBtcFNkay5GbG9vci5jdXJyZW50LnN1YnNjcmliZShmdW5jdGlvbiAoY3VycmVudEZsb29yKSB7XG4gICAqICAgLy8gQ2hhbmdlIHRvIHRoZSBjdXJyZW50IGZsb29yIGhhcyBvY2N1cnJlZC5cbiAgICogICBpZiAoY3VycmVudEZsb29yLnNlcXVlbmNlID09PSAtMSkge1xuICAgKiAgICAgY29uc29sZS5sb2coJ0N1cnJlbnRseSB2aWV3aW5nIGFsbCBmbG9vcnMnKTtcbiAgICogICB9IGVsc2UgaWYgKGN1cnJlbnRGbG9vci5zZXF1ZW5jZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAqICAgICBpZiAoY3VycmVudEZsb29yLmlkID09PSB1bmRlZmluZWQpIHtcbiAgICogICAgICAgY29uc29sZS5sb2coJ0N1cnJlbnQgdmlld2luZyBhbiB1bnBsYWNlZCB1bmFsaWduZWQgc3dlZXAnKTtcbiAgICogICAgIH0gZWxzZSB7XG4gICAqICAgICAgIGNvbnNvbGUubG9nKCdDdXJyZW50bHkgdHJhbnNpdGlvbmluZyBiZXR3ZWVuIGZsb29ycycpO1xuICAgKiAgICAgfVxuICAgKiAgIH0gZWxzZSB7XG4gICAqICAgICBjb25zb2xlLmxvZygnQ3VycmVudGx5IG9uIGZsb29yJywgY3VycmVudEZsb29yLmlkKTtcbiAgICogICAgIGNvbnNvbGUubG9nKCdDdXJyZW50IGZsb29yXFwncyBzZXF1ZW5jZSBpbmRleCcsIGN1cnJlbnRGbG9vci5zZXF1ZW5jZSk7XG4gICAqICAgICBjb25zb2xlLmxvZygnQ3VycmVudCBmbG9vclxcJ3MgbmFtZScsIGN1cnJlbnRGbG9vci5uYW1lKVxuICAgKiAgIH1cbiAgICogfSk7XG4gICAqIGBgYFxuICAgKi9cbiAgY3VycmVudDogSU9ic2VydmFibGU8Rmxvb3IuT2JzZXJ2YWJsZUZsb29yRGF0YT47XG5cbiAgLyoqXG4gICAqIFdoZW4gaW4gaW5zaWRlIG1vZGUsIHRoaXMgZnVuY3Rpb24gY2hhbmdlcyB0aGUgYWN0aXZlIGZsb29yLCBhbmQgbW92ZXMgdGhlIGNhbWVyYSB0byB0aGUgbmVhcmVzdCBwb3NpdGlvbiBvbiB0aGF0IGZsb29yLlxuICAgKiBXaGVuIGluIGZsb29ycGxhbi9kb2xsaG91c2UgbW9kZSwgdGhpcyBmdW5jdGlvbiBjaGFuZ2VzIHRoZSBhY3RpdmUgZmxvb3IsIGJ1dCBkb2VzIG5vdCBtb2RpZnkgdGhlIGNhbWVyYVxuICAgKlxuICAgKiBgYGBcbiAgICogbXBTZGsuRmxvb3IubW92ZVRvKDIpXG4gICAqICAgLnRoZW4oZnVuY3Rpb24oZmxvb3JJbmRleCkge1xuICAgKiAgICAgLy8gTW92ZSB0byBmbG9vciBjb21wbGV0ZS5cbiAgICogICAgIGNvbnNvbGUubG9nKCdDdXJyZW50IGZsb29yOiAnICsgZmxvb3JJbmRleCk7XG4gICAqICAgfSlcbiAgICogICAuY2F0Y2goZnVuY3Rpb24oZXJyb3IpIHtcbiAgICogICAgIC8vIEVycm9yIG1vdmluZyB0byBmbG9vci5cbiAgICogICB9KTtcbiAgICogYGBgXG4gICAqXG4gICAqIEBwYXJhbSBpbmRleDogVGhlIGRlc3RpbmF0aW9uIGZsb29yIGluZGV4XG4gICAqIEByZXR1cm4gVGhlIGRlc3RpbmF0aW9uIGZsb29yIGluZGV4LlxuICAgKi9cbiAgbW92ZVRvKGluZGV4OiBudW1iZXIpOiBQcm9taXNlPG51bWJlcj47XG5cbiAgLyoqXG4gICAqIFRoaXMgZnVuY3Rpb24gZGlzcGxheXMgYWxsIGZsb29ycy5cbiAgICpcbiAgICogYGBgXG4gICAqIG1wU2RrLkZsb29yLnNob3dBbGwoKVxuICAgKiAgIC50aGVuKGZ1bmN0aW9uKCl7XG4gICAqICAgICAvLyBTaG93IGZsb29ycyBjb21wbGV0ZS5cbiAgICogICB9KVxuICAgKiAgIC5jYXRjaChmdW5jdGlvbihlcnJvcikge1xuICAgKiAgICAgLy8gRXJyb3IgZGlzcGxheWluZyBhbGwgZmxvb3JzLlxuICAgKiAgIH0pO1xuICAgKiBgYGBcbiAgICovXG4gIHNob3dBbGwoKTogUHJvbWlzZTx2b2lkPjtcbn1cbiIsImltcG9ydCB0eXBlIHsgSU9ic2VydmFibGVNYXAsIElPYnNlcnZlciwgSVN1YnNjcmlwdGlvbiwgT2JzZXJ2ZXJDYWxsYmFjayB9IGZyb20gJy4vZ2xvYmFsJztcblxuZXhwb3J0IG5hbWVzcGFjZSBHcmFwaCB7XG4gIC8qKlxuICAgKiBBIGRlc2NyaXB0b3IgZm9yIGEgZ3JhcGggdmVydGV4LiBVc2VkIHdoZW4gYWRkaW5nIHZlcnRpY2VzIHRvIGEgZ3JhcGguXG4gICAqL1xuICBleHBvcnQgdHlwZSBWZXJ0ZXhEZXNjcmlwdG9yPFQ+ID0ge1xuICAgIC8qKiBUaGUgaWQgdGhhdCBjYW4gYmUgdXNlZCB0byBsb29rdXAgdGhpcyB2ZXJ0ZXggaW4gdGhlIGdyYXBoICovXG4gICAgaWQ6IHN0cmluZztcbiAgICAvKiogQW55IHVzZXIgZGF0YSB0byBiZSBhc3NvY2lhdGVkIHdpdGggdGhpcyB2ZXJ0ZXggKi9cbiAgICBkYXRhOiBUO1xuICB9O1xuXG4gIC8qKlxuICAgKiBBIGRlc2NyaXB0b3IgZm9yIGEgZ3JhcGggdmVydGV4IHdoZW4gbm8gZXh0cmEgZGF0YSB3aWxsIGJlIGFzc29jaWF0ZWQgd2l0aCBlYWNoIHZlcnRleC4gVXNlZCB3aGVuIGFkZGluZyB2ZXJ0aWNlcyB0byBhIGdyYXBoLlxuICAgKi9cbiAgZXhwb3J0IHR5cGUgVmVydGV4SWREZXNjcmlwdG9yID0ge1xuICAgIC8qKiBUaGUgaWQgdGhhdCBjYW4gYmUgdXNlZCB0byBsb29rdXAgdGhpcyB2ZXJ0ZXggaW4gdGhlIGdyYXBoICovXG4gICAgaWQ6IHN0cmluZztcbiAgfTtcblxuICAvKipcbiAgICogQSBkZXNjcmlwdG9yIGZvciBhIGdyYXBoIGVkZ2UuIFVzZWQgd2hlbiBhZGRpbmcgZWRnZXMgdG8gYSBncmFwaC5cbiAgICovXG4gIGV4cG9ydCB0eXBlIEVkZ2VEZXNjcmlwdG9yPFQ+ID0ge1xuICAgIC8qKiBUaGUgc291cmNlIHZlcnRleC4gKi9cbiAgICBzcmM6IFZlcnRleDxUPjtcbiAgICAvKiogVGhlIGRlc3RpbmF0aW9uIHZlcnRleC4gKi9cbiAgICBkc3Q6IFZlcnRleDxUPjtcbiAgICAvKiogVGhlIHdlaWdodCBvZiB0aGUgZWRnZS4gKi9cbiAgICB3ZWlnaHQ/OiBudW1iZXI7XG4gIH07XG5cbiAgLyoqXG4gICAqIEEgbm9kZSBpbiB0aGUgZ3JhcGguXG4gICAqL1xuICBleHBvcnQgdHlwZSBWZXJ0ZXg8VD4gPSB7XG4gICAgLyoqXG4gICAgICogVGhlIHZlcnRleCdzIGlkLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGlkOiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBVc2VyIGRhdGEgYXNzb2NpYXRlZCB3aXRoIHRoZSB2ZXJ0ZXguXG4gICAgICovXG4gICAgcmVhZG9ubHkgZGF0YTogVDtcblxuICAgIC8qKlxuICAgICAqIEFuIGl0ZXJhYmxlIG9mIGFsbCBlZGdlcyB0aGF0IGhhdmUgdGhpcyB2ZXJ0ZXggYXMgaXRzIGRlc3RpbmF0aW9uIGVuZHBvaW50LlxuICAgICAqXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGNvbnN0IHZlcnRleCA9IGdyYXBoLnZlcnRleCgnYScpO1xuICAgICAqIGZvciAoY29uc3QgZWRnZUluIG9mIHZlcnRleC5lZGdlc0luKSB7XG4gICAgICogICBjb25zb2xlLmxvZyhgdmVydGV4IFwiJHtlZGdlSW4uZHN0LmlkfVwiIGhhcyBhbiBlZGdlIGNvbWluZyBpbiBmcm9tIGEgdmVydGV4IFwiJHtlZGdlSW4uc3JjLmlkfVwiYCk7XG4gICAgICogfVxuICAgICAqIGBgYFxuICAgICAqL1xuICAgIHJlYWRvbmx5IGVkZ2VzSW46IEl0ZXJhYmxlSXRlcmF0b3I8RWRnZTxUPj47XG5cbiAgICAvKipcbiAgICAgKiBBbiBpdGVyYWJsZSBvZiBhbGwgZWRnZXMgdGhhdCBoYXZlIHRoaXMgdmVydGV4IGFzIGl0cyBzb3VyY2UgZW5kcG9pbnQuXG4gICAgICpcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogY29uc3QgdmVydGV4ID0gZ3JhcGgudmVydGV4KCdhJyk7XG4gICAgICogZm9yIChjb25zdCBlZGdlT3V0IG9mIHZlcnRleC5lZGdlc091dCkge1xuICAgICAqICAgY29uc29sZS5sb2coYHZlcnRleCBcIiR7ZWRnZU91dC5zcmMuaWR9XCIgaGFzIGFuIGVkZ2UgZ29pbmcgdG8gYSB2ZXJ0ZXggXCIke2VkZ2VPdXQuZHN0LmlkfVwiYCk7XG4gICAgICogfVxuICAgICAqIGBgYFxuICAgICAqL1xuICAgIHJlYWRvbmx5IGVkZ2VzT3V0OiBJdGVyYWJsZUl0ZXJhdG9yPEVkZ2U8VD4+O1xuXG4gICAgLyoqXG4gICAgICogQW4gaXRlcmFibGUgb2YgYWxsIHZlcnRpY2VzIHRoYXQgY2FuIGJlIHRyYXZlcnNlZCB0byBmcm9tIHRoaXMgdmVydGV4LlxuICAgICAqXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGNvbnN0IHZlcnRleCA9IGdyYXBoLnZlcnRleCgnYScpO1xuICAgICAqIGZvciAoY29uc3QgbmVpZ2hib3Igb2YgdmVydGV4Lm5laWdoYm9ycykge1xuICAgICAqICAgY29uc29sZS5sb2coYHZlcnRleCBcIiR7dmVydGV4LmlkfVwiIHNoYXJlcyBhbiBlZGdlIHdpdGggXCIke25laWdoYm9yLmlkfVwiKTtcbiAgICAgKiB9XG4gICAgICogYGBgXG4gICAgICovXG4gICAgcmVhZG9ubHkgbmVpZ2hib3JzOiBJdGVyYWJsZUl0ZXJhdG9yPFZlcnRleDxUPj47XG4gIH07XG5cbiAgLyoqXG4gICAqIEEgd2VpZ2h0ZWQsIGRpcmVjdGVkIGNvbm5lY3Rpb24gYmV0d2VlbiB0d28gdmVydGljZXMuXG4gICAqXG4gICAqIEB0ZW1wbGF0ZSBUIFRoZSB0eXBlIG9mIGFueSB1c2VyIGRhdGEgYXNzb2NpYXRlZCB3aXRoIGVhY2ggdmVydGV4IGluIHRoZSBncmFwaC5cbiAgICovXG4gIGV4cG9ydCB0eXBlIEVkZ2U8VD4gPSB7XG4gICAgLyoqIFRoZSB2ZXJ0ZXggYXQgdGhlIHNvdXJjZSBvZiB0aGlzIGVkZ2UuICovXG4gICAgcmVhZG9ubHkgc3JjOiBWZXJ0ZXg8VD47XG4gICAgLyoqIFRoZSB2ZXJ0ZXggYXQgdGhlIGRlc3RpbmF0aW9uIG9mIHRoaXMgZWRnZS4gKi9cbiAgICByZWFkb25seSBkc3Q6IFZlcnRleDxUPjtcbiAgICAvKiogVGhlIHdlaWdodCBhc3NvY2lhdGVkIHdpdGggdGhpcyBlZGdlLiAqL1xuICAgIHJlYWRvbmx5IHdlaWdodDogbnVtYmVyO1xuICB9O1xuXG4gIC8qKlxuICAgKiBBIGRpcmVjdGVkLCB3ZWlnaHRlZCBncmFwaCBkYXRhIHN0cnVjdHVyZS5cbiAgICpcbiAgICogQHRlbXBsYXRlIFQgVGhlIHR5cGUgb2YgYW55IHVzZXIgZGF0YSBhc3NvY2lhdGVkIHdpdGggZWFjaCB2ZXJ0ZXggaW4gdGhlIGdyYXBoLlxuICAgKi9cbiAgZXhwb3J0IGludGVyZmFjZSBJRGlyZWN0ZWRHcmFwaDxUPiB7XG4gICAgLyoqXG4gICAgICogV2F0Y2ggYSBjb2xsZWN0aW9uIGFuZCB1cGRhdGUgdGhlIGdyYXBoIGFzIHRoZSBjb2xsZWN0aW9uIGNoYW5nZXMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogSWYgeW91IG5lZWQgYSBncmFwaCBvZiBlbmFibGVkIHN3ZWVwcywgdXNlIFtbU3dlZXAuY3JlYXRlR3JhcGhdXSBpbnN0ZWFkIG9mIHRoZSBjb2RlIHNuaXBwZXQgYmVsb3dcbiAgICAgKlxuICAgICAqIGBgYFxuICAgICAqIC8vIGNyZWF0ZSBhIGdyYXBoIG9mIGVuYWJsZWQgc3dlZXBzXG4gICAgICogY29uc3QgZ3JhcGggPSBtcFNkay5jcmVhdGVHcmFwaCgpO1xuICAgICAqIGNvbnN0IHN1YiA9IGdyYXBoLndhdGNoKHtcbiAgICAgKiAgIGNvbGxlY3Rpb246IG1wU2RrLlN3ZWVwLmNvbGxlY3Rpb24sXG4gICAgICogICBpc05laWdoYm9yT2Yoc3dlZXBTcmMsIHN3ZWVwRHN0KSB7XG4gICAgICogICAgIHJldHVybiBzd2VlcFNyYy5kYXRhLm5laWdoYm9ycy5pbmNsdWRlcyhzd2VlcERzdC5pZCk7XG4gICAgICogICB9LFxuICAgICAqICAgbmVpZ2hib3JzT2Yoc3dlZXBWZXJ0ZXgpIHtcbiAgICAgKiAgICAgcmV0dXJuIHN3ZWVwVmVydGV4LmRhdGEubmVpZ2hib3JzLnZhbHVlcygpO1xuICAgICAqICAgfSxcbiAgICAgKiAgIHdlaWdodEJldHdlZW4oc3dlZXBTcmMsIHN3ZWVwRHN0KSB7XG4gICAgICogICAgIGNvbnN0IGR4ID0gc3dlZXBEc3QuZGF0YS5wb3NpdGlvbi54IC0gc3dlZXBTcmMuZGF0YS5wb3NpdGlvbi54O1xuICAgICAqICAgICBjb25zdCBkeSA9IHN3ZWVwRHN0LmRhdGEucG9zaXRpb24ueSAtIHN3ZWVwU3JjLmRhdGEucG9zaXRpb24ueTtcbiAgICAgKiAgICAgY29uc3QgZHogPSBzd2VlcERzdC5kYXRhLnBvc2l0aW9uLnogLSBzd2VlcFNyYy5kYXRhLnBvc2l0aW9uLno7XG4gICAgICogICAgIHJldHVybiBNYXRoLnNxcnQoZHggKiogMiArIGR5ICoqIDIgKyBkeiAqKiAyKTtcbiAgICAgKiAgIH0sXG4gICAgICogICBzaG91bGRBZGQoc3dlZXApIHtcbiAgICAgKiAgICAgcmV0dXJuIHN3ZWVwLmVuYWJsZWQ7XG4gICAgICogICB9LFxuICAgICAqIH0pO1xuICAgICAqXG4gICAgICogLy8gc29tZSB0aW1lIGxhdGVyIHdoZW4gdGhlIGdyYXBoIG5vIGxvbmdlciBuZWVkcyB1cGRhdGluZ1xuICAgICAqIHN1Yi5jYW5jZWwoKTtcbiAgICAgKiBgYGBcbiAgICAgKiBAcGFyYW0gY29sbGVjdGlvbkFkYXB0b3JcbiAgICAgKiBAcmV0dXJucyBJU3Vic2NyaXB0aW9uXG4gICAgICovXG4gICAgd2F0Y2goY29sbGVjdGlvbkFkYXB0b3I6IElDb2xsZWN0aW9uQWRhcHRvcjxUPik6IElTdWJzY3JpcHRpb247XG5cbiAgICAvKipcbiAgICAgKiBBZGQgYSB2ZXJ0ZXggb3Igc2V0IG9mIHZlcnRpY2VzIHRvIHRoZSBncmFwaC5cbiAgICAgKlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiAvLyBmb3IgdmVydGljZXMgd2l0aCB1bmRlZmluZWQgXCJkYXRhXCIgKG5vIGRhdGEgYXNzb2NpYXRlZCB3aXRoIGVhY2ggdmVydGV4KVxuICAgICAqIGNvbnN0IHVuZGVmR3JhcGggPSBtcFNkay5HcmFwaC5jcmVhdGVEaXJlY3RlZEdyYXBoPHVuZGVmaW5lZD4oKTtcbiAgICAgKiBncmFwaC5hZGRWZXJ0ZXgoXG4gICAgICogICB7IGlkOiAnYScgfSxcbiAgICAgKiAgIHsgaWQ6ICdiJyB9LFxuICAgICAqICk7XG4gICAgICpcbiAgICAgKiAvLyBmb3IgdmVydGljZXMgd2l0aCBhbnkgb3RoZXIgZGF0YVxuICAgICAqIGNvbnN0IGdyYXBoID0gbXBTZGsuR3JhcGguY3JlYXRlRGlyZWN0ZWRHcmFwaDxudW1iZXI+KCk7XG4gICAgICogZ3JhcGguYWRkVmVydGV4KFxuICAgICAqICAgeyBpZDogJ2EnLCBkYXRhOiAxIH0sXG4gICAgICogICB7IGlkOiAnYicsIGRhdGE6IDIgfSxcbiAgICAgKiApO1xuICAgICAqIGBgYFxuICAgICAqIEBwYXJhbSB2ZXJ0ZXhEYXRhIEEgdmFyaWFibGUgbnVtYmVyIG9mIFtbVmVydGV4RGVzY3JpcHRvcl1dcyB0byB1c2UgdG8gY3JlYXRlIG5vZGVzIGluIHRoZSBncmFwaC5cbiAgICAgKi9cbiAgICBhZGRWZXJ0ZXgoLi4udmVydGV4RGF0YTogVCBleHRlbmRzIHVuZGVmaW5lZCB8IHZvaWQgPyBWZXJ0ZXhJZERlc2NyaXB0b3JbXSA6IEFycmF5PFZlcnRleERlc2NyaXB0b3I8VD4+KTogdm9pZDtcblxuICAgIC8qKlxuICAgICAqIFRlc3QgaWYgYSB2ZXJ0ZXggYXNzb2NpYXRlZCB3aXRoIGBpZGAgaXMgcHJlc2VudCBpbiB0aGUgZ3JhcGguXG4gICAgICpcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogaWYgKGdyYXBoLmhhc1ZlcnRleCgnYScpKSB7XG4gICAgICogICBjb25zb2xlLmxvZygnYSB2ZXJ0ZXggd2l0aCBpZCBcImFcIiB3YXMgZm91bmQnKTtcbiAgICAgKiB9XG4gICAgICogYGBgXG4gICAgICogQHBhcmFtIGlkIFRoZSB2ZXJ0ZXgncyBpZC5cbiAgICAgKiBAcmV0dXJucyBJZiBhIHZlcnRleCB3aXRoIGBpZGAgZXhpc3RzLCByZXR1cm5zIGB0cnVlYC4gT3RoZXJ3aXNlLCBgZmFsc2VgLlxuICAgICAqL1xuICAgIGhhc1ZlcnRleChpZDogc3RyaW5nKTogYm9vbGVhbjtcblxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgdmVydGV4IGFzc29jaWF0ZWQgd2l0aCBgaWRgLlxuICAgICAqXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGNvbnN0IGEgPSBncmFwaC52ZXJ0ZXgoJ2EnKTtcbiAgICAgKiBpZiAoYSkge1xuICAgICAqICAgY29uc29sZS5sb2coYEZvdW5kIGEgdmVydGV4IHdpdGggaWQgXCIke2EuaWR9XCJgKTtcbiAgICAgKiB9XG4gICAgICogYGBgXG4gICAgICogQHBhcmFtIGlkIFRoZSB2ZXJ0ZXgncyBpZC5cbiAgICAgKiBAcmV0dXJucyBJZiBhIHZlcnRleCB3aXRoIGBpZGAgZXhpc3RzLCByZXR1cm5zIHRoZSBgVmVydGV4YC4gT3RoZXJ3aXNlLCBgdW5kZWZpbmVkYC5cbiAgICAgKi9cbiAgICB2ZXJ0ZXgoaWQ6IHN0cmluZyk6IFZlcnRleDxUPiB8IHVuZGVmaW5lZDtcblxuICAgIC8qKlxuICAgICAqIFJlbW92ZSBhIHZlcnRleCBvciBhIHNldCBvZiB2ZXJ0aWNlcyBmcm9tIHRoZSBncmFwaC5cbiAgICAgKlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBncmFwaC5yZW1vdmVWZXJ0ZXgoYSwgYik7XG4gICAgICogYGBgXG4gICAgICogQHBhcmFtIHZlcnRpY2VzIEEgdmFyaWFibGUgbnVtYmVyIG9mIHZlcnRpY2VzIHRvIHJlbW92ZS5cbiAgICAgKi9cbiAgICByZW1vdmVWZXJ0ZXgoLi4udmVydGljZXM6IEFycmF5PFZlcnRleDxUPj4pOiB2b2lkO1xuXG4gICAgLyoqXG4gICAgICogQW4gaXRlcmFibGUgb2YgYWxsIHZlcnRpY2VzIGluIHRoZSBncmFwaC5cbiAgICAgKlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBmb3IgKGNvbnN0IHZlcnRleCBvZiBncmFwaC52ZXJ0aWNlcykge1xuICAgICAqICAgY29uc29sZS5sb2coYHZlcnRleDogJHt2ZXJ0ZXguaWR9YCk7XG4gICAgICogfVxuICAgICAqIGBgYFxuICAgICAqL1xuICAgIHJlYWRvbmx5IHZlcnRpY2VzOiBJdGVyYWJsZUl0ZXJhdG9yPFZlcnRleDxUPj47XG4gICAgLyoqXG4gICAgICogVGhlIG51bWJlciBvZiB2ZXJ0aWNlcyBpbiB0aGUgZ3JhcGguXG4gICAgICpcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogY29uc29sZS5sb2coYHRoZSBncmFwaCBoYXMgJHtncmFwaC52ZXJ0ZXhDb3VudH0gdmVydGljZXNgKTtcbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICByZWFkb25seSB2ZXJ0ZXhDb3VudDogbnVtYmVyO1xuXG4gICAgLyoqXG4gICAgICogU2V0IHRoZSB3ZWlnaHQgb2YgYW4gZWRnZSBvciBzZXQgb2YgZWRnZXMgYmV0d2VlbiBwYWlycyBvZiB2ZXJ0aWNlcyByZXByZXNlbnRpbmcgdGhlIGNvbm5lY3Rpb25zIGZyb20gYHNyY2AgdG8gYGRzdGAuXG4gICAgICpcbiAgICAgKiBJZiBhbiBlcnJvciBpcyB0aHJvd24sIHRoZSBncmFwaCBpcyBsZWZ0IHVudG91Y2hlZCwgbm8gZWRnZXMgYXJlIGFkZGVkLlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBncmFwaC5zZXRFZGdlKFxuICAgICAqICAgeyBzcmM6IGEsIGRzdDogYiwgd2VpZ2h0OiA1ICB9LFxuICAgICAqICAgeyBzcmM6IGIsIGRzdDogYywgd2VpZ2h0OiAxMCB9LFxuICAgICAqICk7XG4gICAgICpcbiAgICAgKiAvLyB1cGRhdGUgZWRnZSBhYlxuICAgICAqIGdyYXBoLnNldEVkZ2UoXG4gICAgICogICB7IHNyYzogYSwgZHN0OiBiLCB3ZWlnaHQ6IDEwIH0sXG4gICAgICogKTtcbiAgICAgKiBgYGBcbiAgICAgKiBAcGFyYW0gc3JjIFRoZSBzb3VyY2UgdmVydGV4LlxuICAgICAqIEBwYXJhbSBkc3QgVGhlIGRlc3RpbmF0aW9uIHZlcnRleC5cbiAgICAgKiBAcGFyYW0gd2VpZ2h0IFRoZSB3ZWlnaHQgYXNzY2lhdGVkIHdpdGggdGhlIHBhdGggZnJvbSBgc3JjYCB0byBgZHN0YC4gRGVmYXVsdHMgdG8gMC5cbiAgICAgKiBAdGhyb3dzIElmIGBzcmNgIG9yIGBkc3RgIGlzIG5vdCBpbiB0aGUgZ3JhcGguXG4gICAgICogQHRocm93cyBJZiBgd2VpZ2h0YCBpcyBuZWdhdGl2ZSBvciBub3QgYSBudW1iZXIuXG4gICAgICovXG4gICAgc2V0RWRnZSguLi5lZGdlRGVzY3M6IEFycmF5PEVkZ2VEZXNjcmlwdG9yPFQ+Pik6IHZvaWQ7XG5cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIGVkZ2UgdGhhdCBjb25uZWN0cyBvbmUgdmVydGV4IHRvIGFub3RoZXIuXG4gICAgICpcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogY29uc3QgZWRnZSA9IGdyYXBoLmVkZ2UoYSwgYik7XG4gICAgICogaWYgKGVkZ2UpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKGBGb3VuZCBhbiBlZGdlIGZyb20gXCIke2VkZ2Uuc3JjLmlkfVwiIHRvIFwiJHtlZGdlLmRzdC5pZH1cIiB3aXRoIHdlaWdodCAke2VkZ2Uud2VpZ2h0fWApO1xuICAgICAqIH1cbiAgICAgKiBgYGBcbiAgICAgKiBAcGFyYW0gc3JjIFRoZSBzb3VyY2UgdmVydGV4LlxuICAgICAqIEBwYXJhbSBkc3QgVGhlIGRlc3RpbmF0aW9uIHZlcnRleC5cbiAgICAgKiBAcmV0dXJucyBJZiBhbiBlZGdlIGZyb20gYHNyY2AgdG8gYGRzdGAgZXhpc3RzLCByZXR1cm5zIHRoZSBgRWRnZWAuIE90aGVyd2lzZSwgYHVuZGVmaW5lZGAuXG4gICAgICovXG4gICAgZWRnZShzcmM6IFZlcnRleDxUPiwgZHN0OiBWZXJ0ZXg8VD4pOiBFZGdlPFQ+IHwgdW5kZWZpbmVkO1xuXG4gICAgLyoqXG4gICAgICogVGVzdCBpZiBhbiBlZGdlIGZyb20gb25lIHZlcnRleCB0byBhbm90aGVyIGlzIHByZXNlbnQgaW4gdGhlIGdyYXBoLlxuICAgICAqXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGlmIChncmFwaC5oYXNFZGdlKGEsIGIpKSB7XG4gICAgICogICBjb25zb2xlLmxvZygnYW4gZWRnZSBmcm9tIFwiYVwiIHRvIFwiYlwiIHdhcyBmb3VuZCcpO1xuICAgICAqIH1cbiAgICAgKiBgYGBcbiAgICAgKiBAcGFyYW0gc3JjIFRoZSBzb3VyY2UgdmVydGV4LlxuICAgICAqIEBwYXJhbSBkc3QgVGhlIGRlc3RpbmF0aW9uIHZlcnRleC5cbiAgICAgKiBAcmV0dXJucyBJZiBhbiBlZGdlIGZyb20gYHNyY2AgdG8gYGRzdGAgZXhpc3RzLCByZXR1cm5zIGB0cnVlYC4gT3RoZXJ3aXNlLCBgZmFsc2VgLlxuICAgICAqL1xuICAgIGhhc0VkZ2Uoc3JjOiBWZXJ0ZXg8VD4sIGRzdDogVmVydGV4PFQ+KTogYm9vbGVhbjtcblxuICAgIC8qKlxuICAgICAqIFJlbW92ZSBhbiBlZGdlIG9yIGEgc2V0IG9mIGVkZ2VzIGZyb20gdGhlIGdyYXBoLlxuICAgICAqXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGdyYXBoLnJlbW92ZUVkZ2UoZTEsIGUyKTtcbiAgICAgKiBgYGBcbiAgICAgKiBAcGFyYW0gZWRnZXMgQSB2YXJpYWJsZSBudW1iZXIgb2YgZWRnZXMgdG8gcmVtb3ZlLlxuICAgICAqL1xuICAgIHJlbW92ZUVkZ2UoLi4uZWRnZXM6IEFycmF5PEVkZ2U8VD4+KTogdm9pZDtcblxuICAgIC8qKlxuICAgICAqIEFuIGl0ZXJhYmxlIG9mIGFsbCBlZGdlcyBpbiB0aGUgZ3JhcGguXG4gICAgICpcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogZm9yIChjb25zdCBlZGdlIG9mIGdyYXBoLmVkZ2VzKSB7XG4gICAgICogICBjb25zb2xlLmxvZyhgZWRnZTogJHtlZGdlLnNyYy5pZH0gLT4gJHtlZGdlLmRzdC5pZH1gKTtcbiAgICAgKiB9XG4gICAgICogYGBgXG4gICAgICovXG4gICAgcmVhZG9ubHkgZWRnZXM6IEl0ZXJhYmxlSXRlcmF0b3I8RWRnZTxUPj47XG5cbiAgICAvKipcbiAgICAgKiBUaGUgbnVtYmVyIG9mIGVkZ2VzIGluIHRoZSBncmFwaC5cbiAgICAgKlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBjb25zb2xlLmxvZyhgdGhlIGdyYXBoIGhhcyAke2dyYXBoLmVkZ2VDb3VudH0gZWRnZXNgKTtcbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICByZWFkb25seSBlZGdlQ291bnQ6IG51bWJlcjtcblxuICAgIC8qKlxuICAgICAqIFJlbW92ZSBhbGwgdmVydGljZXMgYW5kIGVkZ2VzIGZyb20gdGhlIGdyYXBoLlxuICAgICAqIEFsc28gY2FsbCBhbiBvcHRpb25hbCBgb25EaXNwb3NlYCBwcm92aWRlZCBhdCBjb25zdHJ1Y3Rpb24uXG4gICAgICpcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogZ3JhcGguZGlzcG9zZSgpO1xuICAgICAqIC8vIGdyYXBoLnZlcnRleENvdW50ID09PSAwXG4gICAgICogLy8gZ3JhcGguZWRnZUNvdW50ID09PSAwXG4gICAgICogYGBgXG4gICAgICovXG4gICAgZGlzcG9zZSgpOiB2b2lkO1xuXG4gICAgLyoqXG4gICAgICogU3Vic2NyaWJlIHRvIHZlcnRleCBjaGFuZ2VzLlxuICAgICAqXG4gICAgICogQWZ0ZXIgdGhpcyBncmFwaCdzIHZlcnRpY2VzIGhhdmUgYmVlbiB1cGRhdGVkIHVzaW5nIFtbYWRkVmVydGV4XV0gb3IgW1tyZW1vdmVWZXJ0ZXhdXSxcbiAgICAgKiB0aGUgYG9ic2VydmVyYCBhdHRhY2hlZCB3aWxsIGhhdmUgaXRzIGBvbkNoYW5nZWRgIGZ1bmN0aW9uIGNhbGxlZCB3aGVuIFtbY29tbWl0XV0gaXMgY2FsbGVkLlxuICAgICAqXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGdyYXBoLm9uVmVydGljZXNDaGFuZ2VkKHtcbiAgICAgKiAgIG9uQ2hhbmdlZCgpIHtcbiAgICAgKiAgICAgY29uc29sZS5sb2coYHRoaXMgZ3JhcGgncyB2ZXJ0aWNlcyBoYXZlIGNoYW5nZWRgKTtcbiAgICAgKiAgIH1cbiAgICAgKiB9KTtcbiAgICAgKiBgYGBcbiAgICAgKiBAcGFyYW0gb2JzZXJ2ZXJcbiAgICAgKi9cbiAgICBvblZlcnRpY2VzQ2hhbmdlZChvYnNlcnZlcjogSU9ic2VydmVyPHZvaWQ+KTogSVN1YnNjcmlwdGlvbjtcblxuICAgIC8qKlxuICAgICAqIFN1YnNjcmliZSB0byBlZGdlIGNoYW5nZXMuXG4gICAgICpcbiAgICAgKiBBZnRlciB0aGlzIGdyYXBoJ3MgZWRnZXMgaGF2ZSBiZWVuIHVwZGF0ZWQgdXNpbmcgW1tzZXRFZGdlXV0gb3IgW1tyZW1vdmVFZGdlXV0sXG4gICAgICogdGhlIGBvYnNlcnZlcmAgYXR0YWNoZWQgd2lsbCBoYXZlIGl0cyBgb25DaGFuZ2VkYCBmdW5jdGlvbiBjYWxsZWQgd2hlbiBbW2NvbW1pdF1dIGlzIGNhbGxlZC5cbiAgICAgKlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBncmFwaC5vbkVkZ2VzQ2hhbmdlZCh7XG4gICAgICogICBvbkNoYW5nZWQoKSB7XG4gICAgICogICAgIGNvbnNvbGUubG9nKGB0aGlzIGdyYXBoJ3MgZWRnZXMgaGF2ZSBjaGFuZ2VkYCk7XG4gICAgICogICB9XG4gICAgICogfSk7XG4gICAgICogYGBgXG4gICAgICogQHBhcmFtIG9ic2VydmVyXG4gICAgICovXG4gICAgb25FZGdlc0NoYW5nZWQob2JzZXJ2ZXI6IElPYnNlcnZlcjx2b2lkPik6IElTdWJzY3JpcHRpb247XG5cbiAgICAvKipcbiAgICAgKiBUcmlnZ2VyIGFueSBhdHRhY2hlZCBvYnNlcnZlcnMgaWYgdGhlcmUgd2VyZSBjaGFuZ2VzIHRvIHRoaXMgZ3JhcGguXG4gICAgICogSWYgdGhlcmUgYXJlIG5vIGNoYW5nZXMgdG8gdGhlIGdyYXBoLCB0aGlzIGlzIGEgbm8tb3AgYW5kIG5vIGNhbGxiYWNrcyB3aWxsIGJlIHRyaWdnZXJlZC5cbiAgICAgKlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBncmFwaC5jb21taXQoKTtcbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBjb21taXQoKTogdm9pZDtcbiAgfVxuXG4gIC8qKlxuICAgKiBBbiBhZGFwdG9yIGZvciBhbiBvYnNlcnZhYmxlIGNvbGxlY3Rpb24gdG8gYXV0b21hdGljYWxseSBnZW5lcmF0ZSBhbmQgdXBkYXRlIGEgZ3JhcGguXG4gICAqIFVzZWQgaW4gW1tJRGlyZWN0ZWRHcmFwaC53YXRjaF1dLlxuICAgKi9cbiAgIGV4cG9ydCBpbnRlcmZhY2UgSUNvbGxlY3Rpb25BZGFwdG9yPFQ+IHtcbiAgICAvKipcbiAgICAgKiBBIG9ic2VydmFibGUgY29sbGVjdGlvbiBmcm9tIHRoZSBzZGssIGUuZy4gYG1wU2RrLlN3ZWVwLmRhdGFgLlxuICAgICAqL1xuICAgIGNvbGxlY3Rpb246IElPYnNlcnZhYmxlTWFwPFQ+O1xuXG4gICAgLyoqXG4gICAgICogRGV0ZXJtaW5lcyB3aGV0aGVyIG9yIG5vdCBhbiBpdGVtIGZyb20gdGhlIGNvbGxlY3Rpb24gc2hvdWxkIGJlIGNvbnNpZGVyZWQgYSBuZWlnaGJvciBvZiBhbm90aGVyIGl0ZW0uXG4gICAgICogQHBhcmFtIHNyYyBBIHZlcnRleCBjb250YWluaW5nIHRoZSBzb3VyY2UgaXRlbVxuICAgICAqIEBwYXJhbSBkc3QgQSB2ZXJ0ZXggY29udGFpbmluZyB0aGUgZGVzdGluYXRpb24gaXRlbVxuICAgICAqL1xuICAgIGlzTmVpZ2hib3JPZihzcmM6IFZlcnRleDxUPiwgZHN0OiBWZXJ0ZXg8VD4pOiBib29sZWFuO1xuXG4gICAgLyoqXG4gICAgICogR2V0IGEgbGlzdCBvZiBpZHMgZm9yIG90aGVyIHZlcnRpY2VzIHRoYXQgc2hvdWxkIGJlIGNvbnNpZGVyZWQgbmVpZ2hib3JzIHRvIGFuIGl0ZW0gaW4gdGhlIGNvbGxlY3Rpb24uXG4gICAgICogQHBhcmFtIGl0ZW1cbiAgICAgKi9cbiAgICBuZWlnaGJvcnNPZihpdGVtOiBWZXJ0ZXg8VD4pOiBJdGVyYWJsZUl0ZXJhdG9yPHN0cmluZz47XG5cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIHdlaWdodCBiZXR3ZWVuIHR3byBpdGVtcyBpbiB0aGUgY29sbGVjdGlvbiB0byB1c2UgYXMgdGhlIGNvbm5lY3RpbmcgZWRnZXMgd2VpZ2h0LlxuICAgICAqIEBwYXJhbSBzcmNcbiAgICAgKiBAcGFyYW0gZHN0XG4gICAgICovXG4gICAgd2VpZ2h0QmV0d2VlbihzcmM6IFZlcnRleDxUPiwgZHN0OiBWZXJ0ZXg8VD4pOiBudW1iZXI7XG5cbiAgICAvKipcbiAgICAgKiBEZXRlcm1pbmVzIHdoZXRoZXIgb3Igbm90IGFuIGl0ZW0gZnJvbSB0aGUgY29sbGVjdGlvbiB3aWxsIGJlIGFkZGVkIGFzIGEgZ3JhcGggdmVydGV4LlxuICAgICAqIEBwYXJhbSBpdGVtXG4gICAgICovXG4gICAgc2hvdWxkQWRkPyhpdGVtOiBUKTogYm9vbGVhbjtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgc3RhdHVzIG9mIGFuIEEqIHNlYXJjaC5cbiAgICovXG4gIGV4cG9ydCBlbnVtIEFTdGFyU3RhdHVzIHtcbiAgICAvKiogQSBwYXRoIHdhcyBmb3VuZC4gKi9cbiAgICBTVUNDRVNTID0gJ2FzdGFyLnN0YXR1cy5zdWNjZXNzJyxcbiAgICAvKiogTm8gcGF0aCB3YXMgZm91bmQuICovXG4gICAgTk9fUEFUSCA9ICdhc3Rhci5zdGF0dXMubm9fcGF0aCcsXG4gICAgLyoqIEEgcGF0aCB3YXNuJ3QgZm91bmQgaW4gdGhlIHRpbWUgc3BlY2lmaWVkLiAqL1xuICAgIFRJTUVPVVQgPSAnYXN0YXIuc3RhdHVzLnRpbWVvdXQnLFxuICAgIC8qKiBUaGUgc3RhcnQgdmVydGV4IHdhcyBub3QgZm91bmQgaW4gdGhlIGdyYXBoLiAqL1xuICAgIE5PX1NUQVJUX1ZFUlRFWCA9ICdhc3Rhci5zdGF0dXMubm9fc3RhcnQnLFxuICAgIC8qKiBUaGUgZW5kIHZlcnRleCB3YXMgbm90IGZvdW5kIGluIHRoZSBncmFwaC4gKi9cbiAgICBOT19FTkRfVkVSVEVYID0gJ2FzdGFyLnN0YXR1cy5ub19lbmQnLFxuICB9XG5cbiAgLyoqXG4gICAqIFRoZSByZXN1bHQgb2YgZG9pbmcgYW4gQSogc2VhcmNoLlxuICAgKi9cbiAgZXhwb3J0IHR5cGUgQVN0YXJSZXN1bHQ8VD4gPSB7XG4gICAgLyoqIFdoZXRoZXIgdGhlIHNlYXJjaCB3YXMgc3VjY2Vzc2Z1bCwgdGltZWQgb3V0LCBvciBpZiB0aGVyZSB3YXMgbm8gcGF0aCBmb3VuZC4gKi9cbiAgICBzdGF0dXM6IEFTdGFyU3RhdHVzO1xuICAgIC8qKiBUaGUgdG90YWwgY29zdCBvZiB0cmFudmVyc2luZyB0aGUgcGF0aC4gKi9cbiAgICBjb3N0OiBudW1iZXI7XG4gICAgLyoqIE9uIHN1Y2Nlc3MsIGNvbnRhaW5zIHRoZSBwYXRoIG9mIHZlcnRpY2VzLiAqL1xuICAgIHBhdGg6IEFycmF5PFZlcnRleDxUPj47XG4gIH1cblxuICAvKipcbiAgICogT3B0aW9ucyB0aGF0IGNhbiBjb25maWd1cmUgaG93IHRoZSBBKiBhbGdvcml0aG0gcnVucy5cbiAgICovXG4gIGV4cG9ydCBpbnRlcmZhY2UgU2VhcmNoT3B0aW9uczxUPiB7XG4gICAgLyoqIEFuIGVzdGltYXRlIG9mIHRoZSBcImRpc3RhbmNlXCIgYmV0d2VlbiBgdmVydGV4QWAgYW5kIGB2ZXJ0ZXhCYC4gVGhlIGRlZmF1bHQgaGV1cmlzdGljIGZ1bmN0aW9uIHJldHVybnMgMC4gKi9cbiAgICBoZXVyaXN0aWModmVydGV4QTogVmVydGV4PFQ+LCB2ZXJ0ZXhCOiBWZXJ0ZXg8VD4sIGVkZ2U6IEVkZ2U8VD4pOiBudW1iZXI7XG4gIH1cblxuICAvKipcbiAgICogQW4gb2JqZWN0IHRoYXQgZW5jYXBzdWxhdGVzIGEgZ3JhcGggYW5kIGNhbiBiZSB1c2VkIHRvIGV4ZWN1dGUgQSogb3Igc3Vic2NyaWJlIHRvIEEqIGZvciBwb3RlbnRpYWwgY2hhbmdlcy5cbiAgICovXG4gIGV4cG9ydCBpbnRlcmZhY2UgSUFTdGFyUnVubmVyPFQ+IHtcbiAgICAvKipcbiAgICAgKiBEbyB0aGUgQSogc2VhcmNoLlxuICAgICAqIEBwYXJhbSB0aW1lb3V0IFRoZSBhbW91bnQgb2YgdGltZSB0byBzcGVuZCB0cnlpbmcgdG8gZmluZCBhIHBhdGguIERlZmF1bHRzIHRvIDUwMDBtcy5cbiAgICAgKiBAcmV0dXJucyB7QVN0YXJSZXN1bHQ8VD59IFRoZSByZXN1bHRzIG9mIHJ1bm5pbmcgQSouXG4gICAgICpcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogY29uc3QgYVN0YXJSdW5uZXIgPSBtcFNkay5HcmFwaC5jcmVhdGVBU3RhclJ1bm5lciguLi4pO1xuICAgICAqIGNvbnN0IHJlc3VsdCA9IGFTdGFyUnVubmVyLmV4ZWMoKTtcbiAgICAgKiBpZiAocmVzdWx0LnN0YXR1cyA9PT0gbXBTZGsuR3JhcGguQVN0YXJTdGF0dXMuU1VDQ0VTUykge1xuICAgICAqICAgY29uc29sZS5sb2coJ2ZvdW5kIGEgcGF0aCBvZiBsZW5ndGgnLCByZXN1bHQucGF0aC5sZW5ndGgpO1xuICAgICAqIH1cbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBleGVjKHRpbWVvdXQ/OiBudW1iZXIpOiBBU3RhclJlc3VsdDxUPjtcblxuICAgIC8qKlxuICAgICAqIFN1YnNjcmliZSB0byBjaGFuZ2VzIGluIHRoZSB1bmRlcmx5aW5nIGdyYXBoIGFuZCByZWNlaXZlIGEgY2FsbGJhY2sgaW4gYG9ic2VydmVyYCB3aGVuIGNoYW5nZXMgYXJlIGRldGVjdGVkLlxuICAgICAqIEBwYXJhbSBvYnNlcnZlclxuICAgICAqIEByZXR1cm5zIHtJU3Vic2NyaXB0aW9ufSBBIHN1YnNjcmlwdGlvbiB0byBzdG9wIGxpc3RlbmluZyBmb3IgY2hhbmdlcyB0byB0aGUgZ3JhcGguXG4gICAgICpcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogY29uc3QgYVN0YXJSdW5uZXIgPSBtcFNkay5HcmFwaC5jcmVhdGVBU3RhclJ1bm5lciguLi4pO1xuICAgICAqIGNvbnN0IHN1YnNjcmlwdGlvbiA9IGFTdGFyUnVubmVyLnN1YnNjcmliZSh7XG4gICAgICogICBvbkNoYW5nZWQocnVubmVyKSB7XG4gICAgICogICAgIGNvbnN0IHJlc3VsdCA9IHJ1bm5lci5leGVjKCk7XG4gICAgICogICAgIGlmIChyZXN1bHQuc3RhdHVzID09PSBtcFNkay5HcmFwaC5BU3RhclN0YXR1cy5TVUNDRVNTKSB7XG4gICAgICogICAgICAgY29uc29sZS5sb2coJ2ZvdW5kIGEgcGF0aCBvZiBsZW5ndGgnLCByZXN1bHQucGF0aC5sZW5ndGgpO1xuICAgICAqICAgICB9XG4gICAgICogICB9XG4gICAgICogfSk7XG4gICAgICogLy8gLi4uIHNvbWUgdGltZSBsYXRlciB3aGVuIHRoZSBydW5uZXIgaXMgbm8gbG9uZ2VyIG5lZWRlZFxuICAgICAqIHN1YnNjcmlwdGlvbi5jYW5jZWwoKTtcbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBzdWJzY3JpYmUob2JzZXJ2ZXI6IElPYnNlcnZlcjxHcmFwaC5JQVN0YXJSdW5uZXI8VD4+IHwgT2JzZXJ2ZXJDYWxsYmFjazxHcmFwaC5JQVN0YXJSdW5uZXI8VD4+KTogSVN1YnNjcmlwdGlvbjtcblxuICAgIC8qKlxuICAgICAqIFJlbGVhc2UgcmVzb3VyY2VzIGFzc29jaWF0ZWQgd2l0aCB0aGUgcnVubmVyLlxuICAgICAqIFRoaXMgZnVuY3Rpb24gc2hvdWxkIGJlIGNhbGxlZCBvbmNlIHlvdSBhcmUgZG9uZSB3aXRoIHRoZSBydW5uZXIuXG4gICAgICovXG4gICAgIGRpc3Bvc2UoKTogdm9pZDtcbiAgfVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIEdyYXBoIHtcbiAgQVN0YXJTdGF0dXM6IHR5cGVvZiBHcmFwaC5BU3RhclN0YXR1cztcbiAgLyoqXG4gICAqIENyZWF0ZSBhbiBlbXB0eSBncmFwaCBkYXRhIHN0cnVjdHVyZS5cbiAgICpcbiAgICogYGBgXG4gICAqIGNvbnN0IGdyYXBoID0gbXBTZGsuR3JhcGguY3JlYXRlRGlyZWN0ZWRHcmFwaCgpO1xuICAgKiBgYGBcbiAgICogQHBhcmFtIG9uRGlzcG9zZSBBbiBvcHRpb25hbCBjYWxsYmFjayB0byBiZSBjYWxsZWQgd2hlbiBbW0lEaXJlY3RlZEdyYXBoLmRpc3Bvc2VdXSBpcyBjYWxsZWRcbiAgICogQHRlbXBsYXRlIFQgVGhlIHR5cGUgb2YgYW55IHVzZXIgZGF0YSBhc3NvY2lhdGVkIHdpdGggZWFjaCB2ZXJ0ZXggaW4gdGhlIGdyYXBoLlxuICAgKlxuICAgKiBAZW1iZWRcbiAgICogQGJ1bmRsZVxuICAgKiBAaW50cm9kdWNlZCAzLjEuNTUuMi0zNC1nYTk5MzRjY2Q5M1xuICAgKi9cbiAgY3JlYXRlRGlyZWN0ZWRHcmFwaDxUPihvbkRpc3Bvc2U/OiAoKSA9PiB2b2lkKTogR3JhcGguSURpcmVjdGVkR3JhcGg8VD47XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhIFwicnVubmVyXCIgZm9yIHRoZSBBKiBhbGdvcml0aG0gYXJvdW5kIGEgYGdyYXBoYCwgYW5kIGBzdGFydGAgYW5kIGBlbmRgIHZlcnRpY2VzLlxuICAgKlxuICAgKiBUaGUgcnVubmVyIGVuY2Fwc3VsYXRlcyB0aGUgZGV0YWlscyBvZiB0aGUgZ3JhcGggYW5kIHNlYXJjaCwgY2FjaGVzIHRoZSByZXN1bHRzIG9mIEEqLFxuICAgKiBhbmQgcHJvdmlkZXMgYSB3YXkgdG8gc3Vic2NyaWJlIHRvIHBvdGVudGlhbCBjaGFuZ2VzIGluIHRoZSBwYXRoIHNpZ25pZnlpbmcgdGhhdCB0aGUgcmVzdWx0cyBvZiBbW0dyYXBoLkFTdGFyUnVubmVyLmV4ZWNdXSBtYXkgaGF2ZSBjaGFuZ2VkLlxuICAgKlxuICAgKiBgYGB0eXBlc2NyaXB0XG4gICAqIGNvbnN0IGdyYXBoID0gbXBTZGsuR3JhcGguY3JlYXRlRGlyZWN0ZWRHcmFwaCgpO1xuICAgKiAvLyAuLi4gc2V0dXAgZ3JhcGggdmVydGljZXMgYW5kIGVkZ2VzXG4gICAqIGNvbnN0IHN0YXJ0ID0gZ3JhcGgudmVydGV4KCdzdGFydCcpO1xuICAgKiBjb25zdCBlbmQgPSBncmFwaC52ZXJ0ZXgoJ2VuZCcpO1xuICAgKiBjb25zdCBhU3RhclJ1bm5lciA9IG1wU2RrLkdyYXBoLmNyZWF0ZUFTdGFyUnVubmVyKGdyYXBoLCBzdGFydCwgZW5kKTtcbiAgICogY29uc3QgcmVzdWx0ID0gYVN0YXJSdW5uZXIuZXhlYygpO1xuICAgKiBgYGBcbiAgICpcbiAgICogQHBhcmFtIGdyYXBoIFRoZSBncmFwaCB0byB0cmF2ZXJzZVxuICAgKiBAcGFyYW0gc3RhcnQgVGhlIHN0YXJ0IHZlcnRleC5cbiAgICogQHBhcmFtIGVuZCBUaGUgZW5kIHZlcnRleC5cbiAgICogQHBhcmFtIG9wdGlvbnMgQW4gb3B0aW9uYWwgYGhldXJpc3RpY2AgZnVuY3Rpb24uXG4gICAqIEByZXR1cm4ge2dyYXBoLkFTdGFyUnVubmVyfSBBIHJ1bm5lciBmb3IgQSogdGhhdCBjYW4gZXhlY3V0ZSB0aGUgc2VhcmNoIG9yIGJlIHN1YnNjcmliZWQgdG8uXG4gICAqXG4gICAqIEBlbWJlZFxuICAgKiBAYnVuZGxlXG4gICAqIEBpbnRyb2R1Y2VkIDMuMS41NS4yLTM0LWdhOTkzNGNjZDkzXG4gICAqL1xuICBjcmVhdGVBU3RhclJ1bm5lcjxUPihcbiAgICBncmFwaDogR3JhcGguSURpcmVjdGVkR3JhcGg8VD4sXG4gICAgc3RhcnQ6IEdyYXBoLlZlcnRleDxUPixcbiAgICBlbmQ6IEdyYXBoLlZlcnRleDxUPixcbiAgICBvcHRpb25zPzogUGFydGlhbDxHcmFwaC5TZWFyY2hPcHRpb25zPFQ+Pik6IEdyYXBoLklBU3RhclJ1bm5lcjxUPjtcbn1cbiIsImltcG9ydCB0eXBlIHsgSU9ic2VydmFibGVNYXAsIFZlY3RvcjIsIFZlY3RvcjMgfSBmcm9tICcuL2dsb2JhbCc7XG5cbmV4cG9ydCBuYW1lc3BhY2UgTGFiZWwge1xuICBleHBvcnQgdHlwZSBMYWJlbCA9IHtcbiAgICBwb3NpdGlvbjogVmVjdG9yMztcbiAgICBzaWQ6IHN0cmluZztcbiAgICB0ZXh0OiBzdHJpbmc7XG4gICAgdmlzaWJsZTogYm9vbGVhbjtcbiAgICAvKiogQGRlcHJlY2F0ZWQgVXNlIFtbZmxvb3JJbmZvXV0gaW5zdGVhZCAqL1xuICAgIGZsb29yOiBudW1iZXI7XG4gICAgZmxvb3JJbmZvOiB7XG4gICAgICBpZDogc3RyaW5nO1xuICAgICAgc2VxdWVuY2U6IG51bWJlcjtcbiAgICB9O1xuICB9O1xuXG4gIGV4cG9ydCB0eXBlIExhYmVsRGVwcmVjYXRlZCA9IHtcbiAgICBwb3NpdGlvbjogVmVjdG9yMztcbiAgICBzaWQ6IHN0cmluZztcbiAgICB0ZXh0OiBzdHJpbmc7XG4gICAgdmlzaWJsZTogYm9vbGVhbjtcbiAgICAvKiogQGRlcHJlY2F0ZWQgVXNlIFtbZmxvb3JJbmZvXV0gaW5zdGVhZCAqL1xuICAgIGZsb29yOiBudW1iZXI7XG4gICAgZmxvb3JJbmZvOiB7XG4gICAgICBpZDogc3RyaW5nO1xuICAgICAgc2VxdWVuY2U6IG51bWJlcjtcbiAgICB9O1xuICAgIHNjcmVlblBvc2l0aW9uOiBWZWN0b3IyO1xuICB9O1xuXG4gIGV4cG9ydCBlbnVtIEV2ZW50IHtcbiAgICAvKiogQGV2ZW50ICovXG4gICAgUE9TSVRJT05fVVBEQVRFRCA9ICdsYWJlbC5wb3NpdGlvbnVwZGF0ZWQnLFxuICB9XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgTGFiZWwge1xuICBFdmVudDogdHlwZW9mIExhYmVsLkV2ZW50O1xuXG4gIC8qKlxuICAgKiBUaGlzIGZ1bmN0aW9uIHJldHVybnMgdGhlIGRhdGEgb2YgYWxsIGxhYmVscy5cbiAgICpcbiAgICogQGRlcHJlY2F0ZWQgVXNlIFtbZGF0YV1dIG9ic2VydmFibGUgaW5zdGVhZC5cbiAgICovXG4gIGdldERhdGEoKTogUHJvbWlzZTxMYWJlbC5MYWJlbERlcHJlY2F0ZWRbXT47XG5cbiAgLyoqXG4gICAqIEFuIG9ic2VydmFibGUgbWFwIG9mIHRoZSBjdXJyZW50IGxhYmVscy5cbiAgICogUmV0dXJucyBhbiBvYmplY3Qgd2l0aCBhIG1hcCBvZiBsYWJlbHMuXG4gICAqXG4gICAqIGBgYFxuICAgKiBtcFNkay5MYWJlbC5kYXRhLnN1YnNjcmliZSh7XG4gICAqICBvbkFkZGVkOiBmdW5jdGlvbiAoaW5kZXgsIGl0ZW0sIGNvbGxlY3Rpb24pIHtcbiAgICogICAgY29uc29sZS5sb2coJ0xhYmVsIGFkZGVkIHRvIHRoZSBjb2xsZWN0aW9uJywgaW5kZXgsIGl0ZW0sIGNvbGxlY3Rpb24pO1xuICAgKiAgfSxcbiAgICogIG9uUmVtb3ZlZDogZnVuY3Rpb24gKGluZGV4LCBpdGVtLCBjb2xsZWN0aW9uKSB7XG4gICAqICAgIGNvbnNvbGUubG9nKCdMYWJlbCByZW1vdmVkIGZyb20gdGhlIGNvbGxlY3Rpb24nLCBpbmRleCwgaXRlbSwgY29sbGVjdGlvbik7XG4gICAqICB9LFxuICAgKiAgb25VcGRhdGVkOiBmdW5jdGlvbiAoaW5kZXgsIGl0ZW0sIGNvbGxlY3Rpb24pIHtcbiAgICogICAgY29uc29sZS5sb2coJ0xhYmVsIHVwZGF0ZWQgaW4gcGxhY2UgaW4gdGhlIGNvbGxlY3Rpb24nLCBpbmRleCwgaXRlbSwgY29sbGVjdGlvbik7XG4gICAqICB9LFxuICAgKiB9KTtcbiAgICogYGBgXG4gICAqXG4gICAqIEBlbWJlZFxuICAgKiBAYnVuZGxlXG4gICAqIEBpbnRyb2R1Y2VkIDMuMS42OC4xMi03LWc4NTg2ODg5NDRhXG4gICAqL1xuICBkYXRhOiBJT2JzZXJ2YWJsZU1hcDxMYWJlbC5MYWJlbD47XG59XG4iLCJleHBvcnQgbmFtZXNwYWNlIExpbmsge1xuXG4gIC8qKlxuICAgKiBUaGUgYmVoYXZpb3IgdG8gdXNlIHdoZW4gY3JlYXRpbmcgYSBsaW5rLlxuICAgKi9cbiAgZXhwb3J0IGVudW0gQ3JlYXRpb25Qb2xpY3kge1xuICAgIC8qKiBVc2UgU2hvd2Nhc2UncyBjdXJyZW50IHdpbmRvdy5sb2NhdGlvbiBhcyB0aGUgYmFzZSBvZiB0aGUgbGluayAqL1xuICAgIFdJTkRPVyA9ICdsaW5rLmNyZWF0aW9ucG9saWN5LndpbmRvdycsXG4gICAgLyoqIFVzZSB0aGUgZW1iZWRkZXIncyB3aW5kb3cubG9jYXRpb24gYXMgdGhlIGJhc2Ugb2YgdGhlIGxpbmsgKi9cbiAgICBSRUZFUlJFUiA9ICdsaW5rLmNyZWF0aW9ucG9saWN5LnJlZmVycmVyJyxcbiAgICAvKiogVXNlIHRoZSBvcmlnaW5hbCBNYXR0ZXJwb3J0IGxpbmsgYXMgdGhlIGJhc2Ugb2YgdGhlIGxpbmsgKi9cbiAgICBNQVRURVJQT1JUID0gJ2xpbmsuY3JlYXRpb25wb2xpY3kubWF0dGVycG9ydCcsXG4gIH1cblxuICAvKipcbiAgICogVGhlIGJlaGF2aW9yIHRvIHVzZSB3aGVuIGNsaWNraW5nIGEgbGlua1xuICAgKi9cbiAgZXhwb3J0IGVudW0gT3BlblBvbGljeSB7XG4gICAgLyoqIFVzZSB0aGUgZGVmYXVsdCBiZWhhdmlvciBmb3IgdGhlIGFzc29jaWF0ZWQgbGluayB0eXBlICovXG4gICAgREVGQVVMVCA9ICdsaW5rLm9wZW5wb2xpY3kuZGVmYXVsdCcsXG4gICAgLyoqIE9wZW4gYSBuZXcgdGFiIG9yIHdpbmRvdyAqL1xuICAgIE5FV19XSU5ET1cgPSAnbGluay5vcGVucG9saWN5Lm5ld3dpbmRvdycsXG4gICAgLyoqIE9wZW4gaW4gdGhlIGN1cnJlbnQgaWZyYW1lICovXG4gICAgU0FNRV9GUkFNRSA9ICdsaW5rLm9wZW5wb2xpY3kuc2FtZWZyYW1lJyxcbiAgICAvKiogTmF2aWdhdGUgdGhlIHdpbmRvdyB0aGF0IGlzIHRoZSBjdXJyZW50IGVtYmVkZGVyIG9mIFNob3djYXNlICovXG4gICAgQ1VSUkVOVF9XSU5ET1cgPSAnbGluay5vcGVucG9saWN5LmN1cnJlbnQnLFxuICB9XG5cbiAgZXhwb3J0IGVudW0gRGVzdGluYXRpb25Qb2xpY3kge1xuICAgIC8qKiBOYXZpZ2F0ZSB0byB0aGUgZGVmYXVsdCBkZXN0aW5hdGlvbiBmb3IgbGlua3M7IGxpa2VseSB0aGUgU2hvd2Nhc2UgZW1iZWRkZXIncyBkb21haW4gKi9cbiAgICBERUZBVUxUID0gJ2xpbmsuZGVzdGluYXRpb24uZGVmYXVsdCcsXG4gICAgLyoqIE5hdmlnYXRlIGRpcmVjdGx5IHRvIHRoZSBTaG93Y2FzZSBvZiBhIE1hdHRlcnBvcnQgc3BhY2UgKi9cbiAgICBNQVRURVJQT1JUID0gJ2xpbmsuZGVzdGluYXRpb24ubWF0dGVycG9ydCcsXG4gIH1cblxuICBleHBvcnQgdHlwZSBDcmVhdGVMaW5rT3B0aW9ucyA9IHtcbiAgICAvKiogVGhlIGxpc3Qgb2YgVVJMIHBhcmFtZXRlcnMgdG8gaW5jbHVkZSBpbiB0aGUgc2hhcmUgbGluayAqL1xuICAgIGluY2x1ZGVQYXJhbXM6IHN0cmluZ1tdO1xuICB9XG5cbiAgZXhwb3J0IHR5cGUgT3BlblBvbGljeU9wdGlvbnMgPSB7XG4gICAgLyoqXG4gICAgICogQW4gb3B0aW9uYWwgdGVtcGxhdGUgZm9yIHRoZSBsaW5rIHRvIHVzZSB3aGVuIHRoZSBwb2xpY3kgaXMgbm90IHNldCB0byBgU0FNRV9GUkFNRWAsXG4gICAgICogdGhhdCB3aWxsIGhhdmUgYW55IGAke1twYXJhbV19YCBzdWJzdHJpbmdzIGludGVycG9sYXRlZCB1c2luZyB0aGUgY3VycmVudCBzZXQgb2YgVVJMIHBhcmFtZXRlcnMuXG4gICAgICpcbiAgICAgKiBJZiBgJHtbcGFyYW1dfWAgaXMgaW5jbHVkZWQgaW4gdGhlIHBhdGggb2YgdGhlIFVSTCwgaXQgd2lsbCBiZSByZXBsYWNlZCBieSB0aGUgY3VycmVudCBVUkwgcGFyYW1ldGVyJ3MgdmFsdWUgb3IgdW5kZWZpbmVkIChgJHttfS9zaG93YDogYGFiYzEyMy9zaG93YCkuXG4gICAgICpcbiAgICAgKiBJZiBgJHtbcGFyYW1dfWAgaXMgaW5jbHVkZWQgaW4gdGhlIHNlYXJjaCBwYXJhbWV0ZXJzIG9mIHRoZSBVUkwsIGl0IGFuZCBpdCdzIHZhbHVlIHdpbCBiZSBhcHBlbmRlZCBvdCB0aGUgVVJMIChgJHttfWA6IGBtPWFiYzEyM2ApLlxuICAgICAqXG4gICAgICogVVJMIHBhcmFtZXRlcnMgdGhhdCBhcmUgdW5zZXQgd2lsbCBiZSBhcHBlbmRlZCB3aXRob3V0IGEgdmFsdWUuIChgJHt1bnNldH1gOiBgdW5zZXRgKVxuICAgICAqXG4gICAgICogTm90ZTogYCR7bX1gIG9yIGAke21vZGVsfSBhcmUgc3BlY2lhbCBjYXNlcyBpbiBtb2RlbCBsaW5rcy5cbiAgICAgKiBJbnN0ZWFkIG9mIHRoZSBjdXJyZW50IHdpbmRvdydzIFwibW9kZWxcIiBwYXJhbSwgdGhlIG1vZGVsIElEIGZyb20gdGhlIGxpbmsgd2lsbCBiZSB1c2VkIGluc3RlYWQuXG4gICAgICpcbiAgICAgKiBBcyBhbiBleGFtcGxlLCB0aGUgc3RyaW5nIGBcImh0dHBzOi8vbXkuZG9tYWluLmNvbS8ke219L3Nob3cuaHRtbD8ke3BsYXl9JiR7dW5zZXR9XCJgIGludGVycG9sYXRlZCBhdCB0aGUgVVJMIGBodHRwczovL215LmRvbWFpbi5jb20vc2hvdy8/bT1hYmMxMjMmcGxheT0xYFxuICAgICAqIHdpbGwgcmVzdWx0IGluIGEgVVJMIGxpa2UgYFwiaHR0cHM6Ly9teS5kb21haW4uY29tL2FiYzEyMy9zaG93Lmh0bWw/cGxheT0xJnVuc2V0Jm09YWJjMTIzXCJgLlxuICAgICAqL1xuICAgIHRlbXBsYXRlSHJlZjogc3RyaW5nO1xuICB9O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIExpbmsge1xuICBDcmVhdGlvblBvbGljeTogdHlwZW9mIExpbmsuQ3JlYXRpb25Qb2xpY3k7XG4gIE9wZW5Qb2xpY3k6IHR5cGVvZiBMaW5rLk9wZW5Qb2xpY3k7XG4gIC8qKlxuICAgKiBDcmVhdGUgYSBzaGFyZWFibGUgbGluayB0byB0aGUgY3VycmVudCBTaG93Y2FzZSBwbGF5ZXIuXG4gICAqIGBgYHR5cGVzY3JpcHRcbiAgICogY29uc3QgbGluayA9IGF3YWl0IHNkay5MaW5rLmNyZWF0ZUxpbmsoKTtcbiAgICogYGBgXG4gICAqXG4gICAqIEBlbWJlZFxuICAgKiBAYnVuZGxlIDMuMS42MC4xMi0zMi1nNDU3MjAxN2M5OFxuICAgKi9cbiAgY3JlYXRlTGluaygpOiBQcm9taXNlPHN0cmluZz47XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhIGRlZXAgbGluayB0byB0aGUgY3VycmVudCBsb2NhdGlvbiBvZiB0aGUgY3VycmVudCBTaG93Y2FzZSBwbGF5ZXIuXG4gICAqIGBgYHR5cGVzY3JpcHRcbiAgICogY29uc3QgZGVlcExpbmsgPSBhd2FpdCBzZGsuTGluay5jcmVhdGVEZWVwTGluaygpO1xuICAgKiBgYGBcbiAgICpcbiAgICogQGVtYmVkXG4gICAqIEBidW5kbGUgMy4xLjYwLjEyLTMyLWc0NTcyMDE3Yzk4XG4gICAqL1xuICBjcmVhdGVEZWVwTGluaygpOiBQcm9taXNlPHN0cmluZz47XG5cbiAgLyoqXG4gICAqIENoYW5nZSBob3cgdGhlIGxpbmsgdGhlIHNoYXJlIGRpYWxvZyBhbmQgdGhlIFtbY3JlYXRlTGlua11dIGFuZCBbW2NyZWF0ZURlZXBMaW5rXV0gbGlua3MgYXJlIGNyZWF0ZWQuXG4gICAqXG4gICAqIGBgYHR5cGVzY3JpcHRcbiAgICogYXdhaXQgc2RrLkxpbmsuc2V0U2hhcmVMaW5rUG9saWN5KHNkay5MaW5rLkNyZWF0aW9uUG9saWN5LlJFRkVSUkVSKTtcbiAgICogY29uc3QgbGluayA9IGF3YWl0IHNkay5MaW5rLmNyZWF0ZUxpbmsoKTtcbiAgICogY29uc29sZS5sb2cobGluayk7IC8vIHNob3VsZCBsb2cgYSBsaW5rIHRvIHlvdXIgcGFnZSB0aGF0IGVtYmVkcyBTaG93Y2FzZVxuICAgKiBgYGBcbiAgICogQHBhcmFtIHBvbGljeVxuICAgKiBAcGFyYW0gb3B0aW9uc1xuICAgKlxuICAgKiBAZW1iZWRcbiAgICogQGJ1bmRsZSAzLjEuNjAuMTItMzItZzQ1NzIwMTdjOThcbiAgICovXG4gIHNldFNoYXJlTGlua1BvbGljeShwb2xpY3k6IExpbmsuQ3JlYXRpb25Qb2xpY3ksIG9wdGlvbnM/OiBQYXJ0aWFsPExpbmsuQ3JlYXRlTGlua09wdGlvbnM+KTogUHJvbWlzZTx2b2lkPjtcblxuICAvKipcbiAgICogQ2hhbmdlIHRoZSBiZWhhdmlvciBvZiBjbGlja2luZyBhIGxpbmsgdG8gYW5vdGhlciBtb2RlbC5cbiAgICpcbiAgICogYGBgdHlwZXNjcmlwdFxuICAgKiBzZGsuTGluay5zZXRNb2RlbExpbmtQb2xpY3koc2RrLkxpbmsuT3BlblBvbGljeS5ORVdfV0lORE9XKTtcbiAgICogLy8gY2xpY2tpbmcgYSBsaW5rIHRvIGFub3RoZXIgbW9kZWwgd2lsbCBub3cgb3BlbiBhIG5ldyB3aW5kb3dcbiAgICogYGBgXG4gICAqXG4gICAqIEBwYXJhbSBwb2xpY3lcbiAgICogQHBhcmFtIG9wdGlvbnNcbiAgICpcbiAgICogQGVtYmVkXG4gICAqIEBidW5kbGUgMy4xLjYwLjEyLTMyLWc0NTcyMDE3Yzk4XG4gICAqL1xuICBzZXRNb2RlbExpbmtQb2xpY3kocG9saWN5OiBMaW5rLk9wZW5Qb2xpY3ksIG9wdGlvbnM/OiBQYXJ0aWFsPExpbmsuT3BlblBvbGljeU9wdGlvbnM+KTogUHJvbWlzZTx2b2lkPjtcbiAgc2V0TW9kZWxMaW5rUG9saWN5KHBvbGljeTogTGluay5PcGVuUG9saWN5LCBkZXN0aW5hdGlvbjogTGluay5EZXN0aW5hdGlvblBvbGljeSk6IFByb21pc2U8dm9pZD47XG5cbiAgLyoqXG4gICAqIENoYW5nZSB0aGUgYmVoYXZpb3Igb2YgY2xpY2tpbmcgYSBsaW5rIHRvIGEgbG9jYXRpb24gd2l0aGluIHRoZSBjdXJyZW50IG1vZGVsLlxuICAgKlxuICAgKiBgYGB0eXBlc2NyaXB0XG4gICAqIC8vIHdoZW4gY2xpY2tpbmcgYSBsaW5rIHdpdGggYSBsb2NhdGlvbiB3aXRoaW4gdGhlIGN1cnJlbnQgbW9kZWwsIG9wZW4gYSBuZXcgd2luZG93IHdpdGggdGhlIG1vZGVsIGF0IHRoZSBsb2NhdGlvblxuICAgKiAvLyBpbnN0ZWFkIG9mIG5hdmlnYXRpbmcgdGhlIGN1cnJlbnQgbW9kZWwgdG8gdGhlIG5ldyBsb2NhdGlvblxuICAgKiBzZGsuTGluay5zZXROYXZpZ2F0aW9uTGlua1BvbGljeShzZGsuTGluay5PcGVuUG9saWN5Lk5FV19XSU5ET1csIHtcbiAgICogICB0ZW1wbGF0ZUhyZWY6ICdodHRwczovL2V4YW1wbGUuY29tLyR7bX0vc2hvdy5odG1sPycsXG4gICAqIH0pO1xuICAgKlxuICAgKiAvLyByZXZlcnQgdGhlIG5hdmlnYXRpb24gbGluayBiZWhhdmlvciB0byB0aGUgZGVmYXVsdFxuICAgKiBzZGsuTGluay5zZXROYXZpZ2F0aW9uTGlua1BvbGljeShzZGsuTGluay5PcGVuUG9saWN5LkRFRkFVTFQpO1xuICAgKiBgYGBcbiAgICpcbiAgICogQHBhcmFtIHBvbGljeVxuICAgKiBAcGFyYW0gb3B0aW9uc2BcbiAgICpcbiAgICogQGVtYmVkXG4gICAqIEBidW5kbGUgMy4xLjYwLjEyLTMyLWc0NTcyMDE3Yzk4XG4gICAqL1xuICBzZXROYXZpZ2F0aW9uTGlua1BvbGljeShwb2xpY3k6IExpbmsuT3BlblBvbGljeSwgb3B0aW9ucz86IFBhcnRpYWw8TGluay5PcGVuUG9saWN5T3B0aW9ucz4pOiBQcm9taXNlPHZvaWQ+O1xuXG4gIC8qKlxuICAgKiBDaGFuZ2UgdGhlIGJlaGF2aW9yIG9mIGNsaWNraW5nIGEgbGluayB0byBhIHBhZ2UgZnJvbSB0aGUgc2FtZSBvcmlnaW4gYXMgdGhlIG9uZSBob3N0aW5nIFNob3djYXNlLlxuICAgKlxuICAgKiBgYGB0eXBlc2NyaXB0XG4gICAqIHNkay5MaW5rLnNldFNhbWVPcmlnaW5MaW5rUG9saWN5KHNkay5MaW5rLk9wZW5Qb2xpY3kuQ1VSUkVOVF9XSU5ET1cpO1xuICAgKiAvLyBjbGlja2luZyBhIGxpbmsgd2l0aCB0aGUgc2FtZSBvcmlnaW4gYXMgU2hvd2Nhc2UncyBlbWJlZGRlciB3aWxsIG5vdyBuYXZpZ2F0ZSB0aGUgZW1iZWRkaW5nIHBhZ2VcbiAgICpcbiAgICogc2RrLkxpbmsuc2V0U2FtZU9yaWdpbkxpbmtQb2xpY3koc2RrLkxpbmsuT3BlblBvbGljeS5TQU1FX0ZSQU1FKTtcbiAgICogLy8gY2xpY2tpbmcgYSBsaW5rIHdpdGggdGhlIHNhbWUgb3JpZ2luIGFzIFNob3djYXNlJ3MgZW1iZWRkZXIgd2lsbCBub3cgbmF2aWdhdGUgU2hvd2Nhc2UncyBpZnJhbWUgdG8gdGhhdCBwYWdlXG4gICAqIGBgYFxuICAgKlxuICAgKiBAcGFyYW0gcG9saWN5XG4gICAqXG4gICAqIEBlbWJlZFxuICAgKiBAYnVuZGxlIDMuMS42MC4xMi0zMi1nNDU3MjAxN2M5OFxuICAgKi9cbiAgc2V0U2FtZU9yaWdpbkxpbmtQb2xpY3kocG9saWN5OiBMaW5rLk9wZW5Qb2xpY3kpOiBQcm9taXNlPHZvaWQ+O1xuXG4gIC8qKlxuICAgKiBDaGFuZ2UgdGhlIGJlaGF2aW9yIG9mIGNsaWNraW5nIGEgbGluayB0byBhIGRpZmZlcmVudCBvcmlnaW4uXG4gICAqXG4gICAqIGBgYHR5cGVzY3JpcHRcbiAgICogc2RrLkxpbmsuc2V0RXh0ZXJuYWxMaW5rUG9saWN5KGZhbHNlKTtcbiAgICogLy8gY2xpY2tpbmcgYW4gZXh0ZXJuYWwgbGluayB3aWxsIG5vdyBuYXZpZ2F0ZSB0aGUgY3VycmVudCBwYWdlIChub3QgdGhlIFNob3djYXNlIGlmcmFtZSkgdG8gdGhlIGxpbmtcbiAgICpcbiAgICogYGBgXG4gICAqXG4gICAqIEBwYXJhbSBvcGVuSW5OZXdXaW5kb3cgT3BlbiB0aGUgbGluayBpbiBhIG5ldyB0YWIgb3Igd2luZG93OyBvdGhlcndpc2UsIHJlcGxhY2UgdGhlIGVtYmVkZGVyJ3Mgd2luZG93LlxuICAgKiB0cnVlIGlzIHRoZSBkZWZhdWx0IGJlaGF2aW9yLlxuICAgKlxuICAgKiBAZW1iZWRcbiAgICogQGJ1bmRsZSAzLjEuNjAuMTItMzItZzQ1NzIwMTdjOThcbiAgICovXG4gIHNldEV4dGVybmFsTGlua1BvbGljeShvcGVuSW5OZXdXaW5kb3c6IGJvb2xlYW4pOiBQcm9taXNlPHZvaWQ+O1xufVxuIiwiaW1wb3J0IHR5cGUgeyBWZWN0b3IzLCBDb2xvciwgU2l6ZSwgSU9ic2VydmFibGVNYXAgfSBmcm9tICcuL2dsb2JhbCc7XG5cbmV4cG9ydCBuYW1lc3BhY2UgTWF0dGVydGFnIHtcbiAgZXhwb3J0IHR5cGUgTWF0dGVydGFnRGF0YSA9IHtcbiAgICBzaWQ6IHN0cmluZztcbiAgICBlbmFibGVkOiBib29sZWFuO1xuICAgIC8qKiBUaGUgd29ybGQgc3BhY2UgcG9zaXRpb24gb2YgdGhlIG1hdHRlcnRhZyBhbmNob3Igd2l0aGluIHRoZSBtb2RlbCAqL1xuICAgIGFuY2hvclBvc2l0aW9uOiBWZWN0b3IzO1xuICAgIC8qKiBUaGUgd29ybGQgc3BhY2UgKG5vbi1ub3JtYWwpIGRpcmVjdGlvbiBvZiB0aGUgbWF0dGVydGFnJ3Mgc3RlbSAqL1xuICAgIHN0ZW1WZWN0b3I6IFZlY3RvcjM7XG4gICAgc3RlbVZpc2libGU6IGJvb2xlYW47XG4gICAgbGFiZWw6IHN0cmluZztcbiAgICBkZXNjcmlwdGlvbjogc3RyaW5nO1xuICAgIC8qKiBAZGVwcmVjYXRlZCAqL1xuICAgIHBhcnNlZERlc2NyaXB0aW9uOiBEZXNjcmlwdGlvbkNodW5rW107XG4gICAgbWVkaWE6IHtcbiAgICAgIHR5cGU6IE1lZGlhVHlwZTtcbiAgICAgIHNyYzogc3RyaW5nO1xuICAgIH07XG4gICAgY29sb3I6IENvbG9yO1xuICAgIC8qKiBAZGVwcmVjYXRlZCBVc2UgW1tmbG9vckluZm9dXSBpbnN0ZWFkICovXG4gICAgZmxvb3JJZDogbnVtYmVyO1xuICAgIC8qKiBAZGVwcmVjYXRlZCBVc2UgW1tmbG9vckluZm9dXSBpbnN0ZWFkICovXG4gICAgZmxvb3JJbmRleDogbnVtYmVyO1xuICAgIGZsb29ySW5mbzoge1xuICAgICAgaWQ6IHN0cmluZztcbiAgICAgIHNlcXVlbmNlOiBudW1iZXI7XG4gICAgfTtcbiAgICAvKiogQGRlcHJlY2F0ZWQgVXNlIFtbbWVkaWEudHlwZV1dIGluc3RlYWQgKi9cbiAgICBtZWRpYVR5cGU6IE1lZGlhVHlwZTtcbiAgICAvKiogQGRlcHJlY2F0ZWQgVXNlIFtbbWVkaWEuc3JjXV0gaW5zdGVhZCAqL1xuICAgIG1lZGlhU3JjOiBzdHJpbmc7XG4gICAgLyoqIEBkZXByZWNhdGVkIFVzZSBbW3N0ZW1WZWN0b3JdXSBpbnN0ZWFkICovXG4gICAgYW5jaG9yTm9ybWFsOiBWZWN0b3IzO1xuICAgIC8qKiBAZGVwcmVjYXRlZCBDYWxjdWxhdGUgdGhlIGxlbmd0aCBvZiBbW3N0ZW1WZWN0b3JdXSBpbnN0ZWFkICovXG4gICAgc3RlbUhlaWdodDogbnVtYmVyO1xuICB9O1xuXG4gIGV4cG9ydCB0eXBlIE9ic2VydmFibGVNYXR0ZXJ0YWdEYXRhID0ge1xuICAgIHNpZDogc3RyaW5nO1xuICAgIGVuYWJsZWQ6IGJvb2xlYW47XG4gICAgLyoqIFRoZSB3b3JsZCBzcGFjZSBwb3NpdGlvbiBvZiB0aGUgbWF0dGVydGFnIGFuY2hvciB3aXRoaW4gdGhlIG1vZGVsICovXG4gICAgYW5jaG9yUG9zaXRpb246IFZlY3RvcjM7XG4gICAgLyoqIFRoZSB3b3JsZCBzcGFjZSAobm9uLW5vcm1hbCkgZGlyZWN0aW9uIG9mIHRoZSBtYXR0ZXJ0YWcncyBzdGVtICovXG4gICAgc3RlbVZlY3RvcjogVmVjdG9yMztcbiAgICBzdGVtVmlzaWJsZTogYm9vbGVhbjtcbiAgICBsYWJlbDogc3RyaW5nO1xuICAgIGRlc2NyaXB0aW9uOiBzdHJpbmc7XG4gICAgbWVkaWE6IHtcbiAgICAgIHR5cGU6IE1lZGlhVHlwZTtcbiAgICAgIHNyYzogc3RyaW5nO1xuICAgIH07XG4gICAgY29sb3I6IENvbG9yO1xuICAgIC8qKiBAZGVwcmVjYXRlZCBVc2UgW1tmbG9vckluZm9dXSBpbnN0ZWFkICovXG4gICAgZmxvb3JJbmRleDogbnVtYmVyO1xuICAgIGZsb29ySW5mbzoge1xuICAgICAgaWQ6IHN0cmluZztcbiAgICAgIHNlcXVlbmNlOiBudW1iZXI7XG4gICAgfTtcbiAgfTtcblxuICBleHBvcnQgZW51bSBUcmFuc2l0aW9uIHtcbiAgICBJTlNUQU5UID0gJ3RyYW5zaXRpb24uaW5zdGFudCcsXG4gICAgRkxZICAgICA9ICd0cmFuc2l0aW9uLmZseScsXG4gICAgRkFERU9VVCA9ICd0cmFuc2l0aW9uLmZhZGUnLFxuICB9XG5cbiAgZXhwb3J0IGludGVyZmFjZSBEZXNjcmlwdGlvbkNodW5rIHtcbiAgICB0ZXh0Pzogc3RyaW5nO1xuICAgIGxpbms/OiBMaW5rO1xuICAgIHR5cGU6IERlc2NyaXB0aW9uQ2h1bmtUeXBlO1xuICB9XG5cbiAgZXhwb3J0IGludGVyZmFjZSBMaW5rIHtcbiAgICBsYWJlbDogc3RyaW5nO1xuICAgIHVybDogc3RyaW5nO1xuICAgIHR5cGU6IExpbmtUeXBlO1xuICAgIG5hdmlnYXRpb25EYXRhPzogYW55O1xuICB9XG4gIC8qKlxuICAgKiBPcHRpb25zIHRoYXQgY2FuIGJlIHNwZWNpZmllZCB3aGVuIGluamVjdGlvbiBjdXN0b20gSFRNTCBpbnRvIGEgTWF0dGVydGFnLlxuICAgKi9cbiAgZXhwb3J0IHR5cGUgSW5qZWN0aW9uT3B0aW9ucyA9IHtcbiAgICAvKiogVGhlIHNpemUgb2YgdGhlIGZyYW1lIHRvIGNyZWF0ZSAqL1xuICAgIHNpemU/OiBTaXplO1xuICAgIC8qKlxuICAgICAqIEBkZXByZWNhdGVkIFRoaXMgb3B0aW9uIGlzIG5vIGxvbmdlciByZXF1aXJlZCBhbmQgd2lsbCBiZSBpZ25vcmVkXG4gICAgICovXG4gICAgd2luZG93UGF0aD86IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBBIG1hcCBmb3IgdGhlIGdsb2JhbCBmdW5jdGlvbnMgYW5kIHZhcmlhYmxlcyB3ZSBwcm92aWRlIGluIHlvdXIgaWZyYW1lIHNhbmRib3guXG4gICAgICogT25seSBuZWVkcyB0byBiZSB1c2VkIGlmIHNjcmlwdHMgeW91IGFyZSBpbXBvcnRpbmcgYWxzbyBoYXZlIGEgZ2xvYmFsIGBzZW5kYCwgYG9uYCwgYG9mZmAsIG9yIGB0YWdgLlxuICAgICAqL1xuICAgIGdsb2JhbFZhcmlhYmxlTWFwPzogR2xvYmFsVmFyaWFibGVNYXA7XG4gIH07XG5cbiAgLyoqXG4gICAqIE1hcCB0aGUgZ2xvYmFscyB3ZSBwcm92aWRlIGluIHlvdXIgc2FuZGJveCB0byBvdGhlciBuYW1lcy5cbiAgICovXG4gIGV4cG9ydCB0eXBlIEdsb2JhbFZhcmlhYmxlTWFwID0ge1xuICAgIHNlbmQ/OiBzdHJpbmc7XG4gICAgb24/OiBzdHJpbmc7XG4gICAgb2ZmPzogc3RyaW5nO1xuICAgIHRhZz86IHN0cmluZztcbiAgfVxuXG4gIC8qKlxuICAgKiBBIG1lc3NhZ2luZyBvYmplY3QgdG8gc2VuZCBhbmQgcmVjZWl2ZSBtZXNzYWdlcyB0byBhbmQgZnJvbSB5b3VyIGlmcmFtZSBzYW5kYm94LlxuICAgKi9cbiAgZXhwb3J0IGludGVyZmFjZSBJTWVzc2VuZ2VyIHtcbiAgICAvKipcbiAgICAgKiBTZW5kIGEgbWVzc2FnZXMgb2YgdHlwZSBgZXZlbnRUeXBlYCB0byB0aGUgaWZyYW1lIHNhbmRib3ggd2l0aCBhbnkgb3B0aW9uYWwgZGF0YSBhc3NvY2lhdGVkIHdpdGggdGhlIG1lc3NhZ2VcbiAgICAgKi9cbiAgICBzZW5kKGV2ZW50VHlwZTogc3RyaW5nLCAuLi5hcmdzOiBhbnlbXSk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQWRkIGEgaGFuZGxlciBmb3IgbWVzc2FnZXMgb2YgdHlwZSBgZXZlbnRUeXBlYCBmcm9tIHRoZSBpZnJhbWUgc2FuZGJveFxuICAgICAqL1xuICAgIG9uKGV2ZW50VHlwZTogc3RyaW5nLCBldmVudEhhbmRsZXI6ICguLi5hcmdzOiBhbnlbXSkgPT4gdm9pZCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogUmVtb3ZlIGEgaGFuZGxlciBmb3IgbWVzc2FnZXMgb2YgdHlwZSBgZXZlbnRUeXBlYCBmcm9tIHRoZSBpZnJhbWUgc2FuZGJveFxuICAgICAqL1xuICAgIG9mZihldmVudFR5cGU6IHN0cmluZywgZXZlbnRIYW5kbGVyOiAoLi4uYXJnczogYW55W10pID0+IHZvaWQpOiB2b2lkO1xuICB9XG5cbiAgZXhwb3J0IHR5cGUgUHJldmVudGFibGVBY3Rpb25zID0ge1xuICAgIG9wZW5pbmc6IGJvb2xlYW47XG4gICAgbmF2aWdhdGluZzogYm9vbGVhbjtcbiAgfTtcblxuICBleHBvcnQgZW51bSBMaW5rVHlwZSB7XG4gICAgLyoqIEEgbGluayB0byBhbm90aGVyIHBvc2l0aW9uIGluIHRoZSBjdXJyZW50IG1vZGVsICovXG4gICAgTkFWSUdBVElPTiA9ICd0YWcubGluay5uYXYnLFxuXG4gICAgLyoqIEEgbGluayB0byBhIGRpZmZlcmVudCBNYXR0ZXJwb3J0IG1vZGVsICovXG4gICAgTU9ERUwgPSAndGFnLmxpbmsubW9kZWwnLFxuXG4gICAgLyoqIEFuIGV4dGVybmFsIGxpbmsgKi9cbiAgICBFWFRfTElOSyA9ICd0YWcubGluay5leHQnLFxuICB9XG5cbiAgZXhwb3J0IGVudW0gRGVzY3JpcHRpb25DaHVua1R5cGUge1xuICAgIE5PTkUgPSAndGFnLmNodW5rLm5vbmUnLFxuICAgIFRFWFQgPSAndGFnLmNodW5rLnRleHQnLFxuICAgIExJTksgPSAndGFnLmNodW5rLmxpbmsnLFxuICB9XG5cbiAgZXhwb3J0IGVudW0gRXZlbnQge1xuICAgIC8qKiBAZXZlbnQgKi9cbiAgICBIT1ZFUiA9ICd0YWcuaG92ZXInLFxuICAgIC8qKiBAZXZlbnQgKi9cbiAgICBDTElDSyA9ICd0YWcuY2xpY2snLFxuICAgIC8qKiBAZXZlbnQgKi9cbiAgICBMSU5LX09QRU4gPSAndGFnLmxpbmtvcGVuJyxcbiAgfVxuXG4gIGV4cG9ydCBlbnVtIE1lZGlhVHlwZSB7XG4gICAgTk9ORSA9ICdtYXR0ZXJ0YWcubWVkaWEubm9uZScsXG4gICAgUEhPVE8gPSAnbWF0dGVydGFnLm1lZGlhLnBob3RvJyxcbiAgICBWSURFTyA9ICdtYXR0ZXJ0YWcubWVkaWEudmlkZW8nLFxuICAgIFJJQ0ggPSAnbWF0dGVydGFnLm1lZGlhLnJpY2gnLFxuICB9XG5cbiAgLyoqXG4gICAqIEEgc3Vic2V0IG9mIHRoZSBNYXR0ZXJ0YWdEYXRhIHVzZWQgdG8gYWRkIE1hdHRlcnRhZ3MgdGhyb3VnaCB0aGUgc2RrLlxuICAgKiBNb3N0IHByb3BlcnRpZXMgYXJlIG9wdGlvbmFsIGV4Y2VwdCB0aG9zZSB1c2VkIGZvciBwb3NpdGlvbmluZzogYGFuY2hvclBvc2l0aW9uYCwgYHN0ZW1WZWN0b3JgLlxuICAgKi9cbiAgZXhwb3J0IGludGVyZmFjZSBNYXR0ZXJ0YWdEZXNjcmlwdG9yIHtcbiAgICBhbmNob3JQb3NpdGlvbjogVmVjdG9yMztcbiAgICBzdGVtVmVjdG9yOiBWZWN0b3IzO1xuICAgIHN0ZW1WaXNpYmxlPzogYm9vbGVhbjtcbiAgICBsYWJlbD86IHN0cmluZztcbiAgICBkZXNjcmlwdGlvbj86IHN0cmluZztcbiAgICBtZWRpYT86IHtcbiAgICAgIHR5cGU6IE1lZGlhVHlwZTtcbiAgICAgIHNyYzogc3RyaW5nO1xuICAgIH1cbiAgICBjb2xvcj86IENvbG9yO1xuICAgIC8qKiBAZGVwcmVjYXRlZCBVc2UgW1tmbG9vckluZGV4XV0gaW5zdGVhZCAqL1xuICAgIGZsb29ySWQ/OiBudW1iZXI7XG4gICAgZmxvb3JJbmRleD86IG51bWJlcjtcbiAgICBpY29uSWQ/OiBzdHJpbmc7XG4gIH1cblxuICBleHBvcnQgdHlwZSBFZGl0YWJsZVByb3BlcnRpZXMgPSB7XG4gICAgbGFiZWw6IHN0cmluZztcbiAgICBkZXNjcmlwdGlvbjogc3RyaW5nO1xuICAgIG1lZGlhOiB7XG4gICAgICB0eXBlOiBNZWRpYVR5cGU7XG4gICAgICBzcmM6IHN0cmluZztcbiAgICB9O1xuICB9XG5cbiAgZXhwb3J0IGludGVyZmFjZSBQb3NpdGlvbk9wdGlvbnMge1xuICAgIGFuY2hvclBvc2l0aW9uOiBWZWN0b3IzO1xuICAgIHN0ZW1WZWN0b3I6IFZlY3RvcjM7XG4gICAgLyoqIEBkZXByZWNhdGVkIFVzZSBbW2Zsb29ySW5kZXhdXSBpbnN0ZWFkICovXG4gICAgZmxvb3JJZDogbnVtYmVyO1xuICAgIGZsb29ySW5kZXg6IG51bWJlcjtcbiAgfVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIE1hdHRlcnRhZyB7XG4gIFRyYW5zaXRpb246IHR5cGVvZiBNYXR0ZXJ0YWcuVHJhbnNpdGlvbjtcbiAgTGlua1R5cGU6IHR5cGVvZiBNYXR0ZXJ0YWcuTGlua1R5cGU7XG4gIERlc2NyaXB0aW9uQ2h1bmtUeXBlOiB0eXBlb2YgTWF0dGVydGFnLkRlc2NyaXB0aW9uQ2h1bmtUeXBlO1xuICBFdmVudDogdHlwZW9mIE1hdHRlcnRhZy5FdmVudDtcbiAgTWVkaWFUeXBlOiB0eXBlb2YgTWF0dGVydGFnLk1lZGlhVHlwZTtcblxuICAvKipcbiAgICogVGhpcyBmdW5jdGlvbiByZXR1cm5zIG1ldGFkYXRhIG9uIHRoZSBjb2xsZWN0aW9uIG9mIE1hdHRlcnRhZ3MuXG4gICAqXG4gICAqIEBkZXByZWNhdGVkIFVzZSBbW1RhZy5kYXRhXV0gaW5zdGVhZFxuICAgKi9cbiAgZ2V0RGF0YSgpOiBQcm9taXNlPE1hdHRlcnRhZy5NYXR0ZXJ0YWdEYXRhW10+O1xuXG4gIC8qKlxuICAgKiBBbiBvYnNlcnZhYmxlIGNvbGxlY3Rpb24gb2YgTWF0dGVydGFnIGRhdGEgdGhhdCBjYW4gYmUgc3Vic2NyaWJlZCB0by5cbiAgICpcbiAgICogQGRlcHJlY2F0ZWQgVXNlIFtbVGFnLmRhdGFdXSBpbnN0ZWFkXG4gICAqL1xuICBkYXRhOiBJT2JzZXJ2YWJsZU1hcDxNYXR0ZXJ0YWcuT2JzZXJ2YWJsZU1hdHRlcnRhZ0RhdGE+O1xuXG4gIC8qKlxuICAgKiBUaGlzIGZ1bmN0aW9uIG5hdmlnYXRlcyB0byB0aGUgTWF0dGVydGFnIGRpc2Mgd2l0aCB0aGUgcHJvdmlkZWQgc2lkLCBvcGVuaW5nIHRoZSBiaWxsYm9hcmQgb24gYXJyaXZhbC5cbiAgICpcbiAgICogYGBgXG4gICAqIG1wU2RrLk1hdHRlcnRhZy5uYXZpZ2F0ZVRvVGFnKHNpZCwgbXBTZGsuTWF0dGVydGFnLlRyYW5zaXRpb24uRkxZKTtcbiAgICogYGBgXG4gICAqXG4gICAqIEBwYXJhbSB0YWdTaWQgVGhlIHNpZCBvZiB0aGUgTWF0dGVydGFnIHRvIG5hdmlnYXRlIHRvXG4gICAqIEBwYXJhbSB0cmFuc2l0aW9uIFRoZSB0eXBlIG9mIHRyYW5zaXRpb24gdG8gbmF2aWdhdGUgdG8gYSBzd2VlcCB3aGVyZSB0aGUgTWF0dGVydGFnIGRpc2MgaXMgdmlzaWJsZVxuICAgKiBAcGFyYW0gZm9yY2UgSWYgbmF2aWdhdGluZyB0byB0aGUgdGFnIGlzIGRpc2FibGVkLCBwYXNzaW5nIGZvcmNlID09PSB0cnVlIHdpbGwgZm9yY2UgdGhlIHRyYW5zaXRpb24gdG8gb2NjdXJcbiAgICovXG4gIG5hdmlnYXRlVG9UYWcodGFnU2lkOiBzdHJpbmcsIHRyYW5zaXRpb246IE1hdHRlcnRhZy5UcmFuc2l0aW9uLCBmb3JjZT86IGJvb2xlYW4pOiBQcm9taXNlPHN0cmluZz47XG5cbiAvKipcbiAgICogR2V0IHRoZSBkaXNjJ3MgKDNkKSBwb3NpdGlvbiBvZiBhIE1hdHRlcnRhZy5cbiAgICpcbiAgICogQGRlcHJlY2F0ZWQgRGlzYyBwb3NpdGlvbiBpcyBhdXRvbWF0aWFsbHkgaW5jbHVkZWQgaW4gW1tUYWcuZGF0YV1dXG4gICAqL1xuICBnZXREaXNjUG9zaXRpb24odGFnOiBNYXR0ZXJ0YWcuTWF0dGVydGFnRGF0YSB8IE1hdHRlcnRhZy5PYnNlcnZhYmxlTWF0dGVydGFnRGF0YSwgcmVzdWx0PzogVmVjdG9yMyk6IFZlY3RvcjM7XG5cbiAgLyoqXG4gICAqIEFkZCBvbmUgb3IgbW9yZSBNYXR0ZXJ0YWdzIHRvIFNob3djYXNlLlxuICAgKiBFYWNoIGlucHV0IE1hdHRlcnRhZyBzdXBwb3J0cyBzZXR0aW5nIHRoZSBsYWJlbCwgZGVzY3JpcHRpb24sIGNvbG9yLCBhbmNob3JQb3NpdGlvbiwgYW5kIHN0ZW1WZWN0b3IuXG4gICAqXG4gICAqIFR3byBwcm9wZXJ0aWVzIGFyZSByZXF1aXJlZDpcbiAgICogLSBgYW5jaG9yUG9zaXRpb25gLCB0aGUgcG9pbnQgd2hlcmUgdGhlIHRhZyBjb25uZWN0cyB0byB0aGUgbW9kZWxcbiAgICogLSBgc3RlbVZlY3RvcmAsIHRoZSBkaXJlY3Rpb24sIGFrYSBub3JtYWwsIGFuZCBoZWlnaHQgdGhhdCB0aGUgTWF0dGVydGFnIHN0ZW0gcG9pbnRzXG4gICAqXG4gICAqIFNlZSBbW1BvaW50ZXIuaW50ZXJzZWN0aW9uXV0gZm9yIGEgd2F5IHRvIHJldHJpdmUgYSBuZXcgYGFuY2hvclBvc2l0aW9uYCBhbmQgYHN0ZW1WZWN0b3JgLlxuICAgKlxuICAgKiAqKk5vdGUqKjogdGhlc2UgY2hhbmdlcyBhcmUgbm90IHBlcnNpc3RlZCBiZXR3ZWVuIHJlZnJlc2hlcyBvZiBTaG93Y2FzZS4gVGhleSBhcmUgb25seSB2YWxpZCBmb3IgdGhlIGN1cnJlbnQgYnJvd3NlciBzZXNzaW9uLlxuICAgKlxuICAgKiBAcGFyYW0gbmV3VGFnRGF0YSBBIHNpbmdsZSBvciBhcnJheSBvZiBNYXR0ZXJ0YWcgdGVtcGxhdGVzIHRvIGFkZC5cbiAgICogQHJldHVybiBBIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aXRoIHRoZSBzaWRzIGZvciB0aGUgbmV3bHkgYWRkZWQgTWF0dGVydGFncy5cbiAgICpcbiAgICogQGRlcHJlY2F0ZWQgVXNlIFtbVGFnLmFkZF1dIGluc3RlYWRcbiAgICovXG4gIGFkZChuZXdUYWdEYXRhOiBNYXR0ZXJ0YWcuTWF0dGVydGFnRGVzY3JpcHRvciB8IE1hdHRlcnRhZy5NYXR0ZXJ0YWdEZXNjcmlwdG9yW10pOiBQcm9taXNlPHN0cmluZ1tdPjtcblxuICAvKipcbiAgICogRWRpdCB0aGUgZGF0YSBpbiBhIE1hdHRlcnRhZyBiaWxsYm9hcmQuXG4gICAqXG4gICAqICoqTm90ZSoqOiB0aGVzZSBjaGFuZ2VzIGFyZSBub3QgcGVyc2lzdGVkIGJldHdlZW4gcmVmcmVzaGVzIG9mIFNob3djYXNlLiBUaGV5IGFyZSBvbmx5IHZhbGlkIGZvciB0aGUgY3VycmVudCBicm93c2VyIHNlc3Npb24uXG4gICAqXG4gICAqIEBwYXJhbSB0YWdTaWQgdGhlIHNpZCBvZiB0aGUgTWF0dGVydGFnIHRvIGVkaXRcbiAgICogQHBhcmFtIHByb3BlcnRpZXMgQSBkaWN0aW9uYXJ5IG9mIHByb3BlcnRpZXMgdG8gc2V0XG4gICAqXG4gICAqIEBkZXByZWNhdGVkIFVzZSBbW1RhZy5lZGl0QmlsbGJvYXJkXV0gb3IgW1tUYWcucmVnaXN0ZXJBdHRhY2htZW50XV0gYW5kL29yIFtbVGFnLmF0dGFjaF1dIHRvIG1hbmFnZSBtZWRpYVxuICAgKi9cbiAgZWRpdEJpbGxib2FyZCh0YWdTaWQ6IHN0cmluZywgcHJvcGVydGllczogUGFydGlhbDxNYXR0ZXJ0YWcuRWRpdGFibGVQcm9wZXJ0aWVzPik6IFByb21pc2U8dm9pZD47XG5cbiAgLyoqXG4gICAqIE1vdmUgYW5kIHJlb3JpZW50IGEgTWF0dGVydGFnLlxuICAgKlxuICAgKiBTZWUgW1tQb2ludGVyLmludGVyc2VjdGlvbl1dIGZvciBhIHdheSB0byByZXRyaWV2ZSBhIG5ldyBgYW5jaG9yUG9zaXRpb25gIGFuZCBgc3RlbVZlY3RvcmAuXG4gICAqXG4gICAqICoqTm90ZSoqOiB0aGVzZSBjaGFuZ2VzIGFyZSBub3QgcGVyc2lzdGVkIGJldHdlZW4gcmVmcmVzaGVzIG9mIFNob3djYXNlLiBUaGV5IGFyZSBvbmx5IHZhbGlkIGZvciB0aGUgY3VycmVudCBicm93c2VyIHNlc3Npb24uXG4gICAqXG4gICAqIEBwYXJhbSB0YWdTaWQgVGhlIHNpZCBvZiB0aGUgTWF0dGVydGFnIHRvIHJlcG9zaXRpb25cbiAgICogQHBhcmFtIG1vdmVPcHRpb25zIFRoZSBuZXcgYW5jaG9yUG9zaXRpb24sIHN0ZW1WZWN0b3IgYW5kL29yIGZsb29ySWQuXG4gICAqXG4gICAqIEBkZXByZWNhdGVkIFVzZSBbW1RhZy5lZGl0UG9zaXRpb25dXSBpbnN0ZWFkXG4gICAqL1xuICBlZGl0UG9zaXRpb24odGFnU2lkOiBzdHJpbmcsIG1vdmVPcHRpb25zOiBQYXJ0aWFsPE1hdHRlcnRhZy5Qb3NpdGlvbk9wdGlvbnM+KTogUHJvbWlzZTx2b2lkPjtcblxuICAvKipcbiAgICogRWRpdCB0aGUgY29sb3Igb2YgYSBNYXR0ZXJ0YWdcbiAgICpcbiAgICogQHBhcmFtIHRhZ1NpZCBUaGUgc2lkIG9mIHRoZSBNYXR0ZXJ0YWcgdG8gZWRpdFxuICAgKiBAcGFyYW0gY29sb3IgVGhlIG5ldyBjb2xvciB0byBiZSBhcHBsaWVkIHRvIHRoZSBNYXR0ZXJ0YWcgZGlzY1xuICAgKlxuICAgKiBAZGVwcmVjYXRlZCBVc2UgW1tUYWcuZWRpdENvbG9yXV0gaW5zdGVhZFxuICAgKi9cbiAgZWRpdENvbG9yKHRhZ1NpZDogc3RyaW5nLCBjb2xvcjogQ29sb3IpOiBQcm9taXNlPHZvaWQ+O1xuXG4gIC8qKlxuICAgKiBFZGl0IHRoZSBvcGFjaXR5IG9mIGEgTWF0dGVydGFnXG4gICAqXG4gICAqIEBwYXJhbSB0YWdTaWQgVGhlIHNpZCBvZiB0aGUgTWF0dGVydGFnIHRvIGVkaXRcbiAgICogQHBhcmFtIG9wYWNpdHkgVGhlIHRhcmdldCBvcGFjaXR5IGZvciB0aGUgTWF0dGVydGFnIGluIHRoZSByYW5nZSBvZiBbMCwgMV1cbiAgICpcbiAgICogQGRlcHJlY2F0ZWQgVXNlIFtbVGFnLmVkaXRPcGFjaXR5XV0gaW5zdGVhZFxuICAgKi9cbiAgIGVkaXRPcGFjaXR5KHRhZ1NpZDogc3RyaW5nLCBvcGFjaXR5OiBudW1iZXIpOiBQcm9taXNlPHZvaWQ+O1xuXG4gIC8qKlxuICAgKiBFZGl0IHRoZSBzdGVtIG9mIGEgTWF0dGVydGFnXG4gICAqXG4gICAqIEBwYXJhbSB0YWdTaWQgVGhlIHNpZCBvZiB0aGUgTWF0dGVydGFnIHRvIGVkaXRcbiAgICogQHBhcmFtIHN0ZW1PcHRpb25zIFdoYXQgdG8gY2hhbmdlIGFib3V0IHRoZSBNYXR0ZXJ0YWcncyBzdGVtIC0gY2FuIGluY2x1ZGUgc3RlbUhlaWdodCBhbmQgc3RlbVZpc2libGVcbiAgICogQGludHJvZHVjZWQgMy4xLjcwLjEwLTAtZ2U5Y2I4M2IyOGNcbiAgICpcbiAgICogQGRlcHJlY2F0ZWQgVXNlIFtbVGFnLmVkaXRTdGVtXV0gaW5zdGVhZFxuICAgKi9cbiAgZWRpdFN0ZW0odGFnU2lkOiBzdHJpbmcsIG9wdGlvbnM6IHtzdGVtSGVpZ2h0PzogbnVtYmVyLCBzdGVtVmlzaWJsZT86IGJvb2xlYW59KTogUHJvbWlzZTx2b2lkPjtcblxuICAvKipcbiAgICogUmVnaXN0ZXIgYW4gaWNvbiB0byB1c2Ugd2l0aCBzdWJzZXF1ZW50IFtbTWF0dGVydGFnLmVkaXRJY29uXV0gY2FsbHMuXG4gICAqXG4gICAqICoqTm90ZSoqOiBJdCBpcyByZWNvbW1lbmRlZCB0byBob3N0IHlvdXIgb3duIGltYWdlcyB0byBtaXRpZ2F0ZSBjcm9zcyBvcmlnaW4gbGltaXRhdGlvbnMuXG4gICAqXG4gICAqIEBwYXJhbSBpY29uSWQgQSB1c2VyIHNwZWNpZmllZCBzdHJpbmcgdG8gdXNlIGFzIGEgbG9va3VwIG9mIHRoaXMgaWNvblxuICAgKiBAcGFyYW0gaWNvblNyYyBUaGUgc3JjIG9mIHRoZSBpY29uLCBsaWtlIHRoZSBzcmMgb2YgYW4gXFw8aW1nPlxuICAgKlxuICAgKiBAZGVwcmVjYXRlZCBVc2UgW1tBc3NldC5yZWdpc3RlclRleHR1cmVdXSBpbnN0ZWFkXG4gICAqL1xuICByZWdpc3Rlckljb24oaWNvbklkOiBzdHJpbmcsIGljb25TcmM6IHN0cmluZyk6IFByb21pc2U8dm9pZD47XG5cbiAgLyoqXG4gICAqIENoYW5nZSB0aGUgaWNvbiBvZiB0aGUgTWF0dGVydGFnIGRpc2NcbiAgICpcbiAgICogKipOb3RlKio6IHRoZXNlIGNoYW5nZXMgYXJlIG5vdCBwZXJzaXN0ZWQgYmV0d2VlbiByZWZyZXNoZXMgb2YgU2hvd2Nhc2UuIFRoZXkgYXJlIG9ubHkgdmFsaWQgZm9yIHRoZSBjdXJyZW50IGJyb3dzZXIgc2Vzc2lvbi5cbiAgICpcbiAgICpcbiAgICogQHBhcmFtIHRhZ1NpZCBUaGUgc2lkIG9mIHRoZSBNYXR0ZXJ0YWcgdG8gZWRpdFxuICAgKiBAcGFyYW0gaWNvbklkIFRoZSBpZCBvZiB0aGUgaWNvbiB0byBhcHBseVxuICAgKlxuICAgKiAqKkVycm9ycyoqXG4gICAqXG4gICAqIFdhcm5zIGlmIHRoZSBwcm92aWRlZCBgaWNvblNyY2AgaXMgYW4gLnN2ZyBmaWxlIHdoaWNoIGRvZXNuJ3QgaGF2ZSBhIGAnd2lkdGgnYCBvciBgJ2hlaWdodCdgIGF0dHJpYnV0ZS5cbiAgICogRGVmYXVsdHMgdG8gYSByZXNvbHV0aW9uIG9mIDEyOHgxMjggaWYgbmVpdGhlciBleGlzdC5cbiAgICpcbiAgICogQGRlcHJlY2F0ZWQgVXNlIFtbVGFnLmVkaXRJY29uXV0gaW5zdGVhZFxuICAgKi9cbiAgZWRpdEljb24odGFnU2lkOiBzdHJpbmcsIGljb25JZDogc3RyaW5nKTogUHJvbWlzZTx2b2lkPjtcblxuICAvKipcbiAgICogUmVzZXRzIHRoZSBpY29uIG9mIHRoZSBNYXR0ZXJ0YWcgZGlzYyBiYWNrIHRvIGl0cyBvcmlnaW5hbCBpY29uLlxuICAgKlxuICAgKiBAcGFyYW0gdGFnU2lkIFRoZSBzaWQgb2YgdGhlIE1hdHRlcnRhZyB0byByZXNldFxuICAgKlxuICAgKiBAZGVwcmVjYXRlZCBVc2UgW1tUYWcucmVzZXRJY29uXV0gaW5zdGVhZFxuICAgKi9cbiAgcmVzZXRJY29uKHRhZ1NpZDogc3RyaW5nKTogUHJvbWlzZTx2b2lkPjtcblxuICAvKipcbiAgICogUmVtb3ZlcyBvbmUgb3IgbW9yZSBNYXR0ZXJ0YWdzIGZyb20gU2hvd2Nhc2UuXG4gICAqXG4gICAqICoqTm90ZSoqOiB0aGVzZSBjaGFuZ2VzIGFyZSBub3QgcGVyc2lzdGVkIGJldHdlZW4gcmVmcmVzaGVzIG9mIFNob3djYXNlLiBUaGV5IGFyZSBvbmx5IHZhbGlkIGZvciB0aGUgY3VycmVudCBicm93c2VyIHNlc3Npb24uXG4gICAqXG4gICAqIEBwYXJhbSB0YWdTaWRzIEEgc2luZ2xlIE1hdHRlcnRhZyBzaWQgb3IgYXJyYXkgb2YgTWF0dGVydGFnIHNpZHMgdG8gcmVtb3ZlLlxuICAgKiBAcmV0dXJuIEEgcHJvbWlzZSB3aXRoIGFuIGFycmF5IG9mIE1hdHRlcnRhZyBzaWRzIHRoYXQgd2VyZSBhY3R1YWxseSByZW1vdmVkLlxuICAgKlxuICAgKiBAZGVwcmVjYXRlZCBVc2UgW1tUYWcucmVtb3ZlXV0gaW5zdGVhZFxuICAgKi9cbiAgcmVtb3ZlKHRhZ1NpZHM6IHN0cmluZyB8IHN0cmluZ1tdKTogUHJvbWlzZTxzdHJpbmdbXT47XG5cbiAgLyoqXG4gICAqIFByZXZlbnRzIHRoZSBcImRlZmF1bHRcIiBTaG93Y2FzZSBhY3Rpb24gb24gYSBNYXR0ZXJ0YWcgZnJvbSBvY2N1cnJpbmc6IGhvdmVyIHRvIG9wZW4gYmlsbGJvYXJkLCBjbGljayB0byBuYXZpZ2F0ZSB0byB2aWV3LlxuICAgKlxuICAgKiBAcGFyYW0gdGFnU2lkIFRoZSBzaWQgb2YgdGhlIE1hdHRlcnRhZyB0byByZW1vdmUgYWN0aW9ucyBmcm9tXG4gICAqIEBwYXJhbSBhY3Rpb25zIFRoZSBzZXQgb2YgYWN0aW9ucyB0byBwcmV2ZW50XG4gICAqXG4gICAqIEBkZXByZWNhdGVkIFVzZSBbW1RhZy5hbGxvd0FjdGlvbl1dIGluc3RlYWRcbiAgICovXG4gIHByZXZlbnRBY3Rpb24odGFnU2lkOiBzdHJpbmcsIGFjdGlvbnM6IFBhcnRpYWw8TWF0dGVydGFnLlByZXZlbnRhYmxlQWN0aW9ucz4pOiBQcm9taXNlPHZvaWQ+O1xuXG4gIC8qKlxuICAgKiBBZGQgYSBjdXN0b20gZnJhbWUgdGhhdCBjYW4gaG9zdCBjdXN0b20gSFRNTCBhbmQgSmF2YVNjcmlwdCwgYW5kIGNvbW11bmljYXRlIGJpLWRpcmVjdGlvbmFsbHkgd2l0aCB5b3VyIHBhZ2UuXG4gICAqXG4gICAqIFRoZSBmcmFtZSB0aGF0IGNvbnRhaW5zIHlvdXIgY3VzdG9tIGNvZGUgd2lsbCBoYXZlIGNlcnRhaW4gbGltaXRhdGlvbnMgZHVlIHRvIGJlaW5nIHNhbmRib3hlZCBieSB0aGUgYHNhbmRib3g9J2FsbG93LXNjcmlwdHNgIGF0dHJpYnV0ZS5cbiAgICogQXR0ZW1wdGluZyB0byBhY2Nlc3MgcHJvcGVydGllcyBvZiBvdGhlciB3aW5kb3dzIHdpbGwgYWxzbyBiZSBibG9ja2VkIGJ5IHRoZSBicm93c2VyLlxuICAgKiAoW3NlZSB0aGUgTUROIHBhZ2VzIGFib3V0IGlmcmFtZSBzYW5kYm94XShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVE1ML0VsZW1lbnQvaWZyYW1lKSlcbiAgICpcbiAgICogQ3VycmVudGx5LCB0aGUgSFRNTCBDQU4gT05MWSBCRSBTRVQgT05DRSBieSBhIGNhbGwgdG8gYGluamVjdEhUTUxgLiBUaGlzIGluY2x1ZGVzIHJlbW92aW5nIG9yIGNsZWFyaW5nIHRoZSBIVE1MLlxuICAgKlxuICAgKiBAZGVwcmVjYXRlZCBVc2UgW1tUYWcucmVnaXN0ZXJTYW5kYm94XV0gYW5kIFtbVGFnLmF0dGFjaF1dIGluc3RlYWRcbiAgICovXG4gIGluamVjdEhUTUwodGFnU2lkOiBzdHJpbmcsIGh0bWw6IHN0cmluZywgb3B0aW9uczogTWF0dGVydGFnLkluamVjdGlvbk9wdGlvbnMpOiBQcm9taXNlPE1hdHRlcnRhZy5JTWVzc2VuZ2VyPjtcbn1cbiIsImltcG9ydCB0eXBlIHsgSU9ic2VydmFibGUsIFJvdGF0aW9uLCBWZWN0b3IzIH0gZnJvbSAnLi9nbG9iYWwnO1xuXG5leHBvcnQgbmFtZXNwYWNlIE1vZGUge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgZXhwb3J0IGVudW0gTW9kZSB7XG4gICAgSU5TSURFID0gJ21vZGUuaW5zaWRlJyxcbiAgICBPVVRTSURFID0gJ21vZGUub3V0c2lkZScsXG4gICAgRE9MTEhPVVNFID0gJ21vZGUuZG9sbGhvdXNlJyxcbiAgICBGTE9PUlBMQU4gPSAnbW9kZS5mbG9vcnBsYW4nLFxuICAgIFRSQU5TSVRJT05JTkcgPSAnbW9kZS50cmFuc2l0aW9uaW5nJyxcbiAgfVxuXG4gIGV4cG9ydCBlbnVtIEV2ZW50IHtcbiAgICAvKiogQGV2ZW50ICovXG4gICAgQ0hBTkdFX1NUQVJUID0gJ3ZpZXdtb2RlLmNoYW5nZXN0YXJ0JyxcbiAgICAvKiogQGV2ZW50ICovXG4gICAgQ0hBTkdFX0VORCA9ICd2aWV3bW9kZS5jaGFuZ2VlbmQnLFxuICB9XG5cbiAgZXhwb3J0IHR5cGUgVHJhbnNpdGlvbkRhdGEgPSB7XG4gICAgZnJvbTogTW9kZSB8IG51bGw7XG4gICAgdG86IE1vZGUgfCBudWxsO1xuICB9O1xuXG4gIGV4cG9ydCBlbnVtIFRyYW5zaXRpb25UeXBlIHtcbiAgICBJTlNUQU5UID0gJ3RyYW5zaXRpb24uaW5zdGFudCcsXG4gICAgRkxZID0gJ3RyYW5zaXRpb24uZmx5JyxcbiAgICBGQURFT1VUID0gJ3RyYW5zaXRpb24uZmFkZScsXG4gIH1cblxuICBleHBvcnQgdHlwZSBNb3ZlVG9Nb2RlT3B0aW9ucyA9IHtcbiAgICByb3RhdGlvbj86IFJvdGF0aW9uO1xuICAgIHBvc2l0aW9uPzogVmVjdG9yMztcbiAgICB0cmFuc2l0aW9uPzogVHJhbnNpdGlvblR5cGU7XG4gICAgem9vbT86IG51bWJlcjtcbiAgfTtcblxuICBleHBvcnQgdHlwZSBDdXJyZW50Vmlld21vZGVEYXRhID0gTW9kZSB8IG51bGw7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgTW9kZSB7XG4gIE1vZGU6IHR5cGVvZiBNb2RlLk1vZGU7XG4gIEV2ZW50OiB0eXBlb2YgTW9kZS5FdmVudDtcbiAgVHJhbnNpdGlvblR5cGU6IHR5cGVvZiBNb2RlLlRyYW5zaXRpb25UeXBlO1xuXG4gIC8qKlxuICAgKiBUaGUgY3VycmVudCB2aWV3IG1vZGUuXG4gICAqXG4gICAqIGBgYFxuICAgKiBtcFNkay5Nb2RlLmN1cnJlbnQuc3Vic2NyaWJlKGZ1bmN0aW9uIChtb2RlKSB7XG4gICAqICAgLy8gdGhlIHZpZXcgbW9kZSBoYXMgY2hhbmdlZFxuICAgKiAgIGNvbnNvbGUubG9nKCdDdXJyZW50IHZpZXcgbW9kZSBpcyBpcyAnLCBtb2RlKTtcbiAgICogfSk7XG4gICAqIGBgYFxuICAgKlxuICAgKiBAZW1iZWRcbiAgICogQGJ1bmRsZVxuICAgKiBAaW50cm9kdWNlZCAzLjEuNjguMTItNy1nODU4Njg4OTQ0YVxuICAgKi9cbiAgY3VycmVudDogSU9ic2VydmFibGU8TW9kZS5Nb2RlIHwgbnVsbD47XG5cbiAgLyoqXG4gICAqIENoYW5nZSB0aGUgdmlld2luZyBtb2RlIGluIDNEIFNob3djYXNlLlxuICAgKlxuICAgKmBgYFxuICAgKiBjb25zdCBtb2RlID0gbXBTZGsuTW9kZS5Nb2RlLkZMT09SUExBTjtcbiAgICogY29uc3QgcG9zaXRpb24gPSB7eDogMCwgeTogMCwgejogMH07XG4gICAqIGNvbnN0IHJvdGF0aW9uID0ge3g6IC05MCwgeTogMH07XG4gICAqIGNvbnN0IHRyYW5zaXRpb24gPSBtcFNkay5Nb2RlLlRyYW5zaXRpb25UeXBlLkZMWTtcbiAgICogY29uc3Qgem9vbSA9IDU7XG4gICAqXG4gICAqIG1wU2RrLk1vZGUubW92ZVRvKG1vZGUsIHtcbiAgICogICAgIHBvc2l0aW9uOiBwb3NpdGlvbixcbiAgICogICAgIHJvdGF0aW9uOiByb3RhdGlvbixcbiAgICogICAgIHRyYW5zaXRpb246IHRyYW5zaXRpb24sXG4gICAqICAgICB6b29tLFxuICAgKiAgIH0pXG4gICAqICAgLnRoZW4oZnVuY3Rpb24obmV4dE1vZGUpe1xuICAgKiAgICAgLy8gTW92ZSBzdWNjZXNzZnVsLlxuICAgKiAgICAgY29uc29sZS5sb2coJ0Fycml2ZWQgYXQgbmV3IHZpZXcgbW9kZSAnICsgbmV4dE1vZGUpO1xuICAgKiAgIH0pXG4gICAqICAgLmNhdGNoKGZ1bmN0aW9uKGVycm9yKXtcbiAgICogICAgIC8vIEVycm9yIHdpdGggbW92ZVRvIGNvbW1hbmRcbiAgICogICB9KTtcbiAgICogYGBgXG4gICAqXG4gICAqIE5vdGVzIGFib3V0IHRyYW5zaXRpb25zIHRvIEZsb29ycGxhbiBtb2RlOlxuICAgKiAqIGB6b29tYCBvcHRpb24gaXMgb25seSB0YWtlbiBpbnRvIGFjY291bnQgaW4gRmxvb3JwbGFuIHRyYW5zaXRpb25zLCB0aGUgbG93ZXIgdGhlIG51bWJlcixcbiAgICogICB0aGUgZnVydGhlciB0aGUgY2FtZXJhIGlzIHpvb21lZCBpblxuICAgKiAqIFRoZSBwb3NpdGlvbiBvZiBhIGZsb29ycGxhbiB2aWV3IGlzIGRldGVybWluZWQgYnkgdGhlIFggYW5kIFogYXJndW1lbnRzIG9mIHRoZSBvcHRpb25hbCBwb3NpdGlvbiBvYmplY3QuXG4gICAqICogVGhlIHJvdGF0aW9uIG9mIGEgZmxvb3JwbGFuIHZpZXcgaXMgZGV0ZXJtaW5lZCBieSB0aGUgWCBhbmQgWSBvZiB0aGUgb3B0aW9uYWwgcm90YXRpb24gb2JqZWN0LFxuICAgKiAgIGNoYW5naW5nIFggY2hhbmdlcyB0aGUgJ3JvbGwnIG9mIHRoZSB2aWV3LCBzaW1pbGFyIHRvIGhpdHRpbmcgdGhlIExFRlQvUklHSFQgYXJyb3cga2V5cyBpbiBTaG93Y2FzZVxuICAgKiAgIGZsb29ycGxhbiB2aWV3LCBjaGFuZ2luZyB0aGUgWSB2YWx1ZSBoYXMgbm8gYW5hbG9nIGluIHNob3djYXNlLCBidXQgY2hhbmdlcyB0aGUgJ3RpbHQnIG9mIHRoZSB2aWV3LlxuICAgKlxuICAgKiBAcGFyYW0gVGhlIG1vZGUuXG4gICAqIEBwYXJhbSBPcHRpb25zIG9iamVjdCwgY29udGFpbmluZyBvcHRpb25hbCBwb3NpdGlvbiwgcm90YXRpb24sIHRyYW5zaXRpb24gdHlwZVxuICAgKiBAcmV0dXJuIEEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdpdGggdGhlIG5ldyBtb2RlIG9uY2UgdGhlIG1vZGUgaGFzIHRyYW5zaXRpb25lZC5cbiAgICovXG4gIG1vdmVUbyhtb2RlOiBNb2RlLk1vZGUsIG9wdGlvbnM/OiBNb2RlLk1vdmVUb01vZGVPcHRpb25zKTogUHJvbWlzZTxNb2RlLk1vZGU+O1xuXG4gIC8qKlxuICAgKiBBbiBvYnNlcnZhYmxlIHRyYW5zaXRpb24gb2YgdGhlIGN1cnJlbnQgdmlld21vZGUuIGBmcm9tYCBhbmQgYHRvYCB3aWxsIGJlIG51bGxcbiAgICogaWYgdGhlcmUgaXMgbm8gYWN0aXZlIHRyYW5zaXRpb24uXG4gICAqXG4gICAqIGBgYFxuICAgKiBtcFNkay5Nb2RlLnRyYW5zaXRpb24uc3Vic2NyaWJlKGZ1bmN0aW9uICh0cmFuc2l0aW9uKSB7XG4gICAqICAgLy8gdGhlIHRyYW5zaXRpb24gaGFzIGNoYW5nZWRcbiAgICogICBjb25zb2xlLmxvZyh0cmFuc2l0aW9uLmZyb20sIHRyYW5zaXRpb24udG8sIHRyYW5zaXRpb24ucHJvZ3Jlc3MpO1xuICAgKiB9KTtcbiAgICogYGBgXG4gICAqXG4gICAqIEBlbWJlZFxuICAgKiBAYnVuZGxlXG4gICAqIEBpbnRyb2R1Y2VkIDMuMS42OC4xMi03LWc4NTg2ODg5NDRhXG4gICAqL1xuICB0cmFuc2l0aW9uOiBJT2JzZXJ2YWJsZTxNb2RlLlRyYW5zaXRpb25EYXRhPjtcbn1cbiIsImltcG9ydCB0eXBlIHsgU3dlZXAgfSBmcm9tICcuL3N3ZWVwJztcblxuZXhwb3J0IG5hbWVzcGFjZSBNb2RlbCB7XG4gIGV4cG9ydCB0eXBlIE1vZGVsRGF0YSA9IHtcbiAgICBzaWQ6IHN0cmluZztcbiAgICAvKiogQGRlcHJlY2F0ZWQgVXNlIFtbU3dlZXAuZGF0YV1dIGluc3RlYWQgKi9cbiAgICBzd2VlcHM6IFN3ZWVwLlN3ZWVwRGF0YVtdO1xuICAgIG1vZGVsU3VwcG9ydHNWcjogYm9vbGVhbjtcbiAgfTtcblxuICBleHBvcnQgdHlwZSBNb2RlbERldGFpbHMgPSB7XG4gICAgc2lkOiBzdHJpbmc7XG4gICAgbmFtZT86IHN0cmluZztcbiAgICBwcmVzZW50ZWRCeT86IHN0cmluZztcbiAgICBzdW1tYXJ5Pzogc3RyaW5nO1xuICAgIGFkZHJlc3M/OiBzdHJpbmc7XG4gICAgZm9ybWF0dGVkQWRkcmVzcz86IHN0cmluZztcbiAgICBjb250YWN0RW1haWw/OiBzdHJpbmc7XG4gICAgY29udGFjdE5hbWU/OiBzdHJpbmc7XG4gICAgcGhvbmU/OiBzdHJpbmc7XG4gICAgZm9ybWF0dGVkQ29udGFjdFBob25lPzogc3RyaW5nO1xuICAgIHNoYXJlVXJsPzogc3RyaW5nO1xuICB9O1xuXG4gIGV4cG9ydCBlbnVtIEV2ZW50IHtcbiAgICAvKiogQGV2ZW50ICovXG4gICAgTU9ERUxfTE9BREVEID0gJ21vZGVsLmxvYWRlZCcsXG4gIH1cbn1cblxuZXhwb3J0IGludGVyZmFjZSBNb2RlbCB7XG4gIEV2ZW50OiB0eXBlb2YgTW9kZWwuRXZlbnQ7XG4gIC8qKlxuICAgKiBUaGlzIGZ1bmN0aW9uIHJldHVybnMgYmFzaWMgbW9kZWwgaW5mb3JtYXRpb24uXG4gICAqXG4gICAqIFRoaXMgaXMgbm8gbG9uZ2VyIHRoZSBjYW5vbmljYWwgd2F5IHRvIHJlY2VpdmUgc3dlZXAgaW5mb3JtYXRpb24uIFNlZSBbW1N3ZWVwLmRhdGFdXS5cbiAgICpcbiAgICogYGBgXG4gICAqIG1wU2RrLk1vZGVsLmdldERhdGEoKVxuICAgKiAgIC50aGVuKGZ1bmN0aW9uKG1vZGVsKSB7XG4gICAqICAgICAvLyBNb2RlbCBkYXRhIHJldHJlaXZhbCBjb21wbGV0ZS5cbiAgICogICAgIGNvbnNvbGUubG9nKCdNb2RlbCBzaWQ6JyArIG1vZGVsLnNpZCk7XG4gICAqICAgfSlcbiAgICogICAuY2F0Y2goZnVuY3Rpb24oZXJyb3IpIHtcbiAgICogICAgIC8vIE1vZGVsIGRhdGEgcmV0cmlldmFsIGVycm9yLlxuICAgKiAgIH0pO1xuICAgKiBgYGBcbiAgICovXG4gIGdldERhdGEoKTogUHJvbWlzZTxNb2RlbC5Nb2RlbERhdGE+O1xuXG4gIC8qKlxuICAgKiBUaGlzIGZ1bmN0aW9uIHJldHVybnMgbW9kZWwgZGV0YWlscy5cbiAgICpcbiAgICogYGBgXG4gICAqIG1wU2RrLk1vZGVsLmdldERldGFpbHMoKVxuICAgKiAgIC50aGVuKGZ1bmN0aW9uKG1vZGVsRGV0YWlscykge1xuICAgKiAgICAgLy8gTW9kZWwgZGV0YWlscyByZXRyZWl2YWwgY29tcGxldGUuXG4gICAqICAgICBjb25zb2xlLmxvZygnTW9kZWwgc2lkOicgKyBtb2RlbERldGFpbHMuc2lkKTtcbiAgICogICAgIGNvbnNvbGUubG9nKCdNb2RlbCBuYW1lOicgKyBtb2RlbERldGFpbHMubmFtZSk7XG4gICAqICAgICBjb25zb2xlLmxvZygnTW9kZWwgc3VtbWFyeTonICsgbW9kZWxEZXRhaWxzLnN1bW1hcnkpO1xuICAgKiAgIH0pXG4gICAqICAgLmNhdGNoKGZ1bmN0aW9uKGVycm9yKSB7XG4gICAqICAgICAvLyBNb2RlbCBkZXRhaWxzIHJldHJpZXZhbCBlcnJvci5cbiAgICogICB9KTtcbiAgICogYGBgXG4gICAqL1xuICBnZXREZXRhaWxzKCk6IFByb21pc2U8TW9kZWwuTW9kZWxEZXRhaWxzPjtcbn1cbiIsImltcG9ydCB0eXBlIHsgSU9ic2VydmFibGUsIFZlY3RvcjMgfSBmcm9tICcuL2dsb2JhbCc7XG5cbmV4cG9ydCBuYW1lc3BhY2UgUG9pbnRlciB7XG4gIGV4cG9ydCB0eXBlIEludGVyc2VjdGlvbiA9IHtcbiAgICBwb3NpdGlvbjogVmVjdG9yMztcbiAgICBub3JtYWw6IFZlY3RvcjM7XG4gICAgLyoqIEBkZXByZWNhdGVkIFVzZSBbW2Zsb29ySW5kZXhdXSBpbnN0ZWFkICovXG4gICAgZmxvb3JJZDogbnVtYmVyIHwgdW5kZWZpbmVkO1xuICAgIC8qKlxuICAgICAqIGZsb29ySW5kZXggaXMgb25seSBkZWZpbmVkIHdoZW4gdGhlIGludGVyc2VjdGVkIG9iamVjdCBpcyBNT0RFTC5cbiAgICAgKi9cbiAgICBmbG9vckluZGV4OiBudW1iZXIgfCB1bmRlZmluZWQ7XG4gICAgb2JqZWN0OiBDb2xsaWRlcnM7XG4gIH07XG5cbiAgZXhwb3J0IGVudW0gQ29sbGlkZXJzIHtcbiAgICBOT05FID0gJ2ludGVyc2VjdGVkb2JqZWN0Lm5vbmUnLFxuICAgIE1PREVMID0gJ2ludGVyc2VjdGVkb2JqZWN0Lm1vZGVsJyxcbiAgICBUQUcgPSAnaW50ZXJzZWN0ZWRvYmplY3QudGFnJyxcbiAgICBTV0VFUCA9ICdpbnRlcnNlY3RlZG9iamVjdC5zd2VlcCcsXG4gICAgVU5LTk9XTiA9ICdpbnRlcnNlY3RlZG9iamVjdC51bmtub3duJyxcbiAgfVxuXG4gIHR5cGUgRmFkZU91dFByb3BzID0ge1xuICAgIC8qKlxuICAgICAqIER1cmF0aW9uIGluIG1pbGxpc2Vjb25kcy4gRGVmYXVsdCBpcyA3MDAuXG4gICAgICovXG4gICAgZHVyYXRpb24/OiBudW1iZXIsXG5cbiAgICAvKipcbiAgICAgKiBEZWxheSBpbiBtaWxsaXNlY29uZHMuIERlZmF1bHQgaXMgNzAwLlxuICAgICAqL1xuICAgIGRlbGF5PzogbnVtYmVyLFxuICB9O1xuXG4gIHR5cGUgRmFkZUluUHJvcHMgPSB7XG4gICAgLyoqXG4gICAgICogRHVyYXRpb24gaW4gbWlsbGlzZWNvbmRzLiBEZWZhdWx0IGlzIDMwMC5cbiAgICAgKi9cbiAgICBkdXJhdGlvbj86IG51bWJlcixcbiAgfTtcblxuICAvKipcbiAgICogUG9pbnRlciByZXRpY2xlIGZhZGUgcHJvcGVydGllcy5cbiAgICovXG4gIGV4cG9ydCB0eXBlIEZhZGVQcm9wcyA9IHtcbiAgICBmYWRlT3V0PzogRmFkZU91dFByb3BzO1xuICAgIGZhZGVJbj86IEZhZGVJblByb3BzO1xuICB9O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFBvaW50ZXIge1xuICBDb2xsaWRlcnM6IHR5cGVvZiBQb2ludGVyLkNvbGxpZGVycztcbiAgLyoqXG4gICAqIEFuIG9ic2VydmFibGUgaW50ZXJzZWN0aW9uIGRhdGEgb2JqZWN0IHRoYXQgY2FuIGJlIHN1YnNjcmliZWQgdG8uXG4gICAqXG4gICAqIGBgYFxuICAgKiBtcFNkay5Qb2ludGVyLmludGVyc2VjdGlvbi5zdWJzY3JpYmUoZnVuY3Rpb24gKGludGVyc2VjdGlvbkRhdGEpIHtcbiAgICogIC8vIENoYW5nZXMgdG8gdGhlIGludGVyc2VjdGlvbiBkYXRhIGhhdmUgb2NjdXJyZWQuXG4gICAqICBjb25zb2xlLmxvZygnSW50ZXJzZWN0aW9uIHBvc2l0aW9uOicsIGludGVyc2VjdGlvbkRhdGEucG9zaXRpb24pO1xuICAgKiAgY29uc29sZS5sb2coJ0ludGVyc2VjdGlvbiBub3JtYWw6JywgaW50ZXJzZWN0aW9uRGF0YS5ub3JtYWwpO1xuICAgKiB9KTtcbiAgICogYGBgXG4gICAqL1xuICBpbnRlcnNlY3Rpb246IElPYnNlcnZhYmxlPFBvaW50ZXIuSW50ZXJzZWN0aW9uPjtcblxuICAvKipcbiAgICogQGludHJvZHVjZWQgMy4xLjU1LjItMzQtZ2E5OTM0Y2NkOTNcbiAgICogQGRlcHJlY2F0ZWQgVXNlIFtbQXNzZXQucmVnaXN0ZXJUZXh0dXJlXV0gdG8gcmVnaXN0ZXIgbmV3IHRleHR1cmVzIGluc3RlYWQuXG4gICAqL1xuICByZWdpc3RlclRleHR1cmUodGV4dHVyZUlkOiBzdHJpbmcsIHRleHR1cmVTcmM6IHN0cmluZyk6IFByb21pc2U8dm9pZD47XG5cbiAgLyoqXG4gICAqIENoYW5nZSB0aGUgdGV4dHVyZSBvZiB0aGUgcG9pbnRlciByZXRpY2xlLlxuICAgKlxuICAgKiBgYGB0eXBlc2NyaXB0XG4gICAqIGF3YWl0IG1wU2RrLkFzc2V0LnJlZ2lzdGVyVGV4dHVyZSgnY3VzdG9tVGV4dHVyZUlkJywgJ2h0dHBzOi8vW2xpbmsudG8vaW1hZ2VdJyk7XG4gICAqXG4gICAqIC8vIGNoYW5nZSB0aGUgdGV4dHVyZSBvZiB0aGUgcG9pbnRlciByZXRpY2xlIHVzaW5nIGEgcHJldmlvdXNseSByZWdpc3RlcmVkIGlkLlxuICAgKiBhd2FpdCBtcFNkay5Qb2ludGVyLmVkaXRUZXh0dXJlKCdjdXN0b21UZXh0dXJlSWQnKTtcbiAgICogYGBgXG4gICAqXG4gICAqIEBwYXJhbSB0ZXh0dXJlSWQgVGhlIGlkIG9mIHRoZSB0ZXh0dXJlIHRvIGFwcGx5LlxuICAgKlxuICAgKiBAZW1iZWRcbiAgICogQGJ1bmRsZVxuICAgKiBAaW50cm9kdWNlZCAzLjEuNTUuMi0zNC1nYTk5MzRjY2Q5M1xuICAgKi9cbiAgZWRpdFRleHR1cmUodGV4dHVyZUlkOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+O1xuXG4gIC8qKlxuICAgKiBSZXNldHMgdGhlIHBvaW50ZXIgcmV0aWNsZSB0ZXh0dXJlIHRvIHRoZSBvcmlnaW5hbCB0ZXh0dXJlLlxuICAgKiBgYGB0eXBlc2NyaXB0XG4gICAqIGF3YWl0IG1wU2RrLlBvaW50ZXIucmVzZXRUZXh0dXJlKCk7XG4gICAqIGBgYFxuICAgKlxuICAgKiBAZW1iZWRcbiAgICogQGJ1bmRsZVxuICAgKiBAaW50cm9kdWNlZCAzLjEuNTUuMi0zNC1nYTk5MzRjY2Q5M1xuICAgKi9cbiAgcmVzZXRUZXh0dXJlKCk6IFByb21pc2U8dm9pZD47XG5cbiAgLyoqXG4gICAqIEN1c3RvbWl6ZXMgdGhlIGZhZGUgaW4vb3V0IGJlaGF2aW9yIG9mIHRoZSBwb2ludGVyIHJldGljbGUuXG4gICAqIEBwYXJhbSBwcm9wcyBmYWNlIHByb3BlcnRpZXNcbiAgICpcbiAgICogQGVtYmVkXG4gICAqIEBidW5kbGVcbiAgICogQGludHJvZHVjZWQgMy4xLjU1LjItMzQtZ2E5OTM0Y2NkOTNcbiAgICovXG4gIHNldEZhZGVQcm9wcyhwcm9wczogUG9pbnRlci5GYWRlUHJvcHMpOiBQcm9taXNlPHZvaWQ+O1xuXG4gIC8qKlxuICAgKiBUaGlzIGZ1bmN0aW9uIGNvbnRyb2xzIHRoZSB2aXNpYmlsaXR5IG9mIHRoZSBwb2ludGVyIHJldGljbGUuXG4gICAqIEBwYXJhbSB2aXNpYmxlIHBvaW50ZXIgcmV0aWNsZSB2aXNpYmlsaXR5XG4gICAqXG4gICAqIEBlbWJlZFxuICAgKiBAYnVuZGxlXG4gICAqIEBpbnRyb2R1Y2VkIDMuMS41NS4yLTM0LWdhOTkzNGNjZDkzXG4gICAqL1xuICBzZXRWaXNpYmxlKHZpc2libGU6IGJvb2xlYW4pOiBQcm9taXNlPHZvaWQ+O1xufVxuXG4iLCJpbXBvcnQgdHlwZSB7IERpY3Rpb25hcnksIElPYnNlcnZhYmxlLCBJT2JzZXJ2YWJsZU1hcCwgVmVjdG9yMyB9IGZyb20gJy4vZ2xvYmFsJztcblxuZXhwb3J0IG5hbWVzcGFjZSBSb29tIHtcbiAgZXhwb3J0IHR5cGUgUm9vbURhdGEgPSB7XG4gICAgaWQ6IHN0cmluZztcbiAgICBib3VuZHM6IHtcbiAgICAgIG1pbjogVmVjdG9yMztcbiAgICAgIG1heDogVmVjdG9yMztcbiAgICB9O1xuICAgIGZsb29ySW5mbzoge1xuICAgICAgaWQ6IHN0cmluZztcbiAgICAgIHNlcXVlbmNlOiBudW1iZXI7XG4gICAgfTtcbiAgICBzaXplOiBWZWN0b3IzO1xuICAgIGNlbnRlcjogVmVjdG9yMztcbiAgfTtcbiAgZXhwb3J0IGRlY2xhcmUgbmFtZXNwYWNlIENvbnZlcnNpb24ge1xuICAgIC8qKlxuICAgICAqIEdlbmVyYXRlIGEgbWFwIGJldHdlZW4gdjIgSURzIGFuZCB2MSBJRHNcbiAgICAgKlxuICAgICAqIFRoaXMgbWV0aG9kIHdpbGwgaGVscCB3aXRoIG1pZ3JhdGlvbiBiZXR3ZWVuIElEcyB1c2VkIGZvciByb29tcy5cbiAgICAgKlxuICAgICAqIGBgYFxuICAgICAqIGNvbnN0IG1hcHBpbmcgPSBhd2FpdCBtcFNkay5Sb29tLkNvbnZlcnNpb24uY3JlYXRlSWRNYXAoKTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIEBwYXJhbSBpbnZlcnQ/OiBib29sZWFuIC0gaWYgcGFzc2VkLCByZXR1cm4gbWFwIG9mIHYxLT52MiBpbnN0ZWFkXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlSWRNYXAoaW52ZXJ0PzogYm9vbGVhbik6IFByb21pc2U8RGljdGlvbmFyeTxzdHJpbmc+PjtcbiAgfVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIFJvb20ge1xuICBDb252ZXJzaW9uOiB0eXBlb2YgUm9vbS5Db252ZXJzaW9uO1xuICAvKipcbiAgICogQW4gb2JzZXJ2YWJsZSB0byBkZXRlcm1pbmUgd2hpY2ggcm9vbXMgdGhlIHBsYXllcidzIGNhbWVyYSBpcyBjdXJyZW50bHkgaW4uXG4gICAqXG4gICAqIElmIHRoZSBjYW1lcmEgaXMgaW4gYSBsb2NhdGlvbiBiZXR3ZWVuIHJvb21zLCBvciBzb21laHdlcmUgd2hlcmUgb3VyIHJvb20gYm91bmRzIG92ZXJsYXAsIHRoZSBgcm9vbXNgIGFycmF5IHdpbGwgY29udGFpbiBib3RoIChvciBtb3JlKSByb29tcy5cbiAgICogSWYgdGhlIGNhbWVyYSBpcyBpbiBhIG1vZGUgb3RoZXIgdGhhbiBgSU5TSURFYCwgdGhlIGByb29tc2AgYXJyYXkgbWF5IGJlIGVtcHR5LlxuICAgKiBJZiB0aGUgY2FtZXJhIGlzIGluIGFuIHVuYWxpZ25lZCBzd2VlcCwgdGhlIGByb29tc2AgYXJyYXkgd2lsbCBiZSBlbXB0eS5cbiAgICpcbiAgICogYGBgXG4gICAqIG1wU2RrLlJvb20uY3VycmVudC5zdWJzY3JpYmUoZnVuY3Rpb24gKGN1cnJlbnRSb29tcykge1xuICAgKiAgIGlmIChjdXJyZW50Um9vbXMucm9vbXMubGVuZ3RoID4gMCkge1xuICAgKiAgICAgY29uc29sZS5sb2coJ2N1cnJlbnRseSBpbicsIGN1cnJlbnRSb29tcy5yb29tcy5sZW5ndGgsICdyb29tcycpO1xuICAgKiAgIH0gZWxzZSB7XG4gICAqICAgICBjb25zb2xlLmxvZygnTm90IGN1cnJlbnRseSBpbnNpZGUgYW55IHJvb21zJyk7XG4gICAqICAgfVxuICAgKiB9KTtcbiAgICogYGBgXG4gICAqL1xuICBjdXJyZW50OiBJT2JzZXJ2YWJsZTx7IHJvb21zOiBSb29tLlJvb21EYXRhW10gfT47XG5cbiAgLyoqXG4gICAqIEFuIG9ic2VydmFibGUgY29sbGVjdGlvbiBvZiBSb29tIGRhdGEgdGhhdCBjYW4gYmUgc3Vic2NyaWJlZCB0by5cbiAgICpcbiAgICogU2VlIFtbSU9ic2VydmFibGVNYXBdXSB0byBsZWFybiBob3cgdG8gcmVjZWl2ZSBkYXRhIGZyb20gdGhlIGNvbGxlY3Rpb24uXG4gICAqXG4gICAqIGBgYFxuICAgKiBtcFNkay5Sb29tLmRhdGEuc3Vic2NyaWJlKHtcbiAgICogICBvbkNvbGxlY3Rpb25VcGRhdGVkOiBmdW5jdGlvbiAoY29sbGVjdGlvbikge1xuICAgKiAgICAgY29uc29sZS5sb2coJ0NvbGxlY3Rpb24gcmVjZWl2ZWQuIFRoZXJlIGFyZSAnLCBPYmplY3Qua2V5cyhjb2xsZWN0aW9uKS5sZW5ndGgsICdyb29tcyBpbiB0aGUgY29sbGVjdGlvbicpO1xuICAgKiAgIH1cbiAgICogfSk7XG4gICAqIGBgYFxuICAgKi9cbiAgZGF0YTogSU9ic2VydmFibGVNYXA8Um9vbS5Sb29tRGF0YT47XG59XG4iLCJpbXBvcnQgdHlwZSB7IFZlY3RvcjMsIElTdWJzY3JpcHRpb24sIElPYnNlcnZhYmxlLCBPcmllbnRhdGlvbiwgSU9ic2VydmVyLCBPYnNlcnZlckNhbGxiYWNrIH0gZnJvbSAnLi9nbG9iYWwnO1xuXG4vKipcbiAqIE91ciBTZW5zb3Igc3lzdGVtIGFsbG93cyBmb3IgZ2VuZXJhdGluZyBzcGF0aWFsIHF1ZXJpZXMgdG8gdW5kZXJzdGFuZCBhIE1hdHRlcnBvcnQgZGlnaXRhbCB0d2luLlxuICogQnkgdXRpbGl6aW5nIGFuZCBzZXR0aW5nIHVwIFNvdXJjZXMgYXJvdW5kIHRoZSBzY2VuZSwgc29tZSBxdWVzdGlvbnMgdGhhdCBjYW4gYmUgYW5zd2VyZWQgYXJlOlxuICogLSBcIndoYXQgdGhpbmdzIGFyZSBjdXJyZW50bHkgdmlzaWJsZSBvbiBzY3JlZW4/XCJcbiAqIC0gXCJ3aGF0IHRoaW5ncyBhcmUgbmVhciBtZT9cIlxuICpcbiAqIHdoZXJlIFwidGhpbmdzXCIgY2FuIGJlIE1hdHRlcnRhZyBwb3N0cywgc3dlZXBzLCBhcmJpdHJhcnkgbG9jYXRpb25zICh0aGF0IHlvdSBjaG9vc2UpLCBvciBhbnkgY29tYmluYXRpb24gb2YgdGhvc2UuXG4gKi9cbmV4cG9ydCBuYW1lc3BhY2UgU2Vuc29yIHtcbiAgZXhwb3J0IGVudW0gU2Vuc29yVHlwZSB7XG4gICAgQ0FNRVJBID0gJ3NlbnNvci5zZW5zb3J0eXBlLmNhbWVyYScsXG4gIH1cblxuICBleHBvcnQgZW51bSBTb3VyY2VUeXBlIHtcbiAgICBTUEhFUkUgICA9ICdzZW5zb3Iuc291cmNldHlwZS5zcGhlcmUnLFxuICAgIEJPWCAgICAgID0gJ3NlbnNvci5zb3VyY2V0eXBlLmJveCcsXG4gICAgQ1lMSU5ERVIgPSAnc2Vuc29yLnNvdXJjZXR5cGUuY3lsaW5kZXInLFxuICB9XG5cbiAgLyoqXG4gICAqIEEgU2Vuc29yIHRoYXQgZGV0ZWN0cyBTb3VyY2VzIGFuZCBwcm92aWRlcyBpbmZvcm1hdGlvbiBhYm91dCB0aGUgcmVhZGluZyBvZiBlYWNoLlxuICAgKi9cbiAgZXhwb3J0IGludGVyZmFjZSBJU2Vuc29yIGV4dGVuZHMgSU9ic2VydmFibGU8SVNlbnNvcj4ge1xuICAgIC8qKiBUaGUgd29ybGQtc3BhY2UgcG9zaXRpb24gb2YgdGhlIHNlbnNvci4gKi9cbiAgICBvcmlnaW46IFZlY3RvcjM7XG4gICAgLyoqIFRoZSB3b3JsZC1zcGFjZSBcImZvcndhcmRcIiBkaXJlY3Rpb24gZGVzY3JpYmluZyB3aGljaCBkaXJlY3Rpb24gdGhlIHNlbnNvciBpcyBmYWNpbmcuICovXG4gICAgZm9yd2FyZDogVmVjdG9yMztcbiAgICAvKipcbiAgICAgKiBBZGQgYSBzb3VyY2UsIHRvIGFkZCBpdHMgcmVhZGluZ3MgdG8gdGhlIHNldCBvZiByZWFkaW5ncyBwcm92aWRlZCBieSBgLnN1YnNjcmliZWAuXG4gICAgICogQHBhcmFtIHNvdXJjZXNcbiAgICAgKi9cbiAgICBhZGRTb3VyY2UoLi4uc291cmNlczogSVNvdXJjZVtdKTogdm9pZDtcblxuICAgIC8qKlxuICAgICAqIFN0YXJ0IHJlY2VpdmluZyB1cGRhdGVzIHdoZW4gcHJvcGVydGllcyBvZiB0aGlzIHNlbnNvciBjaGFuZ2UsIGUuZy4gYG9yaWdpbmAgb3IgYGZvcndhcmRgLCBub3QgaXRzIGByZWFkaW5nc2AuPGJyPlxuICAgICAqIFN1YnNjcmliZSB0byBgcmVhZGluZ3NgIHRvIHJlY2VpdmUgdXBkYXRlcyBhYm91dCBhc3NvY2lhdGVkIGBJU291cmNlc2BcbiAgICAgKi9cbiAgICBzdWJzY3JpYmU8RGF0YVQ+KG9ic2VydmVyOiBJT2JzZXJ2ZXI8RGF0YVQ+IHwgT2JzZXJ2ZXJDYWxsYmFjazxEYXRhVD4pOiBJU3Vic2NyaXB0aW9uO1xuXG4gICAgLyoqXG4gICAgICogQW4gb2JzZXJ2YWJsZSB1c2VkIHRvIGdldCBpbmZvcm1hdGlvbiBhYm91dCBhc3NvY2F0ZWQgYElTb3VyY2VzYCBhZGRlZCB3aXRoIFtbSVNlbnNvci5hZGRTb3VyY2VdXVxuICAgICAqL1xuICAgIHJlYWRpbmdzOiB7XG4gICAgICAvKipcbiAgICAgICAqIFN0YXJ0IHJlY2VpdmluZyB1cGRhdGVzIGFib3V0IHRoZSBjdXJyZW50IHNldCBvZiBzb3VyY2VzIGFkZGVkIHRvIHRoaXMgc2Vuc29yLlxuICAgICAgICogQHBhcmFtIG9ic2VydmVyXG4gICAgICAgKi9cbiAgICAgIHN1YnNjcmliZShvYnNlcnZlcjogSVNlbnNvck9ic2VydmVyKTogSVN1YnNjcmlwdGlvbjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTaG93IGRlYnVnIHZpc3VhbHMgZm9yIHRoaXMgc2Vuc29yLiBFeGlzdGluZyB2aXN1YWxzIGFyZSBkaXNwb3NlZC5cbiAgICAgKiBAcGFyYW0gc2hvd1xuICAgICAqL1xuICAgIHNob3dEZWJ1ZyhzaG93OiBib29sZWFuKTogdm9pZDtcblxuICAgIC8qKlxuICAgICAqIFRlYXJkb3duIGFuZCBjbGVhbnVwIHRoZSBzZW5zb3IsIGFuZCBzdG9wIHJlY2VpdmluZyB1cGRhdGVzLlxuICAgICAqL1xuICAgIGRpc3Bvc2UoKTogdm9pZDtcbiAgfVxuXG4gIGV4cG9ydCB0eXBlIFNwaGVyZVZvbHVtZSA9IHtcbiAgICAvKiogVGhlIG9yaWdpbiBvZiB0aGUgc3BoZXJlLiAqL1xuICAgIG9yaWdpbjogVmVjdG9yMztcbiAgICAvKiogVGhlIGRpc3RhbmNlIGZyb20gb3JpZ2luIG9mIHRoZSBzcGhlcmUgdm9sdW1lLiAqL1xuICAgIHJhZGl1czogbnVtYmVyO1xuICB9O1xuXG4gIGV4cG9ydCB0eXBlIEJveFZvbHVtZSA9IHtcbiAgICAvKiogVGhlIGNlbnRlciBwb3NpdGlvbiBvZiB0aGUgYm94LiAqL1xuICAgIGNlbnRlcjogVmVjdG9yMztcbiAgICAvKiogVGhlIGxlbmd0aCwgd2lkdGgsIGFuZCBkZXB0aCBvZiB0aGUgYm94IHZvbHVtZS4gKi9cbiAgICBzaXplOiBWZWN0b3IzO1xuICAgIC8qKiBUaGUgb3JpZW50YXRpb24gb2YgdGhlIGJveC4gVGhlIHJvdGF0aW9ucyBhcmUgYXBwbGllZCBpbiB5YXcsIHBpdGNoLCB0aGVuIHJvbGwgb3JkZXIuICovXG4gICAgb3JpZW50YXRpb246IE9yaWVudGF0aW9uO1xuICB9O1xuXG4gIGV4cG9ydCB0eXBlIEN5bGluZGVyVm9sdW1lID0ge1xuICAgIC8qKiBUaGUgcG9pbnQgd2hpY2ggZGVmaW5lcyB0aGUgcG9zaXRpb24gKGJhc2UpIGZyb20gd2hpY2ggdGhlIGhlaWdodCBpbiB0aGUgK1ksIGFuZCByYWRpdXMgaW4gdGhlIFhaLXBsYW5lIGFyZSByZWxhdGl2ZSB0by4gKi9cbiAgICBiYXNlUG9pbnQ6IFZlY3RvcjM7XG4gICAgLyoqIFRoZSBoZWlnaHQgb2YgdGhlIGN5bGluZGVyLiAqL1xuICAgIGhlaWdodDogbnVtYmVyO1xuICAgIC8qKiBUaGUgcmFkaXVzIG9mIHRoZSBjeWxpbmRlci4gKi9cbiAgICByYWRpdXM6IG51bWJlcjtcbiAgfTtcblxuICAvKipcbiAgICogQSBTb3VyY2UgcmVwcmVzZW50cyBhIHZvbHVtZSB0aGF0IHdpbGwgYmUgZGV0ZWN0ZWQgYnkgYSBTZW5zb3IuXG4gICAqIFRoZSB0eXBlIG9mIHRoZSBzb3VyY2UsIGRlc2NyaWJlcyB0aGUgdHlwZSBvZiB2b2x1bWUgYXNzb2NpYXRlZCB3aXRoIGl0LlxuICAgKiBGb3IgZXhhbXBsZSwgd2l0aCBhIGB0eXBlYCBvZiBgU291cmNlVHlwZS5TUEhFUkVgIHRoZSBgdm9sdW1lYCBpcyBhIGBTcGhlcmVWb2x1bWVgOyBhIGBTb3VyY2VUeXBlLkJPWGAgaGFzIGEgYEJveFZvbHVtZWAuXG4gICAqL1xuICBleHBvcnQgaW50ZXJmYWNlIElTb3VyY2U8Vm9sdW1lID0gU3BoZXJlVm9sdW1lIHwgQm94Vm9sdW1lIHwgQ3lsaW5kZXJWb2x1bWUsIFVzZXJEYXRhIGV4dGVuZHMgUmVjb3JkPHN0cmluZywgdW5rbm93bj4gPSBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPj4ge1xuICAgIC8qKiBUaGUgdHlwZSBvZiBzb3VyY2UuICovXG4gICAgdHlwZTogU291cmNlVHlwZTtcbiAgICAvKiogVGhlIHZvbHVtZSB0aGF0IHJlcHJlc2VudHMgdGhlIHJhbmdlIG9mIGVtaXNzaW9ucyBmcm9tIHRoaXMgYElTb3VyY2VgLiAqL1xuICAgIHZvbHVtZTogVm9sdW1lO1xuICAgIC8qKiBBcmJpdHJhcnkgZGF0YSB0aGF0IGNhbiBiZSB1c2VkIHRvIHNldCBhZGRpdGlvbmFsIG1ldGFkYXRhLCBmb3IgZXhhbXBsZS4gKi9cbiAgICB1c2VyRGF0YTogVXNlckRhdGE7XG4gICAgLyoqXG4gICAgICogTGV0IHRoZSBzZW5zb3Igc3lzdGVtIGtub3cgdGhlcmUgaXMgYW4gdXBkYXRlIHRvIHRoaXMgYElTb3VyY2VgLjxicj5cbiAgICAgKiBXaGVuIGNoYW5naW5nIGFueSBwcm9wZXJ0aWVzIG9uIGB2b2x1bWVgLCBubyBjaGFuZ2VzIHdpbGwgYmUgcmVmbGVjdGVkIG9uIHRoZSBzb3VyY2Ugb3IgaW4gU2hvd2Nhc2UgdW50aWwgYGNvbW1pdGAgaXMgY2FsbGVkLlxuICAgICAqL1xuICAgIGNvbW1pdCgpOiBQcm9taXNlPHZvaWQ+O1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc3BlY2lhbGl6ZWQgW1tJTWFwT2JzZXJ2ZXJdXSB3aGljaCBtYXBzIGFuIGBJU291cmNlYCB0byBpdHMgY3VycmVudCBgU2Vuc29yUmVhZGluZ2AuXG4gICAqL1xuICBleHBvcnQgaW50ZXJmYWNlIElTZW5zb3JPYnNlcnZlciB7XG4gICAgLyoqIENhbGxlZCB3aGVuIGEgdGhlIGZpcnN0IGByZWFkaW5nYCBpcyBhZGRlZCBmcm9tIGBzb3VyY2VgLiAqL1xuICAgIG9uQWRkZWQ/ICAoc291cmNlOiBJU291cmNlLCByZWFkaW5nOiBTZW5zb3JSZWFkaW5nLCBjb2xsZWN0aW9uOiBNYXA8SVNvdXJjZSwgU2Vuc29yUmVhZGluZz4pOiB2b2lkO1xuICAgIC8qKiBDYWxsZWQgd2hlbiBgc291cmNlYCBhbmQgaXRzIGByZWFkaW5nYCBpcyByZW1vdmVkLiAqL1xuICAgIG9uUmVtb3ZlZD8oc291cmNlOiBJU291cmNlLCByZWFkaW5nOiBTZW5zb3JSZWFkaW5nLCBjb2xsZWN0aW9uOiBNYXA8SVNvdXJjZSwgU2Vuc29yUmVhZGluZz4pOiB2b2lkO1xuICAgIC8qKiBDYWxsZWQgd2hlbiBhbiBleGlzdGluZyBgcmVhZGluZ2AgaXMgYWx0ZXJlZCBmcm9tIGBzb3VyY2VgLiAqL1xuICAgIG9uVXBkYXRlZD8oc291cmNlOiBJU291cmNlLCByZWFkaW5nOiBTZW5zb3JSZWFkaW5nLCBjb2xsZWN0aW9uOiBNYXA8SVNvdXJjZSwgU2Vuc29yUmVhZGluZz4pOiB2b2lkO1xuICAgIC8qKiBDYWxsZWQgd2hlbiBhIHNldCBvZiBjaGFuZ2VzIGhhcHBlbnMgd2l0aGluIHRoZSBgY29sbGVjdGlvbmAuICovXG4gICAgb25Db2xsZWN0aW9uVXBkYXRlZD8oY29sbGVjdGlvbjogTWFwPElTb3VyY2UsIFNlbnNvclJlYWRpbmc+KTogdm9pZDtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbmZvcm1hdGlvbiBhYm91dCB0aGUgU291cmNlIGFzIHJlYWQgYnkgdGhlIFNlbnNvci5cbiAgICovXG4gIGV4cG9ydCB0eXBlIFNlbnNvclJlYWRpbmcgPSB7XG4gICAgLyoqIFRoZSBzZW5zb3IgaXMgY3VycmVudGx5IHdpdGhpbiB0aGUgYnJvYWRjYXN0IHJhbmdlIG9mIHRoZSBzb3VyY2UuICovXG4gICAgaW5SYW5nZTogYm9vbGVhbjtcbiAgICAvKiogVGhlIHNlbnNvciBpcyB3aXRoaW4gdGhlIHNvdXJjZSdzIGJyb2FkY2FzdCByYW5nZSBhbmQgdGhlIHNlbnNvciBoYXMgY2xlYXIgbGluZSBvZiBzaWdodCB0byB0aGUgc291cmNlLiAqL1xuICAgIGluVmlldzogYm9vbGVhbjtcbiAgICAvKiogVGhlIGRpc3RhbmNlIGJldHdlZW4gdGhlIHNlbnNvciBhbmQgdGhlIHNvdXJjZS4gKi9cbiAgICBkaXN0YW5jZTogbnVtYmVyO1xuICAgIC8qKiBUaGUgc3F1YXJlZCBkaXN0YW5jZSBmcm9tIHRoZSBzZW5zb3IgdG8gdGhlIHNvdXJjZS4gKi9cbiAgICBkaXN0YW5jZVNxdWFyZWQ6IG51bWJlcjtcbiAgICAvKiogVGhlIHdvcmxkLXNwYWNlIGRpcmVjdGlvbiBmcm9tIHRoZSBzZW5zb3IgdG8gdGhlIHNvdXJjZS4gKi9cbiAgICBkaXJlY3Rpb246IFZlY3RvcjM7XG4gIH07XG5cbiAgLyoqXG4gICAqIEFkZGl0aW9uYWwgYHVzZXJEYXRhYCB0byBhc3NvY2lhdGUgd2l0aCBhbiBgSVNvdXJjZWAgd2hlbiBjcmVhdGluZyBpdC5cbiAgICogVGhpcyBpcyBhIGZyZWUgZGljdGlvbmFyeSB0aGF0IGNhbiBjb250YWluIGFueSBrZXkvdmFsdWVzIGRlZW1lZCBuZWNlc3NhcnkuXG4gICAqL1xuICBleHBvcnQgdHlwZSBTb3VyY2VPcHRpb25zPFVzZXJEYXRhIGV4dGVuZHMgUmVjb3JkPHN0cmluZywgdW5rbm93bj4gPSBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPj4gPSB7XG4gICAgdXNlckRhdGE6IFVzZXJEYXRhO1xuICB9O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFNlbnNvciB7XG4gIFNlbnNvclR5cGU6IHR5cGVvZiBTZW5zb3IuU2Vuc29yVHlwZTtcbiAgU291cmNlVHlwZTogdHlwZW9mIFNlbnNvci5Tb3VyY2VUeXBlO1xuICAvKipcbiAgICogQ3JlYXRlIGFuIFtbYElTZW5zb3JgXV0gd2hpY2ggY2FuIHNlbnNlIGFuZCBwcm92aWRlIGluZm9ybWF0aW9uIGFib3V0IFtbYElTb3VyY2VgXV0uXG4gICAqXG4gICAqIGBgYHR5cGVzY3JpcHRcbiAgICogY29uc3Qgc2Vuc29yID0gYXdhaXQgbXBTZGsuU2Vuc29yLmNyZWF0ZVNlbnNvcihtcFNkay5TZW5zb3IuU2Vuc29yVHlwZS5DQU1FUkEpO1xuICAgKiAvLyBhZGQgc291cmNlcyBmcm9tIGNhbGxzIHRvIGBTZW5zb3IuY3JlYXRlU291cmNlKClgXG4gICAqIHNlbnNvci5hZGRTb3VyY2UoLi4uc291cmNlcyk7XG4gICAqIC8vIHN0YXJ0IGxpc3RlbmluZyBmb3IgY2hhbmdlcyB0byB0aGUgc2Vuc29yJ3MgcmVhZGluZ3NcbiAgICogc2Vuc29yLnJlYWRpbmdzLnN1YnNjcmliZSh7XG4gICAqICAgb25BZGRlZChzb3VyY2UsIHJlYWRpbmcpIHtcbiAgICogICAgIGNvbnNvbGUubG9nKHNvdXJjZS51c2VyRGF0YS5pZCwgJ2hhcyBhIHJlYWRpbmcgb2YnLCByZWFkaW5nKTtcbiAgICogICB9LFxuICAgKiAgIG9uVXBkYXRlZChzb3VyY2UsIHJlYWRpbmcpIHtcbiAgICogICAgIGNvbnNvbGUubG9nKHNvdXJjZS51c2VyRGF0YS5pZCwgJ2hhcyBhbiB1cGRhdGVkIHJlYWRpbmcnKTtcbiAgICogICAgIGlmIChyZWFkaW5nLmluUmFuZ2UpIHtcbiAgICogICAgICAgY29uc29sZS5sb2coc291cmNlLnVzZXJEYXRhLmlkLCAnaXMgY3VycmVudGx5IGluIHJhbmdlJyk7XG4gICAqICAgICAgIGlmIChyZWFkaW5nLmluVmlldykge1xuICAgKiAgICAgICAgIGNvbnNvbGUubG9nKCcuLi4gYW5kIGN1cnJlbnRseSB2aXNpYmxlIG9uIHNjcmVlbicpO1xuICAgKiAgICAgICB9XG4gICAqICAgICB9XG4gICAqICAgfVxuICAgKiB9KTtcbiAgICogYGBgXG4gICAqL1xuICBjcmVhdGVTZW5zb3IodHlwZTogU2Vuc29yLlNlbnNvclR5cGUuQ0FNRVJBKTogUHJvbWlzZTxTZW5zb3IuSVNlbnNvcj47XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhIHNwaGVyaWNhbCBbW2BJU291cmNlYF1dIHdoaWNoIGNhbiBiZSBzZW5zZWQgYnkgYW4gW1tgSVNlbnNvcmBdXS48YnI+XG4gICAqIEEgc2hhbGxvdyBjb3B5IG9mIGBvcHRpb25zLnVzZXJEYXRhYCBpcyBhcHBsaWVkIHRvIHRoZSBTb3VyY2UgdXBvbiBjcmVhdGlvbi5cbiAgICpcbiAgICogT21pdHRpbmcgYG9wdGlvbnMub3JpZ2luYCB3aWxsIGRlZmF1bHQgdGhlIHNvdXJjZSdzIGB2b2x1bWUub3JpZ2luYCB0byBgeyB4OiAwLCB5OiAwLCB6OiAwIH1gLjxicj5cbiAgICogT21pdHRpbmcgYG9wdGlvbnMucmFkaXVzYCB3aWxsIGRlZmF1bHQgdGhlIHNvdXJjZSdzIGB2b2x1bWUucmFkaXVzYCB0byBgSW5maW5pdHlgLlxuICAgKlxuICAgKiBgYGB0eXBlc2NyaXB0XG4gICAqIGNvbnN0IHNvdXJjZXM6IEFycmF5PFNlbnNvci5JU291cmNlPFNlbnNvci5TcGhlcmVWb2x1bWUsIHsgaWQ6IHN0cmluZyB9Pj4gPSBhd2FpdCBQcm9taXNlLmFsbChbXG4gICAqICAgbXBTZGsuU2Vuc29yLmNyZWF0ZVNvdXJjZShtcFNkay5TZW5zb3IuU291cmNlVHlwZS5TUEhFUkUsIHtcbiAgICogICAgIG9yaWdpbjogeyB4OiAxLCB5OiAyLCB6OiAzIH0sXG4gICAqICAgICByYWRpdXM6IDIwLFxuICAgKiAgICAgdXNlckRhdGE6IHtcbiAgICogICAgICAgaWQ6ICdzcGhlcmUtc291cmNlLTEnLFxuICAgKiAgICAgfSxcbiAgICogICB9KSxcbiAgICogICBtcFNkay5TZW5zb3IuY3JlYXRlU291cmNlKG1wU2RrLlNlbnNvci5Tb3VyY2VUeXBlLlNQSEVSRSwge1xuICAgKiAgICAgcmFkaXVzOiA0LFxuICAgKiAgICAgdXNlckRhdGE6IHtcbiAgICogICAgICAgaWQ6ICdzcGhlcmUtc291cmNlLTInLFxuICAgKiAgICAgfSxcbiAgICogICB9KSxcbiAgICogXSk7XG4gICAqIC8vIGF0dGFjaCB0byBhIHNlbnNvciBwcmV2aW91c2x5IGNyZWF0ZWQgd2l0aCBgU2Vuc29yLmNyZWF0ZVNlbnNvcigpYFxuICAgKiBzZW5zb3IuYWRkU291cmNlKC4uLnNvdXJjZXMpO1xuICAgKiBgYGBcbiAgICogQHBhcmFtIG9wdGlvbnNcbiAgICovXG4gIGNyZWF0ZVNvdXJjZTxVc2VyRGF0YSBleHRlbmRzIFJlY29yZDxzdHJpbmcsIHVua25vd24+ID0gUmVjb3JkPHN0cmluZywgdW5rbm93bj4+KFxuICAgIHR5cGU6IFNlbnNvci5Tb3VyY2VUeXBlLlNQSEVSRSxcbiAgICBvcHRpb25zOiBQYXJ0aWFsPFNlbnNvci5TcGhlcmVWb2x1bWUgJiBTZW5zb3IuU291cmNlT3B0aW9uczxVc2VyRGF0YT4+LFxuICApOiBQcm9taXNlPFNlbnNvci5JU291cmNlPFNlbnNvci5TcGhlcmVWb2x1bWUsIFVzZXJEYXRhPj47XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhbiBib3ggc2hhcGVkIFtbYElTb3VyY2VgXV0gd2hpY2ggY2FuIGJlIHNlbnNlZCBieSBhbiBbW2BJU2Vuc29yYF1dLjxicj5cbiAgICogQSBzaGFsbG93IGNvcHkgb2YgYG9wdGlvbnMudXNlckRhdGFgIGlzIGFwcGxpZWQgdG8gdGhlIFNvdXJjZSB1cG9uIGNyZWF0aW9uLlxuICAgKlxuICAgKiBPbWl0dGluZyBgb3B0aW9ucy5jZW50ZXJgIHdpbGwgZGVmYXVsdCB0aGUgc291cmNlJ3MgYHZvbHVtZS5jZW50ZXJgIHRvIGB7IHg6IDAsIHk6IDAsIHo6IDAgfWAuPGJyPlxuICAgKiBPbWl0dGluZyBgb3B0aW9ucy5zaXplYCB3aWxsIGRlZmF1bHQgdGhlIHNvdXJjZSdzIGB2b2x1bWUuc2l6ZWAgdG8gYHsgeDogSW5maW5pdHksIHk6IEluZmluaXR5LCB6OiBJbmZpbml0eSB9YC5cbiAgICogT21pdHRpbmcgYG9wdGlvbnMub3JpZW50YXRpb25gIHdpbGwgZGVmYXVsdCB0aGUgc291cmNlJ3MgYHZvbHVtZS5vcmllbnRhdGluYCB0byBgeyB5YXc6IDAsIHBpdGNoOiAwLCByb2xsOiAwIH1gLlxuICAgKlxuICAgKiBgYGB0eXBlc2NyaXB0XG4gICAqIGNvbnN0IHNvdXJjZXM6IEFycmF5PFNlbnNvci5JU291cmNlPFNlbnNvci5Cb3hWb2x1bWUsIHsgaWQ6IHN0cmluZyB9Pj4gPSBhd2FpdCBQcm9taXNlLmFsbChbXG4gICAqICAgbXBTZGsuU2Vuc29yLmNyZWF0ZVNvdXJjZShtcFNkay5TZW5zb3IuU291cmNlVHlwZS5CT1gsIHtcbiAgICogICAgIGNlbnRlcjogeyB4OiAxLCB5OiAxLCB6OiAxIH0sXG4gICAqICAgICBzaXplOiB7IHg6IDIsIHk6IDEsIHo6IDIgfSxcbiAgICogICAgIHVzZXJEYXRhOiB7XG4gICAqICAgICAgIGlkOiAnYm94LXNvdXJjZS0xJyxcbiAgICogICAgIH0sXG4gICAqICAgfSksXG4gICAqICAgbXBTZGsuU2Vuc29yLmNyZWF0ZVNvdXJjZShtcFNkay5TZW5zb3IuU291cmNlVHlwZS5CT1gsIHtcbiAgICogICAgIHNpemU6IHsgeDogMjogeTogMiwgejogMiB9LFxuICAgKiAgICAgb3JpZW50YXRpb246IHsgeWF3OiA0NSwgcGl0Y2g6IDQ1LCByb2xsOiA0NSB9LFxuICAgKiAgICAgdXNlckRhdGE6IHtcbiAgICogICAgICAgaWQ6ICdib3gtc291cmNlLTInLFxuICAgKiAgICAgfSxcbiAgICogICB9KSxcbiAgICogXSk7XG4gICAqIC8vIGF0dGFjaCB0byBhIHNlbnNvciBwcmV2aW91c2x5IGNyZWF0ZWQgd2l0aCBgU2Vuc29yLmNyZWF0ZVNlbnNvcigpYFxuICAgKiBzZW5zb3IuYWRkU291cmNlKC4uLnNvdXJjZXMpO1xuICAgKiBgYGBcbiAgICogQHBhcmFtIG9wdGlvbnNcbiAgICovXG4gIGNyZWF0ZVNvdXJjZTxVc2VyRGF0YSBleHRlbmRzIFJlY29yZDxzdHJpbmcsIHVua25vd24+ID0gUmVjb3JkPHN0cmluZywgdW5rbm93bj4+KFxuICAgIHR5cGU6IFNlbnNvci5Tb3VyY2VUeXBlLkJPWCxcbiAgICBvcHRpb25zOiBQYXJ0aWFsPFNlbnNvci5Cb3hWb2x1bWUgJiBTZW5zb3IuU291cmNlT3B0aW9uczxVc2VyRGF0YT4+LFxuICApOiBQcm9taXNlPFNlbnNvci5JU291cmNlPFNlbnNvci5Cb3hWb2x1bWUsIFVzZXJEYXRhPj47XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhIGN5bGluZHJpY2FsIFtbYElTb3VyY2VgXV0gd2hpY2ggY2FuIGJlIHNlbnNlZCBieSBhbiBbW2BJU2Vuc29yYF1dLjxicj5cbiAgICogQSBzaGFsbG93IGNvcHkgb2YgYG9wdGlvbnMudXNlckRhdGFgIGlzIGFwcGxpZWQgdG8gdGhlIFNvdXJjZSB1cG9uIGNyZWF0aW9uLlxuICAgKlxuICAgKiBPbWl0dGluZyBgb3B0aW9ucy5iYXNlUG9pbnRgIHdpbGwgZGVmYXVsdCB0aGUgc291cmNlJ3MgYHZvbHVtZS5iYXNlUG9pbnRgIHRvIGB7IHg6IDAsIHk6IDAsIHo6IDAgfWAuPGJyPlxuICAgKiBPbWl0dGluZyBgb3B0aW9ucy5yYWRpdXNgIHdpbGwgZGVmYXVsdCB0aGUgc291cmNlJ3MgYHZvbHVtZS5yYWRpdXNgIHRvIGBJbmZpbml0eWAuPGJyPlxuICAgKiBPbWl0dGluZyBgb3B0aW9ucy5oZWlnaHRgIHdpbGwgZGVmYXVsdCB0aGUgc291cmNlJ3MgYHZvbHVtZS5oZWlnaHRgIHRvIGBJbmZpbml0eWAuXG4gICAqXG4gICAqIGBgYHR5cGVzY3JpcHRcbiAgICogY29uc3Qgc291cmNlczogQXJyYXk8U2Vuc29yLklTb3VyY2U8U2Vuc29yLkN5bGluZGVyVm9sdW1lLCB7IGlkOiBzdHJpbmcgfT4+ID0gYXdhaXQgUHJvbWlzZS5hbGwoW1xuICAgKiAgIG1wU2RrLlNlbnNvci5jcmVhdGVTb3VyY2UobXBTZGsuU2Vuc29yLlNvdXJjZVR5cGUuQ1lMSU5ERVIsIHtcbiAgICogICAgIGJhc2VQb2ludDogeyB4OiAwLCB5OiAwLCB6OiAwIH0sXG4gICAqICAgICByYWRpdXM6IDIsXG4gICAqICAgICBoZWlnaHQ6IDUsXG4gICAqICAgICB1c2VyRGF0YToge1xuICAgKiAgICAgICBpZDogJ2N5bGluZGVyLXNvdXJjZS0xJyxcbiAgICogICAgIH0sXG4gICAqICAgfSksXG4gICAqICAgbXBTZGsuU2Vuc29yLmNyZWF0ZVNvdXJjZShtcFNkay5TZW5zb3IuU291cmNlVHlwZS5DWUxJTkRFUiwge1xuICAgKiAgICAgYmFzZVBvaW50OiB7IHg6IDEsIHk6IDIsIHo6IDMgfSxcbiAgICogICAgIHJhZGl1czogMyxcbiAgICogICAgIHVzZXJEYXRhOiB7XG4gICAqICAgICAgIGlkOiAnY3lsaW5kZXItc291cmNlLTInLFxuICAgKiAgICAgfSxcbiAgICogICB9KSxcbiAgICogXSk7XG4gICAqIC8vIGF0dGFjaCB0byBhIHNlbnNvciBwcmV2aW91c2x5IGNyZWF0ZWQgd2l0aCBgU2Vuc29yLmNyZWF0ZVNlbnNvcigpYFxuICAgKiBzZW5zb3IuYWRkU291cmNlKC4uLnNvdXJjZXMpO1xuICAgKiBgYGBcbiAgICovXG4gIGNyZWF0ZVNvdXJjZTxVc2VyRGF0YSBleHRlbmRzIFJlY29yZDxzdHJpbmcsIHVua25vd24+ID0gUmVjb3JkPHN0cmluZywgdW5rbm93bj4+KFxuICAgIHR5cGU6IFNlbnNvci5Tb3VyY2VUeXBlLkNZTElOREVSLFxuICAgIG9wdGlvbnM6IFBhcnRpYWw8U2Vuc29yLkN5bGluZGVyVm9sdW1lICYgU2Vuc29yLlNvdXJjZU9wdGlvbnM8VXNlckRhdGE+PixcbiAgKTogUHJvbWlzZTxTZW5zb3IuSVNvdXJjZTxTZW5zb3IuQ3lsaW5kZXJWb2x1bWUsIFVzZXJEYXRhPj47XG59XG5cbiIsImltcG9ydCB0eXBlIHsgUm90YXRpb24sIFZlY3RvcjMsIElPYnNlcnZhYmxlLCBJT2JzZXJ2YWJsZU1hcCwgRGljdGlvbmFyeSB9IGZyb20gJy4vZ2xvYmFsJztcbmltcG9ydCB0eXBlIHsgR3JhcGggfSBmcm9tICcuL2dyYXBoJztcblxuZXhwb3J0IG5hbWVzcGFjZSBTd2VlcCB7XG4gIGV4cG9ydCB0eXBlIFN3ZWVwRGF0YSA9IHtcbiAgICAvKiogQGRlcHJlY2F0ZWQgVXNlIFtbc2lkXV0gaW5zdGVhZCAqL1xuICAgIHV1aWQ6IHN0cmluZztcbiAgICBzaWQ6IHN0cmluZztcbiAgICBhbGlnbm1lbnRUeXBlOiBBbGlnbm1lbnQ7XG4gICAgcGxhY2VtZW50VHlwZTogUGxhY2VtZW50O1xuICAgIG5laWdoYm9yczogc3RyaW5nW107XG4gICAgcG9zaXRpb246IFZlY3RvcjM7XG4gICAgcm90YXRpb246IFZlY3RvcjM7XG4gICAgZmxvb3I6IG51bWJlcjtcbiAgfTtcblxuICBleHBvcnQgdHlwZSBPYnNlcnZhYmxlU3dlZXBEYXRhID0ge1xuICAgIC8qKiBAZGVwcmVjYXRlZCBVc2UgW1tpZF1dIGluc3RlYWQgKi9cbiAgICB1dWlkOiBzdHJpbmc7XG4gICAgLyoqIEBkZXByZWNhdGVkIFVzZSBbW2lkXV0gaW5zdGVhZCAqL1xuICAgIHNpZDogc3RyaW5nO1xuICAgIGlkOiBzdHJpbmc7XG4gICAgZW5hYmxlZDogYm9vbGVhbjtcbiAgICBhbGlnbm1lbnRUeXBlOiBBbGlnbm1lbnQ7XG4gICAgcGxhY2VtZW50VHlwZTogUGxhY2VtZW50O1xuICAgIG5laWdoYm9yczogc3RyaW5nW107XG4gICAgcG9zaXRpb246IFZlY3RvcjM7XG4gICAgcm90YXRpb246IFZlY3RvcjM7XG4gICAgZmxvb3JJbmZvOiBTd2VlcEZsb29ySW5mbyB8IEVtcHR5U3dlZXBGbG9vckluZm87XG4gIH07XG5cbiAgZXhwb3J0IHR5cGUgU3dlZXBGbG9vckluZm8gPSB7XG4gICAgaWQ6IHN0cmluZztcbiAgICBzZXF1ZW5jZTogbnVtYmVyO1xuICB9O1xuXG4gIGV4cG9ydCB0eXBlIEVtcHR5U3dlZXBGbG9vckluZm8gPSB7XG4gICAgaWQ6IHVuZGVmaW5lZDtcbiAgICBzZXF1ZW5jZTogdW5kZWZpbmVkO1xuICB9O1xuXG4gIC8qKlxuICAgKiBgcm90YXRpb24ueGA6IGlzIHRoZSBhbW91bnQgdGhlIGNhbWVyYSB3aWxsIHJvdGF0ZSB1cC9kb3duLCBpbiB0aGUgcmFuZ2UgYmV0d2VlbiBbLTkw4oCmOTBdXG4gICAqIHdpdGggLTkwIGJlaW5nIHN0cmFpZ2h0IGRvd24gYW5kIDkwIGJlaW5nIHN0cmFpZ2h0IHVwLCA0NSB3b3VsZCBiZSBsb29raW5nIHVwIGF0IGEgNDUgZGVncmVlIGFuZ2xlLiwgLTQ1IGRvd24gZXRjLi5cbiAgICogYHJvdGF0aW9uLnlgOiBpcyB0aGUgYW1vdW50IHRoZSBjYW1lcmEgcm90YXRlIGFyb3VuZCBob3Jpem9udGFsbHksIGJldHdlZW4gWy0zNjDigKYw4oCmMzYwXSxcbiAgICogbmVnYXRpdmUgdmFsdWVzIHRvIHJvdGF0ZSB0byB0aGUgbGVmdCwgcG9zaXRpdmUgdG8gcm90YXRlIHRvIHRoZSByaWdodC5cbiAgICpcbiAgICogTm90ZTogVGhlIHJvdGF0aW9uIHRoYXQgU3dlZXAubW92ZVRvIHVzZXMgZm9yIGlucHV0IGlzIHRoZSBzYW1lIHJvdGF0aW9uIHRoYXQgd2lsbCBnZXQgcmV0dXJuZWQgZnJvbSB0aGUgW1tDYW1lcmEucG9zZV1dIHByb3BlcnR5LlxuICAgKlxuICAgKiBgYGBcbiAgICogY29uc3QgY2FjaGVkUG9zZSA9IG51bGw7XG4gICAqIG1wU2RrLkNhbWVyYS5wb3NlLnN1YnNjcmliZShmdW5jdGlvbiAocG9zZSkge1xuICAgKiAgIGNhY2hlZFBvc2UgPSBwb3NlO1xuICAgKiB9KVxuICAgKlxuICAgKiAvLyBJZiB0aGUgcG9zZSBpcyByZXR1cm5lZCBpbW1lZGlhdGVseS5cbiAgICogY29uc29sZS5sb2coY2FjaGVkUG9zZS5yb3RhdGlvbik7XG4gICAqIGBgYFxuICAgKi9cbiAgZXhwb3J0IHR5cGUgTW92ZVRvT3B0aW9ucyA9IHtcbiAgICByb3RhdGlvbj86IFJvdGF0aW9uO1xuICAgIHRyYW5zaXRpb24/OiBUcmFuc2l0aW9uO1xuICAgIC8qKlxuICAgICAqIFRvdGFsIHRyYW5zaXRpb24gdGltZSBpbiBtaWxsaXNlY29uZHMuXG4gICAgICovXG4gICAgdHJhbnNpdGlvblRpbWU/OiBudW1iZXI7XG4gIH1cblxuICBleHBvcnQgZW51bSBFdmVudCB7XG4gICAgLyoqXG4gICAgICogQGV2ZW50XG4gICAgICovXG4gICAgRU5URVIgPSAnc3dlZXAuZW50ZXInLFxuICAgIEVYSVQgID0gJ3N3ZWVwLmV4aXQnLFxuICB9XG5cbiAgZXhwb3J0IGVudW0gVHJhbnNpdGlvbiB7XG4gICAgSU5TVEFOVCA9ICd0cmFuc2l0aW9uLmluc3RhbnQnLFxuICAgIEZMWSAgICAgPSAndHJhbnNpdGlvbi5mbHknLFxuICAgIEZBREVPVVQgPSAndHJhbnNpdGlvbi5mYWRlJyxcbiAgfVxuICBleHBvcnQgZW51bSBBbGlnbm1lbnQge1xuICAgIEFMSUdORUQgPSAgICdhbGlnbmVkJyxcbiAgICBVTkFMSUdORUQgPSAndW5hbGlnbmVkJyxcbiAgfVxuICBleHBvcnQgZW51bSBQbGFjZW1lbnQge1xuICAgIFVOUExBQ0VEID0gJ3VucGxhY2VkJyxcbiAgICBBVVRPID0gICAgICdhdXRvJyxcbiAgICBNQU5VQUwgPSAgICdtYW51YWwnLFxuICB9XG4gIGV4cG9ydCBkZWNsYXJlIG5hbWVzcGFjZSBDb252ZXJzaW9uIHtcbiAgICAvKipcbiAgICAgKiBHZW5lcmF0ZSBhIG1hcCBiZXR3ZWVuIHYyIElEcyBhbmQgdjEgSURzXG4gICAgICpcbiAgICAgKiBUaGlzIG1ldGhvZCB3aWxsIGhlbHAgd2l0aCBtaWdyYXRpb24gYmV0d2VlbiBJRHMgdXNlZCBmb3Igc3dlZXBzLlxuICAgICAqXG4gICAgICogYGBgXG4gICAgICogY29uc3QgbWFwcGluZyA9IGF3YWl0IG1wU2RrLlN3ZWVwLkNvbnZlcnNpb24uY3JlYXRlSWRNYXAoKTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIEBwYXJhbSBpbnZlcnQ/OiBib29sZWFuIC0gaWYgcGFzc2VkLCByZXR1cm4gbWFwIG9mIHYxLT52MiBpbnN0ZWFkXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlSWRNYXAoaW52ZXJ0PzogYm9vbGVhbik6IFByb21pc2U8RGljdGlvbmFyeTxzdHJpbmc+PjtcblxuICAgIC8qKlxuICAgICAqIFJldHVybiB0aGUgbGFiZWwgYXNzb2NpYXRlZCB3aXRoIHRoZSBwcm92aWRlZCBzd2VlcCBJRFxuICAgICAqXG4gICAgICogVGhlIGxhYmVsIGlzIHdoYXQncyBkaXNwbGF5ZWQgZm9yIHRoZSBzd2VlcCBpbiB0aGUgd29ya3Nob3BcbiAgICAgKlxuICAgICAqIGBgYFxuICAgICAqIGNvbnN0IGxhYmVsID0gbXBTZGsuU3dlZXAuQ29udmVyc2lvbi5nZXRMYWJlbEZyb21JZCgnYWJjZGVmZ2hpamtsbW5vMDEyMzQ1Njc4OScpO1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogQHBhcmFtIGlkXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0TGFiZWxGcm9tSWQoaWQ6IHN0cmluZyk6IFByb21pc2U8c3RyaW5nPjtcbiAgfVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIFN3ZWVwIHtcbiAgRXZlbnQ6IHR5cGVvZiBTd2VlcC5FdmVudDtcbiAgVHJhbnNpdGlvbjogdHlwZW9mIFN3ZWVwLlRyYW5zaXRpb247XG4gIEFsaWdubWVudDogdHlwZW9mIFN3ZWVwLkFsaWdubWVudDtcbiAgUGxhY2VtZW50OiB0eXBlb2YgU3dlZXAuUGxhY2VtZW50O1xuICBDb252ZXJzaW9uOiB0eXBlb2YgU3dlZXAuQ29udmVyc2lvbjtcblxuICAvKipcbiAgICogQW4gb2JzZXJ2YWJsZSBjb2xsZWN0aW9uIG9mIHN3ZWVwIGRhdGEgdGhhdCBjYW4gYmUgc3Vic2NyaWJlZCB0by5cbiAgICpcbiAgICogYGBgXG4gICAqIG1wU2RrLlN3ZWVwLmRhdGEuc3Vic2NyaWJlKHtcbiAgICogICBvbkFkZGVkOiBmdW5jdGlvbiAoaW5kZXgsIGl0ZW0sIGNvbGxlY3Rpb24pIHtcbiAgICogICAgIGNvbnNvbGUubG9nKCdzd2VlcCBhZGRlZCB0byB0aGUgY29sbGVjdGlvbicsIGluZGV4LCBpdGVtLCBjb2xsZWN0aW9uKTtcbiAgICogICB9LFxuICAgKiAgIG9uUmVtb3ZlZDogZnVuY3Rpb24gKGluZGV4LCBpdGVtLCBjb2xsZWN0aW9uKSB7XG4gICAqICAgICBjb25zb2xlLmxvZygnc3dlZXAgcmVtb3ZlZCBmcm9tIHRoZSBjb2xsZWN0aW9uJywgaW5kZXgsIGl0ZW0sIGNvbGxlY3Rpb24pO1xuICAgKiAgIH0sXG4gICAqICAgb25VcGRhdGVkOiBmdW5jdGlvbiAoaW5kZXgsIGl0ZW0sIGNvbGxlY3Rpb24pIHtcbiAgICogICAgIGNvbnNvbGUubG9nKCdzd2VlcCB1cGRhdGVkIGluIHBsYWNlIGluIHRoZSBjb2xsZWN0aW9uJywgaW5kZXgsIGl0ZW0sIGNvbGxlY3Rpb24pO1xuICAgKiAgIH0sXG4gICAqICAgb25Db2xsZWN0aW9uVXBkYXRlZDogZnVuY3Rpb24gKGNvbGxlY3Rpb24pIHtcbiAgICogICAgIGNvbnNvbGUubG9nKCd0aGUgZW50aXJlIHVwLXRvLWRhdGUgY29sbGVjdGlvbicsIGNvbGxlY3Rpb24pO1xuICAgKiAgIH1cbiAgICogfSk7XG4gICAqIGBgYFxuICAgKi9cbiAgZGF0YTogSU9ic2VydmFibGVNYXA8U3dlZXAuT2JzZXJ2YWJsZVN3ZWVwRGF0YT47XG5cbiAgLyoqXG4gICAqIEEgZ3JhcGggb2YgZW5hYmxlZCBzd2VlcHMgdGhhdCBjYW4gYmUgdXNlZCBmb3IgcGF0aGZpbmRpbmcuXG4gICAqIFRoaXMgZ3JhcGggd2lsbCBhdXRvbWF0aWNhbGx5IHVwZGF0ZSBhcyBzd2VlcHMgY2hhbmdlIGFuZCB0cmlnZ2VyIGFueSBvYnNlcnZlcnMuXG4gICAqIFRoZSB3ZWlnaHQgb2YgZWFjaCBlZGdlIGlzIHRoZSBFdWNsaWRlYW4gZGlzdGFuY2UgZnJvbSBhIHN3ZWVwIHRvIGl0cyBuZWlnaGJvci5cbiAgICpcbiAgICogRW5hYmxpbmcgYSBzd2VlcCB3aWxsIGF1dG9tYXRpY2FsbHkgYWRkIGl0IGFuZCBpdHMgZWRnZXMgdG8gdGhlIGdyYXBoLjxicj5cbiAgICogRGlzYWJsaW5nIGEgc3dlZXAgd2lsbCBhdXRvbWF0aWNhbGx5IHJlbW92ZSBpdCBhbmQgaXRzIGVkZ2VzIGZyb20gdGhlIGdyYXBoLlxuICAgKlxuICAgKiBgYGB0eXBlc2NyaXB0XG4gICAqIGNvbnN0IHN3ZWVwR3JhcGggPSBhd2FpdCBtcFNkay5Td2VlcC5jcmVhdGVHcmFwaCgpO1xuICAgKiBjb25zdCBzdGFydFN3ZWVwID0gc3dlZXBHcmFwaC52ZXJ0ZXgoJ1tzdGFydCB2ZXJ0ZXhdJyk7XG4gICAqIGNvbnN0IGVuZFN3ZWVwID0gc3dlZXBHcmFwaC52ZXJ0ZXgoJ1tlbmQgdmVydGV4XScpO1xuICAgKlxuICAgKiBjb25zdCBwYXRoID0gbXBTZGsuR3JhcGguY3JlYXRlQVN0YXJSdW5uZXIoc3dlZXBHcmFwaCwgc3RhcnRTd2VlcCwgZW5kU3dlZXApLmV4ZWMoKTtcbiAgICogYGBgXG4gICAqL1xuICAgY3JlYXRlR3JhcGgoKTogUHJvbWlzZTxHcmFwaC5JRGlyZWN0ZWRHcmFwaDxTd2VlcC5PYnNlcnZhYmxlU3dlZXBEYXRhPj47XG5cbiAgLyoqXG4gICAqIEFuIG9ic2VydmFibGUgZm9yIHRoZSBwbGF5ZXIncyBjdXJyZW50IHN3ZWVwLlxuICAgKlxuICAgKiBJZiB0aGUgY2FtZXJhIGlzIHRyYW5zaXRpb25pbmcgdG8gb3IgaXMgY3VycmVudGx5IGluIERvbGxob3VzZSBvciBGbG9vcnBsYW4gbW9kZSwgb3IgaWYgdGhlIGNhbWVyYSBpcyB0cmFuc2l0aW9uaW5nIGJldHdlZW4gc3dlZXBzLFxuICAgKiB0aGUgYGN1cnJlbnRTd2VlcGAgYXJndW1lbnQgaW4gdGhlIHJlZ2lzdGVyZWQgY2FsbGJhY2sgd2lsbCBiZSBhIFwiZGVmYXVsdFwiIHN3ZWVwIHRoYXQgaGFzIGFuIGVtcHR5IGBzaWRgIHByb3BlcnR5LlxuICAgKlxuICAgKiBJZiB0aGUgc3dlZXAgaXMgYW4gdW5hbGlnbmVkLCB1bnBsYWNlZCAzNjDCuiB2aWV3LCBgY3VycmVudFN3ZWVwLmZsb29ySW5mby5pZGAgYW5kIGBjdXJyZW50U3dlZXAuZmxvb3JJbmZvLnNlcXVlbmNlYCB3aWxsIGJvdGggYmUgYHVuZGVmaW5lZGAuXG4gICAqXG4gICAqIFVzZSB0aGlzIHRhYmxlIHdpdGggdGhlIHJlc3VsdHMgb2YgYHNpZGAsIGBmbG9vckluZm8uc2VxdWVuY2VgLCBhbmQgYGZsb29ySW5mby5pZGAgdG8gZGV0ZXJtaW5lIHRoZSBjdXJyZW50IG9mIHRoZSB0aHJlZSBwb3NzaWJsZSBzdGF0ZXMuXG4gICAqXG4gICAqIHwgICAgICAgICAgICAgICAgICAgIHwgYXQgc3dlZXAgICAgICAgICAgICAgICAgfCB0cmFuc2l0aW9uaW5nIHwgaW4gdW5wbGFjZWQgIDM2MMK6IHZpZXcgfFxuICAgKiB8LS0tLS0tLS0tLS0tLS0tLS0tLS18LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXwtLS0tLS0tLS0tLS0tLS18LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfFxuICAgKiB8IHNpZCAgICAgICAgICAgICAgICB8IGAke2N1cnJlbnQuc2lkfWAgICAgICAgIHwgJycgICAgICAgICAgICB8IGAke2N1cnJlbnQuc2lkfWAgICAgICAgfFxuICAgKiB8IGZsb29ySW5mby5zZXF1ZW5jZSB8IGAke2Zsb29ySW5mby5zZXF1ZW5jZX1gIHwgdW5kZWZpbmVkICAgICB8IHVuZGVmaW5lZCAgICAgICAgICAgICAgfFxuICAgKiB8IGZsb29ySW5mby5pZCAgICAgICB8IGAke2Zsb29ySW5mby5pZH1gICAgICAgIHwgdW5kZWZpbmVkICAgICB8IHVuZGVmaW5lZCAgICAgICAgICAgICAgfFxuICAgKlxuICAgKiBgYGBcbiAgICogbXBTZGsuU3dlZXAuY3VycmVudC5zdWJzY3JpYmUoZnVuY3Rpb24gKGN1cnJlbnRTd2VlcCkge1xuICAgKiAgIC8vIENoYW5nZSB0byB0aGUgY3VycmVudCBzd2VlcCBoYXMgb2NjdXJyZWQuXG4gICAqICAgaWYgKGN1cnJlbnRTd2VlcC5zaWQgPT09ICcnKSB7XG4gICAqICAgICBjb25zb2xlLmxvZygnTm90IGN1cnJlbnRseSBzdGF0aW9uZWQgYXQgYSBzd2VlcCBwb3NpdGlvbicpO1xuICAgKiAgIH0gZWxzZSB7XG4gICAqICAgICBjb25zb2xlLmxvZygnQ3VycmVudGx5IGF0IHN3ZWVwJywgY3VycmVudFN3ZWVwLnNpZCk7XG4gICAqICAgICBjb25zb2xlLmxvZygnQ3VycmVudCBwb3NpdGlvbicsIGN1cnJlbnRTd2VlcC5wb3NpdGlvbik7XG4gICAqICAgICBjb25zb2xlLmxvZygnT24gZmxvb3InLCBjdXJyZW50U3dlZXAuZmxvb3JJbmZvLnNlcXVlbmNlKTtcbiAgICogICB9XG4gICAqIH0pO1xuICAgKiBgYGBcbiAgICpcbiAgICogWW91IGNhbiBhbHNvIHVzZSB0aGlzIG9ic2VydmFibGUgdG8gd2FpdCB1bnRpbCB0aGUgdXNlciBpcyBpbiBhIHN3ZWVwIGJlZm9yZSBleGVjdXRpbmcgYWRkaXRpb25hbCBjb2RlOlxuICAgKlxuICAgKiBgYGB0eXBlc2NyaXB0XG4gICAqIGF3YWl0IG1wU2RrLlN3ZWVwLmN1cnJlbnQud2FpdFVudGlsKChjdXJyZW50U3dlZXApID0+IGN1cnJlbnRTd2VlcC5pZCAhPT0gJycpO1xuICAgKiBgYGBcbiAgICovXG4gIGN1cnJlbnQ6IElPYnNlcnZhYmxlPFN3ZWVwLk9ic2VydmFibGVTd2VlcERhdGE+O1xuXG4gIC8qKlxuICAgKiBNb3ZlIHRvIGEgc3dlZXAuXG4gICAqXG4gICAqYGBgXG4gICAqIGNvbnN0IHN3ZWVwSWQgPSAnMSc7XG4gICAqIGNvbnN0IHJvdGF0aW9uID0geyB4OiAzMCwgeTogLTQ1IH07XG4gICAqIGNvbnN0IHRyYW5zaXRpb24gPSBtcFNkay5Td2VlcC5UcmFuc2l0aW9uLklOU1RBTlQ7XG4gICAqIGNvbnN0IHRyYW5zaXRpb25UaW1lID0gMjAwMDsgLy8gaW4gbWlsbGlzZWNvbmRzXG4gICAqXG4gICAqIG1wU2RrLlN3ZWVwLm1vdmVUbyhzd2VlcElkLCB7XG4gICAqICAgICByb3RhdGlvbjogcm90YXRpb24sXG4gICAqICAgICB0cmFuc2l0aW9uOiB0cmFuc2l0aW9uLFxuICAgKiAgICAgdHJhbnNpdGlvblRpbWU6IHRyYW5zaXRpb25UaW1lLFxuICAgKiAgIH0pXG4gICAqICAgLnRoZW4oZnVuY3Rpb24oc3dlZXBJZCl7XG4gICAqICAgICAvLyBNb3ZlIHN1Y2Nlc3NmdWwuXG4gICAqICAgICBjb25zb2xlLmxvZygnQXJyaXZlZCBhdCBzd2VlcCAnICsgc3dlZXBJZCk7XG4gICAqICAgfSlcbiAgICogICAuY2F0Y2goZnVuY3Rpb24oZXJyb3Ipe1xuICAgKiAgICAgLy8gRXJyb3Igd2l0aCBtb3ZlVG8gY29tbWFuZFxuICAgKiAgIH0pO1xuICAgKiBgYGBcbiAgICpcbiAgICogQHBhcmFtIFRoZSBkZXN0aW5hdGlvbiBzd2VlcC5cbiAgICogQHBhcmFtIE9wdGlvbnMuXG4gICAqIEByZXR1cm5zIEEgcHJvbWlzZSB0aGF0IHdpbGwgcmV0dXJuIHRoZSBkZXN0aW5hdGlvbiBzd2VlcC5cbiAgICovXG4gIG1vdmVUbyhzd2VlcDogc3RyaW5nLCBvcHRpb25zOiBTd2VlcC5Nb3ZlVG9PcHRpb25zKTogUHJvbWlzZTxzdHJpbmc+O1xuXG4gIC8qKlxuICAgKiBFbmFibGUgYSBzZXQgb2Ygc3dlZXBzIGJ5IGlkcy5cbiAgICpcbiAgICogRW5hYmxpbmcgYSBzd2VlcCB3aWxsIHNob3cgdGhlIHN3ZWVwJ3MgcHVjayBhbmQgYWxsb3cgdGhlIHBsYXllciB0byBuYXZpZ2F0ZSB0byB0aGF0IGxvY2F0aW9uLlxuICAgKlxuICAgKiBgYGBcbiAgICogbXBTZGsuU3dlZXAuZW5hYmxlKCdzd2VlcDEnLCAnc3dlZXAyJywgJ3N3ZWVwMycpO1xuICAgKiBgYGBcbiAgICpcbiAgICogQHBhcmFtIHN3ZWVwSWRzXG4gICAqL1xuICBlbmFibGUoLi4uc3dlZXBJZHM6IHN0cmluZ1tdKTogUHJvbWlzZTx2b2lkPjtcblxuICAvKipcbiAgICogRGlzYWJsZSBhIHNldCBvZiBzd2VlcHMgYnkgaWRzLlxuICAgKlxuICAgKiBEaXNhYmxpbmcgYSBzd2VlcCB3aWxsIGhpZGUgdGhlIHN3ZWVwJ3MgcHVjayBhbmQgcHJldmVudCB0aGUgcGxheWVyJ3MgYWJpbGl0eSB0byBuYXZpZ2F0ZSB0byB0aGF0IGxvY2F0aW9uLlxuICAgKlxuICAgKlxuICAgKiBgYGBcbiAgICogbXBTZGsuU3dlZXAuZGlzYWJsZSgnc3dlZXAxJywgJ3N3ZWVwMicsICdzd2VlcDMnKTtcbiAgICogYGBgXG4gICAqXG4gICAqIEBwYXJhbSBzd2VlcElkc1xuICAgKi9cbiAgZGlzYWJsZSguLi5zd2VlcElkczogc3RyaW5nW10pOiBQcm9taXNlPHZvaWQ+O1xuXG4gIC8qKlxuICAgKiBBZGQgc3BlY2lmaWVkIHN3ZWVwIElEcyB0byB0aGUgbmVpZ2hib3JzIGFycmF5XG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIGFsbG93cyBjaGFuZ2luZyB0aGUgc3dlZXAgY29ubmVjdGl2aXRpeSB0byBlbmFibGUgbmF2aWdhdGlvbiBmcm9tIGBzd2VlcElkYFxuICAgKiB0byBhbGwgc3dlZXBzIGluIHRoZSBgdG9BZGRgIGFycmF5LiBOb3RlIHRoYXQgd2UgdXNlIFYyIElEcyBmb3IgYWxsIGFyZ3VtZW50cy4gUmVmZXJcbiAgICogdG8gQ29udmVyc2lvbi5jcmVhdGVJZE1hcCgpIGlmIHlvdSBuZWVkIHRvIGNvbnZlcnQgZnJvbSB0aGUgbGVnYWN5IFYxIElEcy5cbiAgICpcbiAgICogYGBgXG4gICAqIFN3ZWVwLmFkZE5laWdoYm9ycyhcImhuN2V0Y3V5ZmZibXFreXA1ZTQzYXhhMGJcIiwgW1wienI3bnMxc21wNTF6aWJ4NHMyMzlkaTd3YlwiXSk7XG4gICAqIGBgYFxuICAgKlxuICAgKiBAcGFyYW0gc3dlZXBJZDogc3RyaW5nIC0gU3dlZXAgSURcbiAgICogQHBhcmFtIHRvQWRkOiBzdHJpbmdbXSAtIExpc3Qgb2YgU3dlZXAgSURzIHRvIGNvbm5lY3RcbiAgICogQHJldHVybnMgQSBwcm9taXNlIHRvIGEgbGlzdCBvZiBhbGwgY3VycmVudCBuZWlnaGJvciBJRHMgKHYyKVxuICAgKi9cbiAgYWRkTmVpZ2hib3JzKHN3ZWVwSWQ6IHN0cmluZywgdG9BZGQ6IHN0cmluZ1tdKTogUHJvbWlzZTxzdHJpbmdbXT47XG5cbiAgLyoqXG4gICAqIFJlbW92ZSBzcGVjaWZpZWQgc3dlZXAgSURzIGZyb20gdGhlIG5laWdoYm9ycyBhcnJheVxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBhbGxvd3MgY2hhbmdpbmcgdGhlIHN3ZWVwIGNvbm5lY3Rpdml0aXkgdG8gcHJldmVudCBuYXZpZ2F0aW9uIGZyb20gYHN3ZWVwSWRgXG4gICAqIHRvIGFsbCBzd2VlcHMgaW4gdGhlIGB0b1JlbW92ZWAgYXJyYXkuIE5vdGUgdGhhdCB3ZSB1c2UgVjIgSURzIGZvciBhbGwgYXJndW1lbnRzLiBSZWZlclxuICAgKiB0byBDb252ZXJzaW9uLmNyZWF0ZUlkTWFwKCkgaWYgeW91IG5lZWQgdG8gY29udmVydCBmcm9tIHRoZSBsZWdhY3kgVjEgSURzLlxuICAgKlxuICAgKiBgYGBcbiAgICogU3dlZXAucmVtb3ZlTmVpZ2hib3JzKFwiaG43ZXRjdXlmZmJtcWt5cDVlNDNheGEwYlwiLCBbXCJ6cjduczFzbXA1MXppYng0czIzOWRpN3diXCJdKTtcbiAgICogYGBgXG4gICAqXG4gICAqIEBwYXJhbSBzd2VlcElkOiBzdHJpbmcgLSBTd2VlcCBJRFxuICAgKiBAcGFyYW0gdG9SZW1vdmU6IHN0cmluZ1tdIC0gTGlzdCBvZiBTd2VlcCBJRHMgdG8gZGlzY29ubmVjdFxuICAgKiBAcmV0dXJucyBBIHByb21pc2UgdG8gYSBsaXN0IG9mIGFsbCBjdXJyZW50IG5laWdoYm9yIElEcyAodjIpXG4gICAqL1xuICByZW1vdmVOZWlnaGJvcnMoc3dlZXBJZDogc3RyaW5nLCB0b1JlbW92ZTogc3RyaW5nW10pOiBQcm9taXNlPHN0cmluZ1tdPjtcbn1cbiIsImltcG9ydCB0eXBlIHsgQ29sb3IsIElPYnNlcnZhYmxlLCBJT2JzZXJ2YWJsZU1hcCwgU2l6ZSwgVmVjdG9yMyB9IGZyb20gJy4vZ2xvYmFsJztcblxuZXhwb3J0IG5hbWVzcGFjZSBUYWcge1xuICBleHBvcnQgZW51bSBBdHRhY2htZW50VHlwZSB7XG4gICAgLyoqIEFuIHVua25vd24gdHlwZSBvZiBhdHRhY2htZW50LiBUaGlzIHNob3VsZCBuZXZlciBoYXBwZW4gKi9cbiAgICBVTktOT1dOID0gJ3RhZy5hdHRhY2htZW50LnVua25vd24nLFxuICAgIEFQUExJQ0FUSU9OID0gJ3RhZy5hdHRhY2htZW50LmFwcGxpY2F0aW9uJyxcbiAgICBBVURJTyA9ICd0YWcuYXR0YWNobWVudC5hdWRpbycsXG4gICAgLyoqIFRoZSBhdHRhY2htZW50IGNvbnRhaW5zIGFuIGltYWdlICovXG4gICAgSU1BR0UgPSAndGFnLmF0dGFjaG1lbnQuaW1hZ2UnLFxuICAgIC8qKiBUaGUgYXR0YWNobWVudCBjb250YWlucyByaWNoIGNvbnRlbnQgbGlrZSBhbiBpZnJhbWUgb2YgYW5vdGhlciBzaXRlICovXG4gICAgTU9ERUwgPSAndGFnLmF0dGFjaG1lbnQubW9kZWwnLFxuICAgIFBERiA9ICd0YWcuYXR0YWNobWVudC5wZGYnLFxuICAgIFJJQ0ggPSAndGFnLmF0dGFjaG1lbnQucmljaCcsXG4gICAgVEVYVCA9ICd0YWcuYXR0YWNobWVudC50ZXh0JyxcbiAgICAvKiogVGhlIGF0dGFjaG1lbnQgY29udGFpbnMgYSB2aWRlbyAqL1xuICAgIFZJREVPID0gJ3RhZy5hdHRhY2htZW50LnZpZGVvJyxcbiAgICBaSVAgPSAndGFnLmF0dGFjaG1lbnQuemlwJyxcbiAgICAvKiogVGhlIGF0dGFjaG1lbnQgaXMgYSBzYW5kYm94IGNyZWF0ZWQgYnkgYSBjYWxsIHRvIFtbVGFnLnJlZ2lzdGVyU2FuZGJveF1dICovXG4gICAgU0FOREJPWCA9ICd0YWcuYXR0YWNobWVudC5zYW5kYm94JyxcbiAgfVxuXG4gIGV4cG9ydCB0eXBlIFRhZ0RhdGEgPSB7XG4gICAgaWQ6IHN0cmluZztcbiAgICBhbmNob3JQb3NpdGlvbjogVmVjdG9yMztcbiAgICBkaXNjUG9zaXRpb246IFZlY3RvcjM7XG4gICAgc3RlbVZlY3RvcjogVmVjdG9yMztcbiAgICBzdGVtSGVpZ2h0OiBudW1iZXI7XG4gICAgc3RlbVZpc2libGU6IGJvb2xlYW47XG4gICAgbGFiZWw6IHN0cmluZztcbiAgICBkZXNjcmlwdGlvbjogc3RyaW5nO1xuICAgIGNvbG9yOiBDb2xvcjtcbiAgICByb29tSWQ6IHN0cmluZztcbiAgICAvKiogVGhlIGlkcyBvZiB0aGUgYXR0YWNobWVudHMgY3VycmVudGx5IGF0dGFjaGVkIHRvIHRoaXMgdGFnICovXG4gICAgYXR0YWNobWVudHM6IHN0cmluZ1tdO1xuICAgIGtleXdvcmRzOiBzdHJpbmdbXTtcbiAgICAvKiogUmVhZC1vbmx5IEZvbnQgQXdlc29tZSBpZCBmb3IgaWNvbnMgc2V0IGluIHdvcmtzaG9wLCBlLmcuIFwiZmFjZS1ncmluLXRvbmd1ZS1zcXVpbnRcIlxuICAgICAqIFRoaXMgdmFsdWUgZG9lcyBub3QgY2hhbmdlIGlmIFtbVGFnLmVkaXRJY29uXV0gaXMgdXNlZC4gVGhpcyB2YWx1ZSBpcyBhbiBlbXB0eSBzdHJpbmcgaWYgbm8gZm9udElkIHdhcyBzZXQuXG4gICAgKi9cbiAgICBmb250SWQ6IHN0cmluZztcbiAgfTtcblxuICAvKipcbiAgICogVGhpbmdzIHN1Y2ggYXMgbWVkaWEsIGV0YyB0aGF0IGNhbiBiZSBhdHRhY2hlZCB0byBhIFRhZy5cbiAgICogQXR0YWNobWVudHMgYXJlIHRoZSBuZXcgZXF1aXZhbGVudCB0byBNZWRpYSBpbiBNYXR0ZXJ0YWdzLlxuICAgKi9cbiAgZXhwb3J0IHR5cGUgQXR0YWNobWVudCA9IHtcbiAgICBpZDogc3RyaW5nO1xuICAgIHNyYzogc3RyaW5nO1xuICAgIHR5cGU6IEF0dGFjaG1lbnRUeXBlO1xuICB9O1xuXG4gIC8qKlxuICAgKiBBIHN1YnNldCBvZiB0aGUgVGFnRGF0YSB1c2VkIHdoZW4gYWRkaW5nIFRhZ3MuXG4gICAqIE1vc3QgcHJvcGVydGllcyBhcmUgb3B0aW9uYWwgZXhjZXB0IHRob3NlIHVzZWQgZm9yIHBvc2l0aW9uaW5nOiBgYW5jaG9yUG9zaXRpb25gLCBgc3RlbVZlY3RvcmAuXG4gICAqL1xuICBleHBvcnQgdHlwZSBEZXNjcmlwdG9yID0ge1xuICAgIGlkPzogc3RyaW5nO1xuICAgIGFuY2hvclBvc2l0aW9uOiBWZWN0b3IzO1xuICAgIHN0ZW1WZWN0b3I6IFZlY3RvcjM7XG4gICAgc3RlbVZpc2libGU/OiBib29sZWFuO1xuICAgIGxhYmVsPzogc3RyaW5nO1xuICAgIGRlc2NyaXB0aW9uPzogc3RyaW5nO1xuICAgIGNvbG9yPzogQ29sb3I7XG4gICAgb3BhY2l0eT86IG51bWJlcjtcbiAgICBpY29uSWQ/OiBzdHJpbmc7XG4gICAgYXR0YWNobWVudHM/OiBzdHJpbmdbXTtcbiAgfTtcblxuICBleHBvcnQgdHlwZSBQb3NpdGlvbk9wdGlvbnMgPSB7XG4gICAgYW5jaG9yUG9zaXRpb246IFZlY3RvcjM7XG4gICAgc3RlbVZlY3RvcjogVmVjdG9yMztcbiAgICByb29tSWQ6IHN0cmluZztcbiAgfTtcblxuICBleHBvcnQgdHlwZSBTdGVtSGVpZ2h0RWRpdE9wdGlvbnMgPSB7XG4gICAgc3RlbUhlaWdodDogbnVtYmVyO1xuICAgIHN0ZW1WaXNpYmxlOiBib29sZWFuO1xuICB9XG5cbiAgZXhwb3J0IHR5cGUgRWRpdGFibGVQcm9wZXJ0aWVzID0ge1xuICAgIGxhYmVsOiBzdHJpbmc7XG4gICAgZGVzY3JpcHRpb246IHN0cmluZztcbiAgfVxuXG4gIGV4cG9ydCB0eXBlIFNhbmRib3hPcHRpb25zID0ge1xuICAgIC8qKlxuICAgICAqIEEgbWFwIGZvciB0aGUgdGhyZWUgZ2xvYmFsIGZ1bmN0aW9ucyB3ZSBwcm92aWRlIGluIHlvdXIgc2FuZGJveC5cbiAgICAgKiBPbmx5IG5lZWRzIHRvIGJlIHVzZWQgaWYgc2NyaXB0cyB5b3UgYXJlIGltcG9ydGluZyBhbHNvIGhhdmUgYSBnbG9iYWwgYHNlbmRgLCBgb25gLCBgb2ZmYCwgYHRhZ2AsIG9yIGBkb2NrZWRgLlxuICAgICAqL1xuICAgIGdsb2JhbFZhcmlhYmxlTWFwOiBHbG9iYWxWYXJpYWJsZU1hcDtcblxuICAgIC8qKlxuICAgICAqIEEgaHVtYW4gcmVhZGFibGUgbmFtZSB0aGF0IHdpbGwgYmUgdXNlZCBhcyB0aGUgYHNyY2AgaW4gdGhlIGF0dGFjaG1lbnRzIGNvbGxlY3Rpb24uXG4gICAgICovXG4gICAgbmFtZTogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHNpemUgb2YgdGhlIHNhbmRib3ggdG8gZGlzcGxheVxuICAgICAqIFByb3ZpZGluZyBgMGAgYXMgb25lIG9mIHRoZSBkaW1lbnNpb25zIHdpbGwgaW5zdGVhZCB1c2UgdGhlIGRlZmF1bHQ6IDE1MHB4IGZvciBoZWlnaHQsIDEwMCUgZm9yIHdpZHRoLlxuICAgICAqL1xuICAgIHNpemU6IFNpemU7XG4gIH07XG5cbiAgLyoqXG4gICAqIE1hcCB0aGUgZ2xvYmFscyB3ZSBwcm92aWRlIGluIHlvdXIgc2FuZGJveCB0byBvdGhlciBuYW1lcy5cbiAgICovXG4gICBleHBvcnQgdHlwZSBHbG9iYWxWYXJpYWJsZU1hcCA9IHtcbiAgICBzZW5kPzogc3RyaW5nO1xuICAgIG9uPzogc3RyaW5nO1xuICAgIG9mZj86IHN0cmluZztcbiAgICB0YWc/OiBzdHJpbmc7XG4gICAgZG9ja2VkPzogc3RyaW5nO1xuICB9XG5cbiAgLyoqXG4gICAqIEEgbWVzc2FnaW5nIG9iamVjdCB0byBzZW5kIGFuZCByZWNlaXZlIG1lc3NhZ2VzIHRvIGFuZCBmcm9tIHlvdXIgaWZyYW1lIHNhbmRib3guXG4gICAqL1xuICBleHBvcnQgaW50ZXJmYWNlIElNZXNzZW5nZXIge1xuICAgIC8qKlxuICAgICAqIFNlbmQgYSBtZXNzYWdlcyBvZiB0eXBlIGBldmVudFR5cGVgIHRvIHRoZSBpZnJhbWUgc2FuZGJveCB3aXRoIGFueSBvcHRpb25hbCBkYXRhIGFzc29jaWF0ZWQgd2l0aCB0aGUgbWVzc2FnZVxuICAgICAqL1xuICAgIHNlbmQoZXZlbnRUeXBlOiBzdHJpbmcsIC4uLmFyZ3M6IGFueVtdKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBBZGQgYSBoYW5kbGVyIGZvciBtZXNzYWdlcyBvZiB0eXBlIGBldmVudFR5cGVgIGZyb20gdGhlIGlmcmFtZSBzYW5kYm94XG4gICAgICovXG4gICAgb24oZXZlbnRUeXBlOiBzdHJpbmcsIGV2ZW50SGFuZGxlcjogKC4uLmFyZ3M6IGFueVtdKSA9PiB2b2lkKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBSZW1vdmUgYSBoYW5kbGVyIGZvciBtZXNzYWdlcyBvZiB0eXBlIGBldmVudFR5cGVgIGZyb20gdGhlIGlmcmFtZSBzYW5kYm94XG4gICAgICovXG4gICAgb2ZmKGV2ZW50VHlwZTogc3RyaW5nLCBldmVudEhhbmRsZXI6ICguLi5hcmdzOiBhbnlbXSkgPT4gdm9pZCk6IHZvaWQ7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGFjdGlvbnMgdGhhdCBjYW4gYmUgdGFrZW4gd2hlbiBpbnRlcmFjdGluZyB3aXRoIGEgdGFnXG4gICAqL1xuICBleHBvcnQgdHlwZSBBbGxvd2FibGVBY3Rpb25zID0ge1xuICAgIC8qKiBXaGV0aGVyIHRoZSB0YWcgY2FuIGJlIG9wZW5lZCB2aWEgYSBtb3VzZSBob3ZlciAqL1xuICAgIG9wZW5pbmc6IGJvb2xlYW47XG4gICAgLyoqIFdoZXRoZXIgbmF2aWdhdGlvbiB0b3dhcmVkIHRoZSB0YWcgd2lsbCBvY2N1ciB3aGVuIGNsaWNrZWQgKi9cbiAgICBuYXZpZ2F0aW5nOiBib29sZWFuO1xuICAgIC8qKiBXaGV0aGVyIHRoZSB0YWcgY2FuIGJlIGRvY2tlZCAqL1xuICAgIGRvY2tpbmc6IGJvb2xlYW47XG4gICAgLyoqIFdoZXRoZXIgdGhlIHRhZyBoYXMgYSBzaGFyZSBidXR0b24gKi9cbiAgICBzaGFyaW5nOiBib29sZWFuO1xuICB9O1xuXG4gIGV4cG9ydCB0eXBlIE9wZW5PcHRpb25zID0ge1xuICAgIC8qKiBGb3JjZSB0aGUgdGFnIG9wZW4gcmVnYXJkbGVzcyBvZiB3aGV0aGVyIGl0cyBhbGxvd2VkIGZyb20gcHJldmlvdXMgY2FsbHMgdG8gW1tUYWcuYWxsb3dBY3Rpb25dXSAqL1xuICAgIGZvcmNlOiBib29sZWFuO1xuICB9XG5cbiAgZXhwb3J0IHR5cGUgT3BlblRhZ3MgPSB7XG4gICAgLyoqIFRoZSBpZCBvZiB0aGUgdGFnIHRoYXQgaXMgY3VycmVudGx5IGJlaW5nIHByZXZpZXdlZCBvciBob3ZlcmVkIG92ZXIuICovXG4gICAgaG92ZXJlZDogc3RyaW5nIHwgbnVsbDtcbiAgICAvKiogVGhlIHNldCBvZiBpZHMgb2YgdGFncyB0aGF0IGFyZSBjdXJyZW50bHkgXCJzdHVja1wiIG9wZW4gbGlrZSBmcm9tIGEgY2xpY2sgYWN0aW9uLiBDdXJyZW50bHksIHRoaXMgaXMgbGltaXRlZCB0byBqdXN0IG9uZSB0YWcuICovXG4gICAgc2VsZWN0ZWQ6IFNldDxzdHJpbmc+O1xuICAgIC8qKiBUaGUgaWQgb2YgdGhlIHRhZyB0aGF0IGlzIGN1cnJlbnRseSBkb2NrZWQuICovXG4gICAgZG9ja2VkOiBzdHJpbmcgfCBudWxsO1xuICB9O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFRhZyB7XG4gIEF0dGFjaG1lbnRUeXBlOiB0eXBlb2YgVGFnLkF0dGFjaG1lbnRUeXBlO1xuICAvKipcbiAgICogQW4gb2JzZXJ2YWJsZSBjb2xsZWN0aW9uIG9mIHRoZSBbW0F0dGFjaG1lbnRdXS5cbiAgICpcbiAgICogYGBgdHlwZXNjcmlwdFxuICAgKiBtcFNkay5UYWcuYXR0YWNobWVudHMuc3Vic2NyaWJlKHtcbiAgICogICBvbkFkZGVkOiBmdW5jdGlvbiAoaW5kZXgsIGl0ZW0sIGNvbGxlY3Rpb24pIHtcbiAgICogICAgIGNvbnNvbGUubG9nKCdBbiBhdHRhY2htZW50IHdhcyBhZGRlZCB0byB0aGUgY29sbGVjdGlvbicsIGluZGV4LCBpdGVtLCBjb2xsZWN0aW9uKTtcbiAgICogICB9LFxuICAgKiAgIG9uQ29sbGVjdGlvblVwZGF0ZWQoY29sbGVjdGlvbikge1xuICAgKiAgICAgY29uc29sZS5sb2coJ1RoZSBlbnRpcmUgY29sbGVjdGlvbiBvZiBhdHRhY2htZW50cycsIGNvbGxlY3Rpb24pO1xuICAgKiAgIH0sXG4gICAqIH0pO1xuICAgKiBgYGBcbiAgICpcbiAgICogQGVtYmVkXG4gICAqIEBidW5kbGVcbiAgICogQGludHJvZHVjZWQgMy4xLjY4LjEyLTctZzg1ODY4ODk0NGFcbiAgICovXG4gIGF0dGFjaG1lbnRzOiBJT2JzZXJ2YWJsZU1hcDxUYWcuQXR0YWNobWVudD47XG5cbiAgLyoqXG4gICAqIEF0dGFjaCBbW0F0dGFjaG1lbnRdXSB0byBhIFRhZy5cbiAgICpcbiAgICogYGBgdHlwZXNjcmlwdFxuICAgKiBjb25zdCB0YWdJZDogc3RyaW5nOyAvLyAuLi4gYWNxdWlyZWQgdGhyb3VnaCBhIHByZXZpb3VzIGNhbGwgdG8gYG1wU2RrLlRhZy5hZGRgIG9yIHRocm91Z2ggYG1wU2RrLlRhZy5kYXRhYFxuICAgKiBjb25zdCBhdHRhY2htZW50SWRzOiBzdHJpbmdbXTsgLy8gLi4uIGFjcXVpcmVkIHRocm91Z2ggYSBwcmV2aW91cyBjYWxsIHRvIGBtcFNkay5UYWcucmVnaXN0ZXJBdHRhY2htZW50YCBvciB0aHJvdWdoIGBtcFNkay5UYWcuYXR0YWNobWVudHNgXG4gICAqXG4gICAqIG1wU2RrLlRhZy5hdHRhY2godGFnSWQsIC4uLmF0dGFjaG1lbnRJZHMpO1xuICAgKiAvLyBvclxuICAgKiBtcFNkay5UYWcuYXR0YWNoKHRhZ0lkLCBhdHRhY2htZW50SWRbMF0sIGF0dGFjaG1lbnRJZFsxXSk7XG4gICAqIGBgYFxuICAgKlxuICAgKiBAcGFyYW0gdGFnSWRcbiAgICogQHBhcmFtIGF0dGFjaG1lbnRJZFxuICAgKiBAcmV0dXJuIEEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdoZW4gdGhlIEF0dGFjaG1lbnQgaXMgYWRkZWQgdG8gdGhlIFRhZ1xuICAgKlxuICAgKiBAZW1iZWRcbiAgICogQGJ1bmRsZVxuICAgKiBAaW50cm9kdWNlZCAzLjEuNjguMTItNy1nODU4Njg4OTQ0YVxuICAgKi9cbiAgYXR0YWNoKHRhZ0lkOiBzdHJpbmcsIC4uLmF0dGFjaG1lbnRJZHM6IHN0cmluZ1tdKTogUHJvbWlzZTx2b2lkPjtcblxuICAvKipcbiAgICogUmVhZCBhbmQgY3JlYXRlIHRyYW5zaWVudCB0YWdzIGZyb20gYW5vdGhlciBzcGFjZS5cbiAgICpcbiAgICogQGhpZGRlblxuICAgKiBAaW50ZXJuYWxcbiAgICogQGV4cGVyaW1lbnRhbFxuICAgKiBAcGFyYW0gc2lkIGV4dGVybmFsIHNwYWNlIGlkIGNvbnRhaW5nIHRhZ3NcbiAgICovXG4gIGltcG9ydFRhZ3Moc3BhY2VTaWQ6IHN0cmluZyk6IFByb21pc2U8c3RyaW5nW10+O1xuXG4gIC8qKlxuICAgKiBNb3ZlcyBhbGwgdHJhbnNpZW50IHRhZ3MgaW50byBhIHBlcnNpc3RlbnQgbGF5ZXIuIFRhZyBzaWRzIGFyZSBub3QgcHJlc2VydmVkLlxuICAgKlxuICAgKiBAcmV0dXJuIFRoZSBsaXN0IG9mIG5ld2x5IGNyZWF0ZWQgdGFncy5cbiAgICpcbiAgICogQGhpZGRlblxuICAgKiBAaW50ZXJuYWxcbiAgICogQGV4cGVyaW1lbnRhbFxuICAgKi9cbiAgc2F2ZVRvTGF5ZXIoKTogUHJvbWlzZTxzdHJpbmdbXT47XG5cbiAgLyoqXG4gICAqIERldGFjaCBbW0F0dGFjaG1lbnRdXSBmcm9tIGEgVGFnLlxuICAgKlxuICAgKiBgYGB0eXBlc2NyaXB0XG4gICAqIGNvbnN0IHRhZ0lkOiBzdHJpbmc7IC8vIC4uLiBhY3F1aXJlZCB0aHJvdWdoIGEgcHJldmlvdXMgY2FsbCB0byBgbXBTZGsuVGFnLmFkZGAgb3IgdGhyb3VnaCBgbXBTZGsuVGFnLmRhdGFgXG4gICAqIGNvbnN0IGF0dGFjaG1lbnRJZHM6IHN0cmluZ1tdOyAvLyAuLi4gYWNxdWlyZWQgdGhyb3VnaCBhIHByZXZpb3VzIGNhbGwgdG8gYG1wU2RrLlRhZy5yZWdpc3RlckF0dGFjaG1lbnRgIG9yIHRocm91Z2ggYG1wU2RrLlRhZy5hdHRhY2htZW50c2BcbiAgICpcbiAgICogbXBTZGsuVGFnLmRldGFjaCh0YWdJZCwgLi4uYXR0YWNobWVudElkcyk7XG4gICAqIC8vIG9yXG4gICAqIG1wU2RrLlRhZy5kZXRhY2godGFnSWQsIGF0dGFjaG1lbnRJZFswXSwgYXR0YWNobWVudElkWzFdKTtcbiAgICogYGBgXG4gICAqXG4gICAqIEBwYXJhbSB0YWdJZFxuICAgKiBAcGFyYW0gYXR0YWNobWVudElkc1xuICAgKlxuICAgKiBAZW1iZWRcbiAgICogQGJ1bmRsZVxuICAgKiBAaW50cm9kdWNlZCAzLjEuNzAuMTAtMC1nZTljYjgzYjI4Y1xuICAgKi9cbiAgZGV0YWNoKHRhZ0lkOiBzdHJpbmcsIC4uLmF0dGFjaG1lbnRJZHM6IHN0cmluZ1tdKTogUHJvbWlzZTx2b2lkPjtcblxuICAvKipcbiAgICogUmVnaXN0ZXIgYSBuZXcgW1tBdHRhY2htZW50XV0gdGhhdCBjYW4gbGF0ZXIgYmUgYXR0YWNoZWQgYXMgbWVkaWEgdG8gYSBUYWcuXG4gICAqXG4gICAqIEN1c3RvbSBIVE1MIGNhbiBiZSBhZGRlZCBhcyBhbiBhdHRhY2htZW50IHRocm91Z2ggdGhlIHVzZSBvZiBbW3JlZ2lzdGVyU2FuZGJveF1dIGluc3RlYWQuXG4gICAqXG4gICAqIGBgYHR5cGVzY3JpcHRcbiAgICogLy8gcmVnaXN0ZXIgYSBjb3VwbGUgb2YgYXR0YWNobWVudHMgdG8gdXNlIGxhdGVyXG4gICAqIGNvbnN0IFthdHRhY2htZW50SWQxLCBhdHRhY2htZW50SWQyXSA9IG1wU2RrLlRhZy5yZWdpc3RlckF0dGFjaG1lbnQoXG4gICAqICAgJ2h0dHBzOi8vW2xpbmsudG8vbWVkaWFdJyxcbiAgICogICAnaHR0cHM6Ly9bbGluay50by9vdGhlcl9tZWRpYV0nLFxuICAgKiApO1xuICAgKiBgYGBcbiAgICogQHBhcmFtIHNyY3MgVGhlIHNyYyBVUkxzIG9mIHRoZSBtZWRpYVxuICAgKiBAcmV0dXJuIEEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHRvIGFuIGFycmF5IG9mIGlkcyBhc3NvY2lhdGVkIHdpdGggdGhlIG5ld2x5IGFkZGVkIEF0dGFjaG1lbnRzXG4gICAqXG4gICAqIEBlbWJlZFxuICAgKiBAYnVuZGxlXG4gICAqIEBpbnRyb2R1Y2VkIDMuMS42OC4xMi03LWc4NTg2ODg5NDRhXG4gICAqL1xuICByZWdpc3RlckF0dGFjaG1lbnQoLi4uc3Jjczogc3RyaW5nW10pOiBQcm9taXNlPHN0cmluZ1tdPjtcblxuXG4gIC8qKlxuICAgKiBSZWdpc3RlciBhbiBIVE1MIHNhbmRib3ggdGhhdCBkaXBsYXlzIGN1c3RvbSBIVE1MIGFuZCBydW5zIGN1c3RvbSBzY3JpcHRzIGFzIGFuIGF0dGFjaG1lbnQuXG4gICAqIERhdGEgY2FuIGJlIHNlbnQgYW5kIHJlY2VpdmVkIGZyb20gdGhlIHNhbmRib3ggYnkgdXNpbmcgdGhlIHJldHVybmVkIFtbSU1lc3Nlbmdlcl1dLlxuICAgKlxuICAgKiBgYGB0eXBlc2NyaXB0XG4gICAqIGNvbnN0IGh0bWxUb0luamVjdCA9IGBcbiAgICogICA8c3R5bGU+XG4gICAqICAgICBidXR0b24ge1xuICAgKiAgICAgICB3aWR0aDogMTAwcHg7XG4gICAqICAgICAgIGhlaWdodDogNTBweDtcbiAgICogICAgIH1cbiAgICogICA8L3N0eWxlPlxuICAgKiAgIDxidXR0b24gaWQ9J2J0bjEnPkNMSUNLIE1FPC9idXR0b24+XG4gICAqICAgPHNjcmlwdD5cbiAgICogICAgIHZhciBidG4xID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2J0bjEnKTtcbiAgICogICAgIGJ0bjEuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAqICAgICAgIC8vIHNlbmQgZGF0YSBvdXQgb2YgdGhlIHNhbmRib3hcbiAgICogICAgICAgd2luZG93LnNlbmQoJ2J1dHRvbkNsaWNrJywgMTIzNDUpO1xuICAgKiAgICAgfSk7XG4gICAqICAgICAvLyByZWNlaXZlIGRhdGEgZnJvbSBvdXRzaWRlIG9mIHRoZSBzYW5kYm94XG4gICAqICAgICB3aW5kb3cub24oJ3VwZGF0ZUJ1dHRvbicsIChuZXdMYWJlbCwgY29sb3IpID0+IHtcbiAgICogICAgICAgYnRuMS5pbm5lclRleHQgPSBuZXdMYWJlbDtcbiAgICogICAgICAgYnRuMS5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBjb2xvcjtcbiAgICogICAgIH0pO1xuICAgKiAgIDwvc2NyaXB0PlxuICAgKiBgO1xuICAgKlxuICAgKiAvLyBjcmVhdGUgYW5kIHJlZ2lzdGVyIHRoZSBzYW5kYm94XG4gICAqIGNvbnN0IFtzYW5kYm94SWQsIG1lc3Nlbmdlcl0gPSBhd2FpdCBtcFNkay5UYWcucmVnaXN0ZXJTYW5kYm94KGh0bWxUb0luamVjdCk7XG4gICAqIC8vIGF0dGFjaCB0aGUgc2FuZGJveCB0byBhIHRhZ1xuICAgKiBtcFNkay5UYWcuYXR0YWNoKHRhZ0lkLCBzYW5kYm94SWQpO1xuICAgKiAvLyByZWNlaXZlIGRhdGEgZnJvbSB0aGUgc2FuZGJveFxuICAgKiBtZXNzZW5nZXIub24oJ2J1dHRvbkNsaWNrJywgKGJ1dHRvbklkKSA9PiB7XG4gICAqICAgY29uc29sZS5sb2coJ2NsaWNrZWQgYnV0dG9uIHdpdGggaWQ6JywgYnV0dG9uSWQpO1xuICAgKiB9KTtcbiAgICogLy8gc2VuZCBkYXRhIHRvIHRoZSBzYW5kYm94XG4gICAqIG1lc3Nlbmdlci5zZW5kKCdJIHNlbmQgbWVzc2FnZXMnLCAncmVkJyk7XG4gICAqIGBgYFxuICAgKlxuICAgKiBAcGFyYW0gaHRtbFxuICAgKiBAcGFyYW0gb3B0aW9uc1xuICAgKiBAcmV0dXJucyBBbiBbW0lNZXNzZW5nZXJdXSB0aGF0IGNhbiBiZSB1c2VkIHRvIGNvbW11bmljYXRlIHdpdGggdGhlIHNhbmRib3ggYnkgc2VuZGluZyBhbmQgcmVjZWl2aW5nIGRhdGFcbiAgICpcbiAgICogQGVtYmVkXG4gICAqIEBidW5kbGVcbiAgICogQGludHJvZHVjZWQgMy4xLjcwLjEwLTAtZ2U5Y2I4M2IyOGNcbiAgICovXG4gIHJlZ2lzdGVyU2FuZGJveChodG1sOiBzdHJpbmcsIG9wdGlvbnM/OiBQYXJ0aWFsPFRhZy5TYW5kYm94T3B0aW9ucz4pOiBQcm9taXNlPFtzdHJpbmcsIFRhZy5JTWVzc2VuZ2VyXT47XG5cbiAgLyoqXG4gICAqIEFuIG9ic2VydmFibGUgY29sbGVjdGlvbiBvZiBUYWcgZGF0YSB0aGF0IGNhbiBiZSBzdWJzY3JpYmVkIHRvLlxuICAgKlxuICAgKiBXaGVuIGZpcnN0IHN1YnNjcmliaW5nLCB0aGUgY3VycmVudCBzZXQgb2YgVGFncyB3aWxsIGNhbGwgdGhlIG9ic2VydmVyJ3MgYG9uQWRkZWRgIGZvciBlYWNoIFRhZyBhcyB0aGUgZGF0YSBiZWNvbWVzIGF2YWlsYWJsZS5cbiAgICpcbiAgICogYGBgdHlwZXNjcmlwdFxuICAgKiBtcFNkay5UYWcuZGF0YS5zdWJzY3JpYmUoe1xuICAgKiAgIG9uQWRkZWQoaW5kZXgsIGl0ZW0sIGNvbGxlY3Rpb24pIHtcbiAgICogICAgIGNvbnNvbGUubG9nKCdUYWcgYWRkZWQgdG8gdGhlIGNvbGxlY3Rpb24nLCBpbmRleCwgaXRlbSwgY29sbGVjdGlvbik7XG4gICAqICAgfSxcbiAgICogICBvblJlbW92ZWQoaW5kZXgsIGl0ZW0sIGNvbGxlY3Rpb24pIHtcbiAgICogICAgIGNvbnNvbGUubG9nKCdUYWcgcmVtb3ZlZCBmcm9tIHRoZSBjb2xsZWN0aW9uJywgaW5kZXgsIGl0ZW0sIGNvbGxlY3Rpb24pO1xuICAgKiAgIH0sXG4gICAqICAgb25VcGRhdGVkKGluZGV4LCBpdGVtLCBjb2xsZWN0aW9uKSB7XG4gICAqICAgICBjb25zb2xlLmxvZygnVGFnIHVwZGF0ZWQgaW4gcGxhY2UgaW4gdGhlIGNvbGxlY3Rpb24nLCBpbmRleCwgaXRlbSwgY29sbGVjdGlvbik7XG4gICAqICAgfSxcbiAgICogICBvbkNvbGxlY3Rpb25VcGRhdGVkKGNvbGxlY3Rpb24pIHtcbiAgICogICAgIGNvbnNvbGUubG9nKCdUaGUgZnVsbCBjb2xsZWN0aW9uIG9mIFRhZ3MgbG9va3MgbGlrZScsIGNvbGxlY3Rpb24pO1xuICAgKiAgIH1cbiAgICogfSk7XG4gICAqIGBgYFxuICAgKlxuICAgKiBAZW1iZWRcbiAgICogQGJ1bmRsZVxuICAgKiBAaW50cm9kdWNlZCAzLjEuNjguMTItNy1nODU4Njg4OTQ0YVxuICAgKi9cbiAgZGF0YTogSU9ic2VydmFibGVNYXA8VGFnLlRhZ0RhdGE+O1xuXG4gIC8qKlxuICAgKiBBbiBvYnNlcnZhYmxlIHN0YXRlIG9mIHRoYXQgdGFncyB0aGF0IGFyZSBob3ZlcmVkLCBzZWxlY3RlZCwgb3IgZG9ja2VkLlxuICAgKiBBIFRhZyBjYW4gYmUgaW4gYWxsIHRocmVlIHN0YXRlcyBhdCBvbmNlLiBBIGRvY2tlZCB0YWcgaXMgYWxzbyBhbHdheXMgY29uc2lkZXJlZCBzZWxlY3RlZC5cbiAgICpcbiAgICogYGBgdHlwZXNjcmlwdFxuICAgKiBtcFNkay5UYWcub3BlblRhZ3Muc3Vic2NyaWJlKHtcbiAgICogICBwcmV2U3RhdGU6IHtcbiAgICogICAgIGhvdmVyZWQ6IG51bGwsXG4gICAqICAgICBkb2NrZWQ6IG51bGwsXG4gICAqICAgICBzZWxlY3RlZDogbnVsbCxcbiAgICogICB9LFxuICAgKiAgIG9uQ2hhbmdlZChuZXdTdGF0ZSkge1xuICAgKiAgICAgaWYgKG5ld1N0YXRlLmhvdmVyZWQgIT09IHRoaXMucHJldlN0YXRlLmhvdmVyZWQpIHtcbiAgICogICAgICAgaWYgKG5ld1N0YXRlLmhvdmVyZWQpIHtcbiAgICogICAgICAgICBjb25zb2xlLmxvZyhuZXdTdGF0ZS5ob3ZlcmVkLCAnd2FzIGhvdmVyZWQnKTtcbiAgICogICAgICAgfSBlbHNlIHtcbiAgICogICAgICAgICBjb25zb2xlLmxvZyh0aGlzLnByZXZTdGF0ZS5ob3ZlcmVkLCAnaXMgbm8gbG9uZ2VyIGhvdmVyZWQnKTtcbiAgICogICAgICAgfVxuICAgKiAgICAgfVxuICAgKiAgICAgaWYgKG5ld1N0YXRlLmRvY2tlZCAhPT0gdGhpcy5wcmV2U3RhdGUuZG9ja2VkKSB7XG4gICAqICAgICAgIGlmIChuZXdTdGF0ZS5kb2NrZWQpIHtcbiAgICogICAgICAgICBjb25zb2xlLmxvZyhuZXdTdGF0ZS5kb2NrZWQsICd3YXMgZG9ja2VkJyk7XG4gICAqICAgICAgIH0gZWxzZSB7XG4gICAqICAgICAgICAgY29uc29sZS5sb2codGhpcy5wcmV2U3RhdGUuZG9ja2VkLCAnd2FzIHVuZG9ja2VkJyk7XG4gICAqICAgICAgIH1cbiAgICogICAgIH1cbiAgICpcbiAgICogICAgIC8vIG9ubHkgY29tcGFyZSB0aGUgZmlyc3QgJ3NlbGVjdGVkJyBzaW5jZSBvbmx5IG9uZSB0YWcgaXMgY3VycmVudGx5IHN1cHBvcnRlZFxuICAgKiAgICAgY29uc3QgW3NlbGVjdGVkID0gbnVsbF0gPSBuZXdTdGF0ZS5zZWxlY3RlZDsgLy8gZGVzdHJ1Y3R1cmUgYW5kIGNvZXJjZSB0aGUgZmlyc3QgU2V0IGVsZW1lbnQgdG8gbnVsbFxuICAgKiAgICAgaWYgKHNlbGVjdGVkICE9PSB0aGlzLnByZXZTdGF0ZS5zZWxlY3RlZCkge1xuICAgKiAgICAgICAgIGlmIChzZWxlY3RlZCkge1xuICAgKiAgICAgICAgICAgICBjb25zb2xlLmxvZyhzZWxlY3RlZCwgJ3dhcyBzZWxlY3RlZCcpO1xuICAgKiAgICAgICAgIH0gZWxzZSB7XG4gICAqICAgICAgICAgICAgIGNvbnNvbGUubG9nKHRoaXMucHJldlN0YXRlLnNlbGVjdGVkLCAnd2FzIGRlc2VsZWN0ZWQnKTtcbiAgICogICAgICAgICB9XG4gICAqICAgICB9XG4gICAqXG4gICAqICAgICAvLyBjbG9uZSBhbmQgc3RvcmUgdGhlIG5ldyBzdGF0ZVxuICAgKiAgICAgdGhpcy5wcmV2U3RhdGUgPSB7XG4gICAqICAgICAgIC4uLm5ld1N0YXRlLFxuICAgKiAgICAgICBzZWxlY3RlZCxcbiAgICogICAgIH07XG4gICAqICAgfSxcbiAgICogfSk7XG4gICAqIGBgYFxuICAgKlxuICAgKiBAZW1iZWRcbiAgICogQGJ1bmRsZVxuICAgKiBAaW50cm9kdWNlZCAyMy4yLjFcbiAgICovXG4gIG9wZW5UYWdzOiBJT2JzZXJ2YWJsZTxUYWcuT3BlblRhZ3M+O1xuXG4gIC8qKlxuICAgKiBBZGQgb25lIG9yIG1vcmUgVGFncyB0byBTaG93Y2FzZS5cbiAgICogRWFjaCBpbnB1dCBUYWcgc3VwcG9ydHMgc2V0dGluZyB0aGUgbGFiZWwsIGRlc2NyaXB0aW9uLCBjb2xvciBvciBpY29uLCBhbmNob3JQb3NpdGlvbiwgc3RlbVZlY3RvciwgYW5kIGF0dGFjaG1lbnRzLlxuICAgKlxuICAgKiBUd28gcHJvcGVydGllcyBhcmUgcmVxdWlyZWQ6XG4gICAqIC0gYGFuY2hvclBvc2l0aW9uYCwgdGhlIHBvaW50IHdoZXJlIHRoZSB0YWcgY29ubmVjdHMgdG8gdGhlIG1vZGVsXG4gICAqIC0gYHN0ZW1WZWN0b3JgLCB0aGUgZGlyZWN0aW9uLCBha2Egbm9ybWFsLCBhbmQgaGVpZ2h0IHRoYXQgdGhlIFRhZyBzdGVtIHBvaW50c1xuICAgKlxuICAgKiBTZWUgW1tQb2ludGVyLmludGVyc2VjdGlvbl1dIGZvciBhIHdheSB0byByZXRyaWV2ZSBhIG5ldyBgYW5jaG9yUG9zaXRpb25gIGFuZCBgc3RlbVZlY3RvcmAuXG4gICAqXG4gICAqICoqTm90ZSoqOiB0aGVzZSBjaGFuZ2VzIGFyZSBub3QgcGVyc2lzdGVkIGJldHdlZW4gcmVmcmVzaGVzIG9mIFNob3djYXNlLiBUaGV5IGFyZSBvbmx5IHZhbGlkIGZvciB0aGUgY3VycmVudCBicm93c2VyIHNlc3Npb24uXG4gICAqIFRoZXkgYWxzbyBkbyBub3QgaGF2ZSBcInNoYXJlXCIgYnV0dG9ucyBhcyB0aGV5IGFzc29jaWF0ZWQgd2l0aCB0aGVtLlxuICAgKlxuICAgKiBgYGB0eXBlc2NyaXB0XG4gICAqIG1wU2RrLlRhZy5hZGQoe1xuICAgKiAgbGFiZWw6ICdOZXcgdGFnJyxcbiAgICogIGRlc2NyaXB0aW9uOiAnVGhpcyB0YWcgd2FzIGFkZGVkIHRocm91Z2ggdGhlIE1hdHRlcnBvcnQgU0RLJyxcbiAgICogIGFuY2hvclBvc2l0aW9uOiB7XG4gICAqICAgIHg6IDAsXG4gICAqICAgIHk6IDAsXG4gICAqICAgIHo6IDAsXG4gICAqICB9LFxuICAgKiAgc3RlbVZlY3RvcjogeyAvLyBtYWtlIHRoZSBUYWcgc3RpY2sgc3RyYWlnaHQgdXAgYW5kIG1ha2UgaXQgMC4zMCBtZXRlcnMgKH4xIGZvb3QpIHRhbGxcbiAgICogICAgeDogMCxcbiAgICogICAgeTogMC4zMCxcbiAgICogICAgejogMCxcbiAgICogIH0sXG4gICAqICBjb2xvcjogeyAvLyBibHVlIGRpc2NcbiAgICogICAgcjogMC4wLFxuICAgKiAgICBnOiAwLjAsXG4gICAqICAgIGI6IDEuMCxcbiAgICogIH0sXG4gICAqIH0sIHtcbiAgICogIGxhYmVsOiAnTmV3IHRhZyAyJyxcbiAgICogIGFuY2hvclBvc2l0aW9uOiB7XG4gICAqICAgIHg6IDEsXG4gICAqICAgIHk6IDIsXG4gICAqICAgIHo6IDMsXG4gICAqICB9LFxuICAgKiAgc3RlbVZlY3Rvcjoge1xuICAgKiAgICB4OiAsXG4gICAqICAgIHk6ICxcbiAgICogICAgejogLFxuICAgKiAgfVxuICAgKiB9KTtcbiAgICogYGBgXG4gICAqXG4gICAqIEBwYXJhbSB0YWdzIFRoZSBkZXNjcmlwdG9ycyBmb3IgYWxsIFRhZ3MgdG8gYmUgYWRkZWQuXG4gICAqIEByZXR1cm5zIEEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdpdGggdGhlIGFycmF5IG9mIGlkcyBmb3IgdGhlIG5ld2x5IGFkZGVkIFRhZ3MuXG4gICAqXG4gICAqIEBlbWJlZFxuICAgKiBAYnVuZGxlXG4gICAqIEBpbnRyb2R1Y2VkIDMuMS42OC4xMi03LWc4NTg2ODg5NDRhXG4gICAqL1xuICBhZGQoLi4udGFnczogVGFnLkRlc2NyaXB0b3JbXSk6IFByb21pc2U8c3RyaW5nW10+O1xuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSBhbGxvd2VkIFwiZGVmYXVsdFwiIFNob3djYXNlIGFjdGlvbnMgb24gYSBUYWcgZnJvbSBvY2N1cnJpbmc6IGhvdmVyIHRvIG9wZW4gYmlsbGJvYXJkLCBjbGljayB0byBuYXZpZ2F0ZSB0byB2aWV3LlxuICAgKiBJZiBhbiBhY3Rpb24gaXMgb21taXRlZCBmcm9tIHRoZSBhY3Rpb25zIGFyZ3VtZW50LCBpdCB3aWxsIGJlIGNvbnNpZGVyZWQgZmFsc2UgYnkgZGVmYXVsdC5cbiAgICpcbiAgICogYGBgdHlwZXNjcmlwdFxuICAgKiBjb25zdCB0YWdJZHM6IHN0cmluZ1tdOyAvLyAuLi4gYWNxdWlyZWQgdGhyb3VnaCBwcmV2aW91cyBjYWxscyB0byBgbXBTZGsuVGFnLmFkZGAgb3IgdGhyb3VnaCBgbXBTZGsuVGFnLmRhdGFgXG4gICAqXG4gICAqIC8vIHByZXZlbnQgbmF2aWdhdGluZyB0byB0aGUgdGFnIG9uIGNsaWNrXG4gICAqIGNvbnN0IG5vTmF2aWdhdGlvblRhZyA9IHRhZ0lkc1swXTtcbiAgICogbXBTZGsuVGFnLmFsbG93QWN0aW9uKG5vTmF2aWdhdGlvblRhZywge1xuICAgKiAgIG9wZW5pbmc6IHRydWUsXG4gICAqICAgLy8gaW1wbGllcyBuYXZpZ2F0aW5nOiBmYWxzZSwgZXRjXG4gICAqIH0pO1xuICAgKlxuICAgKiAvLyBwcmV2ZW50IHRoZSBiaWxsYm9hcmQgZnJvbSBzaG93aW5nXG4gICAqIGNvbnN0IG5vQmlsbGJvYXJkVGFnID0gdGFnSWRzWzFdO1xuICAgKiBtcFNkay5UYWcuYWxsb3dBY3Rpb24obm9CaWxsYm9hcmRUYWcsIHtcbiAgICogICBuYXZpZ2F0aW5nOiB0cnVlLFxuICAgKiAgIC8vIGltcGxpZXMgb3BlbmluZzogZmFsc2UsIGV0Y1xuICAgKiB9KTtcbiAgICpcbiAgICogY29uc3Qgbm9BY3Rpb25zVGFnID0gdGFnSWRzWzJdO1xuICAgKiBtcFNkay5UYWcuYWxsb3dBY3Rpb24obm9BY3Rpb25zVGFnLCB7XG4gICAqICAgLy8gaW1wbGllcyBvcGVuaW5nOiBmYWxzZSBhbmQgbmF2aWdhdGluZzogZmFsc2UsIGV0Y1xuICAgKiB9KTtcbiAgICogYGBgXG4gICAqXG4gICAqIEBwYXJhbSBpZCBUaGUgaWQgb2YgdGhlIFRhZyB0byBjaGFuZ2UgdGhlIGFsbG93ZWQgYWN0aW9uc1xuICAgKiBAcGFyYW0gYWN0aW9ucyBUaGUgc2V0IG9mIGFjdGlvbnMgYWxsb3dlZCBvbiB0aGUgVGFnXG4gICAqXG4gICAqIEBlbWJlZFxuICAgKiBAYnVuZGxlXG4gICAqIEBpbnRyb2R1Y2VkIDMuMS42OC4xMi03LWc4NTg2ODg5NDRhXG4gICAqL1xuICBhbGxvd0FjdGlvbihpZDogc3RyaW5nLCBhY3Rpb25zOiBQYXJ0aWFsPFRhZy5BbGxvd2FibGVBY3Rpb25zPik6IFByb21pc2U8dm9pZD47XG5cbiAgLyoqXG4gICAqIE9wZW4gYSB0YWcgYW5kIGRpc3BsYXkgaXRzIGJpbGxib2FyZC5cbiAgICogT3BlbmluZyBhIHNlY29uZCB0YWcgd2lsbCBjbG9zZSB0aGUgZmlyc3QuXG4gICAqXG4gICAqIGBgYHR5cGVzY3JpcHRcbiAgICogbXBTZGsuVGFnLm9wZW4odGFnSWQpO1xuICAgKlxuICAgKiAvLyBpZiB0aGUgdGFnIGhhcyBoYWQgaXRzIGBkb2NrYCBvcHRpb24gcmVtb3ZlZCB0aHJvdWdoIGEgY2FsbCB0byBgVGFnLmFsbG93QWN0aW9uYCwgaXQgY2FuIGJlIGBmb3JjZWBkIG9wZW5cbiAgICogbXBTZGsuVGFnLmFsbG93QWN0aW9uKHRhZ0lkLCB7XG4gICAqICAgb3BlbmluZzogZmFsc2UsXG4gICAqIH0pO1xuICAgKiBtcFNkay5UYWcub3Blbih0YWdJZCxcbiAgICogICBmb3JjZTogdHJ1ZSxcbiAgICogfSk7XG4gICAqIGBgYFxuICAgKlxuICAgKiBAcGFyYW0gaWRcbiAgICogQHBhcmFtIG9wdGlvbnNcbiAgICpcbiAgICogQGVtYmVkXG4gICAqIEBidW5kbGVcbiAgICogQGludHJvZHVjZWQgMjMuMi4xXG4gICAqL1xuICBvcGVuKGlkOiBzdHJpbmcsIG9wdGlvbnM/OiBQYXJ0aWFsPFRhZy5PcGVuT3B0aW9ucz4pOiBQcm9taXNlPHZvaWQ+O1xuXG4gIC8qKlxuICAgKiBDbG9zZSBhIHRhZyBhbmQgaXRzIGJpbGxib2FyZCBvciBkb2NrLlxuICAgKlxuICAgKiBgYGB0eXBlc2NyaXB0XG4gICAqIGNvbnN0IHRhZ0lkOiBzdHJpbmc7IC8vIC4uLiBhY3F1aXJlZCB0aHJvdWdoIHByZXZpb3VzIGNhbGxzIHRvIGBtcFNkay5UYWcuYWRkYCBvciB0aHJvdWdoIGBtcFNkay5UYWcuZGF0YWBcbiAgICogbXBTZGsuVGFnLm9wZW4odGFnSWQpO1xuICAgKiBtcFNkay5UYWcuY2xvc2UodGFnSWQpO1xuICAgKiBgYGBcbiAgICpcbiAgICogQHBhcmFtIGlkXG4gICAqIEBlbWJlZFxuICAgKiBAYnVuZGxlXG4gICAqIEBpbnRyb2R1Y2VkIDIzLjIuMVxuICAgKi9cbiAgY2xvc2UoaWQ6IHN0cmluZyk6IFByb21pc2U8dm9pZD47XG5cbiAgLyoqXG4gICAqIE9wZW4gYSB0YWcgaW4gdGhlIGRvY2tlZCB2aWV3LlxuICAgKlxuICAgKiBgYGB0eXBlc2NyaXB0XG4gICAqIGNvbnN0IHRhZ0lkOiBzdHJpbmc7IC8vIC4uLiBhY3F1aXJlZCB0aHJvdWdoIHByZXZpb3VzIGNhbGxzIHRvIGBtcFNkay5UYWcuYWRkYCBvciB0aHJvdWdoIGBtcFNkay5UYWcuZGF0YWBcbiAgICogbXBTZGsuVGFnLmRvY2sodGFnSWQpO1xuICAgKiBgYGBcbiAgICpcbiAgICogQHBhcmFtIGlkXG4gICAqIEBwYXJhbSBvcHRpb25zXG5cbiAgICogQGVtYmVkXG4gICAqIEBidW5kbGVcbiAgICogQGludHJvZHVjZWQgMjMuMi4xXG4gICAqL1xuICBkb2NrKGlkOiBzdHJpbmcsIG9wdGlvbnM/OiBQYXJ0aWFsPFRhZy5PcGVuT3B0aW9ucz4pOiBQcm9taXNlPHZvaWQ+O1xuXG4gIC8qKlxuICAgKiBFZGl0IHRoZSB0ZXh0IGNvbnRlbnQgaW4gYSBUYWcncyBiaWxsYm9hcmQuXG4gICAqXG4gICAqICoqTm90ZSoqOiB0aGVzZSBjaGFuZ2VzIGFyZSBub3QgcGVyc2lzdGVkIGJldHdlZW4gcmVmcmVzaGVzIG9mIFNob3djYXNlLiBUaGV5IGFyZSBvbmx5IHZhbGlkIGZvciB0aGUgY3VycmVudCBicm93c2VyIHNlc3Npb24uXG4gICAqXG4gICAqIGBgYHR5cGVzY3JpcHRcbiAgICogbXBTZGsuVGFnLmVkaXRCaWxsYm9hcmQoaWQsIHtcbiAgICogICBsYWJlbDogJ1RoaXMgaXMgYSBuZXcgdGl0bGUnLFxuICAgKiAgIGRlc2NyaXB0aW9uOiAnVGhpcyBpbWFnZSB3YXMgc2V0IGR5bmFtaWNhbGx5IGJ5IHRoZSBTaG93Y2FzZSBzZGsnLFxuICAgKiB9KTtcbiAgICogYGBgXG4gICAqIEBwYXJhbSBpZCB0aGUgaWQgb2YgdGhlIFRhZyB0byBlZGl0XG4gICAqIEBwYXJhbSBwcm9wZXJ0aWVzIEEgZGljdGlvbmFyeSBvZiBwcm9wZXJ0aWVzIHRvIHNldFxuICAgKlxuICAgKiBAZW1iZWRcbiAgICogQGJ1bmRsZVxuICAgKiBAaW50cm9kdWNlZCAzLjEuNjguMTItNy1nODU4Njg4OTQ0YVxuICAgKi9cbiAgZWRpdEJpbGxib2FyZChpZDogc3RyaW5nLCBwcm9wZXJ0aWVzOiBQYXJ0aWFsPFRhZy5FZGl0YWJsZVByb3BlcnRpZXM+KTogUHJvbWlzZTx2b2lkPjtcblxuXG4gIC8qKlxuICAgKiBFZGl0IHRoZSBjb2xvciBvZiBhIFRhZydzIGRpc2MuXG4gICAqXG4gICAqIGBgYHR5cGVzY3JpcHRcbiAgICogY29uc3QgdGFnSWRzOiBzdHJpbmdbXTsgLy8gLi4uIGFjcXVpcmVkIHRocm91Z2ggcHJldmlvdXMgY2FsbHMgdG8gYG1wU2RrLlRhZy5hZGRgIG9yIHRocm91Z2ggYG1wU2RrLlRhZy5kYXRhYFxuICAgKlxuICAgKiAvLyBjaGFuZ2UgdGhlIGZpcnN0IFRhZyB0byB5ZWxsb3dcbiAgICogbXBTZGsuVGFnLmVkaXRDb2xvcih0YWdJZHNbMF0sIHtcbiAgICogICByOiAwLjksXG4gICAqICAgZzogMCxcbiAgICogICBiOiAwLjksXG4gICAqIH0pO1xuICAgKiBgYGBcbiAgICpcbiAgICogQHBhcmFtIGlkIFRoZSBpZCBvZiB0aGUgVGFnIHRvIGVkaXRcbiAgICogQHBhcmFtIGNvbG9yIFRoZSBuZXcgY29sb3IgdG8gYmUgYXBwbGllZCB0byB0aGUgVGFnIGRpc2NcbiAgICpcbiAgICogQGVtYmVkXG4gICAqIEBidW5kbGVcbiAgICogQGludHJvZHVjZWQgMy4xLjY4LjEyLTctZzg1ODY4ODk0NGFcbiAgICovXG4gIGVkaXRDb2xvcihpZDogc3RyaW5nLCBjb2xvcjogQ29sb3IpOiBQcm9taXNlPHZvaWQ+O1xuXG4gIC8qKlxuICAgKiBDaGFuZ2UgdGhlIGljb24gb2YgdGhlIFRhZyBkaXNjLiBJY29ucyBjYW4gYmUgcmVnaXN0ZXJlZCBhc3NldCB0ZXh0dXJlcyBvciBmb250IGlkcyBwcm92aWRlZCBieSB0aGUgcGxheWVyLlxuICAgKiBTdXBwb3J0ZWQgZm9udCBpZHMgY2FuIGJlIGZvdW5kIGF0IGh0dHBzOi8vbWF0dGVycG9ydC5naXRodWIuaW8vc2hvd2Nhc2Utc2RrL3RhZ3NfaWNvbnNfcmVmZXJlbmNlLmh0bWwuXG4gICAqXG4gICAqICoqTm90ZSoqOiB0aGVzZSBjaGFuZ2VzIGFyZSBub3QgcGVyc2lzdGVkIGJldHdlZW4gcmVmcmVzaGVzIG9mIFNob3djYXNlLiBUaGV5IGFyZSBvbmx5IHZhbGlkIGZvciB0aGUgY3VycmVudCBicm93c2VyIHNlc3Npb24uXG4gICAqXG4gICAqIGBgYHR5cGVzY3JpcHRcbiAgICogLy8gY2hhbmdlIHRoZSBpY29uIG9mIHRoZSBUYWcgdXNpbmcgdGhlIGlkIHVzZWQgaW4gYSBwcmV2aW91cyBgQXNzZXQucmVnaXN0ZXJUZXh0dXJlYCBjYWxsXG4gICAqIG1wU2RrLlRhZy5lZGl0SWNvbihpZCwgJ2N1c3RvbUljb25JZCcpO1xuICAgKiBgYGBcbiAgICpcbiAgICogYGBgdHlwZXNjcmlwdFxuICAgKiAvLyBjaGFuZ2UgdGhlIGljb24gb2YgdGhlIFRhZyB0byBhIGZvbnQgaWQuXG4gICAqIG1wU2RrLlRhZy5lZGl0SWNvbihpZCwgJ3B1YmxpY19idWlsZGluZ3NfYXBhcnRtZW50Jyk7XG4gICAqIGBgYFxuICAgKlxuICAgKiBAcGFyYW0gdGFnSWQgVGhlIGlkIG9mIHRoZSBUYWcgdG8gZWRpdFxuICAgKiBAcGFyYW0gaWNvbklkIFRoZSBpZCBvZiB0aGUgaWNvbiB0byBhcHBseVxuICAgKlxuICAgKiBAZW1iZWRcbiAgICogQGJ1bmRsZVxuICAgKiBAaW50cm9kdWNlZCAzLjEuNjguMTItNy1nODU4Njg4OTQ0YVxuICAgKi9cbiAgZWRpdEljb24odGFnSWQ6IHN0cmluZywgaWNvbklkOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+O1xuXG4gIC8qKlxuICAgKiBFZGl0IHRoZSBvcGFjaXR5IG9mIGEgVGFnLlxuICAgKlxuICAgKiBBIGNvbXBsZXRlbHkgdHJhbnNwYXJlbnQvaW52aXNpYmxlIFRhZyBpcyBzdGlsbCBpbnRlcmFjdGFibGUgYW5kIHdpbGwgcmVzcG9uZCB0byBtb3VzZSBob3ZlcnMgYW5kIGNsaWNrcy5cbiAgICpcbiAgICogYGBgdHlwZXNjcmlwdFxuICAgKiBjb25zdCB0YWdJZHM6IHN0cmluZ1tdOyAvLyAuLi4gYWNxdWlyZWQgdGhyb3VnaCBwcmV2aW91cyBjYWxscyB0byBgbXBTZGsuVGFnLmFkZGAgb3IgdGhyb3VnaCBgbXBTZGsuVGFnLmRhdGFgXG4gICAqIC8vIG1ha2UgdGhlIGZpcnN0IFRhZyBpbnZpc2libGVcbiAgICogbXBTZGsuVGFnLmVkaXRPcGFjaXR5KHRhZ0lkc1swXSwgMCk7XG4gICAqXG4gICAqIC8vIG1ha2UgYW5vdGhlciBUYWcgdHJhbnNwYXJlbnRcbiAgICogbXBTZGsuVGFnLmVkaXRPcGFjaXR5KHRhZ0lkc1sxXSwgMC41KTtcbiAgICpcbiAgICogLy8gYW5kIGFub3RoZXIgY29tcGxldGVseSBvcGFxdWVcbiAgICogbXBTZGsuVGFnLmVkaXRPcGFjaXR5KHRhZ0lkc1syXSwgMSk7XG4gICAqIGBgYFxuICAgKlxuICAgKiBAcGFyYW0gaWQgVGhlIGlkIG9mIHRoZSBUYWcgdG8gZWRpdFxuICAgKiBAcGFyYW0gb3BhY2l0eSBUaGUgdGFyZ2V0IG9wYWNpdHkgZm9yIHRoZSBUYWcgaW4gdGhlIHJhbmdlIG9mIFswLCAxXVxuICAgKlxuICAgKiBAZW1iZWRcbiAgICogQGJ1bmRsZVxuICAgKiBAaW50cm9kdWNlZCAzLjEuNjguMTItNy1nODU4Njg4OTQ0YVxuICAgKi9cbiAgZWRpdE9wYWNpdHkoaWQ6IHN0cmluZywgb3BhY2l0eTogbnVtYmVyKTogUHJvbWlzZTx2b2lkPjtcblxuXG4gIC8qKlxuICAgKiBFZGl0IHRoZSBzdGVtIG9mIGEgVGFnXG4gICAqXG4gICAqIGBgYHR5cGVzY3JpcHRcbiAgICogY29uc3QgdGFnSWQ6IHN0cmluZyA9IHRhZ0RhdGFbMF0uaWQ7IC8vIC4uLiBhY3F1aXJlZCB0aHJvdWdoIGEgcHJldmlvdXMgY2FsbCB0byBgbXBTZGsuVGFnLmFkZGAgb3IgdGhyb3VnaCBgbXBTZGsuVGFnLmRhdGFgXG4gICAqXG4gICAqIC8vIG1ha2UgdGhlIGZpcnN0IFRhZyBoYXZlIGFuIGludnNpYmxlIHN0ZW1cbiAgICogbXBTZGsuVGFnLmVkaXRTdGVtKHRhZ0lkLCB7c3RlbVZpc2libGU6IGZhbHNlfSk7XG4gICAqXG4gICAqIC8vIG1ha2UgYW5vdGhlciBUYWcgaGF2ZSBhIGxvbmcgc3RlbVxuICAgKiBtcFNkay5UYWcuZWRpdFN0ZW0odGFnSWQsIHtzdGVtSGVpZ2h0OiAxfSk7XG4gICAqIGBgYFxuICAgKlxuICAgKiBAcGFyYW0gdGFnU2lkIFRoZSBzaWQgb2YgdGhlIFRhZyB0byBlZGl0XG4gICAqIEBwYXJhbSBzdGVtT3B0aW9ucyBXaGF0IHRvIGNoYW5nZSBhYm91dCB0aGUgVGFnJ3Mgc3RlbSAtIGNhbiBpbmNsdWRlIHN0ZW1IZWlnaHQgYW5kIHN0ZW1WaXNpYmxlXG4gICAqXG4gICAqIEBlbWJlZFxuICAgKiBAYnVuZGxlXG4gICAqIEBpbnRyb2R1Y2VkIDMuMS43MC4xMC0wLWdlOWNiODNiMjhjXG4gICAqL1xuICBlZGl0U3RlbSh0YWdTaWQ6IHN0cmluZywgb3B0aW9uczogUGFydGlhbDxUYWcuU3RlbUhlaWdodEVkaXRPcHRpb25zPik6IFByb21pc2U8dm9pZD47XG5cbiAgLyoqXG4gICAqIE1vdmUgYW5kIHJlb3JpZW50IGEgVGFnLlxuICAgKlxuICAgKiBTZWUgW1tQb2ludGVyLmludGVyc2VjdGlvbl1dIGZvciBhIHdheSB0byByZXRyaWV2ZSBhIG5ldyBgYW5jaG9yUG9zaXRpb25gIGFuZCBgc3RlbVZlY3RvcmAuXG4gICAqXG4gICAqICoqTm90ZSoqOiB0aGVzZSBjaGFuZ2VzIGFyZSBub3QgcGVyc2lzdGVkIGJldHdlZW4gcmVmcmVzaGVzIG9mIFNob3djYXNlLiBUaGV5IGFyZSBvbmx5IHZhbGlkIGZvciB0aGUgY3VycmVudCBicm93c2VyIHNlc3Npb24uXG4gICAqXG4gICAqIGBgYHR5cGVzY3JpcHRcbiAgICogY29uc3QgdGFnSWQ6IHN0cmluZzsgLy8gLi4uIGFjcXVpcmVkIHRocm91Z2ggYSBwcmV2aW91cyBjYWxsIHRvIGBtcFNkay5UYWcuYWRkYCBvciB0aHJvdWdoIGBtcFNkay5UYWcuZGF0YWBcbiAgICpcbiAgICogbXBTZGsuVGFnLmVkaXRQb3NpdGlvbih0YWdJZCwge1xuICAgKiAgYW5jaG9yUG9zaXRpb246IHtcbiAgICogICAgeDogMCxcbiAgICogICAgeTogMCxcbiAgICogICAgejogMCxcbiAgICogIH0sXG4gICAqICBzdGVtVmVjdG9yOiB7IC8vIG1ha2UgdGhlIFRhZyBzdGljayBzdHJhaWdodCB1cCBhbmQgbWFrZSBpdCAwLjMwIG1ldGVycyAofjEgZm9vdCkgdGFsbFxuICAgKiAgICB4OiAwLFxuICAgKiAgICB5OiAwLjMwLFxuICAgKiAgICB6OiAwLFxuICAgKiAgfSxcbiAgICogfSk7XG4gICAqIGBgYFxuICAgKiBAcGFyYW0gaWQgVGhlIGlkIG9mIHRoZSBUYWcgdG8gcmVwb3NpdGlvblxuICAgKiBAcGFyYW0gb3B0aW9ucyBUaGUgbmV3IGFuY2hvclBvc2l0aW9uLCBzdGVtVmVjdG9yIGFuZC9vciByb29tSWQgdG8gYXNzb2NpYXRlIHRoZSB0YWcgd2l0aC5cbiAgICpcbiAgICogQGVtYmVkXG4gICAqIEBidW5kbGVcbiAgICogQGludHJvZHVjZWQgMy4xLjY4LjEyLTctZzg1ODY4ODk0NGFcbiAgICovXG4gIGVkaXRQb3NpdGlvbihpZDogc3RyaW5nLCBvcHRpb25zOiBQYXJ0aWFsPFRhZy5Qb3NpdGlvbk9wdGlvbnM+KTogUHJvbWlzZTx2b2lkPjtcblxuICAvKipcbiAgICogUmVtb3ZlcyBvbmUgb3IgbW9yZSBUYWdzIGZyb20gU2hvd2Nhc2UuXG4gICAqXG4gICAqICoqTm90ZSoqOiB0aGVzZSBjaGFuZ2VzIGFyZSBub3QgcGVyc2lzdGVkIGJldHdlZW4gcmVmcmVzaGVzIG9mIFNob3djYXNlLiBUaGV5IGFyZSBvbmx5IHZhbGlkIGZvciB0aGUgY3VycmVudCBicm93c2VyIHNlc3Npb24uXG4gICAqXG4gICAqIGBgYHR5cGVzY3JpcHRcbiAgICogY29uc3QgdGFnSWRzOiBzdHJpbmdbXTsgLy8gLi4uIGFjcXVpcmVkIHRocm91Z2ggYSBwcmV2aW91cyBjYWxsIHRvIGBtcFNkay5UYWcuYWRkYCBvciB0aHJvdWdoIGBtcFNkay5UYWcuZGF0YWBcbiAgICogLy8gcmVtb3ZlIG9uZSB0YWdcbiAgICogbXBTZGsuVGFnLnJlbW92ZSh0YWdJZHNbMF0pO1xuICAgKlxuICAgKiAvLyBvciByZW1vdmUgbXVsdGlwbGUgYXQgdGhlIHNhbWUgdGltZVxuICAgKiBtcFNkay5UYWcucmVtb3ZlKC4uLnRhZ0lkcyk7XG4gICAqIGBgYFxuICAgKiBAcGFyYW0gaWRzIFRoZSBUYWdzJyBpZHMgdG8gYmUgcmVtb3ZlZC5cbiAgICogQHJldHVybnMgQSBwcm9taXNlIHdpdGggYW4gYXJyYXkgb2YgVGFnIGlkcyB0aGF0IHdlcmUgYWN0dWFsbHkgcmVtb3ZlZC5cbiAgICpcbiAgICogQGVtYmVkXG4gICAqIEBidW5kbGVcbiAgICogQGludHJvZHVjZWQgMy4xLjY4LjEyLTctZzg1ODY4ODk0NGFcbiAgICovXG4gIHJlbW92ZSguLi5pZHM6IHN0cmluZ1tdKTogUHJvbWlzZTxzdHJpbmdbXT47XG5cbiAgLyoqXG4gICAqIFJlc2V0cyB0aGUgaWNvbiBvZiB0aGUgVGFnIGRpc2MgYmFjayB0byBpdHMgb3JpZ2luYWwgaWNvbi5cbiAgICpcbiAgICogYGBgdHlwZXNjcmlwdFxuICAgKiBjb25zdCB0YWdJZHM6IHN0cmluZ1tdOyAvLyAuLi4gYWNxdWlyZWQgdGhyb3VnaCBhIHByZXZpb3VzIGNhbGwgdG8gYG1wU2RrLlRhZy5hZGRgIG9yIHRocm91Z2ggYG1wU2RrLlRhZy5kYXRhYFxuICAgKlxuICAgKiAvLyByZXNldCB0aGUgaWNvbiBvZiB0aGUgZmlyc3QgVGFnIHRvIGl0cyBvcmlnaW5hbFxuICAgKiBtcFNkay5UYWcucmVzZXRJY29uKHRhZ0lkc1swXS5pZCk7XG4gICAqIGBgYFxuICAgKlxuICAgKiBAcGFyYW0gaWQgVGhlIGlkIG9mIHRoZSBUYWcgdG8gcmVzZXRcbiAgICpcbiAgICogQGVtYmVkXG4gICAqIEBidW5kbGVcbiAgICogQGludHJvZHVjZWQgMy4xLjY4LjEyLTctZzg1ODY4ODk0NGFcbiAgICovXG4gIHJlc2V0SWNvbihpZDogc3RyaW5nKTogUHJvbWlzZTx2b2lkPjtcblxuICAvKipcbiAgICogVG9nZ2xlIHRoZSBvdmVyaGVhZCBuYXZpZ2F0aW9uIFVJXG4gICAqXG4gICAqIGBgYHR5cGVzY3JpcHRcbiAgICogLy8gaGlkZSB0aGUgY29udHJvbHNcbiAgICogbXBTZGsuVGFnLnRvZ2dsZU5hdkNvbnRyb2xzKGZhbHNlKTtcbiAgICpcbiAgICogLy8gc2hvdyB0aGUgY29udHJvbHNcbiAgICogbXBTZGsuVGFnLnRvZ2dsZU5hdkNvbnRyb2xzKHRydWUpO1xuICAgKlxuICAgKiAvLyB0b2dnbGUgdGhlIGN1cnJlbnQgdmlzaWJpbGl0eSBvZiB0aGUgY29udHJvbHNcbiAgICogbXBTZGsuVGFnLnRvZ2dsZU5hdkNvbnRyb2xzKCk7XG4gICAqIGBgYFxuICAgKiBAcGFyYW0gZW5hYmxlXG4gICAqXG4gICAqIEBlbWJlZFxuICAgKiBAYnVuZGxlXG4gICAqIEBpbnRyb2R1Y2VkIDIzLjMuMVxuICAgKi9cbiAgdG9nZ2xlTmF2Q29udHJvbHMoZW5hYmxlPzogYm9vbGVhbik6IFByb21pc2U8dm9pZD47XG5cbiAgLyoqXG4gICAqIFRvZ2dsZSB0aGUgZG9jayBzZXR0aW5nIHRvIGhpZGUgZG9jayBidXR0b25zIGluIGFsbCB0YWdzLlxuICAgKlxuICAgKiBEaXNhYmxpbmcgdGhlIGRvY2sgc2V0dGluZyB3aWxsIHJlbW92ZSB0aGUgZG9jayBidXR0b25zIGZyb20gYWxsIHRhZ3MuXG4gICAqIEVuYWJsaW5nIHRoZSBkb2NrIHNldHRpbmcgZG9lcyBub3QgYXV0b21hdGljYWxseSBzaG93IHRoZSBkb2NrIGJ1dHRvbiBpbiBhbGwgdGFncy5cbiAgICogVGhlIGRvY2sgYnV0dG9uIHdpbGwgb25seSBiZSBkaXNwbGF5ZWQgaW4gYSB0YWcgaWYgYm90aCB0aGUgZG9jayBzZXR0aW5nIGlzIHRydWUgYW5kIGRvY2tpbmcgaXMgYWxsb3dlZCBieSB0aGUgdGFnIChzZWUgW1tUYWcuYWxsb3dBY3Rpb25dXSkuXG4gICAqXG4gICAqIGBgYHR5cGVzY3JpcHRcbiAgICogLy8gaGlkZSB0aGUgZG9jayBidXR0b25zXG4gICAqIG1wU2RrLlRhZy50b2dnbGVEb2NraW5nKGZhbHNlKTtcbiAgICpcbiAgICogLy8gc2hvdyB0aGUgZG9jayBidXR0b25zXG4gICAqIG1wU2RrLlRhZy50b2dnbGVEb2NraW5nKHRydWUpO1xuICAgKlxuICAgKiAvLyB0b2dnbGUgdGhlIGN1cnJlbnQgdmlzaWJpbGl0eSBvZiB0aGUgZG9jayBidXR0b25zXG4gICAqIG1wU2RrLlRhZy50b2dnbGVEb2NraW5nKCk7XG4gICAqIGBgYFxuICAgKiBAcGFyYW0gZW5hYmxlXG4gICAqXG4gICAqIEBlbWJlZFxuICAgKiBAYnVuZGxlXG4gICAqIEBpbnRyb2R1Y2VkIDIzLjQuMlxuICAgKi9cbiAgdG9nZ2xlRG9ja2luZyhlbmFibGU/OiBib29sZWFuKTogUHJvbWlzZTx2b2lkPjtcblxuICAvKipcbiAgICogVG9nZ2xlIHRoZSBzaGFyZSBzZXR0aW5nIHRvIGhpZGUgc2hhcmUgYnV0dG9ucyBpbiBhbGwgdGFncy5cbiAgICpcbiAgICogRGlzYWJsaW5nIHRoZSBzaGFyZSBzZXR0aW5nIHdpbGwgcmVtb3ZlIHRoZSBzaGFyZSBidXR0b25zIGZyb20gYWxsIHRhZ3MuXG4gICAqIEVuYWJsaW5nIHRoZSBzaGFyZSBzZXR0aW5nIGRvZXMgbm90IGF1dG9tYXRpY2FsbHkgc2hvdyB0aGUgc2hhcmUgYnV0dG9uIGluIGFsbCB0YWdzLlxuICAgKiBUaGUgc2hhcmUgYnV0dG9uIHdpbGwgb25seSBiZSBkaXNwbGF5ZWQgaW4gYSB0YWcgaWYgYm90aCB0aGUgc2hhcmUgc2V0dGluZyBpcyB0cnVlIGFuZCBzaGFyaW5nIGlzIGFsbG93ZWQgYnkgdGhlIHRhZyAoc2VlIFtbVGFnLmFsbG93QWN0aW9uXV0pLlxuICAgKlxuICAgKiBgYGB0eXBlc2NyaXB0XG4gICAqIC8vIGhpZGUgdGhlIHNoYXJlIGJ1dHRvbnNcbiAgICogbXBTZGsuVGFnLnRvZ2dsZVNoYXJpbmcoZmFsc2UpO1xuICAgKlxuICAgKiAvLyBzaG93IHRoZSBzaGFyZSBidXR0b25zXG4gICAqIG1wU2RrLlRhZy50b2dnbGVTaGFyaW5nKHRydWUpO1xuICAgKlxuICAgKiAvLyB0b2dnbGUgdGhlIGN1cnJlbnQgdmlzaWJpbGl0eSBvZiB0aGUgc2hhcmUgYnV0dG9uc1xuICAgKiBtcFNkay5UYWcudG9nZ2xlU2hhcmluZygpO1xuICAgKiBgYGBcbiAgICogQHBhcmFtIGVuYWJsZVxuICAgKlxuICAgKiBAZW1iZWRcbiAgICogQGJ1bmRsZVxuICAgKiBAaW50cm9kdWNlZCAyMy40LjJcbiAgICovXG4gIHRvZ2dsZVNoYXJpbmcoZW5hYmxlPzogYm9vbGVhbik6IFByb21pc2U8dm9pZD47XG59XG4iLCJpbXBvcnQgdHlwZSB7IElPYnNlcnZhYmxlLCBWZWN0b3IzIH0gZnJvbSAnLi9nbG9iYWwnO1xuaW1wb3J0IHR5cGUgeyBNb2RlIH0gZnJvbSAnLi9tb2RlJztcblxuLyoqXG4gKiBTYW1wbGUgY3VzdG9tIHRvdXIuXG4gKlxuICogYGBgXG4gKiBjb25zdCBjb25uZWN0ID0gZnVuY3Rpb24oc2RrKSB7XG4gKiAgIGNvbnN0IG1wU2RrID0gc2RrO1xuICpcbiAqICAgbXBTZGsuVG91ci5FdmVudC5vbihUb3VyLkV2ZW50LlNURVBQRUQsIGZ1bmN0aW9uKHRvdXJJbmRleCl7XG4gKiAgICAgY29uc29sZS5sb2coJ1RvdXIgaW5kZXggJyArIHRvdXJJbmRleCk7XG4gKiAgIH0pO1xuICogICBtcFNkay5Ub3VyLkV2ZW50Lm9uKFRvdXIuRXZlbnQuU1RBUlRFRCwgZnVuY3Rpb24oKXtcbiAqICAgICBjb25zb2xlLmxvZygnVG91ciBzdGFydGVkJyk7XG4gKiAgIH0pO1xuICogICBtcFNkay5Ub3VyLkV2ZW50Lm9uKFRvdXIuRXZlbnQuU1RPUFBFRCwgZnVuY3Rpb24oKXtcbiAqICAgICBjb25zb2xlLmxvZygnVG91ciBzdG9wcGVkJyk7XG4gKiAgIH0pO1xuICpcbiAqICAgbXBTZGsuVG91ci5nZXREYXRhKClcbiAqICAgICAudGhlbihmdW5jdGlvbih0b3VyKSB7XG4gKiAgICAgICBjb25zb2xlLmxvZygndG91ciBoYXMgJyArIHRvdXIubGVuZ3RoICsgJyBzdG9wcycpO1xuICogICAgICAgcmV0dXJuIG1wU2RrLlRvdXIuc3RhcnQoMCk7XG4gKiAgICAgfSlcbiAqICAgICAudGhlbihmdW5jdGlvbigpe1xuICogICAgICAgLy8gY29uc29sZSAnVG91ciBzdGFydGVkJ1xuICogICAgICAgLy8gY29uc29sZSAtPiAnVG91ciBpbmRleCAwJ1xuICogICAgICAgcmV0dXJuIG1wU2RrLlRvdXIubmV4dCgpO1xuICogICAgIH0pXG4gKiAgICAgLnRoZW4oZnVuY3Rpb24oKXtcbiAqICAgICAgIC8vIGNvbnNvbGUgLT4gJ1RvdXIgaW5kZXggMSdcbiAqICAgICAgIHJldHVybiBtcFNkay5Ub3VyLnN0ZXAoMyk7XG4gKiAgICAgfSlcbiAqICAgICAudGhlbihmdW5jdGlvbigpe1xuICogICAgICAgLy8gY29uc29sZSAtPiAnVG91ciBpbmRleCAzJ1xuICogICAgICAgcmV0dXJuIG1wU2RrLlRvdXIucHJldigpO1xuICogICAgIH0pXG4gKiAgICAgLnRoZW4oZnVuY3Rpb24oKXtcbiAqICAgICAgIC8vIGNvbnNvbGUgLT4gJ1RvdXIgaW5kZXggMidcbiAqICAgICAgIC8vIGNvbnNvbGUgLT4gJ1RvdXIgc3RvcHBlZCdcbiAqICAgICAgIHJldHVybiBtcFNkay5Ub3VyLnN0b3AoKTtcbiAqICAgICB9KTtcbiAqIH1cbiAqIGBgYFxuICpcbiAqL1xuZXhwb3J0IG5hbWVzcGFjZSBUb3VyIHtcbiAgZXhwb3J0IHR5cGUgU25hcHNob3QgPSB7XG4gICAgc2lkOiBzdHJpbmc7XG4gICAgdGh1bWJuYWlsVXJsOiBzdHJpbmc7XG4gICAgaW1hZ2VVcmw6IHN0cmluZztcbiAgICBpczM2MDogYm9vbGVhbjtcbiAgICBuYW1lOiBzdHJpbmc7XG4gICAgbW9kZTogTW9kZS5Nb2RlIHwgdW5kZWZpbmVkO1xuICAgIHBvc2l0aW9uOiBWZWN0b3IzO1xuICAgIHJvdGF0aW9uOiBWZWN0b3IzO1xuICAgIHpvb206IG51bWJlcjtcbiAgfTtcblxuICBleHBvcnQgZW51bSBFdmVudCB7XG4gICAgLyoqIEBldmVudCAqL1xuICAgIFNUQVJURUQgPSAndG91ci5zdGFydGVkJyxcbiAgICAvKiogQGV2ZW50ICovXG4gICAgU1RPUFBFRCA9ICd0b3VyLnN0b3BwZWQnLFxuICAgIC8qKiBAZXZlbnQgKi9cbiAgICBFTkRFRCA9ICd0b3VyLmVuZGVkJyxcbiAgICAvKiogQGV2ZW50ICovXG4gICAgU1RFUFBFRCA9ICd0b3VyLnN0ZXBwZWQnLFxuICB9XG5cbiAgZXhwb3J0IHR5cGUgQ3VycmVudFN0ZXBEYXRhID0ge1xuICAgIHN0ZXA6IHN0cmluZyB8IG51bGw7XG4gIH07XG5cbiAgZXhwb3J0IGVudW0gUGxheVN0YXRlIHtcbiAgICBJTkFDVElWRSA9ICd0b3VyLmluYWN0aXZlJyxcbiAgICBBQ1RJVkUgPSAndG91ci5hY3RpdmUnLFxuICAgIFNUT1BfU0NIRURVTEVEID0gJ3RvdXIuc3RvcHNjaGVkdWxlZCcsXG4gIH1cblxuICBleHBvcnQgdHlwZSBDdXJyZW50U3RhdGVEYXRhID0ge1xuICAgIGN1cnJlbnQ6IFBsYXlTdGF0ZTtcbiAgfTtcblxuICBleHBvcnQgdHlwZSBDdXJyZW50VHJhbnNpdGlvbkRhdGEgPSB7XG4gICAgZnJvbTogc3RyaW5nIHwgbnVsbDtcbiAgICB0bzogc3RyaW5nIHwgbnVsbDtcbiAgfTtcbn1cblxuZXhwb3J0IGRlY2xhcmUgaW50ZXJmYWNlIFRvdXIge1xuICBFdmVudDogdHlwZW9mIFRvdXIuRXZlbnQ7XG4gIFBsYXlTdGF0ZTogdHlwZW9mIFRvdXIuUGxheVN0YXRlO1xuICAvKipcbiAgICogVGhpcyBmdW5jdGlvbiBzdGFydHMgdGhlIHRvdXIuXG4gICAqXG4gICAqIGBgYFxuICAgKiBjb25zdCB0b3VySW5kZXggPSAxO1xuICAgKlxuICAgKiBtcFNkay5Ub3VyLnN0YXJ0KHRvdXJJbmRleClcbiAgICogICAudGhlbihmdW5jdGlvbigpIHtcbiAgICogICAgIC8vIFRvdXIgc3RhcnQgY29tcGxldGUuXG4gICAqICAgfSlcbiAgICogICAuY2F0Y2goZnVuY3Rpb24oZXJyb3IpIHtcbiAgICogICAgIC8vIFRvdXIgc3RhcnQgZXJyb3IuXG4gICAqICAgfSk7XG4gICAqIGBgYFxuICAgKlxuICAgKiBAZW1iZWRcbiAgICogQGJ1bmRsZVxuICAgKi9cbiAgc3RhcnQoaW5kZXg/OiBudW1iZXIpOiBQcm9taXNlPHZvaWQ+O1xuXG4gIC8qKlxuICAgKiBUaGlzIGZ1bmN0aW9uIHN0b3BzIHRoZSB0b3VyLlxuICAgKlxuICAgKiBgYGBcbiAgICogbXBTZGsuVG91ci5zdG9wKClcbiAgICogICAudGhlbihmdW5jdGlvbigpIHtcbiAgICogICAgIC8vIFRvdXIgc3RvcCBjb21wbGV0ZS5cbiAgICogICB9KVxuICAgKiAgIC5jYXRjaChmdW5jdGlvbihlcnJvcikge1xuICAgKiAgICAgLy8gVG91ciBzdG9wIGVycm9yLlxuICAgKiAgIH0pO1xuICAgKiBgYGBcbiAgICpcbiAgICogQGVtYmVkXG4gICAqIEBidW5kbGVcbiAgICovXG4gIHN0b3AoKTogUHJvbWlzZTx2b2lkPjtcblxuICAvKipcbiAgICogVGhpcyBmdW5jdGlvbiBtb3ZlcyB0aGUgY2FtZXJhIHRvIGEgc3BlY2lmaWMgc25hcHNob3QgaW4gdGhlIHRvdXIuXG4gICAqXG4gICAqIGBgYFxuICAgKiBjb25zdCBteVN0ZXAgPSAyO1xuICAgKiBtcFNkay5Ub3VyLnN0ZXAobXlTdGVwKVxuICAgKiAgIC50aGVuKGZ1bmN0aW9uKCkge1xuICAgKiAgICAgLy9Ub3VyIHN0ZXAgY29tcGxldGUuXG4gICAqICAgfSlcbiAgICogICAuY2F0Y2goZnVuY3Rpb24oZXJyb3IpIHtcbiAgICogICAgIC8vIFRvdXIgc3RlcCBlcnJvci5cbiAgICogICB9KTtcbiAgICogYGBgXG4gICAqXG4gICAqIEBlbWJlZFxuICAgKiBAYnVuZGxlXG4gICAqL1xuICBzdGVwKGluZGV4OiBudW1iZXIpOiBQcm9taXNlPHZvaWQ+O1xuXG4gIC8qKlxuICAgKiBUaGlzIGZ1bmN0aW9uIG1vdmVzIHRoZSBjYW1lcmEgdG8gdGhlIG5leHQgc25hcHNob3QgaW4gdGhlIHRvdXIuXG4gICAqXG4gICAqIGBgYFxuICAgKiBtcFNkay5Ub3VyLm5leHQoKVxuICAgKiAgIC50aGVuKGZ1bmN0aW9uKCkge1xuICAgKiAgICAgLy8gVG91ciBuZXh0IGNvbXBsZXRlLlxuICAgKiAgIH0pXG4gICAqICAgLmNhdGNoKGZ1bmN0aW9uKGVycm9yKSB7XG4gICAqICAgICAvLyBUb3VyIG5leHQgZXJyb3IuXG4gICAqICAgfSk7XG4gICAqIGBgYFxuICAgKlxuICAgKiBAZW1iZWRcbiAgICogQGJ1bmRsZVxuICAgKi9cbiAgbmV4dCgpOiBQcm9taXNlPHZvaWQ+O1xuXG4gIC8qKlxuICAgKiBUaGlzIGZ1bmN0aW9uIG1vdmVzIHRoZSBjYW1lcmEgdG8gdGhlIHByZXZpb3VzIHNuYXBzaG90IGluIHRoZSB0b3VyLlxuICAgKlxuICAgKiBgYGBcbiAgICogbXBTZGsuVG91ci5wcmV2KClcbiAgICogICAudGhlbihmdW5jdGlvbigpIHtcbiAgICogICAgIC8vIFRvdXIgcHJldiBjb21wbGV0ZS5cbiAgICogICB9KVxuICAgKiAgIC5jYXRjaChmdW5jdGlvbihlcnJvcikge1xuICAgKiAgICAgLy8gVG91ciBwcmV2IGVycm9yLlxuICAgKiAgIH0pO1xuICAgKiBgYGBcbiAgICpcbiAgICogQGVtYmVkXG4gICAqIEBidW5kbGVcbiAgICovXG4gIHByZXYoKTogUHJvbWlzZTx2b2lkPjtcblxuICAvKipcbiAgICogVGhpcyBmdW5jdGlvbiByZXR1cm5zIGFuIGFycmF5IG9mIFNuYXBzaG90cy5cbiAgICpcbiAgICogYGBgXG4gICAqIG1wU2RrLlRvdXIuZ2V0RGF0YSgpXG4gICAqICAgLnRoZW4oZnVuY3Rpb24oc25hcHNob3RzKSB7XG4gICAqICAgICAvLyBUb3VyIGdldERhdGEgY29tcGxldGUuXG4gICAqICAgICBpZihzbmFwc2hvdHMubGVuZ3RoID4gMCl7XG4gICAqICAgICAgIGNvbnNvbGUubG9nKCdGaXJzdCBzbmFwc2hvdCBzaWQ6ICcgKyBzbmFwc2hvdHNbMF0uc2lkKTtcbiAgICogICAgICAgY29uc29sZS5sb2coJ0ZpcnN0IHNuYXBzaG90IG5hbWU6ICcgKyBzbmFwc2hvdHNbMF0ubmFtZSk7XG4gICAqICAgICAgIGNvbnNvbGUubG9nKCdGaXJzdCBzbmFwc2hvdCBwb3NpdGlvbjogJyArIHNuYXBzaG90c1swXS5wb3NpdGlvbik7XG4gICAqICAgICB9XG4gICAqICAgfSlcbiAgICogICAuY2F0Y2goZnVuY3Rpb24oZXJyb3IpIHtcbiAgICogICAgIC8vIFRvdXIgZ2V0RGF0YSBlcnJvci5cbiAgICogICB9KTtcbiAgICogYGBgXG4gICAqXG4gICAqIEBlbWJlZFxuICAgKiBAYnVuZGxlXG4gICAqL1xuICBnZXREYXRhKCk6IFByb21pc2U8VG91ci5TbmFwc2hvdFtdPjtcblxuICAvKipcbiAgICogVGhlIHplcm8taW5kZXhlZCBjdXJyZW50IFRvdXIgc3RlcC5cbiAgICogVGhlIHN0ZXAgd2lsbCBiZSBudWxsIGlmIG5vIFRvdXIgaXMgY3VycmVudGx5IHBsYXlpbmcuXG4gICAqXG4gICAqIGBgYFxuICAgKiBtcFNkay5Ub3VyLmN1cnJlbnRTdGVwLnN1YnNjcmliZShmdW5jdGlvbiAoY3VycmVudCkge1xuICAgKiAgIC8vIHRoZSBzdGVwIGluZGV4IGhhcyBjaGFuZ2VkXG4gICAqICAgLy8gMCBmb3IgdGhlIGZpcnN0IHN0ZXAsIDEgZm9yIHRoZSBzZWNvbmQsIGV0Yy5cbiAgICogICBjb25zb2xlLmxvZygnQ3VycmVudCBzdGVwIGlzICcsIGN1cnJlbnQuc3RlcCk7XG4gICAqIH0pO1xuICAgKiBgYGBcbiAgICpcbiAgICogQGVtYmVkXG4gICAqIEBidW5kbGVcbiAgICogQGludHJvZHVjZWQgMy4xLjY4LjEyLTctZzg1ODY4ODk0NGFcbiAgICovXG4gIGN1cnJlbnRTdGVwOiBJT2JzZXJ2YWJsZTxUb3VyLkN1cnJlbnRTdGVwRGF0YT47XG5cbiAgLyoqXG4gICAqIEFuIG9ic2VydmFibGUgc3RhdGUgb2YgdGhlIGN1cnJlbnQgVG91ci4gUmV0dXJucyBhIFRvdXIuUGxheVN0YXRlIG9mXG4gICAqIGBJTkFDVElWRWAgKG5vIHRvdXIgaW4gcHJvZ3Jlc3MpLCBgQUNUSVZFYCAodG91ciBpbiBwcm9ncmVzcyksIG9yIGBTVE9QX1NDSEVEVUxFRGBcbiAgICogKHRvdXIgaW4gcHJvZ3Jlc3MsIGJ1dCBhIHN0b3AgaGFzIGJlZW4gcXVldWVkIGJ5IHRoZSB1c2VyIG9yIGF1dG9tYXRpY2FsbHkgYnkgdGhlIHRvdXIgZW5kaW5nKS5cbiAgICpcbiAgICogYGBgXG4gICAqIG1wU2RrLlRvdXIuc3RhdGUuc3Vic2NyaWJlKGZ1bmN0aW9uIChzdGF0ZSkge1xuICAgKiAgIC8vIHRoZSBzdGF0ZSBoYXMgY2hhbmdlZFxuICAgKiAgIGNvbnNvbGUubG9nKCdDdXJyZW50IHN0YXRlIGlzICcsIHN0YXRlLmN1cnJlbnQpO1xuICAgKiB9KTtcbiAgICogYGBgXG4gICAqXG4gICAqIEBlbWJlZFxuICAgKiBAYnVuZGxlXG4gICAqIEBpbnRyb2R1Y2VkIDMuMS42OC4xMi03LWc4NTg2ODg5NDRhXG4gICAqL1xuICBzdGF0ZTogSU9ic2VydmFibGU8VG91ci5DdXJyZW50U3RhdGVEYXRhPjtcblxuICAvKipcbiAgICogQW4gb2JzZXJ2YWJsZSByZXByZXNlbnRpbmcgdGhlIGN1cnJlbnQgVG91cidzIHRyYW5zaXRpb24uXG4gICAqXG4gICAqIGB7IGZyb206IHN0cmluZyB8IG51bGwsIHRvOiBzdHJpbmcgfCBudWxsIH1gLlxuICAgKlxuICAgKiBgZnJvbWAgY2FuIGJlIGBudWxsYCB3aGVuIHRyYW5zaXRpb25pbmcgZnJvbSBvdXRzaWRlIG9mIGEgdG91ci4gYGZyb21gIGFuZCBgdG9gIHdpbGwgYm90aCBiZSBgbnVsbGAgd2hlblxuICAgKiB0aGVyZSBpcyBubyBhY3RpdmUgdHJhbnNpdGlvbi5cbiAgICpcbiAgICogYGBgXG4gICAqIG1wU2RrLlRvdXIudHJhbnNpdGlvbi5zdWJzY3JpYmUoZnVuY3Rpb24gKHRyYW5zaXRpb24pIHtcbiAgICogICAvLyB0aGUgdHJhbnNpdGlvbiBoYXMgY2hhbmdlZFxuICAgKiAgIGNvbnNvbGUubG9nKCdDdXJyZW50IHRyYW5zaXRpb24gaXMgJywgdHJhbnNpdGlvbi5mcm9tLCB0cmFuc2l0aW9uLnRvKTtcbiAgICogfSk7XG4gICAqIGBgYFxuICAgKlxuICAgKiBAZW1iZWRcbiAgICogQGJ1bmRsZVxuICAgKiBAaW50cm9kdWNlZCAzLjEuNjguMTItNy1nODU4Njg4OTQ0YVxuICAgKi9cbiAgdHJhbnNpdGlvbjogSU9ic2VydmFibGU8VG91ci5DdXJyZW50VHJhbnNpdGlvbkRhdGE+O1xufVxuIiwiaW1wb3J0IHR5cGUgeyBDb2xvciwgSURpc3Bvc2FibGUsIElTdWJzY3JpcHRpb24sIFZlY3RvcjMgfSBmcm9tICcuL2dsb2JhbCc7XG5pbXBvcnQgdHlwZSAqIGFzIFRIUkVFIGZyb20gJ3RocmVlJztcbmltcG9ydCB0eXBlIHsgRWZmZWN0Q29tcG9zZXIgfSBmcm9tICd0aHJlZS9leGFtcGxlcy9qc20vcG9zdHByb2Nlc3NpbmcvRWZmZWN0Q29tcG9zZXInO1xuXG4vKipcbiAqIFRoZSBTY2VuZSBuYW1lc3BhY2UgaXMgY3VycmVudGx5IG9ubHkgYXZhaWxhYmxlIGZvciBCdW5kbGUgU0RLIGRpc3RyaWJ1dGlvbnMuXG4gKiBbTGVhcm4gbW9yZSBhYm91dCB0aGUgQnVuZGxlIFNES10oaHR0cHM6Ly9tYXR0ZXJwb3J0LmdpdGh1Yi5pby9zaG93Y2FzZS1zZGsvc2RrYnVuZGxlX2hvbWUuaHRtbClcbiAqL1xuZXhwb3J0IG5hbWVzcGFjZSBTY2VuZSB7XG4gIGV4cG9ydCBlbnVtIENvbXBvbmVudCB7XG4gICAgT0JKX0xPQURFUiA9ICdtcC5vYmpMb2FkZXInLFxuICAgIEZCWF9MT0FERVIgPSAnbXAuZmJ4TG9hZGVyJyxcbiAgICBEQUVfTE9BREVSID0gJ21wLmRhZUxvYWRlcicsXG4gICAgR0xURl9MT0FERVIgPSAnbXAuZ2x0ZkxvYWRlcicsXG4gICAgU0NST0xMSU5HX1RVQkUgPSAnbXAuc2Nyb2xsaW5nVHViZScsXG4gICAgVFJBTlNGT1JNX0NPTlRST0xTID0gJ21wLnRyYW5zZm9ybUNvbnRyb2xzJyxcbiAgICBMSUdIVFNfQ09NUE9ORU5UID0gJ21wLmxpZ2h0cycsXG4gICAgUE9JTlRfTElHSFQgPSAnbXAucG9pbnRMaWdodCcsXG4gICAgRElSRUNUSU9OQUxfTElHSFQgPSAnbXAuZGlyZWN0aW9uYWxMaWdodCcsXG4gICAgQU1CSUVOVF9MSUdIVCA9ICdtcC5hbWJpZW50TGlnaHQnLFxuICAgIENBTUVSQSA9ICdtcC5jYW1lcmEnLFxuICAgIElOUFVUID0gJ21wLmlucHV0JyxcbiAgICBYUiA9ICdtcC54cicsXG4gIH1cblxuICAvLyBBdXRvY29tcGxldGUgZm9yIG5hbWVkIGNvbXBvbmVudCBmYWN0b3JpZXNcbiAgZXhwb3J0IHR5cGUgU2NlbmVDb21wb25lbnROYW1lID1cbiAgICAvLyBhbnkgdmFsdWVzIGZyb20gQ29tcG9uZW50VHlwZSBlbnVtIC0gc2VlOlxuICAgIC8vIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS81MjM5NjcwNi8xODg0OTEzMFxuICAgIGAke0NvbXBvbmVudH1gXG4gICAgLy8gYWRkaW5nIGAoc3RyaW5nICYge30pYCBlbmFibGVzIGFueSBzdHJpbmcgdG8gYmUgdXNlZCB3aGlsZSBhbHNvIGluY2x1ZGluZ1xuICAgIC8vIGF1dG9jb21wbGV0ZSBvcHRpb25zIGZvciB0aGUgbGlzdGVkIHZhbHVlc1xuICAgIC8vIGxpbnQgcHJlZmVycyBSZWNvcmQ8c3RyaW5nLCBhbnk+IGJ1dCBmb3Igc29tZSByZWFzb24gdGhhdCBkb2Vzbid0IGV2YWx1YXRlXG4gICAgLy8gdGhlIHNhbWUgYXMgc3RyaW5nICYge30sIHNvIHdlJ3JlIHR1cm5pbmcgbGludGluZyBvZmYgZm9yIHRoZSBuZXh0IGxpbmVcbiAgICAvKiBlc2xpbnQtZGlzYWJsZSAqL1xuICAgIHwgKHN0cmluZyAmIHt9KTtcblxuICBpbnRlcmZhY2UgTGlnaHRDb21wb25lbnRDb21tb25PcHRpb25zIHtcbiAgICAvKiogSWYgdHJ1ZSB0aGUgYW1iaWVudCBsaWdodCBpcyBhY3RpdmUgaW4gdGhlIHNjZW5lLlxuICAgICAqXG4gICAgICogRGVmYXVsdCBgdHJ1ZWAgKi9cbiAgICBlbmFibGVkPzogYm9vbGVhbjtcbiAgICAvKiogVGhlIGNvbG9yIG9mIHRoZSBsaWdodC4gRWFjaCBjb2xvciBjb21wb25lbnQgaXMgYSBudW1iZXIgYmV0d2VlbiAwIGFuZCAxLlxuICAgICAqXG4gICAgICogRGVmYXVsdCBgeyByOiAxLjAsIGc6IDEuMCwgYjogMS4wIH1gXG4gICAgICovXG4gICAgY29sb3I/OiBDb2xvcjtcbiAgICAvKiogVGhlIGxpZ2h0IGludGVuc2l0eS5cbiAgICAgKlxuICAgICAqIERlZmF1bHQgYDEuMGAgZm9yIGFtYmllbnQgbGlnaHRzLCBgMmAgZm9yIG90aGVycy5cbiAgICAgKi9cbiAgICBpbnRlbnNpdHk/OiBudW1iZXI7XG4gIH1cbiAgaW50ZXJmYWNlIExvYWRlckNvbW1vbk9wdGlvbnMge1xuICAgIC8qKiBUaGUgdXJsIHRvIHRoZSBmaWxlLlxuICAgICAqXG4gICAgICogRGVmYXVsdCBgJydgXG4gICAgICovXG4gICAgdXJsPzogc3RyaW5nO1xuICAgIC8qKiBJZiB0cnVlLCB0aGUgbW9kZWwgaXMgdmlzaWJsZS5cbiAgICAgKlxuICAgICAqIERlZmF1bHQgYHRydWVgXG4gICAgICovXG4gICAgdmlzaWJsZT86IGJvb2xlYW47XG4gICAgLyoqIFRoZSBsb2NhbCBvZmZzZXQgb2YgdGhlIG1vZGVsLlxuICAgICAqXG4gICAgICogRGVmYXVsdCBgeyB4OiAwLCB5OiAwLCB6OiAwIH1gXG4gICAgICovXG4gICAgbG9jYWxQb3NpdGlvbj86IFZlY3RvcjM7XG4gICAgLyoqIFRoZSBsb2NhbCByb3RhdGlvbiBvZiB0aGUgbW9kZWwgaW4gZXVsZXIgYW5nbGVzLlxuICAgICAqXG4gICAgICogRGVmYXVsdCBgeyB4OiAwLCB5OiAwLCB6OiAwIH1gXG4gICAgICovXG4gICAgbG9jYWxSb3RhdGlvbj86IFZlY3RvcjM7XG4gICAgLyoqIFRoZSBsb2NhbCBzY2FsZSBvZiB0aGUgbW9kZWwuXG4gICAgICpcbiAgICAgKiBEZWZhdWx0IGB7IHg6IDEsIHk6IDEsIHo6IDEgfWBcbiAgICAgKi9cbiAgICBsb2NhbFNjYWxlPzogVmVjdG9yMztcbiAgICAvKiogV2hlbiBzZXQsIHRoZSBjb2xsaWRlciBvdXRwdXQgaXMgc2V0IHRvIHRoZSBsb2FkZWQgbW9kZWwuXG4gICAgICpcbiAgICAgKiBEZWZhdWx0IGB0cnVlYFxuICAgICAqL1xuICAgIGNvbGxpZGVyRW5hYmxlZD86IGJvb2xlYW47XG4gIH1cblxuICBleHBvcnQgaW50ZXJmYWNlIFNjZW5lQ29tcG9uZW50T3B0aW9ucyBleHRlbmRzIFJlY29yZDxTY2VuZUNvbXBvbmVudE5hbWUsIGFueT4ge1xuICAgIFtDb21wb25lbnQuQU1CSUVOVF9MSUdIVF06IExpZ2h0Q29tcG9uZW50Q29tbW9uT3B0aW9ucztcbiAgICBbQ29tcG9uZW50LkRJUkVDVElPTkFMX0xJR0hUXTogTGlnaHRDb21wb25lbnRDb21tb25PcHRpb25zICYge1xuICAgICAgLyoqIFRoZSB3b3JsZCBzcGFjZSBwb3NpdGlvbiBvZiB0aGUgZGlyZWN0aW9uYWwgbGlnaHQuXG4gICAgICAgKlxuICAgICAgICogRGVmYXVsdCBgeyB4OiAxLCB5OiA1LCB6OiAxfWBcbiAgICAgICAqL1xuICAgICAgcG9zaXRpb24/OiBWZWN0b3IzO1xuICAgICAgLyoqIFRoZSBkaXJlY3Rpb25hbCBsaWdodOKAmXMgd29ybGQgc3BhY2UgdGFyZ2V0IHBvc2l0aW9uLlxuICAgICAgICpcbiAgICAgICAqIERlZmF1bHQgYHsgeDogMCwgeTogMCwgejogMCB9YFxuICAgICAgICovXG4gICAgICB0YXJnZXQ/OiBWZWN0b3IzO1xuICAgICAgLyoqIEVuYWJsZXMgZGVidWdnaW5nIHZpc3VhbHMuXG4gICAgICAgKlxuICAgICAgICogRGVmYXVsdCBgZmFsc2VgXG4gICAgICAgKi9cbiAgICAgIGRlYnVnPzogYm9vbGVhbjtcbiAgICB9O1xuICAgIFtDb21wb25lbnQuUE9JTlRfTElHSFRdOiBMaWdodENvbXBvbmVudENvbW1vbk9wdGlvbnMgJiB7XG4gICAgICAvKiogVGhlIHdvcmxkIHNwYWNlIHBvc2l0aW9uIG9mIHRoZSBwb2ludCBsaWdodC5cbiAgICAgICAqXG4gICAgICAgKiBEZWZhdWx0IGB7IHg6IDEsIHk6IDUsIHo6IDEgfWBcbiAgICAgICAqL1xuICAgICAgcG9zaXRpb24/OiBWZWN0b3IzO1xuICAgICAgLyoqIE1heGltdW0gcmFuZ2Ugb2YgdGhlIGxpZ2h0LlxuICAgICAgICpcbiAgICAgICAqIERlZmF1bHQgYDBgIChubyBsaW1pdClcbiAgICAgICAqL1xuICAgICAgZGlzdGFuY2U/OiBudW1iZXI7XG4gICAgICAvKiogVGhlIGFtb3VudCB0aGUgbGlnaHQgZGltcyBmcm9tIHRoZSBwb2ludCBsaWdodC5cbiAgICAgICAqXG4gICAgICAgKiBEZWZhdWx0IGAxYFxuICAgICAgICovXG4gICAgICBkZWNheT86IG51bWJlcjtcbiAgICAgIC8qKiBFbmFibGVzIGRlYnVnZ2luZyB2aXN1YWxzLlxuICAgICAgICpcbiAgICAgICAqIERlZmF1bHQgYGZhbHNlYFxuICAgICAgICovXG4gICAgICBkZWJ1Zz86IGJvb2xlYW47XG4gICAgfTtcblxuICAgIFtDb21wb25lbnQuR0xURl9MT0FERVJdOiBMb2FkZXJDb21tb25PcHRpb25zO1xuICAgIFtDb21wb25lbnQuREFFX0xPQURFUl06IExvYWRlckNvbW1vbk9wdGlvbnM7XG4gICAgW0NvbXBvbmVudC5GQlhfTE9BREVSXTogTG9hZGVyQ29tbW9uT3B0aW9ucztcbiAgICBbQ29tcG9uZW50Lk9CSl9MT0FERVJdOiBMb2FkZXJDb21tb25PcHRpb25zICYge1xuICAgICAgLyoqIFRoZSB1cmwgdG8gdGhlIG1hdGVyaWFsIGZpbGUuXG4gICAgICAgKlxuICAgICAgICogRGVmYXVsdCBgJydgXG4gICAgICAgKi9cbiAgICAgIG1hdGVyaWFsVXJsPzogc3RyaW5nO1xuICAgIH07XG5cbiAgICBbQ29tcG9uZW50LlRSQU5TRk9STV9DT05UUk9MU106IHtcbiAgICAgIC8qKiBJZiB0cnVlIHRoZSB0cmFuc2Zvcm0gY29udHJvbCBpcyB2aXNpYmxlIGluIHRoZSBzY2VuZS5cbiAgICAgICAqXG4gICAgICAgKiBEZWZhdWx0IGB0cnVlYFxuICAgICAgICovXG4gICAgICB2aXNpYmxlPzogYm9vbGVhbjtcbiAgICAgIC8qKiBUaGUgdHJhbnNmb3JtYXRpb24gbW9kZS5cbiAgICAgICAqXG4gICAgICAgKiBEZWZhdWx0IGB0cmFuc2xhdGVgXG4gICAgICAgKi9cbiAgICAgIG1vZGU/OiAndHJhbnNsYXRlJyB8ICdyb3RhdGUnIHwgJ3NjYWxlJztcbiAgICAgIC8qKiBUaGUgdGhyZWUuanMgb2JqZWN0IGJlaW5nIGNvbnRyb2xsZWQgYnkgdGhpcyBjb21wb25lbnQuXG4gICAgICAgKlxuICAgICAgICogRGVmYXVsdCBgbnVsbGBcbiAgICAgICAqL1xuICAgICAgc2VsZWN0aW9uPzogVEhSRUUuT2JqZWN0M0QgfCBudWxsO1xuICAgICAgLyoqIFggYXhpcyBjb250cm9sIHZpc2liaWxpdHkuXG4gICAgICAgKlxuICAgICAgICogRGVmYXVsdCBgdHJ1ZWBcbiAgICAgICAqL1xuICAgICAgc2hvd1g/OiBib29sZWFuO1xuICAgICAgLyoqIFkgYXhpcyBjb250cm9sIHZpc2liaWxpdHkuXG4gICAgICAgKlxuICAgICAgICogRGVmYXVsdCBgdHJ1ZWBcbiAgICAgICAqL1xuICAgICAgc2hvd1k/OiBib29sZWFuO1xuICAgICAgLyoqIFogYXhpcyBjb250cm9sIHZpc2liaWxpdHkuXG4gICAgICAgKlxuICAgICAgICogRGVmYXVsdCBgdHJ1ZWBcbiAgICAgICAqL1xuICAgICAgc2hvd1o/OiBib29sZWFuO1xuICAgICAgLyoqIFRoZSBzaXplIG9mIHRoZSB0cmFuc2Zvcm0gY29udHJvbC5cbiAgICAgICAqXG4gICAgICAgKiBEZWZhdWx0IGAxYFxuICAgICAgICovXG4gICAgICBzaXplPzogbnVtYmVyO1xuICAgIH07XG5cbiAgICBbQ29tcG9uZW50LklOUFVUXToge1xuICAgICAgLyoqIElmIHRydWUsIGV2ZW50cyB3aWxsIGJlIGF2YWlsYWJsZSBmb3IgYmluZGluZyBvciBzcHlpbmcuIElmIGZhbHNlLCBubyBldmVudHMgd2lsbCBmaXJlLlxuICAgICAgICpcbiAgICAgICAqIERlZmF1bHQgYHRydWVgXG4gICAgICAgKi9cbiAgICAgIGV2ZW50c0VuYWJsZWQ/OiBib29sZWFuO1xuICAgICAgLyoqIElmIHNldCB0byBmYWxzZSwgYWxsIHNob3djYXNlIHVzZXIgYmFzZWQgbmF2aWdhdGlvbiB3aWxsIGJlIHR1cm5lZCBvZmYuXG4gICAgICAgKlxuICAgICAgICogRGVmYXVsdCBgdHJ1ZWBcbiAgICAgICAqL1xuICAgICAgdXNlck5hdmlnYXRpb25FbmFibGVkPzogYm9vbGVhbjtcbiAgICAgIC8qKiBJZiBzZXQgdG8gZmFsc2UsIHRoZSBpbnB1dCBjb21wb25lbnQgd2lsbCBvbmx5IHJlY2VpdmUgdW5oYW5kbGVkIGV2ZW50cy5cbiAgICAgICAqXG4gICAgICAgKiBEZWZhdWx0IGB0cnVlYFxuICAgICAgICovXG4gICAgICB1bmZpbHRlcmVkPzogYm9vbGVhbjtcbiAgICB9O1xuXG4gICAgW0NvbXBvbmVudC5DQU1FUkFdOiB7XG4gICAgICAvKiogSWYgdHJ1ZSwgdGhpcyBjb21wb25lbnRzIGFjcXVpcmVzIGNvbnRyb2wgb2YgdGhlIGNhbWVyYS5cbiAgICAgICAqXG4gICAgICAgKiBEZWZhdWx0IGBmYWxzZWBcbiAgICAgICAqL1xuICAgICAgZW5hYmxlZD86IGJvb2xlYW47XG4gICAgICAvKiogQSB0aHJlZS5qcyBjYW1lcmEgb2JqZWN0LlxuICAgICAgICpcbiAgICAgICAqIERlZmF1bHQgYG51bGxgXG4gICAgICAgKi9cbiAgICAgIGNhbWVyYT86IFRIUkVFLkNhbWVyYSB8IG51bGw7XG4gICAgfTtcblxuICAgIFtDb21wb25lbnQuWFJdOiBSZWNvcmQ8c3RyaW5nLCBuZXZlcj47XG5cbiAgICBbbmFtZTogc3RyaW5nXTogdW5rbm93bjtcbiAgfVxuXG4gIGV4cG9ydCB0eXBlIFByZWRlZmluZWRPdXRwdXRzID0ge1xuICAgIC8qKlxuICAgICAqIFNldCB0aGlzIHRvIGFueSBPYmplY3QzRCBhbmQgaXQgd2lsbCBiZSBhZGRlZCB0byB0aGUgc2NlbmUuXG4gICAgICovXG4gICAgb2JqZWN0Um9vdDogVEhSRUUuT2JqZWN0M0QgfCBudWxsO1xuXG4gICAgLyoqXG4gICAgICogU2V0IHRoaXMgdG8gYW55IE9iamVjdDNEIGFuZCBpdCB3aWxsIGJlIGludGVyYWN0YWJsZS4gU2VlIFtbSUNvbXBvbmVudC5vbkV2ZW50XV1cbiAgICAgKi9cbiAgICBjb2xsaWRlcjogVEhSRUUuT2JqZWN0M0QgfCBudWxsO1xuICB9O1xuXG4gIGV4cG9ydCBlbnVtIEludGVyYWN0aW9uVHlwZSB7XG4gICAgLyoqIENMSUNLIGV2ZW50cyAqL1xuICAgIENMSUNLID0gJ0lOVEVSQUNUSU9OLkNMSUNLJyxcbiAgICAvKiogSE9WRVIgZXZlbnRzICovXG4gICAgSE9WRVIgPSAnSU5URVJBQ1RJT04uSE9WRVInLFxuICAgIC8qKiBEUkFHIGV2ZW50cyAobW91c2Vkb3duIHRoZW4gbW92ZSkgKi9cbiAgICBEUkFHID0gJ0lOVEVSQUNUSU9OLkRSQUcnLFxuICAgIERSQUdfQkVHSU4gPSAnSU5URVJBQ1RJT04uRFJBR19CRUdJTicsXG4gICAgRFJBR19FTkQgPSAnSU5URVJBQ1RJT04uRFJBR19FTkQnLFxuICAgIFBPSU5URVJfTU9WRSA9ICdJTlRFUkFDVElPTi5QT0lOVEVSX01PVkUnLFxuICAgIFBPSU5URVJfQlVUVE9OID0gJ0lOVEVSQUNUSU9OLlBPSU5URVJfQlVUVE9OJyxcbiAgICBTQ1JPTEwgPSAnSU5URVJBQ1RJT04uU0NST0xMJyxcbiAgICBLRVkgPSAnSU5URVJBQ1RJT04uS0VZJyxcbiAgICBMT05HX1BSRVNTX1NUQVJUID0gJ0lOVEVSQUNUSU9OLkxPTkdfUFJFU1NfU1RBUlQnLFxuICAgIExPTkdfUFJFU1NfRU5EID0gJ0lOVEVSQUNUSU9OLkxPTkdfUFJFU1NfRU5EJyxcbiAgICBNVUxUSV9TV0lQRSA9ICdJTlRFUkFDVElPTi5NVUxUSV9TV0lQRScsXG4gICAgTVVMVElfU1dJUEVfRU5EID0gJ0lOVEVSQUNUSU9OLk1VTFRJX1NXSVBFX0VORCcsXG4gICAgUElOQ0ggPSAnSU5URVJBQ1RJT04uUElOQ0gnLFxuICAgIFBJTkNIX0VORCA9ICdJTlRFUkFDVElPTi5QSU5DSF9FTkQnLFxuICAgIFJPVEFURSA9ICdJTlRFUkFDVElPTi5ST1RBVEUnLFxuICAgIFJPVEFURV9FTkQgPSAnSU5URVJBQ1RJT04uUk9UQVRFX0VORCcsXG4gIH1cblxuICAvKipcbiAgICogVGhlIHBheWxvYWQgZm9yIGEgM0QgaW50ZXJhY3Rpb24gZXZlbnQuXG4gICAqL1xuICBleHBvcnQgdHlwZSBJbnRlcmFjdGlvbkV2ZW50ID0ge1xuICAgIGhvdmVyPzogYm9vbGVhbjtcbiAgICBjb2xsaWRlcjogVEhSRUUuT2JqZWN0M0Q7XG4gICAgcG9pbnQ6IFRIUkVFLlZlY3RvcjMgfCBudWxsO1xuICAgIG5vcm1hbDogVEhSRUUuVmVjdG9yMyB8IG51bGw7XG4gICAgaW5wdXQ6IHVua25vd247XG4gIH07XG5cbiAgLyoqXG4gICAqIFRoZSB0eXBlIG9mIGEgcGF0aCB3aXRoIHJlZ2FyZHMgdG8gd2hpY2ggcHJvcGVydHkgb2YgYSBjb21wb25lbnQgaXQgcmVwcmVzZW50c1xuICAgKi9cbiAgZXhwb3J0IGVudW0gUGF0aFR5cGUge1xuICAgIElOUFVUID0gJ2lucHV0JyxcbiAgICBPVVRQVVQgPSAnb3V0cHV0JyxcbiAgICBFVkVOVCA9ICdldmVudCcsXG4gICAgRU1JVCA9ICdlbWl0JyxcbiAgfVxuXG4gIC8qKlxuICAgKiAqKlNjZW5lIE5vZGUqKlxuICAgKlxuICAgKiBBIHNjZW5lIG5vZGUgaXMgYW4gb2JqZWN0IHdpdGggYSAzRCB0cmFuc2Zvcm06IHBvc2l0aW9uLCByb3RhdGlvbiwgYW5kIHNjYWxlLlxuICAgKiBJdCBjYW4gY29udGFpbiBhIGNvbGxlY3Rpb24gb2YgY29tcG9uZW50cyBhbmQgbWFuYWdlcyB0aGVpciBsaWZlIGN5Y2xlLlxuICAgKlxuICAgKiBBIHNjZW5lIG5vZGUgaGFzIHRoZSBmb2xsb3dpbmcgc3RhdGVzOlxuICAgKlxuICAgKiAqKkluaXRpYWxpemluZyoqIC0gYWZ0ZXIgY29uc3RydWN0aW9uIGJ1dCBiZWZvcmUgc3RhcnQgaGFzIGJlZW4gY2FsbGVkPGJyPlxuICAgKiAqKlVwZGF0aW5nKiogLSBhZnRlciBzdGFydCBoYXMgYmVlbiBjYWxsZWQgYnV0IGJlZm9yZSBzdG9wIGhhcyBiZWVuIGNhbGxlZDxicj5cbiAgICogKipEZXN0cm95ZWQqKiAtIGFmdGVyIHN0b3AgaGFzIGJlZW4gY2FsbGVkXG4gICAqXG4gICAqIENvbXBvbmVudHMgY2FuIG9ubHkgYmUgYWRkZWQgZHVyaW5nIHRoZSBJbml0aWFsaXppbmcgc3RhdGUuIEEgc2NlbmUgbm9kZSBjYW5ub3QgYmUgcmVzdGFydGVkLlxuICAgKlxuICAgKiBgYGBcbiAgICogc2RrLlNjZW5lLmNyZWF0ZU5vZGUoKS50aGVuKGZ1bmN0aW9uKG5vZGUpIHtcbiAgICogICAgbm9kZS5hZGRDb21wb25lbnQoJ21wLmdsdGZMb2FkZXInLCB7XG4gICAqICAgICAgdXJsOiAnaHR0cDovL3d3dy5zb21lTW9kZWxTaXRlLmNvbS9yYWJiaXQuZ2x0ZidcbiAgICogICAgfSk7XG4gICAqXG4gICAqICAgIG5vZGUucG9zaXRpb24uc2V0KDAsIDEsIDApO1xuICAgKiAgICBub2RlLnN0YXJ0KCk7XG4gICAqIH0pO1xuICAgKiBgYGBcbiAgICpcbiAgICogU2V0dGluZyB0aGUgcG9zaXRpb24sIHJvdGF0aW9uLCBvciBzY2FsZSBvZiBhIHNjZW5lIG5vZGUgYWZmZWN0cyBjaGlsZCBjb21wb25lbnRzLlxuICAgKlxuICAgKi9cbiAgZXhwb3J0IGludGVyZmFjZSBJTm9kZSB7XG4gICAgLyoqXG4gICAgICogSW5zdGFudGlhdGVzIGEgY29tcG9uZW50IGFuZCBhZGRzIGl0IHRvIHRoZSBub2RlcyBpbnRlcm5hbCBjb21wb25lbnQgbGlzdC5cbiAgICAgKiBUaGlzIGZ1bmN0aW9uIGRvZXMgbm90aGluZyBpZiB0aGUgbm9kZSBpcyBpbiB0aGUgT3BlcmF0aW5nIG9yIERlc3Ryb3llZCBzdGF0ZS5cbiAgICAgKiBAcGFyYW0gbmFtZSBUaGUgcmVnaXN0ZXJlZCBjb21wb25lbnQgbmFtZS5cbiAgICAgKiBAcGFyYW0gaW5pdGlhbElucHV0cyBpbml0aWFsIGtleS12YWx1ZSBwYWlycyB0aGF0IHdpbGwgYmUgYXBwbGllZCB0byB0aGUgY29tcG9uZW50IGJlZm9yZSBvbkluaXQgaXMgY2FsbGVkLlxuICAgICAqIElmIHRoZSBrZXlzIGRvIG5vdCBtYXRjaCB0aGUgY29tcG9uZW50cyBpbnB1dHMsIHRoZXkgYXJlIGlnbm9yZWQuXG4gICAgICogQHBhcmFtIGlkIGFuIG9wdGlvbmFsIGlkIGZvciB0aGlzIGNvbXBvbmVudCwgaWYgbm90IHNwZWNpZmllZCBhbiBpZCB3aWxsIGJlIGNvbXB1dGVkIGZvciB0aGUgY29tcG9uZW50LlxuICAgICAqXG4gICAgICogQHJldHVybnMgVGhlIG5ld2x5IGNyZWF0ZWQgY29tcG9uZW50LlxuICAgICAqL1xuICAgIGFkZENvbXBvbmVudDxUIGV4dGVuZHMgU2NlbmVDb21wb25lbnROYW1lPihcbiAgICAgIG5hbWU6IFQsXG4gICAgICBpbml0aWFsSW5wdXRzPzogU2NlbmVDb21wb25lbnRPcHRpb25zW1RdLFxuICAgICAgaWQ/OiBzdHJpbmdcbiAgICApOiBJQ29tcG9uZW50O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBpbiBpdGVyYXRvciBpdGVyYXRpbmcgb3ZlciBhbGwgdGhlIGNvbXBvbmVudHMgY29udGFpbmVkIGJ5IHRoaXMgbm9kZS5cbiAgICAgKi9cbiAgICBjb21wb25lbnRJdGVyYXRvcigpOiBJdGVyYWJsZUl0ZXJhdG9yPElDb21wb25lbnQ+O1xuXG4gICAgLyoqXG4gICAgICogVHJhbnNpdGlvbnMgdGhlIG5vZGUgdG8gT3BlcmF0aW5nIGlmIGl0IGlzIGluIHRoZSBJbml0aWFsaXppbmcgc3RhdGUuXG4gICAgICogQ2FsbGluZyB0aGlzIGZ1bmN0aW9uIGhhcyBubyBlZmZlY3QgaWYgdGhlIG5vZGUgaXMgYWxyZWFkeSBPcGVyYXRpbmcuXG4gICAgICovXG4gICAgc3RhcnQoKTogdm9pZDtcblxuICAgIC8qKlxuICAgICAqIFRyYW5zaXRpb25zIHRoZSBub2RlIHRvIERlc3Ryb3llZCBzdGF0ZSBpZiBpdCBpcyBpbiBhbnkgc3RhdGUuXG4gICAgICogQ2FsbGluZyB0aGlzIGZ1bmN0aW9uIGhhcyBubyBlZmZlY3QgaWYgdGhlIG5vZGUgaXMgYWxyZWFkeSBEZXN0cm95ZWQuXG4gICAgICovXG4gICAgc3RvcCgpOiB2b2lkO1xuXG4gICAgLyoqXG4gICAgICogVGhlIG5vZGUgbmFtZS5cbiAgICAgKi9cbiAgICBuYW1lOiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgc2NlbmUgbm9kZSBwb3NpdGlvbi4gWW91IGNhbiBjYWxsIG1ldGhvZHMgb24gdGhpcyBvYmplY3QgdG8gc2V0IGl0cyB2YWx1ZXMuXG4gICAgICogU2VlIDxodHRwczovL3RocmVlanMub3JnL2RvY3MvI2FwaS9lbi9tYXRoL1ZlY3RvcjM+XG4gICAgICovXG4gICAgcmVhZG9ubHkgcG9zaXRpb246IFRIUkVFLlZlY3RvcjM7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgc2NlbmUgbm9kZSByb3RhdGlvbi4gWW91IGNhbiBjYWxsIG1ldGhvZHMgb24gdGhpcyBvYmplY3QgdG8gc2V0IGl0cyB2YWx1ZXMuXG4gICAgICogU2VlIDxodHRwczovL3RocmVlanMub3JnL2RvY3MvI2FwaS9lbi9tYXRoL1F1YXRlcm5pb24+XG4gICAgICovXG4gICAgcmVhZG9ubHkgcXVhdGVybmlvbjogVEhSRUUuUXVhdGVybmlvbjtcblxuICAgIC8qKlxuICAgICAqIFRoZSBzY2VuZSBub2RlIHNjYWxlIHZlY3Rvci4gWW91IGNhbiBjYWxsIG1ldGhvZHMgb24gdGhpcyBvYmplY3QgdG8gc2V0IGl0cyB2YWx1ZXMuXG4gICAgICogU2VlIDxodHRwczovL3RocmVlanMub3JnL2RvY3MvI2FwaS9lbi9tYXRoL1ZlY3RvcjM+XG4gICAgICovXG4gICAgcmVhZG9ubHkgc2NhbGU6IFRIUkVFLlZlY3RvcjM7XG5cbiAgICAvKipcbiAgICAgKiBBIHJlYWQtb25seSB1bmlxdWUgaWQgdXNlZCB0byByZWZlcmVuY2UgdGhpcyBub2RlIGluIGEgcGF0aCBiaW5kaW5nLlxuICAgICAqIFRoaXMgaWQgaXMgYXV0b2dlbmVyYXRlZCB1bmxlc3MgaXQgaXMgc3BlY2lmZWQgYW5kIGNyZWF0ZWQgdmlhIHRoZSBTY2VuZS5PYmplY3QuXG4gICAgICovXG4gICAgcmVhZG9ubHkgaWQ6IHN0cmluZztcbiAgfVxuXG4gIC8qKlxuICAgKiAqKkNvbXBvbmVudCBDb250ZXh0Kio8YnI+XG4gICAqIFRoZSBjb250ZXh0IG9iamVjdCBjb250YWlucyB0aGUgdGhyZWUuanMgbW9kdWxlIGFuZCB0aGUgbWFpbiBhc3BlY3RzIG9mIHRoZSByZW5kZXJpbmcgZW5naW5lLjxicj5cbiAgICogVGhlIGNhbWVyYSwgc2NlbmUsIG9yIHJlbmRlcmVyIG1heSB3aWxsIGxpa2VseSBiZSByZXBsYWNlZCBpbiB0aGUgZnV0dXJlIHdpdGggYW4gc2RrIG1vZHVsZS5cbiAgICpcbiAgICogYGBgXG4gICAqIGZ1bmN0aW9uIEN5bGluZGVyKCkge1xuICAgKiAgICB0aGlzLm9uSW5pdCA9IGZ1bmN0aW9uKCkge1xuICAgKiAgICAgIHZhciBUSFJFRSA9IHRoaXMuY29udGV4dC50aHJlZTtcbiAgICogICAgICB2YXIgZ2VvbWV0cnkgPSBuZXcgVEhSRUUuQ3lsaW5kZXJHZW9tZXRyeSggNSwgNSwgMjAsIDMyICk7XG4gICAqICAgICAgdmFyIG1hdGVyaWFsID0gbmV3IFRIUkVFLk1lc2hCYXNpY01hdGVyaWFsKCB7Y29sb3I6IDB4ZmZmZjAwfSApO1xuICAgKiAgICAgIHZhciBjeWxpbmRlciA9IG5ldyBUSFJFRS5NZXNoKCBnZW9tZXRyeSwgbWF0ZXJpYWwgKTtcbiAgICogICAgfTtcbiAgICogfVxuICAgKiBgYGBcbiAgICovXG4gIGV4cG9ydCBpbnRlcmZhY2UgSUNvbXBvbmVudENvbnRleHQge1xuICAgIC8qKlxuICAgICAqIFRoZSB0aHJlZS5qcyBtb2R1bGUuXG4gICAgICovXG4gICAgdGhyZWU6IHR5cGVvZiBUSFJFRTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBzaG93Y2FzZSB0aHJlZS5qcyByZW5kZXJlci48YnI+XG4gICAgICogU2VlIDxhIGhyZWY9XCJodHRwczovL3RocmVlanMub3JnL2RvY3MvI2FwaS9lbi9yZW5kZXJlcnMvV2ViR0xSZW5kZXJlclwiIHRhcmdldD1cIl9ibGFua1wiPmh0dHBzOi8vdGhyZWVqcy5vcmcvZG9jcy8jYXBpL2VuL3JlbmRlcmVycy9XZWJHTFJlbmRlcmVyPC9hPlxuICAgICAqL1xuICAgIHJlbmRlcmVyOiBUSFJFRS5XZWJHTFJlbmRlcmVyO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHNob3djYXNlIHNjZW5lLjxicj5cbiAgICAgKiBTZWUgPGEgaHJlZj1cImh0dHBzOi8vdGhyZWVqcy5vcmcvZG9jcy8jYXBpL2VuL3NjZW5lcy9TY2VuZVwiIHRhcmdldD1cIl9ibGFua1wiPmh0dHBzOi8vdGhyZWVqcy5vcmcvZG9jcy8jYXBpL2VuL3NjZW5lcy9TY2VuZTwvYT5cbiAgICAgKlxuICAgICAqL1xuICAgIHNjZW5lOiBUSFJFRS5TY2VuZTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBtYWluIGNhbWVyYS4gSXQgaXMgcmVhZC1vbmx5Ljxicj5cbiAgICAgKiBTZWUgPGEgaHJlZj1cImh0dHBzOi8vdGhyZWVqcy5vcmcvZG9jcy8jYXBpL2VuL2NhbWVyYXMvQ2FtZXJhXCIgdGFyZ2V0PVwiX2JsYW5rXCI+aHR0cHM6Ly90aHJlZWpzLm9yZy9kb2NzLyNhcGkvZW4vY2FtZXJhcy9DYW1lcmE8L2E+XG4gICAgICovXG4gICAgY2FtZXJhOiBUSFJFRS5DYW1lcmE7XG4gIH1cbiAgLyoqXG4gICAqIElDb21wb25lbnRcbiAgICpcbiAgICogVXNlIHRoaXMgaW50ZXJmYWNlIHRvIGltcGxlbWVudCBhIGNvbXBvbmVudCBhbmQgcmVnaXN0ZXIgaXQgd2l0aCB0aGUgc2RrLlxuICAgKlxuICAgKiBgYGBcbiAgICogZnVuY3Rpb24gQm94KCkge1xuICAgKiAgICB0aGlzLmlucHV0cyA9IHtcbiAgICogICAgICB2aXNpYmxlOiBmYWxzZSxcbiAgICogICAgfTtcbiAgICpcbiAgICogICAgdGhpcy5vbkluaXQgPSBmdW5jdGlvbigpIHtcbiAgICogICAgICB2YXIgVEhSRUUgPSB0aGlzLmNvbnRleHQudGhyZWU7XG4gICAqICAgICAgdmFyIGdlb21ldHJ5ID0gbmV3IFRIUkVFLkJveEdlb21ldHJ5KDEsIDEsIDEpO1xuICAgKiAgICAgIHRoaXMubWF0ZXJpYWwgPSBuZXcgVEhSRUUuTWVzaEJhc2ljTWF0ZXJpYWwoKTtcbiAgICogICAgICB2YXIgbWVzaCA9IG5ldyBUSFJFRS5NZXNoKCBnZW9tZXRyeSwgdGhpcy5tYXRlcmlhbCApO1xuICAgKiAgICAgIHRoaXMub3V0cHV0cy5vYmplY3RSb290ID0gbWVzaDtcbiAgICogICAgfTtcbiAgICpcbiAgICogICAgdGhpcy5vbkV2ZW50ID0gZnVuY3Rpb24odHlwZSwgZGF0YSkge1xuICAgKiAgICB9XG4gICAqXG4gICAqICAgIHRoaXMub25JbnB1dHNVcGRhdGVkID0gZnVuY3Rpb24ocHJldmlvdXMpIHtcbiAgICogICAgfTtcbiAgICpcbiAgICogICAgdGhpcy5vblRpY2sgPSBmdW5jdGlvbih0aWNrRGVsdGEpIHtcbiAgICogICAgfVxuICAgKlxuICAgKiAgICB0aGlzLm9uRGVzdHJveSA9IGZ1bmN0aW9uKCkge1xuICAgKiAgICAgIHRoaXMubWF0ZXJpYWwuZGlzcG9zZSgpO1xuICAgKiAgICB9O1xuICAgKiB9XG5cbiAgICogZnVuY3Rpb24gQm94RmFjdG9yeSgpIHtcbiAgICogICAgcmV0dXJuIG5ldyBCb3goKTtcbiAgICogfVxuICAgKlxuICAgKiAvLyBSZWdpc3RlcmluZyB0aGUgY29tcG9uZW50IHdpdGggdGhlIHNka1xuICAgKiBzZGsuU2NlbmUucmVnaXN0ZXIoJ2JveCcsIEJveEZhY3RvcnkpO1xuICAgKlxuICAgKiBgYGBcbiAgICovXG4gIGV4cG9ydCBpbnRlcmZhY2UgSUNvbXBvbmVudCB7XG4gICAgLyoqXG4gICAgICogVGhlIGNvbXBvbmVudCB0eXBlLiBUaGlzIHZhbHVlIGlzIHRoZSBzYW1lIHN0cmluZyB1c2VkIHRvIGlkZW50aWZ5IHRoZSBjb21wb25lbnQgZmFjdG9yeS5cbiAgICAgKi9cbiAgICByZWFkb25seSBjb21wb25lbnRUeXBlOiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBBbiBvcHRpb25hbCBkaWN0aW9uYXJ5IG9mIHByb3BlcnRpZXMgdGhhdCBhZmZlY3RzIHRoZSBiZWhhdmlvciBvZiB0aGUgY29tcG9uZW50LlxuICAgICAqIFRoZXNlIHByb3BlcnRpZXMgY2FuIGJlIGNoYW5nZWQgYnkgYW4gZXh0ZXJuYWwgc291cmNlIGF0IGFueSB0aW1lLiBJdCBpcyB1cCB0byB0aGUgY29tcG9uZW50XG4gICAgICogdG8gcmVzcG9uZCBhcHByb3ByaWF0ZWx5IHRvIHRoZSBjaGFuZ2VzLiBUaGVzZSBpbnB1dCBwcm9wZXJ0aWVzIGNhbiBhbHNvIGJlIGJpbmQgdGFyZ2V0cyB0byBhblxuICAgICAqIG9ic2VydmFibGUgc291cmNlIGUuZy4gdGhlIG91dHB1dCBwcm9wZXJ0eSBvZiBhbm90aGVyIGNvbXBvbmVudC5cbiAgICAgKi9cbiAgICBpbnB1dHM/OiBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPjtcblxuICAgIC8qKlxuICAgICAqIEFuIG9wdGlvbmFsIGRpY3Rpb25hcnkgb2YgcHJvcGVydGllcyB0aGF0IHRoaXMgY29tcG9uZW50IGNvbXB1dGVzLlxuICAgICAqIFRoaXMgZGljdGlvbmFyeSBpcyBvYnNlcnZhYmxlIGFuZCBjYW4gYmUgdGhlIHNvdXJjZSBvZiBhIGJpbmQgdGFyZ2V0LlxuICAgICAqXG4gICAgICogb2JqZWN0Um9vdCBhbmQgY29sbGlkZXIgYXJlIHJlc2VydmVkIHByb3BlcnRpZXMgd2hpY2ggYXJlIGFkZGVkIHRvIGFsbCBjb21wb25lbnRzIGF1dG9tYXRpY2FsbHkuXG4gICAgICogVGhlIHZhbHVlIHNldCB0byBvYmplY3RSb290IHdpbGwgZ2V0IGFkZGVkIHRvIHRoZSBzY2VuZSBncmFwaCBhcyBhIGNoaWxkIG9mIHRoZSBzY2VuZSBub2RlLlxuICAgICAqIFRoZSB2YWx1ZSBzZXQgdG8gY29sbGlkZXIgd2lsbCBnZXQgaW5jbHVkZWQgaW4gcmF5Y2FzdCBoaXQgZGV0ZWN0aW9uLlxuICAgICAqXG4gICAgICogYGBgXG4gICAgICogZnVuY3Rpb24gQm94KCkge1xuICAgICAqICAgIHRoaXMub25Jbml0ID0gZnVuY3Rpb24oKSB7XG4gICAgICogICAgICB2YXIgVEhSRUUgPSB0aGlzLmNvbnRleHQudGhyZWU7XG4gICAgICogICAgICB2YXIgZ2VvbWV0cnkgPSBuZXcgVEhSRUUuQm94R2VvbWV0cnkoMSwgMSwgMSk7XG4gICAgICogICAgICB0aGlzLm1hdGVyaWFsID0gbmV3IFRIUkVFLk1lc2hCYXNpY01hdGVyaWFsKCk7XG4gICAgICogICAgICB2YXIgbWVzaCA9IG5ldyBUSFJFRS5NZXNoKCBnZW9tZXRyeSwgdGhpcy5tYXRlcmlhbCApO1xuICAgICAqXG4gICAgICogICAgICB0aGlzLm91dHB1dHMub2JqZWN0Um9vdCA9IG1lc2g7ICAgLy8gZ2V0cyBhZGRlZCB0byB0aGUgc2NlbmUgbm9kZVxuICAgICAqICAgICAgdGhpcy5vdXRwdXRzLmNvbGxpZGVyID0gbWVzaDsgICAgIC8vIHdpbGwgbm93IGJlIHBhcnQgb2YgcmF5Y2FzdCB0ZXN0aW5nXG4gICAgICogICAgfVxuICAgICAqIH1cbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBvdXRwdXRzOiBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPiAmIFByZWRlZmluZWRPdXRwdXRzO1xuXG4gICAgLyoqXG4gICAgICogQW4gb3B0aW9uYWwgZGljdGlvbmFyeSBvZiBldmVudHMgdGhhdCB0aGlzIGNvbXBvbmVudCBoYW5kbGVzIHRocm91Z2ggaXRzIGBvbkV2ZW50YC5cbiAgICAgKiBTZXR0aW5nIGFuIGV2ZW50IHRvIGEgZmFsc3kgdmFsdWUgdGVtcG9yYXJpbHkgc3RvcHMgdGhpcyBjb21wb25lbnQgZnJvbSByZWNlaXZpbmcgc2FpZCBldmVudC5cbiAgICAgKi9cbiAgICBldmVudHM6IFJlY29yZDxzdHJpbmcsIGJvb2xlYW4+O1xuXG4gICAgLyoqXG4gICAgICogQW4gb3B0aW9uYWwgZGljdGlvbmFyeSBvZiBldmVudHMgZW1pdHRlZCBieSB0aGlzIGNvbXBvbmVudC5cbiAgICAgKiBTZXR0aW5nIGFuIGVtaXQgdG8gYSBmYWxzeSB2YWx1ZSB3aWxsIHByZXZlbnQgdGhlIGNvbXBvbmVudCBmcm9tIGVtaXR0aW5nIHRoZSBldmVudCB3aGVuIHVzaW5nIGAubm90aWZ5YC5cbiAgICAgKiBUaGVzZSBwcm9wZXJ0aWVzIGNhbiBiZSBjaGFuZ2VkIGJ5IGFuIGV4dGVybmFsIHNvdXJjZSBhdCBhbnkgdGltZS5cbiAgICAgKiBJZiB0aGlzIGRpY3Rpb25hcnkgaXMgb21pdHRlZCwgYW55IGFuZCBhbGwgZXZlbnRzIHdpbGwgYmUgZW1pdHRlZCBmcm9tIGAubm90aWZ5YC5cbiAgICAgKi9cbiAgICBlbWl0cz86IFJlY29yZDxzdHJpbmcsIGJvb2xlYW4+O1xuXG4gICAgLyoqXG4gICAgICogVGhlIGNvbnRleHQgcHJvdmlkZXMgYWNjZXNzIHRvIHRoZSB1bmRlcmx5aW5nIHJlbmRlcmluZyBlbmdpbmUuIFRoZSBzZGsgZnJhbWV3b3JrIGFkZHMgaXRcbiAgICAgKiB0byB0aGUgY29tcG9uZW50IGR1cmluZyBjb25zdHJ1Y3Rpb24uXG4gICAgICovXG4gICAgY29udGV4dDogSUNvbXBvbmVudENvbnRleHQ7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIGZ1bmN0aW9uIGlzIGNhbGxlZCBvbmNlIGFmdGVyIHRoZSBzY2VuZSBub2RlIGl0cyBhdHRhY2hlZCB0byBoYXMgc3RhcnRlZC5cbiAgICAgKi9cbiAgICBvbkluaXQ/KCk6IHZvaWQ7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIGZ1bmN0aW9uIGlzIGNhbGxlZCBvbmNlIGZvciBlYWNoIGludGVyYWN0aW9uIG9yIGV2ZW50IHRoYXQgb2NjdXJyZWQgZHVyaW5nIHRoZSBsYXN0IGZyYW1lLlxuICAgICAqIFRoZSBjb21wb25lbnQgbXVzdCBzZXQgb3V0cHV0cy5jb2xsaWRlciB3aXRoIGFuIE9iamVjdDNEIHRvIGdldCBpbnRlcmFjdGlvbiBjYWxsYmFja3Mgb3IgYmluZEV2ZW50IHRvIHJlY2VpdmUgb3RoZXIgZXZlbnRzLlxuICAgICAqL1xuICAgIG9uRXZlbnQ/KGV2ZW50VHlwZTogc3RyaW5nIHwgSW50ZXJhY3Rpb25UeXBlLCBldmVudERhdGE/OiB1bmtub3duKTogdm9pZDtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgZnVuY3Rpb24gaXMgY2FsbGVkIGFmdGVyIG9uZSBvciBtb3JlIGlucHV0IHByb3BlcnRpZXMgaGF2ZSBjaGFuZ2VkLlxuICAgICAqIEl0IHdpbGwgYmUgY2FsbGVkIGF0IG1vc3Qgb25jZSBhIGZyYW1lLlxuICAgICAqL1xuICAgIG9uSW5wdXRzVXBkYXRlZD8ocHJldmlvdXNJbnB1dHM6IFJlY29yZDxzdHJpbmcsIHVua25vd24+KTogdm9pZDtcblxuICAgIC8qKlxuICAgICAqICBUaGlzIGZ1bmN0aW9uIGlzIGNhbGxlZCBvbmNlIGEgZnJhbWUgYWZ0ZXIgaW5wdXQgY2hhbmdlcyBoYXZlIGJlZW4gZGV0ZWN0ZWQuXG4gICAgICovXG4gICAgb25UaWNrPyh0aWNrRGVsdGE6IG51bWJlcik6IHZvaWQ7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIGZ1bmN0aW9uIGlzIGNhbGxlZCBvbmNlIHJpZ2h0IGJlZm9yZSB0aGUgc2NlbmUgbm9kZSBoYXMgc3RvcHBlZC5cbiAgICAgKi9cbiAgICBvbkRlc3Ryb3k/KCk6IHZvaWQ7XG5cbiAgICAvKipcbiAgICAgKiBDYWxsIHRoaXMgZnVuY3Rpb24gdG8gYmluZCBhbiBpbnB1dCBwcm9wZXJ0eSB0byBhbiBvdXRwdXQgcHJvcGVydHkgb24gYW5vdGhlclxuICAgICAqIGNvbXBvbmVudC5cbiAgICAgKlxuICAgICAqIGBgYFxuICAgICAqIGNvbnN0IFtzY2VuZU9iamVjdF0gPSBhd2FpdCBzZGsuU2NlbmUuY3JlYXRlT2JqZWN0cygxKTtcbiAgICAgKiBjb25zdCBub2RlMSA9IHNjZW5lT2JqZWN0LmNyZWF0ZU5vZGUoKTtcbiAgICAgKiBjb25zdCBub2RlMiA9IHNjZW5lT2JqZWN0LmNyZWF0ZU5vZGUoKTtcbiAgICAgKlxuICAgICAqIC8vIG1wLm9iakxvYWRlciBoYXMgYW4gb3V0cHV0cy52aXNpYmxlIHByb3BlcnR5XG4gICAgICogY29uc3QgY29tcDEgPSBub2RlMS5hZGRDb21wb25lbnQoJ21wLm9iakxvYWRlcicpO1xuICAgICAqXG4gICAgICogLy8gbXlDb21wb25lbnQgaGFzIGFuIGlucHV0cy50b2dnbGVTdGF0ZSBwcm9wZXJ0eVxuICAgICAqIGNvbnN0IGNvbXAyID0gbm9kZTIuYWRkQ29tcG9uZW50KCdteUNvbXBvbmVudCcpO1xuICAgICAqXG4gICAgICogY29tcDEuYmluZCgndmlzaWJsZScsIGNvbXAyLCAndG9nZ2xlU3RhdGUnKTtcbiAgICAgKlxuICAgICAqIG5vZGUxLnN0YXJ0KCk7XG4gICAgICogbm9kZTIuc3RhcnQoKTtcbiAgICAgKlxuICAgICAqIC8vIGNvbXAxLmlucHV0cy52aXNpYmxlIHdpbGwgbm93IGFsd2F5cyBlcXVhbCBjb21wMi5vdXRwdXRzLnRvZ2dsZVN0YXRlXG4gICAgICogfSk7XG4gICAgICpcbiAgICAgKiBgYGBcbiAgICAgKiBAcGFyYW0gcHJvcCBpbnB1dHMgcHJvcGVydHkgbmFtZVxuICAgICAqIEBwYXJhbSBzcmMgc291cmNlIGNvbXBvbmVudFxuICAgICAqIEBwYXJhbSBzcmNQcm9wIHNvdXJjZSBvdXRwdXRzIHByb3BlcnR5IG5hbWVcbiAgICAgKiBAZGVwcmVjYXRlZCBVc2UgW1tJT2JqZWN0LmJpbmRQYXRoXV0gaW5zdGVhZC5cbiAgICAgKi9cbiAgICBiaW5kKHByb3A6IHN0cmluZywgc3JjOiBJQ29tcG9uZW50LCBzcmNQcm9wOiBzdHJpbmcpOiB2b2lkO1xuXG4gICAgLyoqXG4gICAgICogTm90aWZpZXMgdGhpcyBjb21wb25lbnQgb2YgYW4gYGV2ZW50VHlwZWAgd2hlbiB0aGUgYHNyY2AgQ29tcG9uZW50IGNhbGxzIGBub3RpZnlgIHdpdGggYSBgc3JjRXZlbnRUeXBlYCBldmVudFxuICAgICAqIEBkZXByZWNhdGVkIFVzZSBbW0lPYmplY3QuYmluZFBhdGhdXSBpbnN0ZWFkLlxuICAgICAqL1xuICAgIGJpbmRFdmVudChldmVudFR5cGU6IHN0cmluZywgc3JjOiBJQ29tcG9uZW50LCBzcmNFdmVudFR5cGU6IHN0cmluZyk6IHZvaWQ7XG5cbiAgICAvKipcbiAgICAgKiBFbWl0IGFuIGV2ZW50IHRvIG90aGVyIGNvbXBvbmVudHNcbiAgICAgKi9cbiAgICBub3RpZnkoZXZlbnRUeXBlOiBzdHJpbmcsIGV2ZW50RGF0YT86IHVua25vd24pOiB2b2lkO1xuXG4gICAgLyoqXG4gICAgICogU3B5IG9uIGEgY29tcG9uZW50J3Mgbm90aWZ5IGZyb20gb3V0c2lkZSBvZiB0aGUgY29tcG9uZW50IHN5c3RlbVxuICAgICAqIEByZXR1cm5zIHtJU3Vic2NyaXB0aW9ufSBhbiBvYmplY3QgcmVzcG9uc2libGUgZm9yIHJlbW92aW5nIHRoZSBzcHlcbiAgICAgKiBAZGVwcmVjYXRlZCBVc2UgW1tJT2JqZWN0LnNweU9uRXZlbnRdXSBpbnN0ZWFkLlxuICAgICAqL1xuICAgIHNweU9uRXZlbnQoc3B5OiBJQ29tcG9uZW50RXZlbnRTcHkpOiBJU3Vic2NyaXB0aW9uO1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc3B5IHRoYXQgY2FuIGJlIGF0dGFjaGVkIHRvIGJlIG5vdGlmaWVkIG9mIGEgY29tcG9uZW50IGV2ZW50cyB1c2luZyBgc3B5T25FdmVudGBcbiAgICovXG4gIGV4cG9ydCBpbnRlcmZhY2UgSUNvbXBvbmVudEV2ZW50U3B5PFQgPSB1bmtub3duPiB7XG4gICAgLyoqXG4gICAgICogVGhlIHR5cGUgb2YgZXZlbnQgdG8gc3B5IG9uXG4gICAgICovXG4gICAgcmVhZG9ubHkgZXZlbnRUeXBlOiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBDYWxsZWQgd2hlbiB0aGUgYXR0YWNoZWQgY29tcG9uZW50IG5vdGlmaWVzIG9mIGFuIGBldmVudFR5cGVgIGV2ZW50XG4gICAgICogQHBhcmFtIGV2ZW50RGF0YVxuICAgICAqL1xuICAgIG9uRXZlbnQoZXZlbnREYXRhPzogVCk6IHZvaWQ7XG4gIH1cblxuICBleHBvcnQgaW50ZXJmYWNlIElDb21wb25lbnREZXNjIHtcbiAgICBuYW1lOiBzdHJpbmc7XG4gICAgZmFjdG9yeTogKCkgPT4gSUNvbXBvbmVudDtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIGRlc2NyaXB0b3IgZm9yIGFuIGlucHV0IGNvbXBvbmVudCBwcm9wZXJ0eSBjb250YWluZWQgYnkgYSBzY2VuZSBvYmplY3QuXG4gICAqL1xuICBleHBvcnQgdHlwZSBJbnB1dFBhdGhEZXNjcmlwdG9yID0ge1xuICAgIC8qKlxuICAgICAqIFRoZSB1c2VyIGRlZmluZWQgaWQgb2YgdGhlIHBhdGguIFRoaXMgaWQgbXVzdCBiZSBhIHVuaXF1ZSBzdHJpbmcgZm9yIHRoZSBzY2VuZSBvYmplY3QuXG4gICAgICovXG4gICAgaWQ6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBUaGUgdHlwZSBvZiB0aGUgcGF0aDogUGF0aFR5cGUuSU5QVVRcbiAgICAgKi9cbiAgICB0eXBlOiBQYXRoVHlwZS5JTlBVVDtcbiAgICAvKipcbiAgICAgKiBUaGUgcGFyZW50IHNjZW5lIG5vZGUgb2YgdGhlIGNvbXBvbmVudC5cbiAgICAgKi9cbiAgICBub2RlOiBTY2VuZS5JTm9kZTtcbiAgICAvKipcbiAgICAgKiBUaGUgY29tcG9uZW50IHdpdGggdGhlIHByb3BlcnR5LlxuICAgICAqL1xuICAgIGNvbXBvbmVudDogU2NlbmUuSUNvbXBvbmVudDtcbiAgICAvKipcbiAgICAgKiBUaGUgcHJvcGVydHkgbmFtZSBvZiB0aGUgY29tcG9uZW50LlxuICAgICAqL1xuICAgIHByb3BlcnR5OiBzdHJpbmc7XG4gIH07XG5cbiAgLyoqXG4gICAqIEEgZGVzY3JpcHRvciBmb3IgYW4gb3V0cHV0IGNvbXBvbmVudCBwcm9wZXJ0eSBjb250YWluZWQgYnkgYSBzY2VuZSBvYmplY3QuXG4gICAqL1xuICBleHBvcnQgdHlwZSBPdXRwdXRQYXRoRGVzY3JpcHRvciA9IHtcbiAgICAvKipcbiAgICAgKiBUaGUgdXNlciBkZWZpbmVkIGlkIG9mIHRoZSBwYXRoLiBUaGlzIGlkIG11c3QgYmUgYSB1bmlxdWUgc3RyaW5nIGZvciB0aGUgc2NlbmUgb2JqZWN0LlxuICAgICAqL1xuICAgIGlkOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogVGhlIHR5cGUgb2YgdGhlIHBhdGg6IFBhdGhUeXBlLk9VVFBVVFxuICAgICAqL1xuICAgIHR5cGU6IFBhdGhUeXBlLk9VVFBVVDtcbiAgICAvKipcbiAgICAgKiBUaGUgcGFyZW50IHNjZW5lIG5vZGUgb2YgdGhlIGNvbXBvbmVudC5cbiAgICAgKi9cbiAgICBub2RlOiBTY2VuZS5JTm9kZTtcbiAgICAvKipcbiAgICAgKiBUaGUgY29tcG9uZW50IHdpdGggdGhlIHByb3BlcnR5LlxuICAgICAqL1xuICAgIGNvbXBvbmVudDogU2NlbmUuSUNvbXBvbmVudDtcbiAgICAvKipcbiAgICAgKiBUaGUgcHJvcGVydHkgbmFtZSBvZiB0aGUgY29tcG9uZW50LlxuICAgICAqL1xuICAgIHByb3BlcnR5OiBzdHJpbmc7XG4gIH07XG5cbiAgLyoqXG4gICAqIEEgZGVzY3JpcHRvciBmb3IgYW4gZXZlbnQgY29tcG9uZW50IHByb3BlcnR5IGNvbnRhaW5lZCBieSBhIHNjZW5lIG9iamVjdC5cbiAgICovXG4gIGV4cG9ydCB0eXBlIEV2ZW50UGF0aERlc2NyaXB0b3IgPSB7XG4gICAgLyoqXG4gICAgICogVGhlIHVzZXIgZGVmaW5lZCBpZCBvZiB0aGUgcGF0aC4gVGhpcyBpZCBtdXN0IGJlIGEgdW5pcXVlIHN0cmluZyBmb3IgdGhlIHNjZW5lIG9iamVjdC5cbiAgICAgKi9cbiAgICBpZDogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFRoZSB0eXBlIG9mIHRoZSBwYXRoOiBQYXRoVHlwZS5FVkVOVFxuICAgICAqL1xuICAgIHR5cGU6IFBhdGhUeXBlLkVWRU5UO1xuICAgIC8qKlxuICAgICAqIFRoZSBwYXJlbnQgc2NlbmUgbm9kZSBvZiB0aGUgY29tcG9uZW50LlxuICAgICAqL1xuICAgIG5vZGU6IFNjZW5lLklOb2RlO1xuICAgIC8qKlxuICAgICAqIFRoZSBjb21wb25lbnQgd2l0aCB0aGUgcHJvcGVydHkuXG4gICAgICovXG4gICAgY29tcG9uZW50OiBTY2VuZS5JQ29tcG9uZW50O1xuICAgIC8qKlxuICAgICAqIFRoZSBwcm9wZXJ0eSBuYW1lIG9mIHRoZSBjb21wb25lbnQuXG4gICAgICovXG4gICAgcHJvcGVydHk6IHN0cmluZztcbiAgfTtcblxuICAvKipcbiAgICogQSBkZXNjcmlwdG9yIGZvciBhbiBlbWl0IGNvbXBvbmVudCBwcm9wZXJ0eSBjb250YWluZWQgYnkgYSBzY2VuZSBvYmplY3QuXG4gICAqL1xuICBleHBvcnQgdHlwZSBFbWl0UGF0aERlc2NyaXB0b3IgPSB7XG4gICAgLyoqXG4gICAgICogVGhlIHVzZXIgZGVmaW5lZCBpZCBvZiB0aGUgcGF0aC4gVGhpcyBpZCBtdXN0IGJlIGEgdW5pcXVlIHN0cmluZyBmb3IgdGhlIHNjZW5lIG9iamVjdC5cbiAgICAgKi9cbiAgICBpZDogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFRoZSB0eXBlIG9mIHRoZSBwYXRoOiBQYXRoVHlwZS5FTUlUXG4gICAgICovXG4gICAgdHlwZTogUGF0aFR5cGUuRU1JVDtcbiAgICAvKipcbiAgICAgKiBUaGUgcGFyZW50IHNjZW5lIG5vZGUgb2YgdGhlIGNvbXBvbmVudC5cbiAgICAgKi9cbiAgICBub2RlOiBTY2VuZS5JTm9kZTtcbiAgICAvKipcbiAgICAgKiBUaGUgY29tcG9uZW50IHdpdGggdGhlIHByb3BlcnR5LlxuICAgICAqL1xuICAgIGNvbXBvbmVudDogU2NlbmUuSUNvbXBvbmVudDtcbiAgICAvKipcbiAgICAgKiBUaGUgcHJvcGVydHkgbmFtZSBvZiB0aGUgY29tcG9uZW50LlxuICAgICAqL1xuICAgIHByb3BlcnR5OiBzdHJpbmc7XG4gIH07XG5cbiAgZXhwb3J0IGludGVyZmFjZSBQYXRoQmFzZSB7XG4gICAgLyoqXG4gICAgICogVGhlIG9iamVjdCB0aGlzIHBhdGggaXMgYXNzb2NpYXRlZCB3aXRoXG4gICAgICovXG4gICAgcmVhZG9ubHkgb2JqZWN0OiBTY2VuZS5JT2JqZWN0O1xuICAgIC8qKlxuICAgICAqIFRoZSBpZCBvZiB0aGlzIHBhdGguIFNldCB0byBhIHJhbmRvbSBzdHJpbmcsIG9yIHRoZSBpZCBwcm92aWRlZCB3aGVuIGNyZWF0aW5nIHRoZSBwYXRoXG4gICAgICovXG4gICAgcmVhZG9ubHkgaWQ6IHN0cmluZztcbiAgfVxuICAvKipcbiAgICogQSBwYXRoIHRvIGEgY29tcG9uZW50J3MgaW5wdXQgcHJvcGVydHlcbiAgICovXG4gIGV4cG9ydCBpbnRlcmZhY2UgSW5wdXRQYXRoPFQgPSB1bmtub3duPiBleHRlbmRzIFBhdGhCYXNlIHtcbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIHZhbHVlIG9mIHRoZSBwcm9wZXJ0eSBhc3NvY2lhdGVkIHdpdGggdGhpcyBwYXRoXG4gICAgICovXG4gICAgZ2V0KCk6IFQ7XG4gICAgLyoqXG4gICAgICogU2V0IHRoZSB2YWx1ZSBvZiB0aGUgcHJvcGVydHkgYXNzb2NpYXRlZCB3aXRoIHRoaXMgcGF0aFxuICAgICAqIEBwYXJhbSBuZXdWYWxcbiAgICAgKi9cbiAgICBzZXQobmV3VmFsOiBUKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBCaW5kIHRoaXMgcGF0aCB0byBhbiBbW091dHB1dFBhdGhdXS4gQXMgdGhlIHZhbHVlIG9mIHRoZSBib3VuZCBvdXRwdXQgcGF0aCBjaGFuZ2VzLCB0aGUgdmFsdWUgcmV0dXJuZWQgYnkgW1tnZXRdXSB3aWxsIGFsc28gY2hhbmdlXG4gICAgICogQHBhcmFtIG91dHB1dFBhdGhcbiAgICAgKi9cbiAgICBiaW5kKG91dHB1dFBhdGg6IE91dHB1dFBhdGgpOiB2b2lkO1xuICB9XG5cbiAgLyoqXG4gICAqIEEgcGF0aCB0byBhIGNvbXBvbmVudCdzIG91dHB1dCBwcm9wZXJ0eVxuICAgKi9cbiAgZXhwb3J0IGludGVyZmFjZSBPdXRwdXRQYXRoPFQgPSB1bmtub3duPiBleHRlbmRzIFBhdGhCYXNlIHtcbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIHZhbHVlIG9mIHRoZSBwcm9wZXJ0eSBhc3NvY2lhdGVkIHdpdGggdGhpcyBwYXRoXG4gICAgICovXG4gICAgZ2V0KCk6IFQ7XG4gICAgLyoqXG4gICAgICogQmluZCB0aGlzIHBhdGggdG8gYW4gW1tJbnB1dFBhdGhdXS4gQXMgdGhlIHZhbHVlIG9mIHRoaXMgb3V0cHV0IGNoYW5nZXMsIHRoZSB2YWx1ZSByZXR1cm5lZCBieSB0aGUgYm91bmQgW1tJbnB1dFBhdGguZ2V0XV0gd2lsbCBhbHNvIGNoYW5nZVxuICAgICAqIEBwYXJhbSBvdXRwdXRQYXRoXG4gICAgICovXG4gICAgYmluZChpbnB1dFBhdGg6IElucHV0UGF0aCk6IHZvaWQ7XG4gIH1cblxuICAvKipcbiAgICogQSBwYXRoIHRvIGEgY29tcG9uZW50J3MgZXZlbnQgcHJvcGVydHlcbiAgICovXG4gIGV4cG9ydCBpbnRlcmZhY2UgRXZlbnRQYXRoPFQgPSB1bmtub3duPiBleHRlbmRzIFBhdGhCYXNlIHtcbiAgICAvKipcbiAgICAgKiBCaW5kIHRoaXMgcGF0aCB0byBhbiBbW0VtaXRQYXRoXV0uXG4gICAgICovXG4gICAgYmluZChlbWl0UGF0aDogRW1pdFBhdGgpOiB2b2lkO1xuXG4gICAgLyoqXG4gICAgICogRW1pdCB0aGUgZXZlbnQgYXNzb2NpYXRlZCB3aXRoIHRoaXMgcGF0aC4gVGhpcyBpcyBzaW1pbGFyIHRvIGNhbGxpbmcgW1tJQ29tcG9uZW50Lm9uRXZlbnRdXSBkaXJlY3RseS5cbiAgICAgKi9cbiAgICBlbWl0KHBheWxvYWQ6IFQpOiB2b2lkO1xuXG4gICAgLyoqXG4gICAgICogRGlzYWJsZSBgdGhpcy5lbWl0YCBhbmQgdGhlIGFzc29jaWF0ZWQgQ29tcG9uZW50J3MgYG9uRXZlbnRgIGZyb20gYmVpbmcgdHJpZ2dlcmVkXG4gICAgICovXG4gICAgZGlzYWJsZSgpOiB2b2lkO1xuXG4gICAgLyoqXG4gICAgICogRW5hYmxlIGB0aGlzLmVtaXRgIGFuZCB0aGUgYXNzb2NpYXRlZCBDb21wb25lbnQncyBgb25FdmVudGAgc28gaXQgY2FuIHJlY2VpdmUgdGhlIGV2ZW50IGFnYWluXG4gICAgICovXG4gICAgZW5hYmxlKCk6IHZvaWQ7XG4gIH1cblxuICAvKipcbiAgICogQSBwYXRoIHRvIGEgY29tcG9uZW50J3MgZW1pdCBwcm9wZXJ0eVxuICAgKi9cbiAgZXhwb3J0IGludGVyZmFjZSBFbWl0UGF0aDxUID0gdW5rbm93bj4gZXh0ZW5kcyBQYXRoQmFzZSB7XG4gICAgLyoqXG4gICAgICogQmluZCB0aGlzIHBhdGggdG8gYW4gW1tFdmVudFBhdGhdXS5cbiAgICAgKi9cbiAgICBiaW5kKGV2ZW50UGF0aDogRXZlbnRQYXRoKTogdm9pZDtcblxuICAgIC8qKlxuICAgICAqIEVtaXQgdGhlIGV2ZW50IGFzc29jaWF0ZWQgd2l0aCB0aGlzIHBhdGguIFRoaXMgaXMgc2ltaWxhciB0byBbW0lDb21wb25lbnQubm90aWZ5XV1cbiAgICAgKi9cbiAgICBlbWl0KHBheWxvYWQ6IFQpOiB2b2lkO1xuXG4gICAgLyoqXG4gICAgICogRGlzYWJsZSBgdGhpcy5lbWl0YCBhbmQgdGhlIGFzc29jaWF0ZWQgQ29tcG9uZW50J3MgYG5vdGlmeWBcbiAgICAgKi9cbiAgICBkaXNhYmxlKCk6IHZvaWQ7XG5cbiAgICAvKipcbiAgICAgKiBFbmFibGUgYHRoaXMuZW1pdGAgYW5kIHRoZSBhc3NvY2lhdGVkIENvbXBvbmVudCdzIGFiaWxpdHkgdG8gYG5vdGlmeWBcbiAgICAgKi9cbiAgICBlbmFibGUoKTogdm9pZDtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIHNweSBhbGxvd3MgZm9yIHNweWluZyBvbiBldmVudHMgdHJpZ2dlcmVkIG9uIGEgY29tcG9uZW50IGZyb20gb3V0c2lkZSBvZiB0aGUgY29tcG9uZW50IHN5c3RlbVxuICAgKi9cbiAgZXhwb3J0IGludGVyZmFjZSBJU2NlbmVPYmplY3RTcHk8VCA9IHVua25vd24+IHtcbiAgICAvKipcbiAgICAgKiBUaGUgcGF0aCB0byBzcHkgb25cbiAgICAgKi9cbiAgICByZWFkb25seSBwYXRoOiBJbnB1dFBhdGggfCBPdXRwdXRQYXRoIHwgRXZlbnRQYXRoIHwgRW1pdFBhdGg7XG4gICAgLyoqXG4gICAgICogVHJpZ2dlcmVkIHdoZW4gdGhlIGRhdGEgYXQgYHBhdGhgIGNoYW5nZXMgb3Igd2hlbiBpdHMgZXZlbnQgaXMgdHJpZ2dlcmVkXG4gICAgICogQHBhcmFtIGV2ZW50RGF0YSBUaGUgZGF0YSBzZW50IHdpdGggZXZlbnQgZnJvbSBhIFtbSUNvbXBvbmVudC5ub3RpZnldXSBjYWxsIG9yIHRoZSBuZXcgdmFsdWUgb2YgdGhlIGlucHV0IG9yIG91dHB1dCByZWZlcmVuY2VkIGJ5IHRoZSBwYXRoLlxuICAgICAqL1xuICAgIG9uRXZlbnQoZXZlbnREYXRhOiBUKTogdm9pZDtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIGZhY3RvcnkgYW5kIGNvbnRhaW5lciBmb3IgYSBjb2xsZWN0aW9uIG9mIHNjZW5lIG5vZGVzIGFuZCBjb21wb25lbnRzIGNvbm5lY3RlZCB2aWEgcHJvcGVydHkgYmluZGluZ3MuXG4gICAqL1xuICBleHBvcnQgaW50ZXJmYWNlIElPYmplY3Qge1xuICAgIC8qKlxuICAgICAqIEFkZHMgYSBzY2VuZSBub2RlIHRvIHRoaXMgc2NlbmUgb2JqZWN0IGFuZCByZXR1cm5zIGl0LiBJZiBhbiBpZCBpc24ndCBwcm92aWRlZCwgb25lIHdpbGwgYmUgYXV0b2dlbmVyYXRlZC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBpZCBhIG9wdGlvbmFsIHVuaXF1ZSBpZFxuICAgICAqXG4gICAgICogQHJldHVybiBUaGUgbmV3IHNjZW5lIG5vZGUuXG4gICAgICovXG4gICAgYWRkTm9kZShpZD86IHN0cmluZyk6IElOb2RlO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGFuIGFycmF5IG9mIHNjZW5lIG5vZGVzLlxuICAgICAqXG4gICAgICogQHBhcmFtIG5vZGVDb3VudCB0aGUgbnVtYmVyIG9mIG5vZGVzIHRvIGNyZWF0ZS4gVGhpcyB2YWx1ZSBtdXN0IGJlIGdyZWF0ZXIgdGhhbiB6ZXJvLlxuICAgICAqXG4gICAgICogQHJldHVybiBBbiBhcnJheSBvZiBub2Rlcy5cbiAgICAgKi9cbiAgICBhZGROb2Rlcyhub2RlQ291bnQ6IG51bWJlcik6IElOb2RlW107XG5cbiAgICAvKipcbiAgICAgKiBTdGFydHMgYWxsIG5vZGVzIHJlZmVyZW5jZWQgYnkgdGhpcyBzY2VuZSBvYmplY3QuXG4gICAgICovXG4gICAgc3RhcnQoKTogdm9pZDtcblxuICAgIC8qKlxuICAgICAqIFN0b3BzIGFsbCBub2RlcyByZWZlcmVuY2VkIGJ5IHRoaXMgc2NlbmUgb2JqZWN0LiBUaGUgc2NlbmUgb2JqZWN0IGNhbm5vdCBiZSByZXN0YXJ0ZWQgYWZ0ZXIgdGhpcyBmdW5jdGlvbiBoYXMgYmVlbiBjYWxsZWQuXG4gICAgICovXG4gICAgc3RvcCgpOiB2b2lkO1xuXG4gICAgLyoqXG4gICAgICogQ2FsbCB0aGlzIGZ1bmN0aW9uIHRvIGJpbmQgYW4gaW5wdXQgcHJvcGVydHkgb2YgdGhlIHRhcmdldCBjb21wb25lbnQgdG8gYW4gb3V0cHV0IHByb3BlcnR5IG9mIHRoZSBzb3VyY2VcbiAgICAgKiBjb21wb25lbnQgYmV0d2VlbiBhbnkgbm9kZXMgY29udGFpbmVkIGJ5IHRoaXMgc2NlbmUgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHBhcmFtIHRhcmdldENvbXBvbmVudCBUaGUgY29tcG9uZW50IGxpc3RlbmluZyB0byBwcm9wZXJ0eSBjaGFuZ2VzLlxuICAgICAqIEBwYXJhbSB0YXJnZXRQcm9wICBUaGUgY29tcG9uZW50IGlucHV0IHByb3BlcnR5IG5hbWUuXG4gICAgICogQHBhcmFtIHNvdXJjZUNvbXBvbmVudCBUaGUgY29tcG9uZW50IGJyb2FkY2FzdGluZyBwcm9wZXJ0eSBjaGFuZ2VzLlxuICAgICAqIEBwYXJhbSBzb3VyY2VQcm9wIFRoZSBjb21wb25lbnQgb3V0cHV0IHByb3BlcnR5IG5hbWUuXG4gICAgICogQGRlcHJlY2F0ZWQgVXNlIFtbSU9iamVjdC5iaW5kUGF0aF1dIGluc3RlYWQuXG4gICAgICovXG4gICAgYmluZCh0YXJnZXRDb21wb25lbnQ6IElDb21wb25lbnQsIHRhcmdldFByb3A6IHN0cmluZywgc291cmNlQ29tcG9uZW50OiBJQ29tcG9uZW50LCBzb3VyY2VQcm9wOiBzdHJpbmcpOiB2b2lkO1xuXG4gICAgLyoqXG4gICAgICogQWRkIGEgcGF0aCBpZGVudGlmaWVkIGJ5IGEgdW5pcXVlIHN0cmluZy5cbiAgICAgKiBUaGV5IGBwYXRoRGVzYy50eXBlYCB3aWxsIGRldGVybWluZSB3aGljaCBwYXRoIHR5cGUgaXMgcmV0dXJuZWQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gcGF0aERlc2MgVGhlIHBhdGggZGVzY3JpcHRvciB0byB0aGUgY29tcG9uZW50IHByb3BlcnR5LlxuICAgICAqIEBkZXByZWNhdGVkIFVzZSBvbmUgb2YgW1thZGRJbnB1dFBhdGhdXSwgW1thZGRPdXRwdXRQYXRoXV0sIFtbYWRkRXZlbnRQYXRoXV0sIG9yIFtbYWRkRW1pdFBhdGhdXVxuICAgICAqL1xuICAgIGFkZFBhdGgocGF0aERlc2M6IElucHV0UGF0aERlc2NyaXB0b3IpOiBJbnB1dFBhdGg7XG4gICAgYWRkUGF0aChwYXRoRGVzYzogT3V0cHV0UGF0aERlc2NyaXB0b3IpOiBPdXRwdXRQYXRoO1xuICAgIGFkZFBhdGgocGF0aERlc2M6IEV2ZW50UGF0aERlc2NyaXB0b3IpOiBFdmVudFBhdGg7XG4gICAgYWRkUGF0aChwYXRoRGVzYzogRW1pdFBhdGhEZXNjcmlwdG9yKTogRW1pdFBhdGg7XG5cbiAgICAvKipcbiAgICAgKiBBZGQgYW5kIHJlY2VpdmUgYW4gW1tJbnB1dFBhdGhdXSB0byB0aGUgcHJvcGVydHkgb2YgYW4gW1tJQ29tcG9uZW50XV0uXG4gICAgICogVGhlIHJldHVybmVkIFtbSW5wdXRQYXRoXV0gY2FuIGJlIHVzZWQgdG8gcmVhZCBvciBzZXQgdGhlIHZhbHVlIG9mIGBwcm9wZXJ0eWAgb24gYGNvbXBvbmVudGAncyBpbnB1dHMuXG4gICAgICogQ2hhbmdlcyB0byB0aGUgdmFsdWUgY2FuIGFsc28gYmUgb2JzZXJ2ZWQgYnkgY3JlYXRpbmcgYW4gW1tJU2NlbmVPYmplY3RTcHldXSBhbmQgY2FsbGluZyBbW3NweU9uRXZlbnRdXS5cbiAgICAgKiBUaGUgcGF0aCBjYW4gYWxzbyBiZSBib3VuZCB0byBhbiBbW091dHB1dFBhdGhdXSBvZiBhbm90aGVyIChvciB0aGUgc2FtZSkgY29tcG9uZW50IHRvIGF1dG9tYXRpY2FsbHkgdXBkYXRlIGEgY29tcG9uZW50J3MgaW5wdXQgdmFsdWUuXG4gICAgICpcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogIGNsYXNzIENvdW50ZXIge1xuICAgICAqICAgIHB1YmxpYyBpbnB1dHMgPSB7XG4gICAgICogICAgICBjb3VudDogMSxcbiAgICAgKiAgICB9O1xuICAgICAqICB9XG4gICAgICogIC8vIGNyZWF0ZSBhbiBgSU9iamVjdGAsIGFkZCBhbiBgSU5vZGVgIGFuZCBhbiBgSUNvbXBvbmVudGAgdG8gdGhlIG5vZGUsIHNlZSB0aGUgcmVsZXZhbnQgZnVuY3Rpb25zIChjcmVhdGVPYmplY3QsIGFkZE5vZGUsIGFkZENvbXBvbmVudClcbiAgICAgKiAgY29uc3QgW29iamVjdCwgbm9kZSwgY29tcG9uZW50XTtcbiAgICAgKlxuICAgICAqICAvLyBjcmVhdGUgdGhlIHBhdGhcbiAgICAgKiAgY29uc3QgaW5wdXRQYXRoID0gb2JqZWN0LmFkZElucHV0UGF0aChjb21wb25lbnQsICdjb3VudCcpO1xuICAgICAqXG4gICAgICogIC8vIG9ic2VydmUgY2hhbmdlcyB0byB0aGUgdmFsdWUgb2YgYGlucHV0cy5jb3VudGAgaW4gY29tcG9uZW50XG4gICAgICogIG9iamVjdC5zcHlPbkV2ZW50KHtcbiAgICAgKiAgICBwYXRoOiBpbnB1dFBhdGgsXG4gICAgICogICAgb25FdmVudChuZXdWYWx1ZSkge1xuICAgICAqICAgICAgY29uc29sZS5sb2coYGNvbXBvbmVudC5pbnB1dC5jb3VudCdzIG5ldyB2YWx1ZSBpcyAke25ld1ZhbHVlfWApO1xuICAgICAqICAgIH0sXG4gICAgICogIH0pO1xuICAgICAqICAvLyByZWFkIGFuZCBjaGFuZ2UgdGhlIHZhbHVlIG9mIHRoZSBpbnB1dCBpbiB0aGUgY29tcG9uZW50XG4gICAgICogIGNvbnN0IGNvdW50VmFsdWUgPSBpbnB1dFBhdGguZ2V0KCk7XG4gICAgICogIGlucHV0UGF0aC5zZXQoY291bnQgKyAxKTtcbiAgICAgKlxuICAgICAqIC8vIGJpbmQgdGhlIHBhdGggdG8gdGhlIHZhbHVlIGZyb20gYW5vdGhlciAob3V0cHV0KSBwYXRoXG4gICAgICogIG9iamVjdC5iaW5kUGF0aChpbnB1dFBhdGgsIG91dHB1dFBhdGgpO1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogQHBhcmFtIGNvbXBvbmVudFxuICAgICAqIEBwYXJhbSBwcm9wZXJ0eVxuICAgICAqIEBwYXJhbSBpZFxuICAgICAqIEBpbnRyb2R1Y2VkIDMuMS43MS4xNC0wLWdhZjc3YWRkMzgzXG4gICAgICovXG4gICAgYWRkSW5wdXRQYXRoKGNvbXBvbmVudDogSUNvbXBvbmVudCwgcHJvcGVydHk6IHN0cmluZywgaWQ/OiBzdHJpbmcpOiBJbnB1dFBhdGg7XG5cbiAgICAvKipcbiAgICAgKiBBZGQgYW5kIHJlY2VpdmUgYW4gW1tPdXRwdXRQYXRoXV0gdG8gdGhlIHByb3BlcnR5IG9mIGFuIFtbSUNvbXBvbmVudF1dLlxuICAgICAqIFRoZSByZXR1cm5lZCBbW091dHB1dFBhdGhdXSBjYW4gYmUgdXNlZCB0byByZWFkIHRoZSB2YWx1ZSBvZiBgY29tcG9uZW50YCdzIG91dHB1dCBgcHJvcGVydHlgLlxuICAgICAqIENoYW5nZXMgdG8gdGhlIHZhbHVlIGNhbiBhbHNvIGJlIG9ic2VydmVkIGJ5IGNyZWF0aW5nIGFuIFtbSVNjZW5lT2JqZWN0U3B5XV0gYW5kIGNhbGxpbmcgW1tzcHlPbkV2ZW50XV0uXG4gICAgICogVGhlIHBhdGggY2FuIGFsc28gYmUgYm91bmQgdG8gYW4gW1tJbnB1dFBhdGhdXSBvZiBhbm90aGVyIChvciB0aGUgc2FtZSkgY29tcG9uZW50IHRvIGF1dG9tYXRpY2FsbHkgdXBkYXRlIGEgY29tcG9uZW50J3MgaW5wdXQgdmFsdWUuXG4gICAgICpcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogIGNsYXNzIE51bWJlckdlbmVyYXRvciB7XG4gICAgICogICAgcHVibGljIG91dHB1dHMgPSB7XG4gICAgICogICAgICBjdXJyZW50OiAxLFxuICAgICAqICAgIH07XG4gICAgICogIH1cbiAgICAgKiAgLy8gY3JlYXRlIGFuIGBJT2JqZWN0YCwgYWRkIGFuIGBJTm9kZWAgYW5kIGFuIGBJQ29tcG9uZW50YCB0byB0aGUgbm9kZSwgc2VlIHRoZSByZWxldmFudCBmdW5jdGlvbnMgKGNyZWF0ZU9iamVjdCwgYWRkTm9kZSwgYWRkQ29tcG9uZW50KVxuICAgICAqICBjb25zdCBbb2JqZWN0LCBub2RlLCBjb21wb25lbnRdO1xuICAgICAqXG4gICAgICogIC8vIGNyZWF0ZSB0aGUgcGF0aFxuICAgICAqICBjb25zdCBvdXRwdXRQYXRoID0gb2JqZWN0LmFkZE91dHB1dFBhdGgoY29tcG9uZW50LCAnY3VycmVudCcpO1xuICAgICAqXG4gICAgICogIC8vIG9ic2VydmUgY2hhbmdlcyB0byB0aGUgdmFsdWUgb2YgYG91dHB1dHMuY3VycmVudGAgaW4gY29tcG9uZW50XG4gICAgICogIG9iamVjdC5zcHlPbkV2ZW50KHtcbiAgICAgKiAgICBwYXRoOiBvdXRwdXRQYXRoLFxuICAgICAqICAgIG9uRXZlbnQobmV3VmFsdWUpIHtcbiAgICAgKiAgICAgIGNvbnNvbGUubG9nKGBjb21wb25lbnQub3V0cHV0LmN1cnJlbnQncyBuZXcgdmFsdWUgaXMgJHtuZXdWYWx1ZX1gKTtcbiAgICAgKiAgICB9LFxuICAgICAqICB9KTtcbiAgICAgKiAgLy8gcmVhZCBhbmQgYmluZCB0aGUgdmFsdWUgb2YgdGhlIG91dHB1dCB0byBhbm90aGVyIGNvbXBvbmVudCdzIGlucHV0IHZhbHVlXG4gICAgICogIGNvbnN0IGN1cnJlbnRWYWx1ZSA9IG91dHB1dFBhdGguZ2V0KCk7XG4gICAgICogIG9iamVjdC5iaW5kUGF0aChpbnB1dFBhdGgsIG91dHB1dFBhdGgpO1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogQHBhcmFtIGNvbXBvbmVudFxuICAgICAqIEBwYXJhbSBwcm9wZXJ0eVxuICAgICAqIEBwYXJhbSBpZFxuICAgICAqIEBpbnRyb2R1Y2VkIDMuMS43MS4xNC0wLWdhZjc3YWRkMzgzXG4gICAgICovXG4gICAgYWRkT3V0cHV0UGF0aChjb21wb25lbnQ6IElDb21wb25lbnQsIHByb3BlcnR5OiBzdHJpbmcsIGlkPzogc3RyaW5nKTogT3V0cHV0UGF0aDtcblxuICAgIC8qKlxuICAgICAqIEFkZCBhbmQgcmVjZWl2ZSBhbiBbW0V2ZW50UGF0aF1dIGZvciBhbiBbW0lDb21wb25lbnRdXS5cbiAgICAgKiBUaGUgcGF0aCBjYW4gYmUgYm91bmQgdG8gYW4gW1tFbWl0UGF0aF1dIG9mIGFub3RoZXIgKG9yIHRoZSBzYW1lKSBjb21wb25lbnQgdG8gYXV0b21hdGljYWxseSB0cmlnZ2VyIHRoZSBjb21wb25lbnQncyBbW0lDb21wb25lbnQub25FdmVudF1dLlxuICAgICAqXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqICBjbGFzcyBSZW5kZXJhYmxlIHtcbiAgICAgKiAgICBwdWJsaWMgZXZlbnRzID0ge1xuICAgICAqICAgICAgcmVyZW5kZXI6IHRydWUsXG4gICAgICogICAgfTtcbiAgICAgKiAgfVxuICAgICAqICAvLyBjcmVhdGUgYW4gYElPYmplY3RgLCBhZGQgYW4gYElOb2RlYCBhbmQgYW4gYElDb21wb25lbnRgIHRvIHRoZSBub2RlLCBzZWUgdGhlIHJlbGV2YW50IGZ1bmN0aW9ucyAoY3JlYXRlT2JqZWN0LCBhZGROb2RlLCBhZGRDb21wb25lbnQpXG4gICAgICogIGNvbnN0IFtvYmplY3QsIG5vZGUsIGNvbXBvbmVudF07XG4gICAgICpcbiAgICAgKiAgLy8gY3JlYXRlIHRoZSBwYXRoXG4gICAgICogIGNvbnN0IGV2ZW50UGF0aCA9IG9iamVjdC5hZGRFdmVudFBhdGgoY29tcG9uZW50LCAncmVyZW5kZXInKTtcbiAgICAgKlxuICAgICAqICAvLyBiaW5kIHRoZSBldmVudCBwYXRoIHNvIHRoYXQgaXQgdHJpZ2dlcnMgdGhlIGNvbXBvbmVudCdzIG9uRXZlbnQgd2hlbiBgZW1pdFBhdGhgIGVtaXRzIGFuIGV2ZW50XG4gICAgICogIG9iamVjdC5iaW5kUGF0aChldmVudFBhdGgsIGVtaXRQYXRoKTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIEBwYXJhbSBjb21wb25lbnRcbiAgICAgKiBAcGFyYW0gcHJvcGVydHlcbiAgICAgKiBAcGFyYW0gaWRcbiAgICAgKiBAaW50cm9kdWNlZCAzLjEuNzEuMTQtMC1nYWY3N2FkZDM4M1xuICAgICAqL1xuICAgIGFkZEV2ZW50UGF0aChjb21wb25lbnQ6IElDb21wb25lbnQsIHByb3BlcnR5OiBzdHJpbmcsIGlkPzogc3RyaW5nKTogRXZlbnRQYXRoO1xuXG4gICAgLyoqXG4gICAgICogQWRkIGFuZCByZWNlaXZlIGFuIFtbRW1pdFBhdGhdXSBmb3IgYW4gW1tJQ29tcG9uZW50XV0uXG4gICAgICogSXQgaXMgYWxzbyBwb3NzaWJsZSB0byBzcHkgd2hlbiBhbiBldmVudCBpcyBlbWl0dGVkIGJ5IGNyZWF0aW5nIGFuIFtbSVNjZW5lT2JqZWN0U3B5XV0gYW5kIGNhbGxpbmcgW1tzcHlPbkV2ZW50XV0uXG4gICAgICogVGhlIHBhdGggY2FuIGJlIGJvdW5kIHRvIGFuIFtbRXZlbnRQYXRoXV0gb2YgYW5vdGhlciAob3IgdGhlIHNhbWUpIGNvbXBvbmVudCB0byBhdXRvbWF0aWNhbGx5IHRyaWdnZXIgdGhlIGNvbXBvbmVudCdzIFtbSUNvbXBvbmVudC5vbkV2ZW50XV0uXG4gICAgICpcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogIGNsYXNzIENsaWNrYWJsZSB7XG4gICAgICogICAgcHVibGljIGV2ZW50cyA9IHtcbiAgICAgKiAgICAgIGNsaWNrZWQ6IHRydWUsXG4gICAgICogICAgfTtcbiAgICAgKiAgfVxuICAgICAqICAvLyBjcmVhdGUgYW4gYElPYmplY3RgLCBhZGQgYW4gYElOb2RlYCBhbmQgYW4gYElDb21wb25lbnRgIHRvIHRoZSBub2RlLCBzZWUgdGhlIHJlbGV2YW50IGZ1bmN0aW9ucyAoY3JlYXRlT2JqZWN0LCBhZGROb2RlLCBhZGRDb21wb25lbnQpXG4gICAgICogIGNvbnN0IFtvYmplY3QsIG5vZGUsIGNvbXBvbmVudF07XG4gICAgICpcbiAgICAgKiAgLy8gY3JlYXRlIHRoZSBwYXRoXG4gICAgICogIGNvbnN0IGVtaXRQYXRoID0gb2JqZWN0LmFkZEVtaXRQYXRoKGNvbXBvbmVudCwgJ2NsaWNrZWQnKTtcbiAgICAgKlxuICAgICAqICAvLyBiaW5kIHRoZSBlbWl0IHBhdGggc28gdGhhdCBpdCB0cmlnZ2VycyB0aGUgYGVtaXRQYXRoYCdzIGFzc29jaWF0ZWQgY29tcG9uZW50J3Mgb25FdmVudCB3aGVuIGFuIGV2ZW50IGlzIGVtaXR0ZWRcbiAgICAgKiAgb2JqZWN0LmJpbmRQYXRoKGV2ZW50UGF0aCwgZW1pdFBhdGgpO1xuICAgICAqXG4gICAgICogIC8vIG9ic2VydmUgZW1pc3Npb25zIG9mICdjbGlja2VkJyBldmVudHMgaW4gY29tcG9uZW50XG4gICAgICogIG9iamVjdC5zcHlPbkV2ZW50KHtcbiAgICAgKiAgICBwYXRoOiBlbWl0UGF0aCxcbiAgICAgKiAgICBvbkV2ZW50KGV2ZW50RGF0YSkge1xuICAgICAqICAgICAgY29uc29sZS5sb2coYGEgJ2NsaWNrZWQnIGV2ZW50IHdhcyBlbWl0dGVkIHdpdGggdGhlIGRhdGE6ICR7ZXZlbnREYXRhfWApO1xuICAgICAqICAgIH0sXG4gICAgICogIH0pO1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogQHBhcmFtIGNvbXBvbmVudFxuICAgICAqIEBwYXJhbSBwcm9wZXJ0eVxuICAgICAqIEBwYXJhbSBpZFxuICAgICAqIEBpbnRyb2R1Y2VkIDMuMS43MS4xNC0wLWdhZjc3YWRkMzgzXG4gICAgICovXG4gICAgYWRkRW1pdFBhdGgoY29tcG9uZW50OiBJQ29tcG9uZW50LCBwcm9wZXJ0eTogc3RyaW5nLCBpZD86IHN0cmluZyk6IEVtaXRQYXRoO1xuXG4gICAgLyoqXG4gICAgICogQmluZCB0aGUgdmFsdWUgcmVmZXJlbmNlZCBieSBgaW5wdXRQYXRoYCB0byB0aGUgdmFsdWUgb2YgYG91dHB1dFBhdGhgLlxuICAgICAqIEFzIHRoZSB2YWx1ZSBhdCBgb3V0cHV0UGF0aGAgY2hhbmdlcywgdGhlIHZhbHVlIG9mIGBpbnB1dFBhdGhgIHdpbGwgcmVmbGVjdCBpdC5cbiAgICAgKlxuICAgICAqIGBgYFxuICAgICAqIGNvbnN0IFtzY2VuZU9iamVjdF0gPSBhd2FpdCBzZGsuU2NlbmUuY3JlYXRlT2JqZWN0cygxKTtcbiAgICAgKiBjb25zdCBub2RlID0gc2NlbmVPYmplY3QuYWRkTm9kZSgpO1xuICAgICAqXG4gICAgICogLy8gbXAub2JqTG9hZGVyIGhhcyBhbiBvdXRwdXRzLnZpc2libGUgcHJvcGVydHlcbiAgICAgKiBjb25zdCBjb21wMSA9IG5vZGUuYWRkQ29tcG9uZW50KCdtcC5vYmpMb2FkZXInKTtcbiAgICAgKiBjb25zdCBvdXRwdXRQYXRoID0gc2NlbmVPYmplY3QuYWRkT3V0cHV0UGF0aChjb21wMSwgJ3Zpc2libGUnLCAnb2JqTG9hZGVyLXZpc2libGUnKTtcbiAgICAgKlxuICAgICAqIC8vIG15Q29tcG9uZW50IGhhcyBhbiBpbnB1dHMudG9nZ2xlU3RhdGUgcHJvcGVydHlcbiAgICAgKiBjb25zdCBjb21wMiA9IG5vZGUuYWRkQ29tcG9uZW50KCdteUNvbXBvbmVudCcpO1xuICAgICAqIGNvbnN0IGlucHV0UGF0aCA9IHNjZW5lT2JqZWN0LmFkZElucHV0UGF0aChjb21wMiwgJ3RvZ2dsZVN0YXRlJywgJ215Q29tcG9uZW50LXRvZ2dsZScpO1xuICAgICAqIHNjZW5lT2JqZWN0LmJpbmRQYXRoKGlucHV0UGF0aCwgb3V0cHV0UGF0aCk7XG4gICAgICpcbiAgICAgKiBub2RlLnN0YXJ0KCk7XG4gICAgICogLy8gY29tcDEuaW5wdXRzLnZpc2libGUgd2lsbCBub3cgYWx3YXlzIGVxdWFsIGNvbXAyLm91dHB1dHMudG9nZ2xlU3RhdGVcbiAgICAgKiBgYGBcbiAgICAgKiBAcGFyYW0gaW5wdXRQYXRoXG4gICAgICogQHBhcmFtIG91dHB1dFBhdGhcbiAgICAgKi9cbiAgICBiaW5kUGF0aChpbnB1dFBhdGg6IElucHV0UGF0aCwgb3V0cHV0UGF0aDogT3V0cHV0UGF0aCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQmluZCBhbiBldmVudCByZWZlcmVuY2VkIGJ5IGBldmVudFBhdGhgIHRvIGEgW1tJQ29tcG9uZW50Lm5vdGlmeV1dIGNhbGwgYXQgYGVtaXRQYXRoYFxuICAgICAqXG4gICAgICogYGBgXG4gICAgICogY29uc3QgW3NjZW5lT2JqZWN0XSA9IGF3YWl0IHNkay5TY2VuZS5jcmVhdGVPYmplY3QoMSk7XG4gICAgICogY29uc3Qgbm9kZSA9IHNjZW5lT2JqZWN0LmNyZWF0ZU5vZGUoKTtcbiAgICAgKlxuICAgICAqIC8vIG15UmVjZWl2ZXIgaGFzIGFuIGBvbkV2ZW50YCBsaWZlY3ljbGUgZnVuY3Rpb24gYW5kIGFuIGBldmVudHNbJ2RvLnVwZGF0ZSddYCBwcm9wZXJ0eVxuICAgICAqIGNvbnN0IHJlY2VpdmVyID0gbm9kZS5hZGRDb21wb25lbnQoYG15UmVjZWl2ZXInKTtcbiAgICAgKiBjb25zdCBldmVudFBhdGggPSBzY2VuZU9iamVjdC5hZGRFdmVudFBhdGgocmVjZWl2ZXIsICdkby51cGRhdGUnLCAnbXktcmVjaWV2ZXItdXBkYXRlJyk7XG4gICAgICpcbiAgICAgKiAvLyBteUVtaXR0ZXIgY2FsbHMgbm90aWZ5IHdpdGggYW4gJ3VwZGF0ZWQnIGV2ZW50IGFuZCBoYXMgYW4gYGVtaXRzWyd1cGRhdGVkJ11gIHByb3BlcnR5XG4gICAgICogY29uc3QgZW1pdHRlciA9IG5vZGUuYWRkQ29tcG9uZW50KCdteUVtaXR0ZXInKTtcbiAgICAgKiBjb25zdCBlbWl0UGF0aCA9IHNjZW5lT2JqZWN0LmFkZEVtaXRQYXRoKGVtaXR0ZXIsICd1cGRhdGVkJywgJ215LWNvbXBvbmVudC11cGRhdGVkJyk7XG4gICAgICogc2NlbmVPYmplY3QuYmluZFBhdGgoZXZlbnRQYXRoLCBlbWl0UGF0aCk7XG4gICAgICpcbiAgICAgKiBub2RlLnN0YXJ0KCk7XG4gICAgICogLy8gcmVjZWl2ZXIub25FdmVudCgnZG8udXBkYXRlJywgLi4uKSB3aWxsIG5vdyBiZSBjYWxsZWQgd2hlbmV2ZXIgZW1pdHRlciBjYWxscyBub3RpZnkoJ3VwZGF0ZWQnKVxuICAgICAqIGBgYFxuICAgICAqIEBwYXJhbSBldmVudFBhdGhcbiAgICAgKiBAcGFyYW0gZW1pdFBhdGhcbiAgICAgKi9cbiAgICBiaW5kUGF0aChldmVudFBhdGg6IEV2ZW50UGF0aCwgZW1pdFBhdGg6IEVtaXRQYXRoKTogdm9pZDtcblxuICAgIC8qKlxuICAgICAqIFNweSBvbiBldmVudHMgb3IgaW5wdXQgYW5kIG91dHB1dCB2YWx1ZSBjaGFuZ2VzXG4gICAgICpcbiAgICAgKiBgYGBcbiAgICAgKiBjb25zdCBbc2NlbmVPYmplY3RdID0gYXdhaXQgc2RrLlNjZW5lLmNyZWF0ZU9iamVjdHMoMSk7XG4gICAgICogY29uc3Qgbm9kZSA9IHNjZW5lT2JqZWN0LmNyZWF0ZU5vZGUoKTtcbiAgICAgKlxuICAgICAqIC8vIG1wLm9iakxvYWRlciBoYXMgYW4gb3V0cHV0cy52aXNpYmxlIHByb3BlcnR5XG4gICAgICogY29uc3QgY29tcDEgPSBub2RlLmFkZENvbXBvbmVudCgnbXAub2JqTG9hZGVyJyk7XG4gICAgICogY29uc3Qgb3V0cHV0UGF0aCA9IHNjZW5lT2JqZWN0LmFkZE91dHB1dFBhdGgoY29tcDEsICd2aXNpYmxlJywgJ29iakxvYWRlci12aXNpYmxlJyk7XG4gICAgICpcbiAgICAgKiBjb25zdCBvdXRwdXRTcHkgPSB7XG4gICAgICogICBwYXRoOiBvdXRwdXRQYXRoLFxuICAgICAqICAgb25FdmVudCh0eXBlLCBkYXRhKSB7XG4gICAgICogICAgIGNvbnNvbGUubG9nKCdvdXRwdXRzIHVwZGF0ZWQnLCB0eXBlLCBkYXRhKTtcbiAgICAgKiAgIH1cbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogc2NlbmVPYmplY3Quc3B5T25FdmVudChvdXRwdXRTcHkpO1xuICAgICAqXG4gICAgICogbm9kZS5zdGFydCgpO1xuICAgICAqIC8vIG91dHB1dFNweS5vbkV2ZW50KCdvdXRwdXRzVXBkYXRlZCcsIGNvbXAxLm91dHB1dHMudmlzaWJsZSkgd2lsbCBub3cgYmUgY2FsbGVkIHdoZW5ldmVyIGNvbXAxLm91dHB1dHMudmlzaWJsZSBjaGFuZ2VzXG4gICAgICogYGBgXG4gICAgICogQHBhcmFtIHNweVxuICAgICAqL1xuICAgIHNweU9uRXZlbnQoc3B5OiBJU2NlbmVPYmplY3RTcHkpOiBJU3Vic2NyaXB0aW9uO1xuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgaW5wdXQgcHJvcGVydHkgb2YgYSBwYXRoLiBUaGUgcGF0aCBtdXN0IGJlIGFkZGVkIHByaW9yIHRvIGNhbGxpbmcgdGhpcyBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBwYXRoSWQgVGhlIHBhdGggaWQuXG4gICAgICogQHBhcmFtIHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gICAgICogQGRlcHJlY2F0ZWQgVXNlIFtbSW5wdXRQYXRoLnNldF1dIGluc3RlYWQuXG4gICAgICovXG4gICAgc2V0VmFsdWVBdFBhdGgocGF0aElkOiBzdHJpbmcsIHZhbHVlOiB1bmtub3duKTogdm9pZDtcblxuICAgIC8qKlxuICAgICAqIFJlYWRzIHRoZSBvdXRwdXQgcHJvcGVydHkgb2YgYSBwYXRoLiBUaGUgcGF0aCBtdXN0IGJlIGFkZGVkIHByaW9yIHRvIGNhbGxpbmcgdGhpcyBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBwYXRoSWRcbiAgICAgKiBAcmV0dXJucyB0aGUgdmFsdWUgb2YgdGhlIG91dHB1dCBwcm9wZXJ0eS5cbiAgICAgKiBAZGVwcmVjYXRlZCBVc2UgW1tJbnB1dFBhdGguZ2V0XV0gb3IgW1tPdXRwdXRQYXRoLmdldF1dIGluc3RlYWQuXG4gICAgICovXG4gICAgZ2V0VmFsdWVBdFBhdGgocGF0aElkOiBzdHJpbmcpOiB1bmtub3duO1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhbiBpdGVyYXRvciBjb250YWluaW5nIGEgcGF0aCBhbmQgaXRzIGRlc2NyaXB0b3IuIFR5cGljYWxseSB1c2VkIHRvIGFjY2VzcyB0aGUgcGF0aHMgZnJvbSBhIGRlc2VyaWFsaXplZCBzY2VuZSBvYmplY3QuXG4gICAgICpcbiAgICAgKiBgYGBcbiAgICAgKiAvLyBUaGlzIGV4YW1wbGUgc2V0cyB0aGUgdmFsdWVzIG9mIGFsbCBpbnB1dCBwYXRocyBwcm92aWRlZCBieSBkZXNlcmlhbGl6ZWQgc2NlbmUgb2JqZWN0LlxuICAgICAqXG4gICAgICogY29uc3QgZGVzZXJpYWxpemVkID0gYXdhaXQgc2RrLlNjZW5lLmRlc2VyaWFsaXplKG15U3RyaW5nKTtcbiAgICAgKiBjb25zdCBwYXRocyA9IGRlc2VyaWFsaXplZC5wYXRoSXRlcmF0b3IoKTtcbiAgICAgKiBmb3IgKGNvbnN0IHsgZGVzYywgcGF0aCB9IG9mIHBhdGhzKSB7XG4gICAgICogICBpZiAoZGVzYy50eXBlID09PSBTY2VuZS5QYXRoVHlwZS5JTlBVVCkge1xuICAgICAqICAgICAvLyB3ZSBrbm93IHRoaXMgcGF0aCBpcyBhbiBpbnB1dCBwYXRoXG4gICAgICogICAgIGNvbnN0IGlucHV0UGF0aCA9IGRlc2MucGF0aCBhcyBTY2VuZS5JbnB1dFBhdGg7XG4gICAgICpcbiAgICAgKiAgICAgLy8gTm93IHlvdSBjYW4gc2V0IHRoZSB2YWx1ZSBhdCB0aGUgcGF0aFxuICAgICAqICAgICAvLyBZb3UgY2FuIGNhY2hlIHRoZSByZXR1cm5lZCBpbnB1dCBwYXRoIHRvIHVzZSBpdCBsYXRlci5cbiAgICAgKiAgICAgaW5wdXRQYXRoLnNldCgxMCk7XG4gICAgICogICB9XG4gICAgICogfVxuICAgICAqIGBgYFxuICAgICAqL1xuICAgIHBhdGhJdGVyYXRvcigpOiBJdGVyYWJsZUl0ZXJhdG9yPFBhdGhJbmZvPjtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgaW4gaXRlcmF0b3IgaXRlcmF0aW5nIG92ZXIgYWxsIHRoZSBub2RlcyBjb250YWluZWQgYnkgdGhpcyBvYmplY3QuXG4gICAgICovXG4gICAgbm9kZUl0ZXJhdG9yKCk6IEl0ZXJhYmxlSXRlcmF0b3I8SU5vZGU+O1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBvYmplY3RzIHJldHVybmVkIGJ5IHRoZSBbW3BhdGhJdGVyYXRvcl1dIGltcGxlbWVudCB0aGlzIGludGVyZmFjZS4gRWFjaCBkZXNjcmlwdG9yIGFuZCBwYXRoIHNob3VsZCBjb3JyZWxhdGUgYnkgdHlwZS5cbiAgICogRm9yIGV4YW1wbGUsIGEgcGF0aCBvZiB0eXBlIFtbUGF0aFR5cGUuSU5QVVRdXSB3b3VsZCBoYXZlIGEgZGVzY3JpcHRvciBvZiB0eXBlIFtbSW5wdXRQYXRoRGVzY3JpcHRvcl1dIGFuZCBwYXRoIG9mIHR5cGUgW1tJbnB1dFBhdGhdXS5cbiAgICovXG4gIGV4cG9ydCBpbnRlcmZhY2UgUGF0aEluZm8ge1xuICAgIGRlc2M6IElucHV0UGF0aERlc2NyaXB0b3IgfCBPdXRwdXRQYXRoRGVzY3JpcHRvciB8IEVtaXRQYXRoRGVzY3JpcHRvciB8IEV2ZW50UGF0aERlc2NyaXB0b3I7XG4gICAgcGF0aDogSW5wdXRQYXRoIHwgT3V0cHV0UGF0aCB8IEVtaXRQYXRoIHwgRXZlbnRQYXRoO1xuICB9XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2NlbmUge1xuICBDb21wb25lbnQ6IHR5cGVvZiBTY2VuZS5Db21wb25lbnQ7XG4gIEludGVyYWN0aW9uVHlwZTogdHlwZW9mIFNjZW5lLkludGVyYWN0aW9uVHlwZTtcbiAgUGF0aFR5cGU6IHR5cGVvZiBTY2VuZS5QYXRoVHlwZTtcblxuICAvKipcbiAgICogVGhpcyBpcyBhIGNvbnZlbmllbmNlIGZ1bmN0aW9uIHRoYXQgcHJvdmlkZXMgYWNjZXNzIHRvIHRocmVlLmpzIGZyYW1ld29yayBvYmplY3RzLlxuICAgKiBUeXBpY2FsbHkgdXNlZCB0byBjb25maWd1cmUgZ2xvYmFsIHByb3BlcnRpZXMgb24gdGhlIHJlbmRlcmVyIG9yIGVmZmVjdCBjb21wb3Nlci5cbiAgICpcbiAgICogYGBgXG4gICAqIGF3YWl0IHNkay5TY2VuZS5jb25maWd1cmUoZnVuY3Rpb24ocmVuZGVyZXIsIHRocmVlLCBlZmZlY3RDb21wb3Nlcil7XG4gICAqICAgLy8gY29uZmlndXJlIFBCUlxuICAgKiAgIHJlbmRlcmVyLnBoeXNpY2FsbHlDb3JyZWN0TGlnaHRzID0gdHJ1ZTtcbiAgICpcbiAgICogICAvLyBjb25maWd1cmUgc2hhZG93IG1hcHBpbmdcbiAgICogICByZW5kZXJlci5zaGFkb3dNYXAuZW5hYmxlZCA9IHRydWU7XG4gICAqICAgcmVuZGVyZXIuc2hhZG93TWFwLmJpYXMgPSAwLjAwMDE7XG4gICAqICAgcmVuZGVyZXIuc2hhZG93TWFwLnR5cGUgPSB0aHJlZS5QQ0ZTb2Z0U2hhZG93TWFwO1xuICAgKlxuICAgKiAgIGlmIChlZmZlY3RDb21wb3Nlcikge1xuICAgKiAgICAgLy8gYWRkIGEgY3VzdG9tIHBhc3MgaGVyZVxuICAgKiAgIH1cbiAgICogfSk7XG4gICAqIGBgYFxuICAgKlxuICAgKiBAcGFyYW0gY2FsbGJhY2sucmVuZGVyZXIgTWF0dGVycG9ydCdzIFdlYkdMUmVuZGVyZXIgb2JqZWN0LlxuICAgKiBAcGFyYW0gY2FsbGJhY2sudGhyZWUgdGhyZWUuanMgbW9kdWxlLlxuICAgKiBAcGFyYW0gY2FsbGJhY2suZWZmZWN0Q29tcG9zZXIgTWF0dGVycG9ydCdzIEVmZmVjdENvbXBvc2VyIG9iamVjdC4gVGhpcyB2YWx1ZSBjYW4gYmUgbnVsbC5cbiAgICogVG8gZW5hYmxlIHRoZSBlZmZlY3QgY29tcG9zZXIsIHlvdSBtdXN0IHNldCB1c2VFZmZlY3RDb21wb3NlcjogMSBpbiB5b3VyIGFwcGxpY2F0aW9uIGNvbmZpZy5cbiAgICogUGxlYXNlIG5vdGUgdGhhdCBlbmFibGluZyBlZmZlY3QgY29tcG9zZXIgZGlzYWJsZXMgcmVuZGVyZXIuYW50aWFsaWFzICgmYWE9MSlcbiAgICpcbiAgICogQGJ1bmRsZVxuICAgKi9cbiAgY29uZmlndXJlKFxuICAgIGNhbGxiYWNrOiAocmVuZGVyZXI6IFRIUkVFLldlYkdMUmVuZGVyZXIsIHRocmVlOiB0eXBlb2YgVEhSRUUsIGVmZmVjdENvbXBvc2VyOiBFZmZlY3RDb21wb3NlciB8IG51bGwpID0+IHZvaWRcbiAgKTogUHJvbWlzZTx2b2lkPjtcblxuICAvKipcbiAgICogQ3JlYXRlcyBhIHNjZW5lIG5vZGUuXG4gICAqIEByZXR1cm4gQSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCB0aGUgbmV3IHNjZW5lIG5vZGUuXG4gICAqIEBkZXByZWNhdGVkIFVzZSBbW2NyZWF0ZU9iamVjdHNdXSB0byBjcmVhdGUgYW4gb2JqZWN0IHRvIHRoZW4gY3JlYXRlIG5vZGVzIGluc3RlYWQuXG4gICAqXG4gICAqIEBidW5kbGVcbiAgICovXG4gIGNyZWF0ZU5vZGUoKTogUHJvbWlzZTxTY2VuZS5JTm9kZT47XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYW4gYXJyYXkgb2Ygc2NlbmUgbm9kZXMuXG4gICAqIEBwYXJhbSBjb3VudCBUaGUgbnVtYmVyIG9mIHNjZW5lIG5vZGVzIHRvIGNyZWF0ZS5cbiAgICogQHJldHVybiBBIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aXRoIHRoZSBhcnJheSBvZiBzY2VuZSBub2Rlcy5cbiAgICogQGRlcHJlY2F0ZWQgVXNlIFtbY3JlYXRlT2JqZWN0c11dIHRvIGNyZWF0ZSBhbiBvYmplY3QgdG8gdGhlbiBjcmVhdGUgbm9kZXMgaW5zdGVhZC5cbiAgICpcbiAgICogQGJ1bmRsZVxuICAgKi9cbiAgY3JlYXRlTm9kZXMoY291bnQ6IG51bWJlcik6IFByb21pc2U8U2NlbmUuSU5vZGVbXT47XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYW4gYXJyYXkgb2Ygc2NlbmUgb2JqZWN0cy5cbiAgICogQHBhcmFtIGNvdW50IFRoZSBudW1iZXIgb2Ygc2NlbmUgb2JqZWN0cyB0byBjcmVhdGUuXG4gICAqIEByZXR1cm4gQSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCB0aGUgYXJyYXkgb2Ygc2NlbmUgb2JqZWN0cy5cbiAgICogYGBgXG4gICAqIC8vIGNyZWF0ZSBhIHNpbmdsZSBvYmplY3QgYW5kIGRlc3RydWN0dXJlIGl0IGZyb20gdGhlIHJldHVybmVkIGFycmF5XG4gICAqIGNvbnN0IFtzY2VuZU9iamVjdF0gPSBhd2FpdCBzZGsuU2NlbmUuY3JlYXRlT2JqZWN0cygxKTtcbiAgICogY29uc3Qgbm9kZSA9IHNjZW5lT2JqZWN0LmNyZWF0ZU5vZGUoKTtcbiAgICogLy8gLi4uXG4gICAqIGBgYFxuICAgKlxuICAgKiBAYnVuZGxlXG4gICAqL1xuICBjcmVhdGVPYmplY3RzKGNvdW50OiBudW1iZXIpOiBQcm9taXNlPFNjZW5lLklPYmplY3RbXT47XG5cbiAgLyoqXG4gICAqIFRoaXMgZnVuY3Rpb24gcmV0dXJucyBhIHNjZW5lIG9iamVjdCB3aXRoIGFsbCBvZiBpdHMgc2NlbmUgbm9kZXMgZnJvbSBhIHNlcmlhbGl6ZWQgc2NlbmUuXG4gICAqIFRoZSByZXR1cm5lZCBzY2VuZSBvYmplY3QgaGFzIG5vdCBiZWVuIHN0YXJ0ZWQgeWV0LlxuICAgKiBAcGFyYW0gdGV4dCBUaGUgc2VyaWFsaXplZCBzY2VuZS5cbiAgICogQHJldHVybiBBIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aXRoIGEgc2NlbmUgb2JqZWN0LlxuICAgKlxuICAgKiBAYnVuZGxlXG4gICAqL1xuICBkZXNlcmlhbGl6ZSh0ZXh0OiBzdHJpbmcpOiBQcm9taXNlPFNjZW5lLklPYmplY3Q+O1xuXG4gIC8qKlxuICAgKiBTZXJpYWxpemUgYSBzY2VuZSBvYmplY3QsIGl0cyBub2RlcywgYW5kIHRoZWlyIGNvbXBvbmVudHMgdG8gYSBzdHJpbmcuXG4gICAqIEBwYXJhbSBzY2VuZU9iamVjdFxuICAgKiBAcmV0dXJuIEEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdpdGggdGhlIHNlcmlhbGl6ZWQgc3RyaW5nLlxuICAgKlxuICAgKiBAYnVuZGxlXG4gICAqL1xuICBzZXJpYWxpemUoc2NlbmVPYmplY3Q6IFNjZW5lLklPYmplY3QpOiBQcm9taXNlPHN0cmluZz47XG5cbiAgLyoqXG4gICAqIFRoaXMgZnVuY3Rpb24gc2VyaWFsaXplcyBhbiBhcnJheSBvZiBzY2VuZSBub2RlcyBhbmQgdGhlaXIgY29tcG9uZW50cyB0byBhIHN0cmluZy5cbiAgICogVGhpcyBmdW5jdGlvbiBpcyBvbmx5IHByb3ZpZGVkIHRvIHByb3ZpZGUgYW4gdXBncmFkZSBwYXRoIGZyb20gbm9kZXMgdGhhdCB3ZXJlIGNyZWF0ZWQgYmVmb3JlIHRoZSBpbnRyb2R1Y3Rpb24gb2YgYElPYmplY3Rgcy5cbiAgICpcbiAgICogQHBhcmFtIHNjZW5lTm9kZXMgQW4gYXJyYXkgb2Ygc2NlbmUgbm9kZXMuXG4gICAqIEByZXR1cm4gQSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCB0aGUgc2VyaWFsaXplZCBzdHJpbmcuXG4gICAqXG4gICAqIEBidW5kbGVcbiAgICogQGRlcHJlY2F0ZWQgUHJlZmVyIHRvIHNlcmlhbGl6ZSBhbiBhcnJheSBvZiBgU2NlbmUuSU5vZGVgIHRocm91Z2ggdGhlaXIgY29udGFpbmluZyBgU2NlbmUuSU9iamVjdGAgaW5zdGVhZC5cbiAgICovXG4gIHNlcmlhbGl6ZShzY2VuZU5vZGVzOiBTY2VuZS5JTm9kZVtdKTogUHJvbWlzZTxzdHJpbmc+O1xuXG5cbiAgLyoqXG4gICAqIFJlZ2lzdGVyIGEgY29tcG9uZW50IGZhY3RvcnkuXG4gICAqIEBwYXJhbSBuYW1lIEEgdW5pcXVlIGNvbXBvbmVudCBuYW1lLlxuICAgKiBAcGFyYW0gZmFjdG9yeSBBIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhIG5ldyBpbnN0YW5jZSBvZiB0aGUgY29tcG9uZW50LlxuICAgKlxuICAgKiBAYnVuZGxlXG4gICAqIEByZXR1cm4gYSBkaXNwb3NhYmxlIHRoYXQgY2FuIGJlIHVzZWQgdG8gdW5yZWdpc3RlciB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgcmVnaXN0ZXIobmFtZTogc3RyaW5nLCBmYWN0b3J5OiAoKSA9PiBTY2VuZS5JQ29tcG9uZW50KTogUHJvbWlzZTxJRGlzcG9zYWJsZSB8IG51bGw+O1xuXG4gIC8qKlxuICAgKiBSZWdpc3RlciBhbiBhcnJheSBvZiBjb21wb25lbnQgZmFjdG9yaWVzIGFsbCBhdCBvbmNlIGFuZCByZXR1cm4gYW4gYXJyYXkgb2YgZGlzcG9zYWJsZXMuXG4gICAqIENhbGxpbmcgZGlzcG9zZSBvbiBhbnkgb2YgdGhlIHJldHVybmVkIGRpc3Bvc2FibGVzLCB1bnJlZ2lzdGVycyB0aGUgY29tcG9uZW50LlxuICAgKlxuICAgKlxuICAgKiBgYGBcbiAgICogZnVuY3Rpb24gbXlDb21wb25lbnQxRmFjdG9yeSgpIHtcbiAgICogICAgcmV0dXJuIG5ldyBNeUNvbXBvbmVudDEoKTtcbiAgICogfVxuICAgKlxuICAgKiBmdW5jdGlvbiBteUNvbXBvbmVudDJGYWN0b3J5KCkge1xuICAgKiAgICByZXR1cm4gbmV3IE15Q29tcG9uZW50MigpO1xuICAgKiB9XG4gICAqXG4gICAqIGNvbnN0IGRpc3Bvc2FibGVzID0gYXdhaXQgc2RrLlNjZW5lLnJlZ2lzdGVyQ29tcG9uZW50cyhbXG4gICAqICAge1xuICAgKiAgICAgbmFtZTogJ215Q29tcG9uZW50MScsXG4gICAqICAgICBmYWN0b3J5OiBteUNvbXBvbmVudDFGYWN0b3J5LFxuICAgKiAgIH0sXG4gICAqICAge1xuICAgKiAgICAgbmFtZTogJ215Q29tcG9uZW50MicsXG4gICAqICAgICBmYWN0b3J5OiBteUNvbXBvbmVudDJGYWN0b3J5LFxuICAgKiAgIH0sXG4gICAqIF0pO1xuICAgKlxuICAgKiAvLyB3aGVuIHlvdSBhcmUgZG9uZSB3aXRoIHRoZSBjb21wb25lbnRzLCB5b3UgY2FuIHVucmVnaXN0ZXIgdGhlIGNvbXBvbmVudHMgYnkgY2FsbGluZyBkaXNwb3NlIG9uIGVhY2ggaXRlbSBpbiB0aGUgcmV0dXJuIHJlc3VsdC5cbiAgICogZm9yIChjb25zdCBkaXNwb3NhYmxlIG9mIGRpc3Bvc2FibGVzKSB7XG4gICAqICAgZGlzcG9zYWJsZS5kaXNwb3NlKCk7XG4gICAqIH1cbiAgICpcbiAgICogYGBgXG4gICAqXG4gICAqIEBwYXJhbSBjb21wb25lbnRzIEFuIGFycmF5IG9mIFtbSUNvbXBvbmVudERlc2NdXVxuICAgKiBAcmV0dXJuIGFuIGFycmF5IG9mIGRpc3Bvc2FibGVzIHRoYXQgdW5yZWdpc3RlciB0aGUgY29tcG9uZW50cyB3aGVuIGRpc3Bvc2VkLlxuICAgKlxuICAgKiBAYnVuZGxlXG4gICAqL1xuICByZWdpc3RlckNvbXBvbmVudHMoY29tcG9uZW50czogU2NlbmUuSUNvbXBvbmVudERlc2NbXSk6IFByb21pc2U8SURpc3Bvc2FibGVbXSB8IG51bGw+O1xuXG4gIHVucmVnaXN0ZXJDb21wb25lbnRzKGNvbXBvbmVudHM6IFNjZW5lLklDb21wb25lbnREZXNjW10pOiBQcm9taXNlPHZvaWQ+O1xufVxuIiwiZXhwb3J0IGVudW0gS2V5cyB7XG4gIEJBQ0tTUEFDRSA9IDgsXG4gIFRBQiA9IDksXG4gIFJFVFVSTiA9IDEzLFxuICBTSElGVCA9IDE2LFxuICBDT05UUk9MID0gMTcsXG4gIEFMVCA9IDE4LFxuICBFU0NBUEUgPSAyNyxcbiAgU1BBQ0UgPSAzMixcbiAgSEFTSCA9IDM1LFxuICBMRUZUQVJST1cgPSAzNyxcbiAgVVBBUlJPVyA9IDM4LFxuICBSSUdIVEFSUk9XID0gMzksXG4gIERPV05BUlJPVyA9IDQwLFxuICBERUxFVEUgPSA0NixcbiAgWkVSTyA9IDQ4LFxuICBPTkUgPSA0OSxcbiAgVFdPID0gNTAsXG4gIFRIUkVFID0gNTEsXG4gIEZPVVIgPSA1MixcbiAgRklWRSA9IDUzLFxuICBTSVggPSA1NCxcbiAgU0VWRU4gPSA1NSxcbiAgRUlHSFQgPSA1NixcbiAgTklORSA9IDU3LFxuICBBVCA9IDY0LFxuICBBID0gNjUsXG4gIEIgPSA2NixcbiAgQyA9IDY3LFxuICBEID0gNjgsXG4gIEUgPSA2OSxcbiAgRiA9IDcwLFxuICBHID0gNzEsXG4gIEggPSA3MixcbiAgSSA9IDczLFxuICBKID0gNzQsXG4gIEsgPSA3NSxcbiAgTCA9IDc2LFxuICBNID0gNzcsXG4gIE4gPSA3OCxcbiAgTyA9IDc5LFxuICBQID0gODAsXG4gIFEgPSA4MSxcbiAgUiA9IDgyLFxuICBTID0gODMsXG4gIFQgPSA4NCxcbiAgVSA9IDg1LFxuICBWID0gODYsXG4gIFcgPSA4NyxcbiAgWCA9IDg4LFxuICBZID0gODksXG4gIFogPSA5MCxcbiAgU0VNSUNPTE9OID0gMTg2LFxuICBQTFVTRVFVQUxTID0gMTg3LFxuICBDT01NQSA9IDE4OCxcbiAgREFTSFVOREVSU0NPUkUgPSAxODksXG4gIFBFUklPRCA9IDE5MCxcbiAgT1BFTkJSQUNLRVQgPSAyMTksXG59XG4iLCJleHBvcnQgZW51bSBLZXlTdGF0ZSB7XG4gIERPV04sXG4gIFBSRVNTRUQsXG4gIFVQLFxufVxuIiwiZXhwb3J0IGVudW0gUG9pbnRlckJ1dHRvbiB7XG4gIFBSSU1BUlksXG4gIE1JRERMRSxcbiAgU0VDT05EQVJZLFxuICBCQUNLLFxuICBGT1JXQVJELFxuICBDT1VOVFxufVxuXG5leHBvcnQgZW51bSBQb2ludGVyQnV0dG9uTWFzayB7XG4gIE5PTkUsXG4gIFBSSU1BUlkgPSAxIDw8IFBvaW50ZXJCdXR0b24uUFJJTUFSWSxcbiAgU0VDT05EQVJZID0gMSA8PCBQb2ludGVyQnV0dG9uLlNFQ09OREFSWSxcbiAgTUlERExFID0gMSA8PCBQb2ludGVyQnV0dG9uLk1JRERMRSxcbiAgQkFDSyA9IDEgPDwgUG9pbnRlckJ1dHRvbi5CQUNLLFxuICBGT1JXQVJEID0gMSA8PCBQb2ludGVyQnV0dG9uLkZPUldBUkQsXG4gIEFMTCA9ICgxIDw8IFBvaW50ZXJCdXR0b24uQ09VTlQpIC0gMVxufVxuIiwiaW1wb3J0IHsgRnJhZ21lbnQsIHVzZUNhbGxiYWNrLCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcblxuaW50ZXJmYWNlIFByb3BzIHtcbiAgbGFiZWw6IHN0cmluZztcbiAgY3JlYXRlTGluaygpOiBQcm9taXNlPHN0cmluZz47XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBMaW5rQ3JlYXRlKHByb3BzOiBQcm9wcyk6IEpTWC5FbGVtZW50IHtcbiAgY29uc3QgW2xpbmssIHNldExpbmtdID0gdXNlU3RhdGU8c3RyaW5nPignJyk7XG5cbiAgY29uc3QgY2FsbGJhY2sgPSB1c2VDYWxsYmFjayhhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgbmV3TGluayA9IGF3YWl0IHByb3BzLmNyZWF0ZUxpbmsoKTtcbiAgICBzZXRMaW5rKG5ld0xpbmspO1xuICB9LCBbcHJvcHNdKTtcblxuICByZXR1cm4gKFxuICAgIDxGcmFnbWVudD5cbiAgICAgIDxidXR0b24gb25DbGljaz17Y2FsbGJhY2t9Pntwcm9wcy5sYWJlbH08L2J1dHRvbj5cbiAgICAgIDxici8+XG4gICAgICA8dGV4dGFyZWEgc3R5bGU9e3toZWlnaHQ6ICczLjVlbSd9fSB2YWx1ZT17bGlua30gcmVhZE9ubHk9e3RydWV9Lz5cbiAgICA8L0ZyYWdtZW50PlxuICApO1xufVxuIiwiaW1wb3J0IHsgTGluayB9IGZyb20gJ0BzZGsvdHlwZXMnO1xuaW1wb3J0IHsgdXNlQ2FsbGJhY2sgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgdHlwZSB7IFN5bnRoZXRpY0V2ZW50IH0gZnJvbSAncmVhY3QnO1xuXG5pbnRlcmZhY2UgQ3JlYXRpb25Qcm9wcyB7XG4gIHNldFBvbGljeShwb2xpY3k6IExpbmsuQ3JlYXRpb25Qb2xpY3ksIG9wdGlvbnM/OiBQYXJ0aWFsPExpbmsuQ3JlYXRlTGlua09wdGlvbnM+KTogdm9pZDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIENyZWF0aW9uUG9saWN5KHByb3BzOiBDcmVhdGlvblByb3BzKTogSlNYLkVsZW1lbnQge1xuICBjb25zdCBvcHRpb25LZXlzID0gT2JqZWN0LmtleXMoTGluay5DcmVhdGlvblBvbGljeSkgYXMgQXJyYXk8a2V5b2YgdHlwZW9mIExpbmsuQ3JlYXRpb25Qb2xpY3k+O1xuICBjb25zdCBvcHRpb25zID0gb3B0aW9uS2V5cy5tYXAoKGtleSwgaSkgPT4gPG9wdGlvbiBrZXk9e2l9IHZhbHVlPXtMaW5rLkNyZWF0aW9uUG9saWN5W2tleV19PntrZXl9PC9vcHRpb24+KTtcblxuICBjb25zdCBzZXRQb2xpY3kgPSB1c2VDYWxsYmFjaygoc2VsZWN0b3I6IFN5bnRoZXRpY0V2ZW50PEhUTUxTZWxlY3RFbGVtZW50PikgPT4ge1xuICAgIGNvbnN0IHBvbGljeSA9IHNlbGVjdG9yLmN1cnJlbnRUYXJnZXQudmFsdWUgYXMgTGluay5DcmVhdGlvblBvbGljeTtcbiAgICBpZiAocG9saWN5ID09PSBMaW5rLkNyZWF0aW9uUG9saWN5Lk1BVFRFUlBPUlQpIHtcbiAgICAgIHByb3BzLnNldFBvbGljeShwb2xpY3kpO1xuICAgIH0gZWxzZSB7XG4gICAgICBwcm9wcy5zZXRQb2xpY3kocG9saWN5LCB7XG4gICAgICAgIGluY2x1ZGVQYXJhbXM6IHBvbGljeSA9PT0gTGluay5DcmVhdGlvblBvbGljeS5SRUZFUlJFUiA/IFsnYXBpSG9zdCcsICdhcHBsaWNhdGlvbktleSddOiBbJ2FwaUhvc3QnXSxcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwgW3Byb3BzXSk7XG5cbiAgcmV0dXJuIChcbiAgICA8c2VsZWN0IG9uQ2hhbmdlPXtzZXRQb2xpY3l9PlxuICAgICAge29wdGlvbnN9XG4gICAgPC9zZWxlY3Q+XG4gICk7XG59XG5cbmludGVyZmFjZSBPcGVuUHJvcHMge1xuICBzZXRQb2xpY3kocG9saWN5OiBMaW5rLk9wZW5Qb2xpY3ksIG9wdGlvbnM6IFBhcnRpYWw8TGluay5PcGVuUG9saWN5T3B0aW9ucz4pOiB2b2lkO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gT3BlbmluZ1BvbGljeShwcm9wczogT3BlblByb3BzKTogSlNYLkVsZW1lbnQge1xuICBjb25zdCBvcHRpb25LZXlzID0gT2JqZWN0LmtleXMoTGluay5PcGVuUG9saWN5KSBhcyBBcnJheTxrZXlvZiB0eXBlb2YgTGluay5PcGVuUG9saWN5PjtcbiAgY29uc3Qgb3B0aW9ucyA9IG9wdGlvbktleXMubWFwKChrZXksIGkpID0+IDxvcHRpb24ga2V5PXtpfSB2YWx1ZT17TGluay5PcGVuUG9saWN5W2tleV19PntrZXl9PC9vcHRpb24+KTtcblxuICBjb25zdCBzZXRQb2xpY3kgPSB1c2VDYWxsYmFjaygoc2VsZWN0b3I6IFN5bnRoZXRpY0V2ZW50PEhUTUxTZWxlY3RFbGVtZW50PikgPT4ge1xuICAgIGNvbnN0IHBvbGljeSA9IHNlbGVjdG9yLmN1cnJlbnRUYXJnZXQudmFsdWUgYXMgTGluay5PcGVuUG9saWN5O1xuICAgIHByb3BzLnNldFBvbGljeShwb2xpY3ksIHtcbiAgICAgIHRlbXBsYXRlSHJlZjogd2luZG93LmxvY2F0aW9uLm9yaWdpbiArIHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZSArICc/JHtidW5kbGVWZXJzaW9ufSYke2FwaUhvc3R9JiR7bWRzfSYke2FwcGxpY2F0aW9uS2V5fScsXG4gICAgfSk7XG4gIH0sIFtwcm9wc10pO1xuXG4gIHJldHVybiAoXG4gICAgPHNlbGVjdCBvbkNoYW5nZT17c2V0UG9saWN5fT5cbiAgICAgIHtvcHRpb25zfVxuICAgIDwvc2VsZWN0PlxuICApO1xufVxuXG5pbnRlcmZhY2UgRXh0ZXJuYWxMaW5rUG9saWN5UHJvcHMge1xuICBzZXRQb2xpY3kob3BlbkluTmV3V2luZG93OiBib29sZWFuKTogdm9pZDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIEV4dGVybmFsTGlua2luZ1BvbGljeShwcm9wczogRXh0ZXJuYWxMaW5rUG9saWN5UHJvcHMpOiBKU1guRWxlbWVudCB7XG5cbiAgY29uc3Qgc2V0UG9saWN5ID0gdXNlQ2FsbGJhY2soKHNlbGVjdG9yOiBTeW50aGV0aWNFdmVudDxIVE1MU2VsZWN0RWxlbWVudD4pID0+IHtcbiAgICBjb25zdCBuZXdXaW5kb3dQb2xpY3kgPSBzZWxlY3Rvci5jdXJyZW50VGFyZ2V0LnZhbHVlID09PSAnbmV3IHdpbmRvdyc7XG4gICAgcHJvcHMuc2V0UG9saWN5KG5ld1dpbmRvd1BvbGljeSk7XG4gIH0sIFtwcm9wc10pO1xuXG4gIHJldHVybiAoXG4gICAgPHNlbGVjdCBvbkNoYW5nZT17c2V0UG9saWN5fT5cbiAgICAgIDxvcHRpb24gdmFsdWU9eyduZXcgd2luZG93J30+TkVXIFdJTkRPVzwvb3B0aW9uPlxuICAgICAgPG9wdGlvbiB2YWx1ZT17J3NhbWUgd2luZG93J30+U0FNRSBXSU5ET1c8L29wdGlvbj5cbiAgICA8L3NlbGVjdD5cbiAgKTtcbn1cbiIsImltcG9ydCB7IEZyYWdtZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgTGlua0NyZWF0ZSB9IGZyb20gJy4vTGlua0NyZWF0ZSc7XG5pbXBvcnQgeyBPcGVuaW5nUG9saWN5LCBFeHRlcm5hbExpbmtpbmdQb2xpY3ksIENyZWF0aW9uUG9saWN5IH0gZnJvbSAnLi9MaW5rUG9saWN5JztcbmltcG9ydCB0eXBlIHsgTXBTZGsgfSBmcm9tICdAc2RrL3R5cGVzJztcblxuaW50ZXJmYWNlIFByb3BzIHtcbiAgc2RrOiBNcFNkaztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIExpbmsocHJvcHM6IFByb3BzKTogSlNYLkVsZW1lbnQge1xuICByZXR1cm4gKFxuICAgIDxGcmFnbWVudD5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPXtgY29udHJvbFBhbmVsYH0+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPXtgY29udHJvbFBhbmVsSGVhZGVyYH0+e2BMaW5rIC0gQ3JlYXRlYH08L2Rpdj5cbiAgICAgICAgPGxhYmVsPlBvbGljeTo8L2xhYmVsPjxDcmVhdGlvblBvbGljeSBzZXRQb2xpY3k9e3Byb3BzLnNkay5MaW5rLnNldFNoYXJlTGlua1BvbGljeX0vPlxuICAgICAgICA8YnIvPlxuICAgICAgICA8TGlua0NyZWF0ZSBsYWJlbD17J2NyZWF0ZUxpbmsnfSBjcmVhdGVMaW5rPXtwcm9wcy5zZGsuTGluay5jcmVhdGVMaW5rfS8+XG4gICAgICAgIDxici8+XG4gICAgICAgIDxMaW5rQ3JlYXRlIGxhYmVsPXsnY3JlYXRlRGVlcExpbmsnfSBjcmVhdGVMaW5rPXtwcm9wcy5zZGsuTGluay5jcmVhdGVEZWVwTGlua30vPlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT17YGNvbnRyb2xQYW5lbGB9PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT17YGNvbnRyb2xQYW5lbEhlYWRlcmB9PntgTGluayAtIFNldCBQb2xpY3lgfTwvZGl2PlxuICAgICAgICBPcGVuaW5nIHBvbGljaWVzOlxuICAgICAgICA8dGFibGU+XG4gICAgICAgICAgPHRib2R5PlxuICAgICAgICAgICAgPHRyPlxuICAgICAgICAgICAgICA8dGQ+TW9kZWw6PC90ZD48dGQ+PE9wZW5pbmdQb2xpY3kgc2V0UG9saWN5PXtwcm9wcy5zZGsuTGluay5zZXRNb2RlbExpbmtQb2xpY3l9Lz48L3RkPlxuICAgICAgICAgICAgPC90cj5cbiAgICAgICAgICAgIDx0cj5cbiAgICAgICAgICAgICAgPHRkPk5hdmlnYXRpb246PC90ZD48dGQ+PE9wZW5pbmdQb2xpY3kgc2V0UG9saWN5PXtwcm9wcy5zZGsuTGluay5zZXROYXZpZ2F0aW9uTGlua1BvbGljeX0vPjwvdGQ+XG4gICAgICAgICAgICA8L3RyPlxuICAgICAgICAgICAgPHRyPlxuICAgICAgICAgICAgICA8dGQ+U2FtZSBPcmlnaW46PC90ZD48dGQ+PE9wZW5pbmdQb2xpY3kgc2V0UG9saWN5PXtwcm9wcy5zZGsuTGluay5zZXRTYW1lT3JpZ2luTGlua1BvbGljeX0vPjwvdGQ+XG4gICAgICAgICAgICA8L3RyPlxuICAgICAgICAgICAgPHRyPlxuICAgICAgICAgICAgICA8dGQ+RXh0ZXJuYWw6PC90ZD48dGQ+PEV4dGVybmFsTGlua2luZ1BvbGljeSBzZXRQb2xpY3k9e3Byb3BzLnNkay5MaW5rLnNldEV4dGVybmFsTGlua1BvbGljeX0vPjwvdGQ+XG4gICAgICAgICAgICA8L3RyPlxuICAgICAgICAgIDwvdGJvZHk+XG4gICAgICAgIDwvdGFibGU+XG4gICAgICA8L2Rpdj5cbiAgICA8L0ZyYWdtZW50PlxuICApO1xufVxuIiwiaW1wb3J0IHR5cGUgeyBNcFNkayB9IGZyb20gJ0BzZGsvdHlwZXMnO1xuaW1wb3J0IHsgRnJhZ21lbnQsIHVzZUNhbGxiYWNrIH0gZnJvbSAncmVhY3QnO1xuXG5pbnRlcmZhY2UgUHJvcHMge1xuICBzZGs6IE1wU2RrO1xuICBzZWxlY3RlZE1hdHRlcnRhZzogc3RyaW5nO1xuICBzZWxlY3RlZEFzc2V0OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBFZGl0SWNvbihwcm9wczogUHJvcHMpOiBKU1guRWxlbWVudCB7XG5cbiAgY29uc3QgZWRpdEljb24gPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgcHJvcHMuc2RrLk1hdHRlcnRhZy5lZGl0SWNvbihwcm9wcy5zZWxlY3RlZE1hdHRlcnRhZywgcHJvcHMuc2VsZWN0ZWRBc3NldCk7XG4gIH0sIFtwcm9wcy5zZGsuTWF0dGVydGFnLCBwcm9wcy5zZWxlY3RlZEFzc2V0LCBwcm9wcy5zZWxlY3RlZE1hdHRlcnRhZ10pO1xuXG4gIGNvbnN0IHJlc2V0SWNvbiA9IHVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICBwcm9wcy5zZGsuTWF0dGVydGFnLnJlc2V0SWNvbihwcm9wcy5zZWxlY3RlZE1hdHRlcnRhZyk7XG4gIH0sIFtwcm9wcy5zZGsuTWF0dGVydGFnLCBwcm9wcy5zZWxlY3RlZE1hdHRlcnRhZ10pO1xuXG5cbiAgcmV0dXJuIChcbiAgICA8RnJhZ21lbnQ+XG4gICAgICA8ZGl2PlxuICAgICAgICA8YnV0dG9uIG9uQ2xpY2s9e2VkaXRJY29ufT5FZGl0IEljb248L2J1dHRvbj5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdj5cbiAgICAgICAgPGJ1dHRvbiBvbkNsaWNrPXtyZXNldEljb259PlJlc2V0IEljb248L2J1dHRvbj5cbiAgICAgIDwvZGl2PlxuICAgIDwvRnJhZ21lbnQ+XG4gICk7XG59XG4iLCJpbXBvcnQgdHlwZSB7IE1wU2RrIH0gZnJvbSAnQHNkay90eXBlcyc7XG5pbXBvcnQgeyBGcmFnbWVudCwgdXNlQ2FsbGJhY2ssIHVzZVJlZiB9IGZyb20gJ3JlYWN0JztcblxuaW50ZXJmYWNlIFByb3BzIHtcbiAgc2RrOiBNcFNkaztcbiAgc2VsZWN0ZWRNYXR0ZXJ0YWc6IHN0cmluZztcbiAgc2VsZWN0ZWRBc3NldDogc3RyaW5nO1xuICBhZGRBc3NldChpZDogc3RyaW5nLCBzcmM6IHN0cmluZyk6IHZvaWQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBSZWdpc3Rlckljb24ocHJvcHM6IFByb3BzKTogSlNYLkVsZW1lbnQge1xuICBjb25zdCBpZElucHV0ID0gdXNlUmVmPEhUTUxJbnB1dEVsZW1lbnQ+KG51bGwpO1xuICBjb25zdCBzcmNJbnB1dCA9IHVzZVJlZjxIVE1MSW5wdXRFbGVtZW50PihudWxsKTtcblxuICBjb25zdCByZWdpc3Rlckljb24gPSB1c2VDYWxsYmFjayhhc3luYyAoKSA9PiB7XG4gICAgaWYgKGlkSW5wdXQuY3VycmVudCAmJiBzcmNJbnB1dC5jdXJyZW50KSB7XG4gICAgICBjb25zdCBpZCA9IGlkSW5wdXQuY3VycmVudC52YWx1ZTtcbiAgICAgIGNvbnN0IHNyYyA9IHNyY0lucHV0LmN1cnJlbnQudmFsdWU7XG4gICAgICBhd2FpdCBwcm9wcy5zZGsuTWF0dGVydGFnLnJlZ2lzdGVySWNvbihpZCwgc3JjKTtcbiAgICAgIHByb3BzLmFkZEFzc2V0KGlkLCBzcmMpO1xuICAgIH1cbiAgfSwgW3Byb3BzXSk7XG5cbiAgcmV0dXJuIChcbiAgICA8RnJhZ21lbnQ+XG4gICAgICA8ZGl2PlxuICAgICAgICA8ZGl2IHN0eWxlPXt7IGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snLCB3aWR0aDogJzE1JScgfX0+XG4gICAgICAgICAgPGxhYmVsIGh0bWxGb3I9J21hdHRlcnRhZy1pY29uLWlkJz5pZDogPC9sYWJlbD5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgc3R5bGU9e3sgZGlzcGxheTogJ2lubGluZS1ibG9jaycsIHdpZHRoOiAnODUlJyAgfX0+XG4gICAgICAgICAgPGlucHV0IHJlZj17aWRJbnB1dH0gaWQ9J21hdHRlcnRhZy1pY29uLWlkJyB0eXBlPSdzdHJpbmcnLz5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXY+XG4gICAgICAgIDxkaXYgc3R5bGU9e3sgZGlzcGxheTogJ2lubGluZS1ibG9jaycsIHdpZHRoOiAnMTUlJyB9fT5cbiAgICAgICAgICA8bGFiZWwgaHRtbEZvcj0nbWF0dGVydGFnLWljb24tc3JjJz5zcmM6IDwvbGFiZWw+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IHN0eWxlPXt7IGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snLCB3aWR0aDogJzg1JScgIH19PlxuICAgICAgICAgIDxpbnB1dCByZWY9e3NyY0lucHV0fSBpZD0nbWF0dGVydGFnLWljb24tc3JjJyB0eXBlPSdzdHJpbmcnLz5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXY+XG4gICAgICAgIDxidXR0b24gb25DbGljaz17cmVnaXN0ZXJJY29ufT5SZWdpc3RlcjwvYnV0dG9uPlxuICAgICAgPC9kaXY+XG4gICAgPC9GcmFnbWVudD5cbiAgKTtcbn1cbiIsImltcG9ydCB7IEZyYWdtZW50LCB1c2VDYWxsYmFjaywgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgdHlwZSB7IE1wU2RrIH0gZnJvbSAnQHNkay90eXBlcyc7XG5pbXBvcnQgeyBDb250cm9sUGFuZWwgfSBmcm9tICcuLi9Db250cm9sUGFuZWwnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZUNvbGxlY3Rpb24gfSBmcm9tICcuLi9PYnNlcnZhYmxlQ29sbGVjdGlvbic7XG5pbXBvcnQgeyBDb2xsZWN0aW9uSW5zcGVjdG9yIH0gZnJvbSAnLi4vQ29sbGVjdGlvbkluc3BlY3Rvcic7XG5pbXBvcnQgeyBFZGl0SWNvbiB9IGZyb20gJy4vRWRpdEljb24nO1xuaW1wb3J0IHsgUmVnaXN0ZXJJY29uIH0gZnJvbSAnLi9SZWdpc3Rlckljb24nO1xuaW1wb3J0IHsgRXZlbnQgfSBmcm9tICcuLi9FdmVudCc7XG5cbmludGVyZmFjZSBQcm9wcyB7XG4gIHNkazogTXBTZGs7XG4gIHNlbGVjdGVkQXNzZXQ6IHN0cmluZztcbiAgYWRkQXNzZXQoaWQ6IHN0cmluZywgc3JjOiBzdHJpbmcpOiB2b2lkO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gTWF0dGVydGFnKHByb3BzOiBQcm9wcyk6IEpTWC5FbGVtZW50IHtcbiAgY29uc3QgW3NlbGVjdGVkTWF0dGVydGFnLCBzZWxlY3RNYXR0ZXJ0YWddID0gdXNlU3RhdGUoJycpO1xuXG4gIGNvbnN0IG1hdHRlcnRhZ09wdGlvbkxhYmVsID0gdXNlQ2FsbGJhY2soZnVuY3Rpb24gKGl0ZW06IE1wU2RrLk1hdHRlcnRhZy5PYnNlcnZhYmxlTWF0dGVydGFnRGF0YSk6IHN0cmluZyB7XG4gICAgcmV0dXJuIGl0ZW0ubGFiZWwgfHwgJyhubyBsYWJlbCknO1xuICB9LCBbXSk7XG5cbiAgY29uc3QgbWF0dGVydGFnT3B0aW9uU29ydCA9IHVzZUNhbGxiYWNrKGZ1bmN0aW9uIChpdGVtMTogTXBTZGsuTWF0dGVydGFnLk9ic2VydmFibGVNYXR0ZXJ0YWdEYXRhLCBpdGVtMjogTXBTZGsuTWF0dGVydGFnLk9ic2VydmFibGVNYXR0ZXJ0YWdEYXRhKTogbnVtYmVyIHtcbiAgICBpZiAoaXRlbTEubGFiZWwgPCBpdGVtMi5sYWJlbCkge1xuICAgICAgcmV0dXJuIC0xO1xuICAgIH1cbiAgICBpZiAoaXRlbTEubGFiZWwgPiBpdGVtMi5sYWJlbCkge1xuICAgICAgcmV0dXJuIDE7XG4gICAgfVxuICAgIHJldHVybiAwO1xuICB9LCBbXSk7XG5cblxuICBjb25zdCB7IHNkayB9ID0gcHJvcHM7XG4gIHJldHVybiAoXG4gICAgPEZyYWdtZW50PlxuICAgICAgPENvbnRyb2xQYW5lbCBoZWFkZXI9eydNYXR0ZXJ0YWcgLSBDb2xsZWN0aW9uJ30+XG4gICAgICAgIDxPYnNlcnZhYmxlQ29sbGVjdGlvblxuICAgICAgICAgIGNvbGxlY3Rpb249e3Nkay5NYXR0ZXJ0YWcuZGF0YX1cbiAgICAgICAgICBuYW1lPXsnTWF0dGVydGFncyd9XG4gICAgICAgIC8+XG4gICAgICA8L0NvbnRyb2xQYW5lbD5cblxuICAgICAgPENvbGxlY3Rpb25JbnNwZWN0b3JcbiAgICAgICAgbGFiZWw9eydNYXR0ZXJ0YWcnfVxuICAgICAgICBjb2xsZWN0aW9uPXtzZGsuTWF0dGVydGFnLmRhdGF9XG4gICAgICAgIG9uQ2hhbmdlZD17c2VsZWN0TWF0dGVydGFnfVxuICAgICAgICBvcHRpb25MYWJlbD17bWF0dGVydGFnT3B0aW9uTGFiZWx9XG4gICAgICAgIHNvcnQ9e21hdHRlcnRhZ09wdGlvblNvcnR9XG4gICAgICAvPlxuXG4gICAgICA8ZGl2IGNsYXNzTmFtZT17YGNvbnRyb2xQYW5lbGB9PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT17YGNvbnRyb2xQYW5lbEhlYWRlcmB9PntgTWF0dGVydGFnYH08L2Rpdj5cbiAgICAgICAgPHRhYmxlPlxuICAgICAgICAgIDx0Ym9keT5cbiAgICAgICAgICAgIDxFdmVudCBzZGs9e3Nka30gZW51bT17cHJvcHMuc2RrLk1hdHRlcnRhZy5FdmVudH0gLz5cbiAgICAgICAgICA8L3Rib2R5PlxuICAgICAgICA8L3RhYmxlPlxuICAgICAgPC9kaXY+XG5cbiAgICAgIDxDb250cm9sUGFuZWwgaGVhZGVyPXsnTWF0dGVydGFnIC0gRWRpdCBJY29uJ30+XG4gICAgICAgIDxFZGl0SWNvblxuICAgICAgICAgIHNkaz17c2RrfVxuICAgICAgICAgIHNlbGVjdGVkTWF0dGVydGFnPXtzZWxlY3RlZE1hdHRlcnRhZ31cbiAgICAgICAgICBzZWxlY3RlZEFzc2V0PXtwcm9wcy5zZWxlY3RlZEFzc2V0fVxuICAgICAgICAvPlxuICAgICAgPC9Db250cm9sUGFuZWw+XG5cbiAgICAgIDxDb250cm9sUGFuZWwgaGVhZGVyPXsnTWF0dGVydGFnIC0gUmVnaXN0ZXIgSWNvbid9PlxuICAgICAgICA8UmVnaXN0ZXJJY29uXG4gICAgICAgICAgc2RrPXtzZGt9XG4gICAgICAgICAgc2VsZWN0ZWRNYXR0ZXJ0YWc9e3NlbGVjdGVkTWF0dGVydGFnfVxuICAgICAgICAgIHNlbGVjdGVkQXNzZXQ9e3Byb3BzLnNlbGVjdGVkQXNzZXR9XG4gICAgICAgICAgYWRkQXNzZXQ9e3Byb3BzLmFkZEFzc2V0fVxuICAgICAgICAvPlxuICAgICAgPC9Db250cm9sUGFuZWw+XG5cbiAgICA8L0ZyYWdtZW50PlxuICApO1xufVxuIiwiaW1wb3J0IHsgdXNlQ2FsbGJhY2ssIHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHR5cGUgeyBDU1NQcm9wZXJ0aWVzIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHR5cGUgeyBNcFNkayB9IGZyb20gJ0BzZGsvdHlwZXMnO1xuXG5pbnRlcmZhY2UgUHJvcHMge1xuICBzZGs6IE1wU2RrO1xufVxuXG5jb25zdCB0ZXh0QXJlYVN0eWxlOiBDU1NQcm9wZXJ0aWVzID0ge1xuICBoZWlnaHQ6IDUwLFxufTtcblxuZXhwb3J0IGZ1bmN0aW9uIE1lYXN1cmVtZW50c0dldERhdGEocHJvcHM6IFByb3BzKTogSlNYLkVsZW1lbnQge1xuICBjb25zdCBbbWVzc2FnZSwgc2V0TWVzc2FnZV0gPSB1c2VTdGF0ZTxzdHJpbmc+KCcnKTtcblxuICBjb25zdCBjYWxsYmFjayA9IHVzZUNhbGxiYWNrKGFzeW5jICgpID0+IHtcbiAgICBsZXQgbWVhc3VyZW1lbnRzRGF0YTogYW55O1xuICAgIHRyeSB7XG4gICAgICBtZWFzdXJlbWVudHNEYXRhID0gYXdhaXQgcHJvcHMuc2RrLk1lYXN1cmVtZW50cy5nZXREYXRhKCk7XG5cbiAgICAgIHNldE1lc3NhZ2UoSlNPTi5zdHJpbmdpZnkobWVhc3VyZW1lbnRzRGF0YSkpO1xuICAgIH1cbiAgICBjYXRjaChlKSB7XG4gICAgICBzZXRNZXNzYWdlKGBlcnJvciAke2V9YCk7XG4gICAgfVxuXG4gIH0sIFtdKTtcblxuICByZXR1cm4gKFxuICAgIDx0cj5cbiAgICAgIDx0ZCBjb2xTcGFuPXsxfT5cbiAgICAgICAgPGJ1dHRvbiBvbkNsaWNrPXtjYWxsYmFja30+Z2V0RGF0YTwvYnV0dG9uPlxuICAgICAgPC90ZD5cbiAgICAgIDx0ZCBjb2xTcGFuPXsyfT5cbiAgICAgICAgPHRleHRhcmVhIHJvd3M9ezN9IHN0eWxlPXt0ZXh0QXJlYVN0eWxlfSB2YWx1ZT17bWVzc2FnZX0gcmVhZE9ubHk9e3RydWV9Lz5cbiAgICAgIDwvdGQ+XG4gICAgPC90cj5cbiAgKTtcbn1cbiIsImltcG9ydCB7IHR5cGUgTXBTZGsgfSBmcm9tICdAc2RrL3R5cGVzJztcbmltcG9ydCB7IHVzZUNhbGxiYWNrLCB1c2VFZmZlY3QsIHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnO1xuXG50eXBlIFByb3BzID0ge1xuICBzZGs6IE1wU2RrXG59O1xuXG5leHBvcnQgZnVuY3Rpb24gTWVhc3VyZW1lbnRNb2RlVG9nZ2xlKHtzZGt9OiBQcm9wcyk6IEpTWC5FbGVtZW50IHtcbiAgY29uc3QgW2FjdGl2ZSwgc2V0QWN0aXZlXSA9IHVzZVN0YXRlKGZhbHNlKTtcblxuICB1c2VFZmZlY3QoKCk9PiB7XG4gICAgY29uc3Qgc3ViID0gc2RrLk1lYXN1cmVtZW50cy5tb2RlLnN1YnNjcmliZSgobW9kZSkgPT4gc2V0QWN0aXZlKG1vZGUuYWN0aXZlKSk7XG4gICAgcmV0dXJuICgpID0+IHN1Yi5jYW5jZWwoKTtcbiAgfSwgW10pO1xuXG4gIGNvbnN0IHRvZ2dsZU1vZGUgPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgc2RrLk1lYXN1cmVtZW50cy50b2dnbGVNb2RlKCFhY3RpdmUpO1xuICB9LCBbYWN0aXZlLCBzZGsuTWVhc3VyZW1lbnRzXSk7XG5cbiAgcmV0dXJuIChcbiAgICA8PlxuICAgICAgPGRpdj5cbiAgICAgICAgPGJ1dHRvblxuICAgICAgICAgIG9uQ2xpY2s9e3RvZ2dsZU1vZGV9XG4gICAgICAgID5Ub2dnbGU8L2J1dHRvbj5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdj5cbiAgICAgICAgQWN0aXZlOiA8c3Bhbj57U3RyaW5nKGFjdGl2ZSl9PC9zcGFuPlxuICAgICAgPC9kaXY+XG4gICAgPC8+XG4gICk7XG59XG4iLCJpbXBvcnQgeyBNZWFzdXJlbWVudHNHZXREYXRhIH0gZnJvbSAnLi4vTWVhc3VyZW1lbnRzR2V0RGF0YSc7XG5pbXBvcnQgdHlwZSB7IE1wU2RrIH0gZnJvbSAnQHNkay90eXBlcyc7XG5pbXBvcnQgeyBDb250cm9sUGFuZWwgfSBmcm9tICcuLi9Db250cm9sUGFuZWwnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJy4uL09ic2VydmFibGUnO1xuaW1wb3J0IHsgQ29sbGVjdGlvbkluc3BlY3RvciB9IGZyb20gJy4uL0NvbGxlY3Rpb25JbnNwZWN0b3InO1xuXG5pbXBvcnQgeyBNZWFzdXJlbWVudE1vZGVUb2dnbGUgfSBmcm9tICcuL1RvZ2dsZSc7XG5cbmludGVyZmFjZSBQcm9wcyB7XG4gIHNkazogTXBTZGs7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBNZWFzdXJlbWVudHMoe3Nka306IFByb3BzKTogSlNYLkVsZW1lbnQge1xuICByZXR1cm4gKFxuICAgIDw+XG4gICAgICA8Q29sbGVjdGlvbkluc3BlY3RvclxuICAgICAgICBjb2xsZWN0aW9uPXtzZGsuTWVhc3VyZW1lbnRzLmRhdGF9XG4gICAgICAgIGxhYmVsPXsnTWVhc3VyZW1lbnRzJ31cbiAgICAgIC8+XG4gICAgICA8Q29udHJvbFBhbmVsIGhlYWRlcj17J01lYXN1cmVtZW50cyAtIE1vZGUnfT5cbiAgICAgICAgPE9ic2VydmFibGVcbiAgICAgICAgICBuYW1lPXsnbW9kZSd9XG4gICAgICAgICAgb2JzZXJ2YWJsZT17c2RrLk1lYXN1cmVtZW50cy5tb2RlfVxuICAgICAgICAvPlxuICAgICAgPC9Db250cm9sUGFuZWw+XG4gICAgICA8Q29udHJvbFBhbmVsIGhlYWRlcj17J01lYXN1cmVtZW50cyAtIFRvZ2dsZSd9PlxuICAgICAgICA8TWVhc3VyZW1lbnRNb2RlVG9nZ2xlXG4gICAgICAgICAgc2RrPXtzZGt9XG4gICAgICAgIC8+XG4gICAgICA8L0NvbnRyb2xQYW5lbD5cbiAgICAgIDxDb250cm9sUGFuZWwgaGVhZGVyPXsnTWVhc3VyZW1lbnRzIC0gR2V0RGF0YSd9PlxuICAgICAgICA8dGFibGU+XG4gICAgICAgICAgPHRib2R5PlxuICAgICAgICAgICAgPE1lYXN1cmVtZW50c0dldERhdGEgc2RrPXtzZGt9Lz5cbiAgICAgICAgICA8L3Rib2R5PlxuICAgICAgICA8L3RhYmxlPlxuICAgICAgPC9Db250cm9sUGFuZWw+XG4gICAgPC8+XG4gICk7XG59XG4iLCJpbXBvcnQgeyB1c2VDYWxsYmFjaywgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgdHlwZSB7IENTU1Byb3BlcnRpZXMgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgdHlwZSB7IE1wU2RrIH0gZnJvbSAnQHNkay90eXBlcyc7XG5cbmludGVyZmFjZSBQcm9wcyB7XG4gIHNkazogTXBTZGs7XG59XG5cbmNvbnN0IHRleHRBcmVhU3R5bGU6IENTU1Byb3BlcnRpZXMgPSB7XG4gIGhlaWdodDogNTAsXG59O1xuXG5leHBvcnQgZnVuY3Rpb24gTW9kZWxHZXREYXRhKHByb3BzOiBQcm9wcyk6IEpTWC5FbGVtZW50IHtcbiAgY29uc3QgW21lc3NhZ2UsIHNldE1lc3NhZ2VdID0gdXNlU3RhdGU8c3RyaW5nPignJyk7XG5cbiAgY29uc3QgY2FsbGJhY2sgPSB1c2VDYWxsYmFjayhhc3luYyAoKSA9PiB7XG4gICAgbGV0IG1vZGVsRGF0YTogYW55O1xuICAgIHRyeSB7XG4gICAgICBtb2RlbERhdGEgPSBhd2FpdCBwcm9wcy5zZGsuTW9kZWwuZ2V0RGF0YSgpO1xuXG4gICAgICBzZXRNZXNzYWdlKEpTT04uc3RyaW5naWZ5KG1vZGVsRGF0YSkpO1xuICAgIH1cbiAgICBjYXRjaChlKSB7XG4gICAgICBzZXRNZXNzYWdlKGBlcnJvciAke2V9YCk7XG4gICAgfVxuXG4gIH0sIFtdKTtcblxuICByZXR1cm4gKFxuICAgIDx0cj5cbiAgICAgIDx0ZCBjb2xTcGFuPXsxfT5cbiAgICAgICAgPGJ1dHRvbiBvbkNsaWNrPXtjYWxsYmFja30+Z2V0RGF0YTwvYnV0dG9uPlxuICAgICAgPC90ZD5cbiAgICAgIDx0ZCBjb2xTcGFuPXszfT5cbiAgICAgICAgPHRleHRhcmVhIHJvd3M9ezN9IHN0eWxlPXt0ZXh0QXJlYVN0eWxlfSB2YWx1ZT17bWVzc2FnZX0gcmVhZE9ubHk9e3RydWV9Lz5cbiAgICAgIDwvdGQ+XG4gICAgPC90cj5cbiAgKTtcbn1cbiIsImltcG9ydCB7IHVzZUNhbGxiYWNrLCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB0eXBlIHsgQ1NTUHJvcGVydGllcyB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB0eXBlIHsgTXBTZGsgfSBmcm9tICdAc2RrL3R5cGVzJztcblxuaW50ZXJmYWNlIFByb3BzIHtcbiAgc2RrOiBNcFNkaztcbn1cblxuY29uc3QgdGV4dEFyZWFTdHlsZTogQ1NTUHJvcGVydGllcyA9IHtcbiAgaGVpZ2h0OiA1MCxcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBNb2RlbEdldERldGFpbHMocHJvcHM6IFByb3BzKTogSlNYLkVsZW1lbnQge1xuICBjb25zdCBbbWVzc2FnZSwgc2V0TWVzc2FnZV0gPSB1c2VTdGF0ZTxzdHJpbmc+KCcnKTtcblxuICBjb25zdCBjYWxsYmFjayA9IHVzZUNhbGxiYWNrKGFzeW5jICgpID0+IHtcbiAgICBsZXQgbW9kZWxEZXRhaWxzOiBhbnk7XG4gICAgdHJ5IHtcbiAgICAgIG1vZGVsRGV0YWlscyA9IGF3YWl0IHByb3BzLnNkay5Nb2RlbC5nZXREZXRhaWxzKCk7XG5cbiAgICAgIHNldE1lc3NhZ2UoSlNPTi5zdHJpbmdpZnkobW9kZWxEZXRhaWxzKSk7XG4gICAgfVxuICAgIGNhdGNoKGUpIHtcbiAgICAgIHNldE1lc3NhZ2UoYGVycm9yICR7ZX1gKTtcbiAgICB9XG5cbiAgfSwgW10pO1xuXG4gIHJldHVybiAoXG4gICAgPHRyPlxuICAgICAgPHRkIGNvbFNwYW49ezF9PlxuICAgICAgICA8YnV0dG9uIG9uQ2xpY2s9e2NhbGxiYWNrfT5nZXREZXRhaWxzPC9idXR0b24+XG4gICAgICA8L3RkPlxuICAgICAgPHRkIGNvbFNwYW49ezN9PlxuICAgICAgICA8dGV4dGFyZWEgcm93cz17M30gc3R5bGU9e3RleHRBcmVhU3R5bGV9IHZhbHVlPXttZXNzYWdlfSByZWFkT25seT17dHJ1ZX0vPlxuICAgICAgPC90ZD5cbiAgICA8L3RyPlxuICApO1xufVxuIiwiaW1wb3J0IHsgRnJhZ21lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBNb2RlbEdldERhdGEgfSBmcm9tICcuL01vZGVsR2V0RGF0YSc7XG5pbXBvcnQgeyBNb2RlbEdldERldGFpbHMgfSBmcm9tICcuL01vZGVsR2V0RGV0YWlscyc7XG5pbXBvcnQgeyBFdmVudCB9IGZyb20gJy4vRXZlbnQnO1xuaW1wb3J0IHR5cGUgeyBNcFNkayB9IGZyb20gJ0BzZGsvdHlwZXMnO1xuXG5pbnRlcmZhY2UgUHJvcHMge1xuICBzZGs6IE1wU2RrO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gTW9kZWwocHJvcHM6IFByb3BzKTogSlNYLkVsZW1lbnQge1xuICByZXR1cm4gKFxuICAgIDxGcmFnbWVudD5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPXtgY29udHJvbFBhbmVsYH0+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPXtgY29udHJvbFBhbmVsSGVhZGVyYH0+e2BNb2RlbGB9PC9kaXY+XG4gICAgICAgIDx0YWJsZT5cbiAgICAgICAgICA8dGJvZHk+XG4gICAgICAgICAgICA8TW9kZWxHZXREYXRhIHNkaz17cHJvcHMuc2RrfS8+XG4gICAgICAgICAgICA8TW9kZWxHZXREZXRhaWxzIHNkaz17cHJvcHMuc2RrfS8+XG4gICAgICAgICAgICA8RXZlbnQgc2RrPXtwcm9wcy5zZGt9IGVudW09e3Byb3BzLnNkay5Nb2RlbC5FdmVudH0vPlxuICAgICAgICAgIDwvdGJvZHk+XG4gICAgICAgIDwvdGFibGU+XG4gICAgICA8L2Rpdj5cbiAgICA8L0ZyYWdtZW50PlxuICApO1xufVxuIiwiaW1wb3J0IHsgRnJhZ21lbnQsIHVzZUNhbGxiYWNrLCB1c2VSZWYsIHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHR5cGUgeyBJbnRlcm5hbE1wU2RrIH0gZnJvbSAnQHNkay90eXBlcyc7XG5cbmludGVyZmFjZSBQcm9wcyB7XG4gIHNkazogSW50ZXJuYWxNcFNkay5NcFNkaztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIFBsdWdpbkxvYWQocHJvcHM6IFByb3BzKTogSlNYLkVsZW1lbnQge1xuICBjb25zdCBbbWVzc2FnZSwgc2V0TWVzc2FnZV0gPSB1c2VTdGF0ZTxzdHJpbmc+KCcnKTtcbiAgY29uc3QgdXJsSW5wdXRFbGVtZW50ID0gdXNlUmVmPEhUTUxJbnB1dEVsZW1lbnQ+KG51bGwpO1xuICBjb25zdCBhcHBLZXlJbnB1dEVsZW1lbnQgPSB1c2VSZWY8SFRNTElucHV0RWxlbWVudD4obnVsbCk7XG4gIGNvbnN0IHBsdWdpbklkSW5wdXRFbGVtZW50ID0gdXNlUmVmPEhUTUxJbnB1dEVsZW1lbnQ+KG51bGwpO1xuXG4gIGNvbnN0IGxvYWRQbHVnaW4gPSB1c2VDYWxsYmFjayhhc3luYyAoKSA9PiB7XG4gICAgaWYgKCF1cmxJbnB1dEVsZW1lbnQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCB1cmwgPSB1cmxJbnB1dEVsZW1lbnQuY3VycmVudD8udmFsdWU7XG4gICAgY29uc3QgYXBwbGljYXRpb25LZXkgPSBhcHBLZXlJbnB1dEVsZW1lbnQuY3VycmVudD8udmFsdWU7XG4gICAgY29uc3QgcGx1Z2luSWQgPSBwbHVnaW5JZElucHV0RWxlbWVudC5jdXJyZW50Py52YWx1ZTtcblxuICAgIGlmICh1cmwgPT09IHVuZGVmaW5lZCB8fCBhcHBsaWNhdGlvbktleSA9PT0gdW5kZWZpbmVkIHx8IHBsdWdpbklkID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgcGx1Z2luID0gcHJvcHMuc2RrLlBsdWdpbjtcblxuICAgIHRyeSB7XG4gICAgICBhd2FpdCBwbHVnaW4ubG9hZCh7XG4gICAgICAgIGFwcGxpY2F0aW9uS2V5LFxuICAgICAgICBpZDogcGx1Z2luSWQsXG4gICAgICB9LCBuZXcgVVJMKHVybCwgd2luZG93LmxvY2F0aW9uLm9yaWdpbikuaHJlZik7XG4gICAgfVxuICAgIGNhdGNoKGUpIHtcbiAgICAgIHNldE1lc3NhZ2UoYGVycm9yOiAke2V9YCk7XG4gICAgfVxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvZXhoYXVzdGl2ZS1kZXBzXG4gIH0sIFtdKTtcblxuICBjb25zdCB1bmxvYWRQbHVnaW4gPSB1c2VDYWxsYmFjayhhc3luYyAoKSA9PiB7XG4gICAgaWYgKCF1cmxJbnB1dEVsZW1lbnQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBhcHBsaWNhdGlvbktleSA9IGFwcEtleUlucHV0RWxlbWVudC5jdXJyZW50Py52YWx1ZTtcbiAgICBjb25zdCBwbHVnaW5JZCA9IHBsdWdpbklkSW5wdXRFbGVtZW50LmN1cnJlbnQ/LnZhbHVlO1xuXG4gICAgaWYgKGFwcGxpY2F0aW9uS2V5ID09PSB1bmRlZmluZWQgfHwgcGx1Z2luSWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IHBsdWdpbiA9IHByb3BzLnNkay5QbHVnaW47XG5cbiAgICB0cnkge1xuICAgICAgYXdhaXQgcGx1Z2luLnVubG9hZCh7XG4gICAgICAgIGFwcGxpY2F0aW9uS2V5LFxuICAgICAgICBpZDogcGx1Z2luSWQsXG4gICAgICB9KTtcbiAgICAgIC8vIHNldE1lc3NhZ2UoYHVybCBzZXRvIDoke3N3ZWVwSWR9IGRpc2FibGVkYCk7XG4gICAgfVxuICAgIGNhdGNoKGUpIHtcbiAgICAgIHNldE1lc3NhZ2UoYGVycm9yOiAke2V9YCk7XG4gICAgfVxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvZXhoYXVzdGl2ZS1kZXBzXG4gIH0sIFtdKTtcblxuICByZXR1cm4gKFxuICAgIDxGcmFnbWVudD5cbiAgICAgIDx0cj5cbiAgICAgICAgPHRkPlxuICAgICAgICAgIDxzcGFuPkFwcCBLZXk8L3NwYW4+XG4gICAgICAgIDwvdGQ+XG4gICAgICAgIDx0ZD5cbiAgICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBwbGFjZWhvbGRlcj0nYXBwbGljYXRpb24ga2V5JyBkZWZhdWx0VmFsdWU9J3FhMzE0YXBmMjhkNHVtNzZuNDVjejkxbWQnIHJlZj17YXBwS2V5SW5wdXRFbGVtZW50fS8+XG4gICAgICAgIDwvdGQ+XG4gICAgICA8L3RyPlxuICAgICAgPHRyPlxuICAgICAgICA8dGQ+XG4gICAgICAgICAgPHNwYW4+UGx1Z2luIElkPC9zcGFuPlxuICAgICAgICA8L3RkPlxuICAgICAgICA8dGQ+XG4gICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgcGxhY2Vob2xkZXI9J3BsdWdpbiBpZCcgcmVmPXtwbHVnaW5JZElucHV0RWxlbWVudH0vPlxuICAgICAgICA8L3RkPlxuICAgICAgPC90cj5cbiAgICAgIDx0cj5cbiAgICAgICAgPHRkPlxuICAgICAgICAgIDxzcGFuPlVybDwvc3Bhbj5cbiAgICAgICAgPC90ZD5cbiAgICAgICAgPHRkPlxuICAgICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIGlkPSdzY2VuZS1zb3VyY2UtdXJsJyBwbGFjZWhvbGRlcj0nc291cmNlIHVybCcgcmVmPXt1cmxJbnB1dEVsZW1lbnR9Lz5cbiAgICAgICAgPC90ZD5cbiAgICAgIDwvdHI+XG4gICAgICA8dHI+XG4gICAgICAgIDx0ZD5cbiAgICAgICAgICA8YnV0dG9uIG9uQ2xpY2s9e2xvYWRQbHVnaW59PkxvYWQ8L2J1dHRvbj5cbiAgICAgICAgPC90ZD5cbiAgICAgIDwvdHI+XG4gICAgICA8dHI+XG4gICAgICAgIDx0ZD5cbiAgICAgICAgICA8YnV0dG9uIG9uQ2xpY2s9e3VubG9hZFBsdWdpbn0+VW5sb2FkPC9idXR0b24+XG4gICAgICAgIDwvdGQ+XG4gICAgICA8L3RyPlxuICAgICAgPHRyPlxuICAgICAgICA8dGQgY29sU3Bhbj17M30+XG4gICAgICAgICAgPGRpdiBpZD0nc2NlbmUtc2V0cGx1Z2luLW1lc3NhZ2UnPnttZXNzYWdlfTwvZGl2PlxuICAgICAgICA8L3RkPlxuICAgICAgPC90cj5cbiAgICA8L0ZyYWdtZW50PlxuICApO1xufVxuIiwiaW1wb3J0IHsgRnJhZ21lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgdHlwZSB7IEludGVybmFsTXBTZGsgfSBmcm9tICdAc2RrL3R5cGVzJztcblxuaW1wb3J0IHsgUGx1Z2luTG9hZCB9IGZyb20gJy4vUGx1Z2luTG9hZCc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlQ29sbGVjdGlvbiB9IGZyb20gJy4vT2JzZXJ2YWJsZUNvbGxlY3Rpb24nO1xuaW1wb3J0IHsgQ29udHJvbFBhbmVsIH0gZnJvbSAnLi9Db250cm9sUGFuZWwnO1xuXG5pbnRlcmZhY2UgUHJvcHMge1xuICBzZGs6IEludGVybmFsTXBTZGsuTXBTZGs7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBQbHVnaW4ocHJvcHM6IFByb3BzKTogSlNYLkVsZW1lbnQge1xuICBjb25zdCBwbHVnaW4gPSBwcm9wcy5zZGsuUGx1Z2luO1xuICByZXR1cm4gKFxuICAgIDxGcmFnbWVudD5cbiAgICAgIDxDb250cm9sUGFuZWwgaGVhZGVyPXtgUGx1Z2luYH0+XG4gICAgICAgIDx0YWJsZT5cbiAgICAgICAgICA8dGJvZHk+XG4gICAgICAgICAgICA8UGx1Z2luTG9hZCBzZGs9e3Byb3BzLnNka30vPlxuICAgICAgICAgIDwvdGJvZHk+XG4gICAgICAgIDwvdGFibGU+XG4gICAgICA8L0NvbnRyb2xQYW5lbD5cbiAgICAgIDxDb250cm9sUGFuZWwgaGVhZGVyPXtgUGx1Z2luIC0gQ29sbGVjdGlvbmB9PlxuICAgICAgICA8T2JzZXJ2YWJsZUNvbGxlY3Rpb24gY29sbGVjdGlvbj17cGx1Z2luLmRhdGF9IG5hbWU9J1BsdWdpbi5kYXRhJyAvPlxuICAgICAgPC9Db250cm9sUGFuZWw+XG4gICAgPC9GcmFnbWVudD5cbiAgKTtcbn1cbiIsImltcG9ydCB0eXBlIHsgTXBTZGsgfSBmcm9tICdAc2RrL3R5cGVzJztcbmltcG9ydCB7IEZyYWdtZW50LCB1c2VDYWxsYmFjayB9IGZyb20gJ3JlYWN0JztcblxudHlwZSBQcm9wcyA9IHtcbiAgc2RrOiBNcFNkaztcbiAgc2VsZWN0ZWRBc3NldDogc3RyaW5nO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gRWRpdFRleHR1cmUocHJvcHM6IFByb3BzKTogSlNYLkVsZW1lbnQge1xuICBjb25zdCBlZGl0SWNvbiA9IHVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICBwcm9wcy5zZGsuUG9pbnRlci5lZGl0VGV4dHVyZShwcm9wcy5zZWxlY3RlZEFzc2V0KTtcbiAgfSwgW3Byb3BzLnNkay5Qb2ludGVyLCBwcm9wcy5zZWxlY3RlZEFzc2V0XSk7XG5cbiAgY29uc3QgcmVzZXRJY29uID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgIHByb3BzLnNkay5Qb2ludGVyLnJlc2V0VGV4dHVyZSgpO1xuICB9LCBbcHJvcHMuc2RrLlBvaW50ZXJdKTtcbiAgcmV0dXJuIChcbiAgICA8RnJhZ21lbnQ+XG4gICAgICBTZWxlY3RlZEFzc2V0OiB7cHJvcHMuc2VsZWN0ZWRBc3NldH1cbiAgICAgIDxkaXY+XG4gICAgICAgIDxidXR0b24gb25DbGljaz17ZWRpdEljb259PkVkaXQgVGV4dHVyZTwvYnV0dG9uPlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2PlxuICAgICAgICA8YnV0dG9uIG9uQ2xpY2s9e3Jlc2V0SWNvbn0+UmVzZXQgVGV4dHVyZTwvYnV0dG9uPlxuICAgICAgPC9kaXY+XG4gICAgPC9GcmFnbWVudD5cbiAgKTtcbn1cbiIsImltcG9ydCB0eXBlIHsgTXBTZGsgfSBmcm9tICdAc2RrL3R5cGVzJztcbmltcG9ydCB7IEZyYWdtZW50LCB1c2VDYWxsYmFjaywgdXNlUmVmIH0gZnJvbSAncmVhY3QnO1xuXG50eXBlIFByb3BzID0ge1xuICBzZGs6IE1wU2RrO1xuICBhZGRBc3NldChpZDogc3RyaW5nLCBzcmM6IHN0cmluZyk6IHZvaWQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBSZWdpc3RlclRleHR1cmUocHJvcHM6IE9taXQ8UHJvcHMsICdzZWxlY3RlZEFzc2V0Jz4pOiBKU1guRWxlbWVudCB7XG4gIGNvbnN0IGlkSW5wdXQgPSB1c2VSZWY8SFRNTElucHV0RWxlbWVudD4obnVsbCk7XG4gIGNvbnN0IHNyY0lucHV0ID0gdXNlUmVmPEhUTUxJbnB1dEVsZW1lbnQ+KG51bGwpO1xuXG4gIGNvbnN0IHJlZ2lzdGVyVGV4dHVyZSA9IHVzZUNhbGxiYWNrKGFzeW5jICgpID0+IHtcbiAgICBpZiAoaWRJbnB1dC5jdXJyZW50ICYmIHNyY0lucHV0LmN1cnJlbnQpIHtcbiAgICAgIGNvbnN0IGlkID0gaWRJbnB1dC5jdXJyZW50LnZhbHVlO1xuICAgICAgY29uc3Qgc3JjID0gc3JjSW5wdXQuY3VycmVudC52YWx1ZTtcbiAgICAgIGF3YWl0IHByb3BzLnNkay5Qb2ludGVyLnJlZ2lzdGVyVGV4dHVyZShpZCwgc3JjKTtcbiAgICAgIHByb3BzLmFkZEFzc2V0KGlkLCBzcmMpO1xuICAgIH1cbiAgfSwgW3Byb3BzXSk7XG5cbiAgcmV0dXJuIChcbiAgICA8RnJhZ21lbnQ+XG4gICAgICA8ZGl2PlxuICAgICAgICA8bGFiZWwgaHRtbEZvcj0ncG9pbnRlci10ZXh0dXJlLWlkJz5pZDogPC9sYWJlbD5cbiAgICAgICAgPGlucHV0IHJlZj17aWRJbnB1dH0gaWQ9J3BvaW50ZXItdGV4dHVyZS1pZCcgdHlwZT0nc3RyaW5nJy8+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXY+XG4gICAgICAgIDxsYWJlbCBodG1sRm9yPSdwb2ludGVyLXRleHR1cmUtc3JjJz5zcmM6IDwvbGFiZWw+XG4gICAgICAgIDxpbnB1dCByZWY9e3NyY0lucHV0fSBpZD0ncG9pbnRlci10ZXh0dXJlLXNyYycgdHlwZT0nc3RyaW5nJy8+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXY+XG4gICAgICAgIDxidXR0b24gb25DbGljaz17cmVnaXN0ZXJUZXh0dXJlfT5SZWdpc3RlcjwvYnV0dG9uPlxuICAgICAgPC9kaXY+XG4gICAgPC9GcmFnbWVudD5cbiAgKTtcbn1cbiIsImltcG9ydCB0eXBlIHsgTXBTZGsgfSBmcm9tICdAc2RrL3R5cGVzJztcbmltcG9ydCB7IENvbnRyb2xQYW5lbCB9IGZyb20gJy4uL0NvbnRyb2xQYW5lbCc7XG5pbXBvcnQgeyBFZGl0VGV4dHVyZSB9IGZyb20gJy4vRWRpdFRleHR1cmUnO1xuaW1wb3J0IHsgUmVnaXN0ZXJUZXh0dXJlIH0gZnJvbSAnLi9SZWdpc3RlclRleHR1cmUnO1xuXG50eXBlIFByb3BzID0ge1xuICBzZGs6IE1wU2RrO1xuICBzZWxlY3RlZEFzc2V0OiBzdHJpbmc7XG4gIGFkZEFzc2V0KGlkOiBzdHJpbmcsIHNyYzogc3RyaW5nKTogdm9pZDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIFBvaW50ZXIocHJvcHM6IFByb3BzKTogSlNYLkVsZW1lbnQge1xuICBjb25zdCB7IHNkaywgc2VsZWN0ZWRBc3NldCwgYWRkQXNzZXQgfSA9IHByb3BzO1xuICByZXR1cm4gKFxuICAgIDw+XG4gICAgICA8Q29udHJvbFBhbmVsIGhlYWRlcj17J1BvaW50ZXIgLSBSZWdpc3RlciBUZXh0dXJlJ30+XG4gICAgICAgIDxSZWdpc3RlclRleHR1cmUgc2RrPXtzZGt9IGFkZEFzc2V0PXthZGRBc3NldH0gLz5cbiAgICAgIDwvQ29udHJvbFBhbmVsPlxuXG4gICAgICA8Q29udHJvbFBhbmVsIGhlYWRlcj17J1BvaW50ZXIgLSBFZGl0IFRleHR1cmUnfT5cbiAgICAgICAgPEVkaXRUZXh0dXJlIHNkaz17c2RrfSBzZWxlY3RlZEFzc2V0PXtzZWxlY3RlZEFzc2V0fSAvPlxuICAgICAgPC9Db250cm9sUGFuZWw+XG4gICAgPC8+XG4gICk7XG59XG4iLCJpbXBvcnQgeyBGcmFnbWVudCwgdXNlQ2FsbGJhY2ssIHVzZVJlZiwgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgdHlwZSB7IE1vdXNlRXZlbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgdHlwZSB7IE1wU2RrIH0gZnJvbSAnQHNkay90eXBlcyc7XG5cbmludGVyZmFjZSBQcm9wcyB7XG4gIHNkazogTXBTZGs7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBSZW5kZXJlckdldFNjcmVlblBvc2l0aW9uKHByb3BzOiBQcm9wcyk6IEpTWC5FbGVtZW50IHtcbiAgY29uc3QgW21lc3NhZ2UsIHNldE1lc3NhZ2VdID0gdXNlU3RhdGU8c3RyaW5nPignJyk7XG4gIGNvbnN0IHhJbnB1dEVsZW1lbnQgPSB1c2VSZWY8SFRNTElucHV0RWxlbWVudD4obnVsbCk7XG4gIGNvbnN0IHlJbnB1dEVsZW1lbnQgPSB1c2VSZWY8SFRNTElucHV0RWxlbWVudD4obnVsbCk7XG4gIGNvbnN0IHpJbnB1dEVsZW1lbnQgPSB1c2VSZWY8SFRNTElucHV0RWxlbWVudD4obnVsbCk7XG5cbiAgY29uc3QgZXhlY3V0ZSA9IHVzZUNhbGxiYWNrKChlbGVtZW50OiBNb3VzZUV2ZW50KSA9PiB7XG4gICAgY29uc3QgY29tcHV0ZVZhbHVlID0gYXN5bmMgZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoIXhJbnB1dEVsZW1lbnQuY3VycmVudCB8fCAheUlucHV0RWxlbWVudC5jdXJyZW50IHx8ICF6SW5wdXRFbGVtZW50LmN1cnJlbnQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBjb25zdCB4ID0geElucHV0RWxlbWVudC5jdXJyZW50Py52YWx1ZTtcbiAgICAgIGNvbnN0IHkgPSB5SW5wdXRFbGVtZW50LmN1cnJlbnQ/LnZhbHVlO1xuICAgICAgY29uc3QgeiA9IHpJbnB1dEVsZW1lbnQuY3VycmVudD8udmFsdWU7XG5cbiAgICAgIGlmICgheCB8fCAheSB8fCAheikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IChwcm9wcy5zZGsuUmVuZGVyZXIuZ2V0U2NyZWVuUG9zaXRpb24oe3g6IHBhcnNlRmxvYXQoeCksIHk6IHBhcnNlRmxvYXQoeSksIHo6IHBhcnNlRmxvYXQoeil9KSk7XG4gICAgICAgIHJlc3VsdC54ID0gTWF0aC50cnVuYyhyZXN1bHQueCk7XG4gICAgICAgIHJlc3VsdC55ID0gTWF0aC50cnVuYyhyZXN1bHQueSk7XG5cbiAgICAgICAgc2V0TWVzc2FnZShgc3VjY2VzcyB4OiR7cmVzdWx0Lnh9IHk6JHtyZXN1bHQueX1gKTtcbiAgICAgIH1cbiAgICAgIGNhdGNoKGUpIHtcbiAgICAgICAgc2V0TWVzc2FnZShgZXJyb3JgKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgY29tcHV0ZVZhbHVlKCk7XG4gIH0sIFtdKTtcblxuICByZXR1cm4gKFxuICAgIDxGcmFnbWVudD5cbiAgICAgIDx0cj5cbiAgICAgICAgPHRkPlxuICAgICAgICAgIDxidXR0b24gb25DbGljaz17ZXhlY3V0ZX0+Z2V0U2NyZWVuUG9zaXRpb248L2J1dHRvbj5cbiAgICAgICAgPC90ZD5cbiAgICAgICAgPHRkPlxuICAgICAgICAgIDxpbnB1dCB0eXBlPVwibnVtYmVyXCIgaWQ9J3JlbmRlcmVyLWdldHNjcmVlbnBvc2l0aW9uLXgnIGNsYXNzTmFtZT1cInNtYWxsLWlucHV0XCIgcGxhY2Vob2xkZXI9J3gnIHJlZj17eElucHV0RWxlbWVudH0vPlxuICAgICAgICA8L3RkPlxuICAgICAgICA8dGQ+XG4gICAgICAgICAgPGlucHV0IHR5cGU9XCJudW1iZXJcIiBpZD0ncmVuZGVyZXItZ2V0c2NyZWVucG9zaXRpb24teScgY2xhc3NOYW1lPVwic21hbGwtaW5wdXRcIiBwbGFjZWhvbGRlcj0neScgcmVmPXt5SW5wdXRFbGVtZW50fS8+XG4gICAgICAgIDwvdGQ+XG4gICAgICAgIDx0ZD5cbiAgICAgICAgICA8aW5wdXQgdHlwZT1cIm51bWJlclwiIGlkPSdyZW5kZXJlci1nZXRzY3JlZW5wb3NpdGlvbi16JyBjbGFzc05hbWU9XCJzbWFsbC1pbnB1dFwiIHBsYWNlaG9sZGVyPSd6JyByZWY9e3pJbnB1dEVsZW1lbnR9Lz5cbiAgICAgICAgPC90ZD5cbiAgICAgIDwvdHI+XG4gICAgICA8dHI+XG4gICAgICAgIDx0ZCBjb2xTcGFuPXszfT5cbiAgICAgICAgICA8ZGl2IGlkPSdyZW5kZXJlci1nZXRzY3JlZW5wb3NpdGlvbi1tZXNzYWdlJz57bWVzc2FnZX08L2Rpdj5cbiAgICAgICAgPC90ZD5cbiAgICAgIDwvdHI+XG4gICAgPC9GcmFnbWVudD5cbiAgKTtcbn1cbiIsImltcG9ydCB7IEZyYWdtZW50LCB1c2VDYWxsYmFjaywgdXNlUmVmLCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB0eXBlIHsgTW91c2VFdmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB0eXBlIHsgTXBTZGsgfSBmcm9tICdAc2RrL3R5cGVzJztcblxuaW50ZXJmYWNlIFByb3BzIHtcbiAgc2RrOiBNcFNkaztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIFJlbmRlcmVyR2V0V29ybGRQb3NpdGlvbkRhdGEocHJvcHM6IFByb3BzKTogSlNYLkVsZW1lbnQge1xuICBjb25zdCBbbWVzc2FnZSwgc2V0TWVzc2FnZV0gPSB1c2VTdGF0ZTxzdHJpbmc+KCcnKTtcbiAgY29uc3QgeElucHV0RWxlbWVudCA9IHVzZVJlZjxIVE1MSW5wdXRFbGVtZW50PihudWxsKTtcbiAgY29uc3QgeUlucHV0RWxlbWVudCA9IHVzZVJlZjxIVE1MSW5wdXRFbGVtZW50PihudWxsKTtcblxuICBjb25zdCBleGVjdXRlID0gdXNlQ2FsbGJhY2soKGVsZW1lbnQ6IE1vdXNlRXZlbnQpID0+IHtcbiAgICBjb25zdCBjb21wdXRlVmFsdWUgPSBhc3luYyBmdW5jdGlvbigpIHtcbiAgICAgIGlmICgheElucHV0RWxlbWVudC5jdXJyZW50IHx8ICF5SW5wdXRFbGVtZW50LmN1cnJlbnQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBjb25zdCB4ID0geElucHV0RWxlbWVudC5jdXJyZW50Py52YWx1ZTtcbiAgICAgIGNvbnN0IHkgPSB5SW5wdXRFbGVtZW50LmN1cnJlbnQ/LnZhbHVlO1xuXG4gICAgICBpZiAoIXggfHwgIXkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBwcm9wcy5zZGsuUmVuZGVyZXIuZ2V0V29ybGRQb3NpdGlvbkRhdGEoe3g6IHBhcnNlRmxvYXQoeCksIHk6IHBhcnNlRmxvYXQoeSl9KTtcbiAgICAgICAgc2V0TWVzc2FnZShgc3VjY2VzcyAke0pTT04uc3RyaW5naWZ5KHJlc3VsdCl9YCk7XG4gICAgICB9XG4gICAgICBjYXRjaChlKSB7XG4gICAgICAgIHNldE1lc3NhZ2UoYGVycm9yYCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIGNvbXB1dGVWYWx1ZSgpO1xuICB9LCBbXSk7XG5cbiAgcmV0dXJuIChcbiAgICA8RnJhZ21lbnQ+XG4gICAgICA8dHI+XG4gICAgICAgIDx0ZD5cbiAgICAgICAgICA8YnV0dG9uIG9uQ2xpY2s9e2V4ZWN1dGV9PmdldFdvcmxkUG9zaXRpb25EYXRhPC9idXR0b24+XG4gICAgICAgIDwvdGQ+XG4gICAgICAgIDx0ZD5cbiAgICAgICAgICA8aW5wdXQgdHlwZT1cIm51bWJlclwiIGlkPSdyZW5kZXJlci1nZXR3b3JsZHBvc2l0aW9uZGF0YS14JyBjbGFzc05hbWU9XCJzbWFsbC1pbnB1dFwiIHBsYWNlaG9sZGVyPSd4JyByZWY9e3hJbnB1dEVsZW1lbnR9Lz5cbiAgICAgICAgPC90ZD5cbiAgICAgICAgPHRkPlxuICAgICAgICAgIDxpbnB1dCB0eXBlPVwibnVtYmVyXCIgaWQ9J3JlbmRlcmVyLWdldHdvcmxkcG9zaXRpb25kYXRhLXknIGNsYXNzTmFtZT1cInNtYWxsLWlucHV0XCIgcGxhY2Vob2xkZXI9J3knIHJlZj17eUlucHV0RWxlbWVudH0vPlxuICAgICAgICA8L3RkPlxuICAgICAgPC90cj5cbiAgICAgIDx0cj5cbiAgICAgICAgPHRkIGNvbFNwYW49ezN9PlxuICAgICAgICAgIDxkaXYgaWQ9J3JlbmRlcmVyLWdldHNjcmVlbnBvc2l0aW9uLW1lc3NhZ2UnPnttZXNzYWdlfTwvZGl2PlxuICAgICAgICA8L3RkPlxuICAgICAgPC90cj5cbiAgICA8L0ZyYWdtZW50PlxuICApO1xufVxuIiwiaW1wb3J0IHsgRnJhZ21lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBSZW5kZXJlckdldFNjcmVlblBvc2l0aW9uIH0gZnJvbSAnLi9SZW5kZXJlckdldFNjcmVlblBvc2l0aW9uJztcbmltcG9ydCB7IFJlbmRlcmVyR2V0V29ybGRQb3NpdGlvbkRhdGEgfSBmcm9tICcuL1JlbmRlcmVyR2V0V29ybGRQb3NpdGlvbkRhdGEnO1xuaW1wb3J0IHR5cGUgeyBNcFNkayB9IGZyb20gJ0BzZGsvdHlwZXMnO1xuXG5pbnRlcmZhY2UgUHJvcHMge1xuICBzZGs6IE1wU2RrO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gUmVuZGVyZXIocHJvcHM6IFByb3BzKTogSlNYLkVsZW1lbnQge1xuICByZXR1cm4gKFxuICAgIDxGcmFnbWVudD5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPXtgY29udHJvbFBhbmVsYH0+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPXtgY29udHJvbFBhbmVsSGVhZGVyYH0+e2BSZW5kZXJlcmB9PC9kaXY+XG4gICAgICAgIDx0YWJsZT5cbiAgICAgICAgICA8dGJvZHk+XG4gICAgICAgICAgICA8UmVuZGVyZXJHZXRTY3JlZW5Qb3NpdGlvbiBzZGs9e3Byb3BzLnNka30vPlxuICAgICAgICAgICAgPFJlbmRlcmVyR2V0V29ybGRQb3NpdGlvbkRhdGEgc2RrPXtwcm9wcy5zZGt9Lz5cbiAgICAgICAgICA8L3Rib2R5PlxuICAgICAgICA8L3RhYmxlPlxuICAgICAgPC9kaXY+XG4gICAgPC9GcmFnbWVudD5cbiAgKTtcbn1cbiIsImltcG9ydCB7IEZyYWdtZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHR5cGUgeyBNcFNkayB9IGZyb20gJ0BzZGsvdHlwZXMnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZUNvbGxlY3Rpb24gfSBmcm9tICcuL09ic2VydmFibGVDb2xsZWN0aW9uJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICcuL09ic2VydmFibGUnO1xuaW1wb3J0IHsgQ29udHJvbFBhbmVsIH0gZnJvbSAnLi9Db250cm9sUGFuZWwnO1xuXG5pbnRlcmZhY2UgUHJvcHMge1xuICBzZGs6IE1wU2RrO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gUm9vbShwcm9wczogUHJvcHMpOiBKU1guRWxlbWVudCB7XG4gIHJldHVybiAoXG4gICAgPEZyYWdtZW50PlxuICAgICAgPENvbnRyb2xQYW5lbCBoZWFkZXI9e2BSb29tIC0gQ3VycmVudGB9PlxuICAgICAgICA8T2JzZXJ2YWJsZSBvYnNlcnZhYmxlPXtwcm9wcy5zZGsuUm9vbS5jdXJyZW50fSBuYW1lPSdSb29tLmN1cnJlbnQnLz5cbiAgICAgIDwvQ29udHJvbFBhbmVsPlxuICAgICAgPENvbnRyb2xQYW5lbCBoZWFkZXI9e2BSb29tIC0gQ29sbGVjdGlvbmB9PlxuICAgICAgICA8T2JzZXJ2YWJsZUNvbGxlY3Rpb24gY29sbGVjdGlvbj17cHJvcHMuc2RrLlJvb20uZGF0YX0gbmFtZT0nUm9vbS5kYXRhJy8+XG4gICAgICA8L0NvbnRyb2xQYW5lbD5cbiAgICA8L0ZyYWdtZW50PlxuICApO1xufVxuIiwiaW1wb3J0IHsgdXNlQ2FsbGJhY2ssIHVzZVJlZiB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB0eXBlIHsgU2NlbmUgfSBmcm9tICdAc2RrL3R5cGVzJztcblxuaW50ZXJmYWNlIFByb3BzIHtcbiAgaWQ6IHN0cmluZztcbiAgcGF0aDogU2NlbmUuSW5wdXRQYXRoO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gU2NlbmVQYXRoKHByb3BzOiBQcm9wcyk6IEpTWC5FbGVtZW50IHtcbiAgY29uc3QgaW5wdXRSZWYgPSB1c2VSZWY8SFRNTElucHV0RWxlbWVudD4obnVsbCk7XG5cbiAgY29uc3QgY2FsbGJhY2sgPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgaWYgKGlucHV0UmVmLmN1cnJlbnQ/LnZhbHVlKSB7XG4gICAgICBwcm9wcy5wYXRoLnNldChpbnB1dFJlZi5jdXJyZW50Py52YWx1ZSk7XG4gICAgfVxuICB9LCBbXSk7XG5cbiAgcmV0dXJuIChcbiAgICA8dHI+XG4gICAgICA8dGQgY29sU3Bhbj17Mn0+XG4gICAgICAgIDxidXR0b24gb25DbGljaz17Y2FsbGJhY2t9Pntwcm9wcy5pZH08L2J1dHRvbj5cbiAgICAgIDwvdGQ+XG4gICAgICA8dGQgY29sU3Bhbj17Mn0+XG4gICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIHBsYWNlaG9sZGVyPSdzdHJpbmcnIHJlZj17aW5wdXRSZWZ9Lz5cbiAgICAgIDwvdGQ+XG4gICAgPC90cj5cbiAgKTtcbn1cbiIsImltcG9ydCB7IEZyYWdtZW50LCB1c2VDYWxsYmFjaywgdXNlUmVmLCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IFNjZW5lIH0gZnJvbSAnQHNkay90eXBlcyc7XG5pbXBvcnQgeyBTY2VuZVBhdGggfSBmcm9tICcuL1NjZW5lUGF0aCc7XG5pbXBvcnQgc2NlbmVMb2FkZXJKc29uIGZyb20gJy4vc2NlbmUtbG9hZGVyLmpzb24nO1xuaW1wb3J0IHR5cGUgeyBNcFNkayB9IGZyb20gJ0BzZGsvdHlwZXMnO1xuXG5pbnRlcmZhY2UgUHJvcHMge1xuICBzZGs6IE1wU2RrO1xufVxuXG50eXBlIFNjZW5lT2JqZWN0SW5mbyA9IHtcbiAgb2JqZWN0OiBTY2VuZS5JT2JqZWN0fG51bGw7XG4gIG9iamVjdHM6IFNjZW5lLklOb2RlW118bnVsbDtcbiAgcGF0aHM6IHN0cmluZ1tdO1xufVxuY29uc3QgbW9kZWxKc29uID0gSlNPTi5zdHJpbmdpZnkoc2NlbmVMb2FkZXJKc29uKTtcbmV4cG9ydCBmdW5jdGlvbiBTY2VuZURlc2VyaWFsaXplKHByb3BzOiBQcm9wcyk6IEpTWC5FbGVtZW50IHtcbiAgY29uc3QgW3NjZW5lT2JqZWN0SW5mbywgc2V0U2NlbmVPYmplY3RJbmZvXSA9IHVzZVN0YXRlPFNjZW5lT2JqZWN0SW5mb3xudWxsPihudWxsKTtcbiAgY29uc3QgaW5wdXRSZWYgPSB1c2VSZWY8SFRNTElucHV0RWxlbWVudD4obnVsbCk7XG5cbiAgY29uc3QgY2xlYXJTY2VuZSA9IGZ1bmN0aW9uKCkge1xuICAgIGlmIChzY2VuZU9iamVjdEluZm8pIHtcbiAgICAgIGlmIChzY2VuZU9iamVjdEluZm8ub2JqZWN0KSB7XG4gICAgICAgIHNjZW5lT2JqZWN0SW5mby5vYmplY3Quc3RvcCgpO1xuICAgICAgfVxuXG4gICAgICBpZiAoc2NlbmVPYmplY3RJbmZvLm9iamVjdHMpIHtcbiAgICAgICAgZm9yIChjb25zdCBvYmplY3Qgb2Ygc2NlbmVPYmplY3RJbmZvLm9iamVjdHMpIHtcbiAgICAgICAgICBvYmplY3Quc3RvcCgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBzZXRTY2VuZU9iamVjdEluZm8obnVsbCk7XG4gICAgfVxuICB9O1xuXG5cbiAgY29uc3QgcHJvY2Vzc1RleHRGcm9tRmlsZUxvYWRlZCA9IGFzeW5jIGZ1bmN0aW9uICh0ZXh0RnJvbUZpbGVMb2FkZWQ6IHN0cmluZykge1xuICAgIGNvbnN0IGRlc2VyaWFsaXplZCA9IGF3YWl0IHByb3BzLnNkay5TY2VuZS5kZXNlcmlhbGl6ZSh0ZXh0RnJvbUZpbGVMb2FkZWQpO1xuICAgIGlmIChkZXNlcmlhbGl6ZWQpIHtcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KGRlc2VyaWFsaXplZCkpIHtcbiAgICAgICAgY29uc3Qgb2JqZWN0cyA9IGRlc2VyaWFsaXplZCBhcyBTY2VuZS5JTm9kZVtdO1xuICAgICAgICBmb3IgKGNvbnN0IG9iamVjdCBvZiBvYmplY3RzKSB7XG4gICAgICAgICAgb2JqZWN0LnN0YXJ0KCk7XG4gICAgICAgIH1cblxuICAgICAgICBzZXRTY2VuZU9iamVjdEluZm8oe1xuICAgICAgICAgIG9iamVjdDogbnVsbCxcbiAgICAgICAgICBvYmplY3RzLFxuICAgICAgICAgIHBhdGhzOiBbXSxcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBlbHNlIGlmICh0eXBlb2YgZGVzZXJpYWxpemVkID09PSAnb2JqZWN0Jykge1xuXG4gICAgICAgIC8vIHVzZSBqc29uIHRvIGV4dHJhY3QgcGF0aCBuYW1lc1xuICAgICAgICBjb25zdCBqc29uID0gSlNPTi5wYXJzZSh0ZXh0RnJvbUZpbGVMb2FkZWQpO1xuICAgICAgICBjb25zdCBwYXRocyA9IGpzb24/LnBheWxvYWQ/LnBhdGhzIGFzIEFycmF5PFtzdHJpbmcsc3RyaW5nXT47XG4gICAgICAgIGNvbnN0IG5ld1BhdGhzOiBzdHJpbmdbXSA9IFtdO1xuICAgICAgICBpZiAocGF0aHMpIHtcbiAgICAgICAgICBmb3IgKGNvbnN0IHBhdGggb2YgcGF0aHMpIHtcbiAgICAgICAgICAgIG5ld1BhdGhzLnB1c2gocGF0aFswXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY29uc3Qgb2JqID0gZGVzZXJpYWxpemVkIGFzIFNjZW5lLklPYmplY3Q7XG4gICAgICAgIG9iai5zdGFydCgpO1xuXG4gICAgICAgIHNldFNjZW5lT2JqZWN0SW5mbyh7XG4gICAgICAgICAgb2JqZWN0OiBvYmosXG4gICAgICAgICAgb2JqZWN0czogbnVsbCxcbiAgICAgICAgICBwYXRoczogbmV3UGF0aHMsXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBjb25zdCBvbk1vZGVsSnNvbkNsaWNrID0gKGU6IFJlYWN0Lk1vdXNlRXZlbnQpID0+IHtcbiAgICBpZiAoaW5wdXRSZWYuY3VycmVudCkgaW5wdXRSZWYuY3VycmVudC52YWx1ZSA9ICcnO1xuICAgIHByb2Nlc3NUZXh0RnJvbUZpbGVMb2FkZWQobW9kZWxKc29uKTtcbiAgfTtcblxuICBjb25zdCBjYWxsYmFjayA9IHVzZUNhbGxiYWNrKChldmVudDogYW55KSA9PiB7XG4gICAgY2xlYXJTY2VuZSgpO1xuXG4gICAgaWYgKGV2ZW50LnRhcmdldC5maWxlcy5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBmaWxlUmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTtcbiAgICBmaWxlUmVhZGVyLm9ubG9hZCA9IGFzeW5jKGZpbGVMb2FkZWRFdmVudDogUHJvZ3Jlc3NFdmVudDxGaWxlUmVhZGVyPikgPT4ge1xuICAgICAgaWYgKGZpbGVMb2FkZWRFdmVudC50YXJnZXQpIHtcbiAgICAgICAgY29uc3QgdGV4dEZyb21GaWxlTG9hZGVkID0gZmlsZUxvYWRlZEV2ZW50LnRhcmdldC5yZXN1bHQgYXMgc3RyaW5nO1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgICBjb25zb2xlLmxvZyh0ZXh0RnJvbUZpbGVMb2FkZWQpO1xuICAgICAgICBhd2FpdCBwcm9jZXNzVGV4dEZyb21GaWxlTG9hZGVkKHRleHRGcm9tRmlsZUxvYWRlZCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIGZpbGVSZWFkZXIucmVhZEFzVGV4dChldmVudC50YXJnZXQuZmlsZXNbMF0sICdVVEYtOCcpO1xuICB9LCBbXSk7XG5cbiAgY29uc3QgY2xlYXJDYWxsYmFjayA9IHVzZUNhbGxiYWNrKChldmVudDogYW55KSA9PiB7XG4gICAgY2xlYXJTY2VuZSgpO1xuICAgIGlmIChpbnB1dFJlZi5jdXJyZW50KSB7XG4gICAgICBpbnB1dFJlZi5jdXJyZW50LnZhbHVlID0gJyc7XG4gICAgfVxuXG4gIH0sIFtzY2VuZU9iamVjdEluZm9dKTtcblxuICBjb25zdCByZW5kZXJQYXRocyA9ICgpID0+IHtcbiAgICBpZiAoc2NlbmVPYmplY3RJbmZvICYmIHNjZW5lT2JqZWN0SW5mby5vYmplY3QpIHtcbiAgICAgIHR5cGUgUGF0aERlc2MgPSB7IGRlc2M6IFNjZW5lLklucHV0UGF0aERlc2NyaXB0b3IsIHBhdGg6IFNjZW5lLklucHV0UGF0aCB9O1xuXG4gICAgICBjb25zdCBpbnB1dFBhdGhzOiBQYXRoRGVzY1tdID0gW107XG4gICAgICBmb3IgKGNvbnN0IHtkZXNjLCBwYXRofSBvZiBzY2VuZU9iamVjdEluZm8ub2JqZWN0LnBhdGhJdGVyYXRvcigpKSB7XG4gICAgICAgIGlmIChkZXNjLnR5cGUgPT09IFNjZW5lLlBhdGhUeXBlLklOUFVUKSB7XG4gICAgICAgICAgaW5wdXRQYXRocy5wdXNoKHtcbiAgICAgICAgICAgIGRlc2M6IGRlc2MgYXMgU2NlbmUuSW5wdXRQYXRoRGVzY3JpcHRvcixcbiAgICAgICAgICAgIHBhdGg6IHBhdGggYXMgU2NlbmUuSW5wdXRQYXRoLFxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGV2ZW50cyA9IGlucHV0UGF0aHMubWFwKGZ1bmN0aW9uKGRlc2M6IFBhdGhEZXNjKSB7XG4gICAgICAgIHJldHVybihcbiAgICAgICAgICA8U2NlbmVQYXRoIGlkPXtkZXNjLmRlc2MuaWR9IGtleT17ZGVzYy5kZXNjLmlkfSBwYXRoPXtkZXNjLnBhdGh9Lz5cbiAgICAgICAgKTtcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gZXZlbnRzO1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9O1xuXG4gIHJldHVybiAoXG4gICAgPEZyYWdtZW50PlxuICAgICAgPHRyPlxuICAgICAgICA8dGQgY29sU3Bhbj17M30+XG4gICAgICAgICAgPGlucHV0IHR5cGU9XCJmaWxlXCIgaWQ9J3NjZW5lLWRlc2VyaWFsaXplLWtleScgcGxhY2Vob2xkZXI9J2tleScgYWNjZXB0PVwiLmpzb25cIiBvbkNoYW5nZT17Y2FsbGJhY2t9IHJlZj17aW5wdXRSZWZ9Lz5cbiAgICAgICAgICA8aW5wdXQgdHlwZT1cImJ1dHRvblwiIG9uQ2xpY2s9e29uTW9kZWxKc29uQ2xpY2t9IHZhbHVlPVwiTW9kZWwgTG9hZGVyXCIvPlxuICAgICAgICA8L3RkPlxuICAgICAgPC90cj5cbiAgICAgIDx0cj5cbiAgICAgICAgPHRkIGNvbFNwYW49ezN9PlxuICAgICAgICAgIDxidXR0b24gb25DbGljaz17Y2xlYXJDYWxsYmFja30+Q2xlYXI8L2J1dHRvbj5cbiAgICAgICAgPC90ZD5cbiAgICAgIDwvdHI+XG4gICAgICB7cmVuZGVyUGF0aHMoKX1cbiAgICA8L0ZyYWdtZW50PlxuICApO1xufVxuXG4iLCJpbXBvcnQgeyBGcmFnbWVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IFNjZW5lRGVzZXJpYWxpemUgfSBmcm9tICcuL1NjZW5lRGVzZXJpYWxpemUnO1xuaW1wb3J0IHR5cGUgeyBNcFNkayB9IGZyb20gJ0BzZGsvdHlwZXMnO1xuXG5pbnRlcmZhY2UgUHJvcHMge1xuICBzZGs6IE1wU2RrO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gU2NlbmUocHJvcHM6IFByb3BzKTogSlNYLkVsZW1lbnQge1xuICByZXR1cm4gKFxuICAgIDxGcmFnbWVudD5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPXtgY29udHJvbFBhbmVsYH0+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPXtgY29udHJvbFBhbmVsSGVhZGVyYH0+e2BTY2VuZWB9PC9kaXY+XG4gICAgICAgIDx0YWJsZT5cbiAgICAgICAgICA8dGJvZHk+XG4gICAgICAgICAgICA8U2NlbmVEZXNlcmlhbGl6ZSBzZGs9e3Byb3BzLnNka30vPlxuICAgICAgICAgIDwvdGJvZHk+XG4gICAgICAgIDwvdGFibGU+XG4gICAgICA8L2Rpdj5cbiAgICA8L0ZyYWdtZW50PlxuICApO1xufVxuIiwiaW1wb3J0IHsgRnJhZ21lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgdHlwZSB7IE1wU2RrIH0gZnJvbSAnQHNkay90eXBlcyc7XG5cbmludGVyZmFjZSBQcm9wcyB7XG4gIHNkazogTXBTZGs7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBTZW5zb3JBZGRTb3VyY2UocHJvcHM6IFByb3BzKTogSlNYLkVsZW1lbnQge1xuICByZXR1cm4gKFxuICAgIDxGcmFnbWVudD5cbiAgICAgIDx0cj5cbiAgICAgICAgPHRkIGNvbFNwYW49ezN9PlxuICAgICAgICAgIDxkaXY+VEJEPC9kaXY+XG4gICAgICAgIDwvdGQ+XG4gICAgICA8L3RyPlxuICAgICAgPHRyPlxuICAgICAgICA8dGQgY29sU3Bhbj17M30vPlxuICAgICAgPC90cj5cbiAgICA8L0ZyYWdtZW50PlxuICApO1xufVxuIiwiaW1wb3J0IHsgRnJhZ21lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgdHlwZSB7IE1wU2RrIH0gZnJvbSAnQHNkay90eXBlcyc7XG5pbXBvcnQgeyBTZW5zb3JBZGRTb3VyY2UgfSBmcm9tICcuL1NlbnNvckFkZFNvdXJjZSc7XG5cbmludGVyZmFjZSBQcm9wcyB7XG4gIHNkazogTXBTZGs7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBTZW5zb3IocHJvcHM6IFByb3BzKTogSlNYLkVsZW1lbnQge1xuICByZXR1cm4gKFxuICAgIDxGcmFnbWVudD5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPXtgY29udHJvbFBhbmVsYH0+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPXtgY29udHJvbFBhbmVsSGVhZGVyYH0+e2BTZW5zb3JgfTwvZGl2PlxuICAgICAgICA8dGFibGU+XG4gICAgICAgICAgPHRib2R5PlxuICAgICAgICAgICAgPFNlbnNvckFkZFNvdXJjZSBzZGs9e3Byb3BzLnNka30vPlxuICAgICAgICAgIDwvdGJvZHk+XG4gICAgICAgIDwvdGFibGU+XG4gICAgICA8L2Rpdj5cbiAgICA8L0ZyYWdtZW50PlxuICApO1xufVxuIiwiaW1wb3J0IHsgRnJhZ21lbnQsIHVzZUNhbGxiYWNrLCB1c2VSZWYsIHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHR5cGUgeyBNcFNkayB9IGZyb20gJ0BzZGsvdHlwZXMnO1xuXG5pbnRlcmZhY2UgUHJvcHMge1xuICBzZGs6IE1wU2RrO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gU2V0dGluZ3NHZXQocHJvcHM6IFByb3BzKTogSlNYLkVsZW1lbnQge1xuICBjb25zdCBbbWVzc2FnZSwgc2V0TWVzc2FnZV0gPSB1c2VTdGF0ZTxzdHJpbmc+KCcnKTtcblxuICBjb25zdCBpbnB1dEVsZW1lbnQgPSB1c2VSZWY8SFRNTElucHV0RWxlbWVudD4obnVsbCk7XG4gIGNvbnN0IGdldFNldHRpbmcgPSB1c2VDYWxsYmFjayhhc3luYyAoZWxlbWVudDogYW55KSA9PiB7XG4gICAgaWYgKCFpbnB1dEVsZW1lbnQuY3VycmVudCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IG5ld0tleSA9IGlucHV0RWxlbWVudC5jdXJyZW50Py52YWx1ZTtcbiAgICBjb25zdCBuZXdWYWx1ZSA9IGF3YWl0ICgocHJvcHMuc2RrIGFzIGFueSkuU2V0dGluZ3MuZ2V0KG5ld0tleSkpIGFzIHN0cmluZ3x1bmRlZmluZWQ7XG4gICAgc2V0TWVzc2FnZShga2V5OiR7bmV3S2V5fSB2YWx1ZToke25ld1ZhbHVlfWApO1xuICB9LCBbXSk7XG5cbiAgcmV0dXJuIChcbiAgICA8RnJhZ21lbnQ+XG4gICAgICA8dHI+XG4gICAgICAgIDx0ZD5cbiAgICAgICAgICA8YnV0dG9uIG9uQ2xpY2s9e2dldFNldHRpbmd9PmdldDwvYnV0dG9uPlxuICAgICAgICA8L3RkPlxuICAgICAgICA8dGQ+XG4gICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgaWQ9J3NldHRpbmdzLWdldC1rZXknIGNsYXNzTmFtZT1cInNtYWxsLWlucHV0XCIgcGxhY2Vob2xkZXI9J2tleScgcmVmPXtpbnB1dEVsZW1lbnR9Lz5cbiAgICAgICAgPC90ZD5cbiAgICAgIDwvdHI+XG4gICAgICA8dHI+XG4gICAgICAgIDx0ZCBjb2xTcGFuPXsyfT5cbiAgICAgICAgICA8ZGl2IGlkPSdzZXR0aW5ncy1nZXQtbWVzc2FnZSc+e21lc3NhZ2V9PC9kaXY+XG4gICAgICAgIDwvdGQ+XG4gICAgICA8L3RyPlxuICAgIDwvRnJhZ21lbnQ+XG4gICk7XG59XG4iLCJpbXBvcnQgeyBGcmFnbWVudCwgdXNlQ2FsbGJhY2ssIHVzZVJlZiwgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgdHlwZSB7IE1wU2RrIH0gZnJvbSAnQHNkay90eXBlcyc7XG5cbmludGVyZmFjZSBQcm9wcyB7XG4gIHNkazogTXBTZGs7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBTZXR0aW5nc1VwZGF0ZShwcm9wczogUHJvcHMpOiBKU1guRWxlbWVudCB7XG4gIGNvbnN0IFttZXNzYWdlLCBzZXRNZXNzYWdlXSA9IHVzZVN0YXRlPHN0cmluZz4oJycpO1xuICBjb25zdCBrZXlJbnB1dEVsZW1lbnQgPSB1c2VSZWY8SFRNTElucHV0RWxlbWVudD4obnVsbCk7XG4gIGNvbnN0IHZhbHVlSW5wdXRFbGVtZW50ID0gdXNlUmVmPEhUTUxJbnB1dEVsZW1lbnQ+KG51bGwpO1xuXG4gIGNvbnN0IHVwZGF0ZVNldHRpbmcgPSB1c2VDYWxsYmFjayhhc3luYyAoKSA9PiB7XG4gICAgaWYgKCFrZXlJbnB1dEVsZW1lbnQgfHwgIXZhbHVlSW5wdXRFbGVtZW50KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3Qga2V5ID0ga2V5SW5wdXRFbGVtZW50LmN1cnJlbnQ/LnZhbHVlO1xuICAgIGNvbnN0IHZhbHVlID0gdmFsdWVJbnB1dEVsZW1lbnQuY3VycmVudD8udmFsdWU7XG5cbiAgICBpZiAoa2V5ID09PSB1bmRlZmluZWQgfHwgdmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICBhd2FpdCBwcm9wcy5zZGsuU2V0dGluZ3MudXBkYXRlKGtleSwgdmFsdWUpO1xuICAgICAgc2V0TWVzc2FnZShgc3VjY2VzcyBrZXk6JHtrZXl9IHZhbHVlOiAke3ZhbHVlfWApO1xuICAgIH1cbiAgICBjYXRjaChlKSB7XG4gICAgICBzZXRNZXNzYWdlKGBlcnJvciBrZXk6JHtrZXl9IHZhbHVlOiAke3ZhbHVlfWApO1xuICAgIH1cbiAgfSwgW10pO1xuXG4gIHJldHVybiAoXG4gICAgPEZyYWdtZW50PlxuICAgICAgPHRyPlxuICAgICAgICA8dGQ+XG4gICAgICAgICAgPGJ1dHRvbiBvbkNsaWNrPXt1cGRhdGVTZXR0aW5nfT51cGRhdGU8L2J1dHRvbj5cbiAgICAgICAgPC90ZD5cbiAgICAgICAgPHRkPlxuICAgICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIGlkPSdzZXR0aW5ncy11cGRhdGUta2V5JyBjbGFzc05hbWU9XCJzbWFsbC1pbnB1dFwiIHBsYWNlaG9sZGVyPSdrZXknIHJlZj17a2V5SW5wdXRFbGVtZW50fS8+XG4gICAgICAgIDwvdGQ+XG4gICAgICAgIDx0ZD5cbiAgICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBpZD0nc2V0dGluZ3MtdXBkYXRlLXZhbHVlJyBjbGFzc05hbWU9XCJzbWFsbC1pbnB1dFwiIHBsYWNlaG9sZGVyPSd2YWx1ZScgcmVmPXt2YWx1ZUlucHV0RWxlbWVudH0vPlxuICAgICAgICA8L3RkPlxuICAgICAgPC90cj5cbiAgICAgIDx0cj5cbiAgICAgICAgPHRkIGNvbFNwYW49ezN9PlxuICAgICAgICAgIDxkaXYgaWQ9J3NldHRpbmdzLXVwZGF0ZS1tZXNzYWdlJz57bWVzc2FnZX08L2Rpdj5cbiAgICAgICAgPC90ZD5cbiAgICAgIDwvdHI+XG4gICAgPC9GcmFnbWVudD5cbiAgKTtcbn1cbiIsImltcG9ydCB0eXBlIHsgTXBTZGsgfSBmcm9tICdAc2RrL3R5cGVzJztcbmltcG9ydCB7IFNldHRpbmdzR2V0IH0gZnJvbSAnLi9TZXR0aW5nc0dldCc7XG5pbXBvcnQgeyBTZXR0aW5nc1VwZGF0ZSB9IGZyb20gJy4vU2V0dGluZ3NVcGRhdGUnO1xuXG5pbnRlcmZhY2UgUHJvcHMge1xuICBzZGs6IE1wU2RrO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gU2V0dGluZ3MocHJvcHM6IFByb3BzKTogSlNYLkVsZW1lbnQge1xuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPXtgY29udHJvbFBhbmVsYH0+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT17YGNvbnRyb2xQYW5lbEhlYWRlcmB9PntgU2V0dGluZ3NgfTwvZGl2PlxuICAgICAgPHRhYmxlPlxuICAgICAgICA8dGJvZHk+XG4gICAgICAgICAgPFNldHRpbmdzR2V0IHNkaz17cHJvcHMuc2RrfS8+XG4gICAgICAgICAgPFNldHRpbmdzVXBkYXRlIHNkaz17cHJvcHMuc2RrfS8+XG4gICAgICAgIDwvdGJvZHk+XG4gICAgICA8L3RhYmxlPlxuICAgIDwvZGl2PlxuICApO1xufVxuIiwiaW1wb3J0IHsgRnJhZ21lbnQsIHVzZUNhbGxiYWNrLCB1c2VSZWYsIHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHR5cGUgeyBNcFNkayB9IGZyb20gJ0BzZGsvdHlwZXMnO1xuXG5pbnRlcmZhY2UgUHJvcHMge1xuICBzZGs6IE1wU2RrO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gU3dlZXBEaXNhYmxlKHByb3BzOiBQcm9wcyk6IEpTWC5FbGVtZW50IHtcbiAgY29uc3QgW21lc3NhZ2UsIHNldE1lc3NhZ2VdID0gdXNlU3RhdGU8c3RyaW5nPignJyk7XG4gIGNvbnN0IHN3ZWVwSW5wdXRFbGVtZW50ID0gdXNlUmVmPEhUTUxJbnB1dEVsZW1lbnQ+KG51bGwpO1xuXG4gIGNvbnN0IHVwZGF0ZVN3ZWVwID0gdXNlQ2FsbGJhY2soYXN5bmMgKCkgPT4ge1xuICAgIGlmICghc3dlZXBJbnB1dEVsZW1lbnQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBzd2VlcElkID0gc3dlZXBJbnB1dEVsZW1lbnQuY3VycmVudD8udmFsdWU7XG5cbiAgICBpZiAoc3dlZXBJZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IHByb3BzLnNkay5Td2VlcC5kaXNhYmxlKHN3ZWVwSWQpO1xuICAgICAgc2V0TWVzc2FnZShgc3dlZXBJZDoke3N3ZWVwSWR9IGRpc2FibGVkYCk7XG4gICAgfVxuICAgIGNhdGNoKGUpIHtcbiAgICAgIHNldE1lc3NhZ2UoYGVycm9yIGRpc2FibGluZyBzd2VlcElkOiR7c3dlZXBJZH1gKTtcbiAgICB9XG4gIH0sIFtdKTtcblxuICByZXR1cm4gKFxuICAgIDxGcmFnbWVudD5cbiAgICAgIDx0cj5cbiAgICAgICAgPHRkPlxuICAgICAgICAgIDxidXR0b24gb25DbGljaz17dXBkYXRlU3dlZXB9PmRpc2FibGU8L2J1dHRvbj5cbiAgICAgICAgPC90ZD5cbiAgICAgICAgPHRkPlxuICAgICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIGlkPSdzd2VlcC1kaXNhYmxlLXN3ZWVwSWQnIHBsYWNlaG9sZGVyPSdzd2VlcCBpZCcgcmVmPXtzd2VlcElucHV0RWxlbWVudH0vPlxuICAgICAgICA8L3RkPlxuICAgICAgPC90cj5cbiAgICAgIDx0cj5cbiAgICAgICAgPHRkIGNvbFNwYW49ezN9PlxuICAgICAgICAgIDxkaXYgaWQ9J3N3ZWVwLWRpc2FibGUtbWVzc2FnZSc+e21lc3NhZ2V9PC9kaXY+XG4gICAgICAgIDwvdGQ+XG4gICAgICA8L3RyPlxuICAgIDwvRnJhZ21lbnQ+XG4gICk7XG59XG4iLCJpbXBvcnQgeyBGcmFnbWVudCwgdXNlQ2FsbGJhY2ssIHVzZVJlZiwgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgdHlwZSB7IE1wU2RrIH0gZnJvbSAnQHNkay90eXBlcyc7XG5cbmludGVyZmFjZSBQcm9wcyB7XG4gIHNkazogTXBTZGs7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBTd2VlcEVuYWJsZShwcm9wczogUHJvcHMpOiBKU1guRWxlbWVudCB7XG4gIGNvbnN0IFttZXNzYWdlLCBzZXRNZXNzYWdlXSA9IHVzZVN0YXRlPHN0cmluZz4oJycpO1xuICBjb25zdCBzd2VlcElucHV0RWxlbWVudCA9IHVzZVJlZjxIVE1MSW5wdXRFbGVtZW50PihudWxsKTtcblxuICBjb25zdCB1cGRhdGVTd2VlcCA9IHVzZUNhbGxiYWNrKGFzeW5jICgpID0+IHtcbiAgICBpZiAoIXN3ZWVwSW5wdXRFbGVtZW50KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3Qgc3dlZXBJZCA9IHN3ZWVwSW5wdXRFbGVtZW50LmN1cnJlbnQ/LnZhbHVlO1xuXG4gICAgaWYgKHN3ZWVwSWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICBhd2FpdCBwcm9wcy5zZGsuU3dlZXAuZW5hYmxlKHN3ZWVwSWQpO1xuICAgICAgc2V0TWVzc2FnZShgc3dlZXBJZDoke3N3ZWVwSWR9IGVuYWJsZWRgKTtcbiAgICB9XG4gICAgY2F0Y2goZSkge1xuICAgICAgc2V0TWVzc2FnZShgZXJyb3IgZW5hYmxpbmcgc3dlZXBJZDoke3N3ZWVwSWR9YCk7XG4gICAgfVxuICB9LCBbXSk7XG5cbiAgcmV0dXJuIChcbiAgICA8RnJhZ21lbnQ+XG4gICAgICA8dHI+XG4gICAgICAgIDx0ZD5cbiAgICAgICAgICA8YnV0dG9uIG9uQ2xpY2s9e3VwZGF0ZVN3ZWVwfT5lbmFibGU8L2J1dHRvbj5cbiAgICAgICAgPC90ZD5cbiAgICAgICAgPHRkPlxuICAgICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIGlkPSdzd2VlcC1lbmFibGUtc3dlZXBJZCcgcGxhY2Vob2xkZXI9J3N3ZWVwIGlkJyByZWY9e3N3ZWVwSW5wdXRFbGVtZW50fS8+XG4gICAgICAgIDwvdGQ+XG4gICAgICA8L3RyPlxuICAgICAgPHRyPlxuICAgICAgICA8dGQgY29sU3Bhbj17M30+XG4gICAgICAgICAgPGRpdiBpZD0nc3dlZXAtZW5hYmxlLW1lc3NhZ2UnPnttZXNzYWdlfTwvZGl2PlxuICAgICAgICA8L3RkPlxuICAgICAgPC90cj5cbiAgICA8L0ZyYWdtZW50PlxuICApO1xufVxuIiwiaW1wb3J0IHR5cGUgeyBJU3Vic2NyaXB0aW9uLCBNcFNkaywgU3dlZXAgfSBmcm9tICdAc2RrL3R5cGVzJztcbmltcG9ydCB7IHR5cGUgQ2hhbmdlRXZlbnQsIHVzZUVmZmVjdCwgdXNlU3RhdGUsIHVzZVJlZiB9IGZyb20gJ3JlYWN0JztcblxuaW50ZXJmYWNlIFByb3BzIHtcbiAgc2RrOiBNcFNkaztcbn1cblxuZXhwb3J0IGNvbnN0IFN3ZWVwTW9kaWZ5TmVpZ2hib3JzID0gKHByb3BzOiBQcm9wcyk6IEpTWC5FbGVtZW50ID0+IHtcbiAgY29uc3QgW2xhYmVsTWFwLCBzZXRMYWJlbE1hcF0gPSB1c2VTdGF0ZTx7W2tleTogc3RyaW5nXTogc3RyaW5nfT4oe30pO1xuICBjb25zdCBbYWxsU3dlZXBzLCBzZXRBbGxTd2VlcHNdID0gdXNlU3RhdGU8e1trZXk6IHN0cmluZ106IFN3ZWVwLk9ic2VydmFibGVTd2VlcERhdGF9Pih7fSk7XG4gIGNvbnN0IFthbGxTd2VlcElkcywgc2V0QWxsU3dlZXBJZHNdID0gdXNlU3RhdGU8c3RyaW5nW10+KFtdKTtcblxuICBjb25zdCBbYWN0aXZlU3dlZXBOZWlnaGJvcnMsIHNldEFjdGl2ZVN3ZWVwTmVpZ2hib3JzXSA9IHVzZVN0YXRlPHN0cmluZ1tdPihbXSk7XG4gIGNvbnN0IFtjdXJyZW50U3dlZXBJZCwgc2V0Q3VycmVudFN3ZWVwSWRdID0gdXNlU3RhdGU8c3RyaW5nPignJyk7XG4gIGNvbnN0IFthY3RpdmVTd2VlcElkLCBzZXRBY3RpdmVTd2VlcElkXSA9IHVzZVN0YXRlPHN0cmluZz4oJycpO1xuXG4gIGNvbnN0IGluaXRpYWxpemVkID0gdXNlUmVmPGJvb2xlYW4+KGZhbHNlKTtcbiAgY29uc3QgYWN0aXZlU3dlZXBJZFJlZiA9IHVzZVJlZjxzdHJpbmc+KCcnKTtcblxuXG4gIGZ1bmN0aW9uIGFjdGl2YXRlU3dlZXAoaWQ6IHN0cmluZykge1xuICAgIGNvbnN0IHN3ZWVwOiBNcFNkay5Td2VlcC5PYnNlcnZhYmxlU3dlZXBEYXRhID0gYWxsU3dlZXBzW2lkXTtcbiAgICBpZiAoIXN3ZWVwKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0lkIGRvZXNuXFwndCBjb3JyZXNwb25kIHRvIHN3ZWVwOiAnICsgaWQpO1xuICAgIH1cbiAgICBzZXRBY3RpdmVTd2VlcE5laWdoYm9ycyhzd2VlcC5uZWlnaGJvcnMpO1xuICAgIHNldEFjdGl2ZVN3ZWVwSWQoaWQpO1xuICAgIGFjdGl2ZVN3ZWVwSWRSZWYuY3VycmVudCA9IGlkO1xuICB9XG4gIGZ1bmN0aW9uIG9uU2VsZWN0U3dlZXAoZXZlbnQ6IENoYW5nZUV2ZW50PEhUTUxTZWxlY3RFbGVtZW50Pikge1xuICAgIGNvbnN0IGlkID0gZXZlbnQuY3VycmVudFRhcmdldC52YWx1ZTtcbiAgICBhY3RpdmF0ZVN3ZWVwKGlkKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHVwZGF0ZUFsbFN3ZWVwc0RpY3QoY29sbGVjdGlvbjogTXBTZGsuRGljdGlvbmFyeTxNcFNkay5Td2VlcC5PYnNlcnZhYmxlU3dlZXBEYXRhPiwgbWFwOiBNcFNkay5EaWN0aW9uYXJ5PHN0cmluZz4pOiBzdHJpbmdbXSB7XG4gICAgY29uc3QgYWxsU3dlZXBEaWN0OiB7W2tleTogc3RyaW5nXTogU3dlZXAuT2JzZXJ2YWJsZVN3ZWVwRGF0YX0gPSB7fTtcbiAgICBjb25zdCBuZXdBbGxTd2VlcElkcyA9IE9iamVjdC52YWx1ZXMoY29sbGVjdGlvbikubWFwKChzd2VlcCkgPT4ge1xuICAgICAgY29uc3QgdXNlSWQgPSBtYXBbc3dlZXAuaWRdID8/IHN3ZWVwLmlkO1xuICAgICAgYWxsU3dlZXBEaWN0W3VzZUlkXSA9IHN3ZWVwO1xuICAgICAgcmV0dXJuIHVzZUlkO1xuICAgIH0pO1xuICAgIHNldEFsbFN3ZWVwcyhhbGxTd2VlcERpY3QpO1xuICAgIGNvbnN0IGFjdGl2ZUlkID0gbWFwW2FjdGl2ZVN3ZWVwSWRSZWYuY3VycmVudF0gPz8gYWN0aXZlU3dlZXBJZFJlZi5jdXJyZW50O1xuICAgIGlmIChhbGxTd2VlcERpY3QgJiYgYWxsU3dlZXBEaWN0W2FjdGl2ZUlkXSl7XG4gICAgICBzZXRBY3RpdmVTd2VlcE5laWdoYm9ycyhhbGxTd2VlcERpY3RbYWN0aXZlSWRdLm5laWdoYm9ycyk7XG4gICAgfVxuICAgIHJldHVybiBuZXdBbGxTd2VlcElkcztcbiAgfVxuXG4gIGFzeW5jIGZ1bmN0aW9uIG1hcElkc1RvTGFiZWxzIChjb2xsZWN0aW9uOiBNcFNkay5EaWN0aW9uYXJ5PE1wU2RrLlN3ZWVwLk9ic2VydmFibGVTd2VlcERhdGE+LCBtYXA6IE1wU2RrLkRpY3Rpb25hcnk8c3RyaW5nPikge1xuICAgIC8vIGNyZWF0ZS91cGRhdGUgbWFwIG9mIGlkcyB0byBsYWJlbHNcbiAgICBjb25zdCBuZXdMYWJlbE1hcDoge1trZXk6IHN0cmluZ106IHN0cmluZ30gPSB7fTtcbiAgICBhd2FpdCBQcm9taXNlLmFsbChPYmplY3QudmFsdWVzKGNvbGxlY3Rpb24pLm1hcChhc3luYyAoc3dlZXApID0+IHtcbiAgICAgIGNvbnN0IGxhYmVsID0gYXdhaXQgcHJvcHMuc2RrLlN3ZWVwLkNvbnZlcnNpb24uZ2V0TGFiZWxGcm9tSWQoc3dlZXAuaWQpO1xuICAgICAgbmV3TGFiZWxNYXBbc3dlZXAuaWRdID0gbGFiZWw7XG4gICAgICBuZXdMYWJlbE1hcFttYXBbc3dlZXAuaWRdXSA9IGxhYmVsO1xuICAgIH0pKS50aGVuKCgpID0+IHtcbiAgICAgIHNldExhYmVsTWFwKG5ld0xhYmVsTWFwKTtcbiAgICAgIGlmIChjdXJyZW50U3dlZXBJZCkge1xuICAgICAgICBhY3RpdmF0ZVN3ZWVwKGN1cnJlbnRTd2VlcElkKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgLy8gc2hvdWxkIG9ubHkgcnVuIG9uY2VcbiAgICBjb25zdCBzdWJzOiBJU3Vic2NyaXB0aW9uW10gPSBbXTtcbiAgICBhc3luYyBmdW5jdGlvbiBydW5Vc2VFZmZlY3QoKSB7XG4gICAgICAvLyB3YWl0IGZvciBkYXRhIHRvIGJlIHJlYWR5XG4gICAgICBhd2FpdCBwcm9wcy5zZGsuQXBwLnN0YXRlLndhaXRVbnRpbCgoc3RhdGUpID0+IHN0YXRlLnBoYXNlID09PSBwcm9wcy5zZGsuQXBwLlBoYXNlLlBMQVlJTkcpO1xuXG4gICAgICAvLyBmaXJzdCwgYnVpbGQgYSBtYXAgdG8gYmUgaW5kZXBlbmRlbnQgb2YgdXNlTGVnYWN5SWRzLi4uXG4gICAgICBjb25zdCBtYXA6IE1wU2RrLkRpY3Rpb25hcnk8c3RyaW5nPiA9IGF3YWl0IHByb3BzLnNkay5Td2VlcC5Db252ZXJzaW9uLmNyZWF0ZUlkTWFwKHRydWUpO1xuXG4gICAgICAvLyBzdWJzY3JpYmUgdG8gY3VycmVudCBzd2VlcCAtIG5lZWRzIG1hcFxuICAgICAgc3Vicy5wdXNoKHByb3BzLnNkay5Td2VlcC5jdXJyZW50LnN1YnNjcmliZSgoc3dlZXBEYXRhOiBTd2VlcC5PYnNlcnZhYmxlU3dlZXBEYXRhKSA9PiB7XG4gICAgICAgIGlmICghc3dlZXBEYXRhLmlkKSB7IHJldHVybjsgfVxuICAgICAgICBzZXRDdXJyZW50U3dlZXBJZChtYXBbc3dlZXBEYXRhLmlkXSA/PyBzd2VlcERhdGEuaWQpO1xuICAgICAgfSkpO1xuICAgICAgc3Vicy5wdXNoKHByb3BzLnNkay5Td2VlcC5kYXRhLnN1YnNjcmliZSh7XG4gICAgICAgIGFzeW5jIG9uQ29sbGVjdGlvblVwZGF0ZWQoY29sbGVjdGlvbikge1xuICAgICAgICAgIC8vIHNob3VsZCBydW4gZWFjaCB0aW1lIHN3ZWVwcyBjaGFuZ2VcbiAgICAgICAgICBjb25zdCBpZERpY3QgPSB1cGRhdGVBbGxTd2VlcHNEaWN0KGNvbGxlY3Rpb24sIG1hcCk7XG4gICAgICAgICAgaWYgKCFpbml0aWFsaXplZC5jdXJyZW50KSB7XG4gICAgICAgICAgICAvLyBvbmx5IG5lZWQgdG8gZG8gZmlyc3QgdGltZVxuICAgICAgICAgICAgc2V0QWxsU3dlZXBJZHMoaWREaWN0KTtcbiAgICAgICAgICAgIGluaXRpYWxpemVkLmN1cnJlbnQgPSB0cnVlO1xuICAgICAgICAgICAgbWFwSWRzVG9MYWJlbHMoY29sbGVjdGlvbiwgbWFwKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gYWxsIHN3ZWVwcyBzaG91bGQgaGF2ZSBiZWVuIHVwZGF0ZWQgYnkgdGhpcyBwb2ludCAtIHJ1biBldmVyeSB0aW1lXG4gICAgICAgICAgICBpZiAoY3VycmVudFN3ZWVwSWQpIGFjdGl2YXRlU3dlZXAoY3VycmVudFN3ZWVwSWQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgIH0pKTtcbiAgICB9XG4gICAgcnVuVXNlRWZmZWN0KCkuY2F0Y2goKGUpID0+IHtjb25zb2xlLmVycm9yKGUpO30pO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAvLyBwcm9iYWJseSBub3QgY2FsbGVkLCBidXQgbGV0J3MgYmUgcHJvYWN0aXZlXG4gICAgICBzdWJzLmZvckVhY2goIChzdWIpID0+IHtzdWIuY2FuY2VsKCk7fSApO1xuICAgIH07XG4gIH0sIFtdKTtcblxuXG4gIGFzeW5jIGZ1bmN0aW9uIGFkZFN3ZWVwKGV2ZW50OiBDaGFuZ2VFdmVudDxIVE1MU2VsZWN0RWxlbWVudD4pOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBjb25zdCBhZGRJZCA9IGV2ZW50LmN1cnJlbnRUYXJnZXQudmFsdWU7XG4gICAgaWYgKCFhZGRJZCkgeyBjb25zb2xlLndhcm4oJ2Nhbm5vdCBzZWxlY3Qgc3BhY2VyIGFzIElEIScpOyByZXR1cm47fVxuICAgIGNvbnN0IG1hcDogTXBTZGsuRGljdGlvbmFyeTxzdHJpbmc+ID0gYXdhaXQgcHJvcHMuc2RrLlN3ZWVwLkNvbnZlcnNpb24uY3JlYXRlSWRNYXAodHJ1ZSk7XG4gICAgYXdhaXQgcHJvcHMuc2RrLlN3ZWVwLmFkZE5laWdoYm9ycyhhY3RpdmVTd2VlcElkLCBbbWFwW2FkZElkXSA/PyBhZGRJZF0pO1xuICAgIGNvbnNvbGUubG9nKCdhZGRlZCBzd2VlcCcsIGFkZElkKTtcbiAgfVxuXG4gIGFzeW5jIGZ1bmN0aW9uIHJlbW92ZVN3ZWVwKGV2ZW50OiBDaGFuZ2VFdmVudDxIVE1MU2VsZWN0RWxlbWVudD4pOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBjb25zdCByZW1vdmVJZCA9IGV2ZW50LmN1cnJlbnRUYXJnZXQudmFsdWU7XG4gICAgaWYgKCFyZW1vdmVJZCkgeyBjb25zb2xlLndhcm4oJ2Nhbm5vdCBzZWxlY3Qgc3BhY2VyIGFzIElEIScpOyByZXR1cm47fVxuICAgIGNvbnN0IG1hcDogTXBTZGsuRGljdGlvbmFyeTxzdHJpbmc+ID0gYXdhaXQgcHJvcHMuc2RrLlN3ZWVwLkNvbnZlcnNpb24uY3JlYXRlSWRNYXAodHJ1ZSk7XG4gICAgYXdhaXQgcHJvcHMuc2RrLlN3ZWVwLnJlbW92ZU5laWdoYm9ycyhhY3RpdmVTd2VlcElkLCBbbWFwW3JlbW92ZUlkXSA/PyByZW1vdmVJZF0pO1xuICAgIGNvbnNvbGUubG9nKCdyZW1vdmVkIHN3ZWVwJywgcmVtb3ZlSWQpO1xuICB9XG5cbiAgY29uc3QgZGVmYXVsdE9wdGlvbiA9IDxvcHRpb24ga2V5PXstMX0gdmFsdWU9eycnfT4tPC9vcHRpb24+O1xuICBjb25zdCBhbGxTd2VlcE9wdGlvbnMgPSBhbGxTd2VlcElkcy5tYXAoKGtleSwgaSkgPT4gPG9wdGlvbiBrZXk9e2l9IHZhbHVlPXtrZXl9PntsYWJlbE1hcFtrZXldfTwvb3B0aW9uPik7XG4gIGFsbFN3ZWVwT3B0aW9ucy51bnNoaWZ0KGRlZmF1bHRPcHRpb24pO1xuICByZXR1cm4gKDw+XG4gICAgPHA+U2VsZWN0IFN3ZWVwOiZuYnNwO1xuICAgICAgPHNlbGVjdCBvbkNoYW5nZT17b25TZWxlY3RTd2VlcH0gdmFsdWU9e2FjdGl2ZVN3ZWVwSWR9PlxuICAgICAgICB7YWxsU3dlZXBPcHRpb25zfVxuICAgICAgPC9zZWxlY3Q+XG4gICAgICA8YnV0dG9uIHN0eWxlPXt7IGZsb2F0OiAncmlnaHQnIH19XG4gICAgICAgIGRpc2FibGVkPXshY3VycmVudFN3ZWVwSWQgfHwgY3VycmVudFN3ZWVwSWQ9PT1hY3RpdmVTd2VlcElkfVxuICAgICAgICBvbkNsaWNrPXsoKSA9PiB7IGFjdGl2YXRlU3dlZXAoY3VycmVudFN3ZWVwSWQpO319XG4gICAgICA+IFVzZSBDdXJyZW50ICh7bGFiZWxNYXBbY3VycmVudFN3ZWVwSWRdfSkgPC9idXR0b24+XG4gICAgPC9wPlxuICAgIDxkaXYgc3R5bGU9e3t3aWR0aDogJzI1MHB4J319PlxuICAgICAgTmVpZ2hib3JzOiB7IGFjdGl2ZVN3ZWVwTmVpZ2hib3JzLm1hcCgoa2V5LCBpKSA9PiBsYWJlbE1hcFtrZXldKS5qb2luKCcsICcpIH1cbiAgICA8L2Rpdj5cbiAgICA8aHIvPlxuICAgIDxkaXY+XG4gICAgICBSZW1vdmUgc3dlZXAgbmVpZ2hib3I6XG4gICAgICA8c2VsZWN0IG9uQ2hhbmdlPXtyZW1vdmVTd2VlcH0gdmFsdWU9ey0xfSBzdHlsZT17e2Zsb2F0OidyaWdodCcsIHdpZHRoOiAnNDBweCd9fT5cbiAgICAgICAgeyBkZWZhdWx0T3B0aW9uIH1cbiAgICAgICAgeyBhY3RpdmVTd2VlcE5laWdoYm9ycy5tYXAoKGtleSwgaSkgPT4gPG9wdGlvbiBrZXk9e2l9IHZhbHVlPXtrZXl9PntsYWJlbE1hcFtrZXldfTwvb3B0aW9uPikgfVxuICAgICAgPC9zZWxlY3Q+XG4gICAgPC9kaXY+XG4gICAgPGRpdj5cbiAgICAgIEFkZCBzd2VlcCBuZWlnaGJvcjpcbiAgICAgIDxzZWxlY3Qgb25DaGFuZ2U9e2FkZFN3ZWVwfSB2YWx1ZT17LTF9IHN0eWxlPXt7ZmxvYXQ6J3JpZ2h0Jywgd2lkdGg6ICc0MHB4J319PlxuICAgICAgICB7YWxsU3dlZXBPcHRpb25zfVxuICAgICAgPC9zZWxlY3Q+XG4gICAgPC9kaXY+XG4gIDwvPik7XG59O1xuIiwiaW1wb3J0IHsgRnJhZ21lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgdHlwZSB7IE1wU2RrIH0gZnJvbSAnQHNkay90eXBlcyc7XG5pbXBvcnQgeyBTd2VlcERpc2FibGUgfSBmcm9tICcuL1N3ZWVwRGlzYWJsZSc7XG5pbXBvcnQgeyBTd2VlcEVuYWJsZSB9IGZyb20gJy4vU3dlZXBFbmFibGUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZUNvbGxlY3Rpb24gfSBmcm9tICcuL09ic2VydmFibGVDb2xsZWN0aW9uJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICcuL09ic2VydmFibGUnO1xuaW1wb3J0IHsgRXZlbnQgfSBmcm9tICcuL0V2ZW50JztcbmltcG9ydCB7IENvbnRyb2xQYW5lbCB9IGZyb20gJy4vQ29udHJvbFBhbmVsJztcbmltcG9ydCB7IFN3ZWVwTW9kaWZ5TmVpZ2hib3JzIH0gZnJvbSAnLi9Td2VlcE1vZGlmeU5laWdoYm9ycyc7XG5cbmludGVyZmFjZSBQcm9wcyB7XG4gIHNkazogTXBTZGs7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBTd2VlcChwcm9wczogUHJvcHMpOiBKU1guRWxlbWVudCB7XG4gIHJldHVybiAoXG4gICAgPEZyYWdtZW50PlxuICAgICAgPENvbnRyb2xQYW5lbCBoZWFkZXI9eydTd2VlcCAtIEN1cnJlbnQnfT5cbiAgICAgICAgPE9ic2VydmFibGUgb2JzZXJ2YWJsZT17cHJvcHMuc2RrLlN3ZWVwLmN1cnJlbnR9IG5hbWU9J1N3ZWVwLmN1cnJlbnQnIC8+XG4gICAgICA8L0NvbnRyb2xQYW5lbD5cbiAgICAgIDxDb250cm9sUGFuZWwgaGVhZGVyPXsnU3dlZXAgLSBDb2xsZWN0aW9uJ30+XG4gICAgICAgIDxPYnNlcnZhYmxlQ29sbGVjdGlvbiBjb2xsZWN0aW9uPXtwcm9wcy5zZGsuU3dlZXAuZGF0YX0gbmFtZT0nU3dlZXAuZGF0YScgLz5cbiAgICAgIDwvQ29udHJvbFBhbmVsPlxuICAgICAgPGRpdiBjbGFzc05hbWU9e2Bjb250cm9sUGFuZWxgfT5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9e2Bjb250cm9sUGFuZWxIZWFkZXJgfT57YFN3ZWVwYH08L2Rpdj5cbiAgICAgICAgPHRhYmxlPlxuICAgICAgICAgIDx0Ym9keT5cbiAgICAgICAgICAgIDxTd2VlcERpc2FibGUgc2RrPXtwcm9wcy5zZGt9IC8+XG4gICAgICAgICAgICA8U3dlZXBFbmFibGUgc2RrPXtwcm9wcy5zZGt9IC8+XG4gICAgICAgICAgPC90Ym9keT5cbiAgICAgICAgPC90YWJsZT5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzc05hbWU9e2Bjb250cm9sUGFuZWxgfT5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9e2Bjb250cm9sUGFuZWxIZWFkZXJgfT57YFN3ZWVwYH08L2Rpdj5cbiAgICAgICAgPHRhYmxlPlxuICAgICAgICAgIDx0Ym9keT5cbiAgICAgICAgICAgIDxFdmVudCBzZGs9e3Byb3BzLnNka30gZW51bT17cHJvcHMuc2RrLlN3ZWVwLkV2ZW50fS8+XG4gICAgICAgICAgPC90Ym9keT5cbiAgICAgICAgPC90YWJsZT5cbiAgICAgIDwvZGl2PlxuICAgICAgPENvbnRyb2xQYW5lbCBoZWFkZXI9e2BTd2VlcCBOZWlnaGJvciBDb25uZWN0aW9uc2B9PlxuICAgICAgICA8U3dlZXBNb2RpZnlOZWlnaGJvcnMgc2RrPXtwcm9wcy5zZGt9Lz5cbiAgICAgIDwvQ29udHJvbFBhbmVsPlxuICAgIDwvRnJhZ21lbnQ+XG4gICk7XG59XG4iLCJpbXBvcnQgeyBGcmFnbWVudCwgdXNlQ2FsbGJhY2ssIHVzZUVmZmVjdCwgdXNlUmVmLCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IENvbGxlY3Rpb25TZWxlY3QgfSBmcm9tICcuL0NvbGxlY3Rpb25TZWxlY3Rvcic7XG5pbXBvcnQgeyBHcmFwaCB9IGZyb20gJ0BzZGsvdHlwZXMnO1xuaW1wb3J0IHR5cGUgeyBJU3Vic2NyaXB0aW9uLCBNcFNkaywgU3dlZXAgfSBmcm9tICdAc2RrL3R5cGVzJztcblxuaW50ZXJmYWNlIFByb3BzIHtcbiAgc2RrOiBNcFNkaztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIFN3ZWVwR3JhcGgocHJvcHM6IFByb3BzKTogSlNYLkVsZW1lbnQge1xuICBjb25zdCBbcGF0aERpcnR5LCBzZXRQYXRoRGlydHldID0gdXNlU3RhdGU8Ym9vbGVhbj4odHJ1ZSk7XG5cbiAgY29uc3QgZ3JhcGggPSB1c2VSZWY8TXBTZGsuR3JhcGguSURpcmVjdGVkR3JhcGg8U3dlZXAuT2JzZXJ2YWJsZVN3ZWVwRGF0YT4+KCk7XG4gIGNvbnN0IHBhdGhFbmRQb2ludHM6IFtzdHJpbmcsIHN0cmluZ10gPSBbJycsICcnXTtcblxuICBjb25zdCBhU3RhclN1YiA9IHVzZVJlZjxJU3Vic2NyaXB0aW9uPigpO1xuICBjb25zdCBydW5uZXIgPSB1c2VSZWY8TXBTZGsuR3JhcGguSUFTdGFyUnVubmVyPFN3ZWVwLk9ic2VydmFibGVTd2VlcERhdGE+PigpO1xuICBjb25zdCBvblN0YXJ0Q2hhbmdlZCA9IHVzZUNhbGxiYWNrKGZ1bmN0aW9uIChpZDogc3RyaW5nKSB7XG4gICAgcGF0aEVuZFBvaW50c1swXSA9IGlkO1xuICAgIHVwZGF0ZVBhdGgoKTtcbiAgfSwgW10pO1xuICBjb25zdCBvbkVuZENoYW5nZWQgPSB1c2VDYWxsYmFjayhmdW5jdGlvbiAoaWQ6IHN0cmluZykge1xuICAgIHBhdGhFbmRQb2ludHNbMV0gPSBpZDtcbiAgICB1cGRhdGVQYXRoKCk7XG4gIH0sIFtdKTtcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIHByb3BzLnNkay5Td2VlcC5jcmVhdGVHcmFwaCgpLnRoZW4oKHN3ZWVwR3JhcGgpID0+IGdyYXBoLmN1cnJlbnQgPSBzd2VlcEdyYXBoKTtcbiAgfSk7XG5cbiAgZnVuY3Rpb24gdXBkYXRlUGF0aCgpIHtcbiAgICBpZiAoZ3JhcGguY3VycmVudCkge1xuICAgICAgY29uc3Qgc3RhcnQgPSBncmFwaC5jdXJyZW50LnZlcnRleChwYXRoRW5kUG9pbnRzWzBdKTtcbiAgICAgIGNvbnN0IGVuZCA9IGdyYXBoLmN1cnJlbnQudmVydGV4KHBhdGhFbmRQb2ludHNbMV0pO1xuICAgICAgaWYgKHN0YXJ0ICYmIGVuZCkge1xuICAgICAgICBpZiAoYVN0YXJTdWIuY3VycmVudCkge1xuICAgICAgICAgIGFTdGFyU3ViLmN1cnJlbnQuY2FuY2VsKCk7XG4gICAgICAgIH1cbiAgICAgICAgcnVubmVyLmN1cnJlbnQgPSBwcm9wcy5zZGsuR3JhcGguY3JlYXRlQVN0YXJSdW5uZXIoZ3JhcGguY3VycmVudCwgc3RhcnQsIGVuZCk7XG4gICAgICAgIGFTdGFyU3ViLmN1cnJlbnQgPSBydW5uZXIuY3VycmVudC5zdWJzY3JpYmUoe1xuICAgICAgICAgIG9uQ2hhbmdlZCgpIHtcbiAgICAgICAgICAgIHNldFBhdGhEaXJ0eSh0cnVlKTtcbiAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gICAgc2V0UGF0aERpcnR5KHRydWUpO1xuICB9XG5cbiAgY29uc3QgcmVzdWx0UmVmID0gdXNlUmVmPEhUTUxUZXh0QXJlYUVsZW1lbnQ+KG51bGwpO1xuICBjb25zdCByZWNhbGNQYXRoID0gdXNlQ2FsbGJhY2soZnVuY3Rpb24gKCkge1xuICAgIGlmIChydW5uZXIuY3VycmVudCkge1xuICAgICAgY29uc3QgcmVzdWx0ID0gcnVubmVyLmN1cnJlbnQuZXhlYygpO1xuICAgICAgaWYgKHJlc3VsdFJlZi5jdXJyZW50KSB7XG4gICAgICAgIGlmIChyZXN1bHQuc3RhdHVzICE9PSBHcmFwaC5BU3RhclN0YXR1cy5TVUNDRVNTKSB7XG4gICAgICAgICAgcmVzdWx0UmVmLmN1cnJlbnQudmFsdWUgPSAnTm8gcGF0aCBmb3VuZCc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVzdWx0UmVmLmN1cnJlbnQudmFsdWUgPSByZXN1bHQucGF0aC5tYXAoKHYsIGkpID0+IGkgKyAnOiAnICsgdi5pZCkuam9pbignXFxuJyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHNldFBhdGhEaXJ0eShmYWxzZSk7XG4gICAgfVxuICB9LCBbXSk7XG5cbiAgcmV0dXJuIChcbiAgICA8RnJhZ21lbnQ+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT17YGNvbnRyb2xQYW5lbGB9PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT17YGNvbnRyb2xQYW5lbEhlYWRlcmB9PkdyYXBoIC0gU3dlZXA8L2Rpdj5cbiAgICAgICAgPGRpdj5cbiAgICAgICAgICBTdGFydDogPENvbGxlY3Rpb25TZWxlY3RcbiAgICAgICAgICAgIGNvbGxlY3Rpb249e3Byb3BzLnNkay5Td2VlcC5kYXRhfVxuICAgICAgICAgICAgZmlsdGVyPXtlbmFibGVkU3dlZXBGaWx0ZXJ9XG4gICAgICAgICAgICBvbkNoYW5nZWQ9e29uU3RhcnRDaGFuZ2VkfVxuICAgICAgICAgIC8+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2PlxuICAgICAgICAgIEVuZDogPENvbGxlY3Rpb25TZWxlY3RcbiAgICAgICAgICAgIGNvbGxlY3Rpb249e3Byb3BzLnNkay5Td2VlcC5kYXRhfVxuICAgICAgICAgICAgZmlsdGVyPXtlbmFibGVkU3dlZXBGaWx0ZXJ9XG4gICAgICAgICAgICBvbkNoYW5nZWQ9e29uRW5kQ2hhbmdlZH1cbiAgICAgICAgICAvPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdj5cbiAgICAgICAgICBQYXRoIERpcnR5OiB7cGF0aERpcnR5LnRvU3RyaW5nKCl9XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2PlxuICAgICAgICAgIDxidXR0b24gb25DbGljaz17cmVjYWxjUGF0aH0+Q0FMQ1VMQVRFIFBBVEg8L2J1dHRvbj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXY+XG4gICAgICAgICAgPHRleHRhcmVhIHN0eWxlPXt7d2lkdGg6ICczMDBweCcsIGhlaWdodDogJzcycHgnLCB3aGl0ZVNwYWNlOiAncHJlJ319IHJlZj17cmVzdWx0UmVmfS8+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9GcmFnbWVudD5cbiAgKTtcbn1cblxuZnVuY3Rpb24gZW5hYmxlZFN3ZWVwRmlsdGVyKHN3ZWVwOiBNcFNkay5Td2VlcC5PYnNlcnZhYmxlU3dlZXBEYXRhKTogYm9vbGVhbiB7XG4gIHJldHVybiBzd2VlcC5lbmFibGVkO1xufVxuIiwiaW1wb3J0IHsgdHlwZSBNcFNkayB9IGZyb20gJ0BzZGsvdHlwZXMnO1xuaW1wb3J0IHsgdHlwZSBSZWFjdEVsZW1lbnQsIHR5cGUgUHJvcHNXaXRoQ2hpbGRyZW4sIENoaWxkcmVuLCBjbG9uZUVsZW1lbnQsIHVzZUNhbGxiYWNrLCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcblxudHlwZSBQcm9wcyA9IHtcbiAgc2RrOiBNcFNkaztcbiAgc2VsZWN0ZWRMYXllcjogTXBTZGsuVmlldy5MYXllciB8IHVuZGVmaW5lZDtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBMYXllclN1cHBvcnQoe3Nkaywgc2VsZWN0ZWRMYXllciwgY2hpbGRyZW59OiBQcm9wc1dpdGhDaGlsZHJlbjxQcm9wcz4pOiBKU1guRWxlbWVudCB7XG4gIGNvbnN0IFt1c2VMYXllciwgc2V0VXNlTGF5ZXJdID0gdXNlU3RhdGUoZmFsc2UpO1xuICBjb25zdCBvbkNoZWNrQ2hhbmdlZCA9IHVzZUNhbGxiYWNrKChlOiBSZWFjdC5DaGFuZ2VFdmVudDxIVE1MSW5wdXRFbGVtZW50PikgPT4ge1xuICAgIHNldFVzZUxheWVyKGUudGFyZ2V0LmNoZWNrZWQpO1xuICB9LCBbXSk7XG5cbiAgLy8gcmVuZGVyIHRoZSBjaGlsZCBjb250cm9sIGJ1dCBjaGFuZ2UgdGhlIGBzZGtgIHByb3AgdG8gYmUgdGhlIGFjdGl2ZSBgc2VsZWN0ZWRMYXllcmAgaW5zdGVhZCBpZiB0aGUgYHVzZUxheWVyYCBmbGFnIGlzIHNldFxuICBmdW5jdGlvbiByZW5kZXJDaGlsZHJlbigpIHtcbiAgICByZXR1cm4gQ2hpbGRyZW4ubWFwKGNoaWxkcmVuLCBjaGlsZCA9PiBjbG9uZUVsZW1lbnQoY2hpbGQgYXMgUmVhY3RFbGVtZW50LCB7XG4gICAgICBzZGs6IHVzZUxheWVyICYmIHNlbGVjdGVkTGF5ZXIgPyBzZWxlY3RlZExheWVyIDogc2RrLFxuICAgIH0pKTtcbiAgfVxuXG4gIHJldHVybiAoXG4gICAgPD5cbiAgICAgIDxkaXYgc3R5bGU9e3sgYmFja2dyb3VuZENvbG9yOiAnI2Q3ZGVlMCcgfX0+XG4gICAgICAgIDxkaXYgc3R5bGU9e3sgZGlzcGxheTogJ2lubGluZS1ibG9jaycgfX0+XG4gICAgICAgICAgPGxhYmVsIGh0bWxGb3I9Jyc+VXNlIExheWVyPC9sYWJlbD48aW5wdXQgdHlwZT0nY2hlY2tib3gnIG9uQ2hhbmdlPXtvbkNoZWNrQ2hhbmdlZH0gLz5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgc3R5bGU9e3sgZGlzcGxheTogJ2lubGluZS1ibG9jaycgfX0+XG4gICAgICAgICAgPGlucHV0IHdpZHRoPScyMDBweCcgdHlwZT0ndGV4dCcgdmFsdWU9e3NlbGVjdGVkTGF5ZXIgPyBzZWxlY3RlZExheWVyLmlkIDogJ25vIGxheWVyIHNlbGVjdGVkJ30gcmVhZE9ubHkgZGlzYWJsZWQ9eyF1c2VMYXllcn0gLz5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXY+XG4gICAgICAgIHtyZW5kZXJDaGlsZHJlbigpfVxuICAgICAgPC9kaXY+XG4gICAgPC8+XG4gICk7XG59XG4iLCJpbXBvcnQgdHlwZSB7IE1wU2RrIH0gZnJvbSAnQHNkay90eXBlcyc7XG5pbXBvcnQgeyBGcmFnbWVudCwgdXNlQ2FsbGJhY2ssIHVzZVJlZiB9IGZyb20gJ3JlYWN0JztcblxuaW50ZXJmYWNlIFByb3BzIHtcbiAgc2RrOiBNcFNkaztcbiAgc2VsZWN0ZWRBc3NldDogc3RyaW5nO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gQWRkKHByb3BzOiBQcm9wcyk6IEpTWC5FbGVtZW50IHtcbiAgY29uc3QgbGFiZWxJbnB1dCA9IHVzZVJlZjxIVE1MSW5wdXRFbGVtZW50PihudWxsKTtcbiAgY29uc3QgZGVzY0lucHV0ID0gdXNlUmVmPEhUTUxUZXh0QXJlYUVsZW1lbnQ+KG51bGwpO1xuXG4gIGNvbnN0IHhJbnB1dCA9IHVzZVJlZjxIVE1MSW5wdXRFbGVtZW50PihudWxsKTtcbiAgY29uc3QgeUlucHV0ID0gdXNlUmVmPEhUTUxJbnB1dEVsZW1lbnQ+KG51bGwpO1xuICBjb25zdCB6SW5wdXQgPSB1c2VSZWY8SFRNTElucHV0RWxlbWVudD4obnVsbCk7XG5cbiAgY29uc3QgeE5vcm1JbnB1dCA9IHVzZVJlZjxIVE1MSW5wdXRFbGVtZW50PihudWxsKTtcbiAgY29uc3QgeU5vcm1JbnB1dCA9IHVzZVJlZjxIVE1MSW5wdXRFbGVtZW50PihudWxsKTtcbiAgY29uc3Qgek5vcm1JbnB1dCA9IHVzZVJlZjxIVE1MSW5wdXRFbGVtZW50PihudWxsKTtcblxuICBjb25zdCBpZElucHV0ID0gdXNlUmVmPEhUTUxJbnB1dEVsZW1lbnQ+KG51bGwpO1xuICBjb25zdCBvcGFjaXR5SW5wdXQgPSB1c2VSZWY8SFRNTElucHV0RWxlbWVudD4obnVsbCk7XG4gIGNvbnN0IHN1Ym1pdEljb24gPSB1c2VSZWY8SFRNTElucHV0RWxlbWVudD4obnVsbCk7XG5cbiAgY29uc3QgYWRkVGFnID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgIGlmIChcbiAgICAgIGxhYmVsSW5wdXQuY3VycmVudCAmJlxuICAgICAgZGVzY0lucHV0LmN1cnJlbnQgJiZcbiAgICAgIHhJbnB1dC5jdXJyZW50ICYmXG4gICAgICB5SW5wdXQuY3VycmVudCAmJlxuICAgICAgeklucHV0LmN1cnJlbnQgJiZcbiAgICAgIHhOb3JtSW5wdXQuY3VycmVudCAmJlxuICAgICAgeU5vcm1JbnB1dC5jdXJyZW50ICYmXG4gICAgICB6Tm9ybUlucHV0LmN1cnJlbnQgJiZcbiAgICAgIGlkSW5wdXQuY3VycmVudCAmJlxuICAgICAgb3BhY2l0eUlucHV0LmN1cnJlbnRcbiAgICApIHtcbiAgICAgIHByb3BzLnNkay5UYWcuYWRkKHtcbiAgICAgICAgaWQ6IGlkSW5wdXQuY3VycmVudC52YWx1ZSA9PT0gJycgPyB1bmRlZmluZWQgOiBpZElucHV0LmN1cnJlbnQudmFsdWUsXG4gICAgICAgIGxhYmVsOiBsYWJlbElucHV0LmN1cnJlbnQudmFsdWUsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBkZXNjSW5wdXQuY3VycmVudC52YWx1ZSxcbiAgICAgICAgYW5jaG9yUG9zaXRpb246IHtcbiAgICAgICAgICB4OiBwYXJzZUZsb2F0KHhJbnB1dC5jdXJyZW50LnZhbHVlKSxcbiAgICAgICAgICB5OiBwYXJzZUZsb2F0KHlJbnB1dC5jdXJyZW50LnZhbHVlKSxcbiAgICAgICAgICB6OiBwYXJzZUZsb2F0KHpJbnB1dC5jdXJyZW50LnZhbHVlKSxcbiAgICAgICAgfSxcbiAgICAgICAgc3RlbVZlY3Rvcjoge1xuICAgICAgICAgIHg6IHBhcnNlRmxvYXQoeE5vcm1JbnB1dC5jdXJyZW50LnZhbHVlKSxcbiAgICAgICAgICB5OiBwYXJzZUZsb2F0KHlOb3JtSW5wdXQuY3VycmVudC52YWx1ZSksXG4gICAgICAgICAgejogcGFyc2VGbG9hdCh6Tm9ybUlucHV0LmN1cnJlbnQudmFsdWUpLFxuICAgICAgICB9LFxuICAgICAgICBvcGFjaXR5OiBwYXJzZUZsb2F0KG9wYWNpdHlJbnB1dC5jdXJyZW50LnZhbHVlKSxcbiAgICAgICAgaWNvbklkOiAoc3VibWl0SWNvbi5jdXJyZW50Py5jaGVja2VkICYmIHByb3BzLnNlbGVjdGVkQXNzZXQpID8gcHJvcHMuc2VsZWN0ZWRBc3NldCA6IHVuZGVmaW5lZCxcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwgW3Byb3BzLnNkay5UYWcsIHByb3BzLnNlbGVjdGVkQXNzZXRdKTtcblxuICByZXR1cm4gKFxuICAgIDxGcmFnbWVudD5cbiAgICAgIDxkaXY+XG4gICAgICAgIDxsYWJlbCBodG1sRm9yPSd0YWcyLWFkZC10aXRsZSc+VGl0bGU6PC9sYWJlbD5cbiAgICAgICAgPGlucHV0IHJlZj17bGFiZWxJbnB1dH0gdHlwZT0ndGV4dCcgaWQ9J3RhZzItYWRkLXRpdGxlJyAvPlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2PlxuICAgICAgICA8bGFiZWwgaHRtbEZvcj0ndGFnMi1hZGQtZGVzYyc+RGVzYzo8L2xhYmVsPlxuICAgICAgICA8dGV4dGFyZWEgcmVmPXtkZXNjSW5wdXR9IGlkPSd0YWcyLWFkZC1kZXNjJyAvPlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2PlxuICAgICAgICA8ZGl2PnBvc2l0aW9uOjwvZGl2PlxuICAgICAgICA8bGFiZWwgaHRtbEZvcj0ndGFnMi1hZGQtcG9zLXgnPng6IDwvbGFiZWw+XG4gICAgICAgIDxpbnB1dCByZWY9e3hJbnB1dH0gY2xhc3NOYW1lPSdzbWFsbC1pbnB1dCcgaWQ9J3RhZzItYWRkLXBvcy14JyB0eXBlPSdudW1iZXInIHN0ZXA9JzAuMDAxJyBkZWZhdWx0VmFsdWU9JzAnIC8+XG4gICAgICAgIDxsYWJlbCBodG1sRm9yPSd0YWcyLWFkZC1wb3MteSc+eTogPC9sYWJlbD5cbiAgICAgICAgPGlucHV0IHJlZj17eUlucHV0fSBjbGFzc05hbWU9J3NtYWxsLWlucHV0JyBpZD0ndGFnMi1hZGQtcG9zLXknIHR5cGU9J251bWJlcicgc3RlcD0nMC4wMDEnIGRlZmF1bHRWYWx1ZT0nMCcgLz5cbiAgICAgICAgPGxhYmVsIGh0bWxGb3I9J3RhZzItYWRkLXBvcy16Jz56OiA8L2xhYmVsPlxuICAgICAgICA8aW5wdXQgcmVmPXt6SW5wdXR9IGNsYXNzTmFtZT0nc21hbGwtaW5wdXQnIGlkPSd0YWcyLWFkZC1wb3MteicgdHlwZT0nbnVtYmVyJyBzdGVwPScwLjAwMScgZGVmYXVsdFZhbHVlPScwJyAvPlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2PlxuICAgICAgICA8ZGl2Pm5vcm1hbDo8L2Rpdj5cbiAgICAgICAgPGxhYmVsIGh0bWxGb3I9J3RhZzItYWRkLW5vcm0teCc+eDogPC9sYWJlbD5cbiAgICAgICAgPGlucHV0IHJlZj17eE5vcm1JbnB1dH0gY2xhc3NOYW1lPSdzbWFsbC1pbnB1dCcgaWQ9J3RhZzItYWRkLW5vcm0teCcgdHlwZT0nbnVtYmVyJyBzdGVwPScwLjAwMScgZGVmYXVsdFZhbHVlPScwJyAvPlxuICAgICAgICA8bGFiZWwgaHRtbEZvcj0ndGFnMi1hZGQtbm9ybS15Jz55OiA8L2xhYmVsPlxuICAgICAgICA8aW5wdXQgcmVmPXt5Tm9ybUlucHV0fSBjbGFzc05hbWU9J3NtYWxsLWlucHV0JyBpZD0ndGFnMi1hZGQtbm9ybS15JyB0eXBlPSdudW1iZXInIHN0ZXA9JzAuMDAxJyBkZWZhdWx0VmFsdWU9JzEnIC8+XG4gICAgICAgIDxsYWJlbCBodG1sRm9yPSd0YWcyLWFkZC1ub3JtLXonPno6IDwvbGFiZWw+XG4gICAgICAgIDxpbnB1dCByZWY9e3pOb3JtSW5wdXR9IGNsYXNzTmFtZT0nc21hbGwtaW5wdXQnIGlkPSd0YWcyLWFkZC1ub3JtLXonIHR5cGU9J251bWJlcicgc3RlcD0nMC4wMDEnIGRlZmF1bHRWYWx1ZT0nMCcgLz5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdj5cbiAgICAgICAgPGxhYmVsIGh0bWxGb3I9J3RhZzItYWRkLWlkJz5pZDogPC9sYWJlbD5cbiAgICAgICAgPGlucHV0IHJlZj17aWRJbnB1dH0gY2xhc3NOYW1lPSdzbWFsbC1pbnB1dCcgaWQ9J3RhZzItYWRkLWlkJyB0eXBlPSdzdHJpbmcnIC8+XG4gICAgICAgIDxsYWJlbCBodG1sRm9yPSd0YWcyLWFkZC1vcGFjaXR5Jz5vcGFjaXR5OiA8L2xhYmVsPlxuICAgICAgICA8aW5wdXQgcmVmPXtvcGFjaXR5SW5wdXR9IGNsYXNzTmFtZT0nc21hbGwtaW5wdXQnIGlkPSd0YWcyLWFkZC1vcGFjaXR5JyB0eXBlPSdudW1iZXInIHN0ZXA9JzAuMDEnIGRlZmF1bHRWYWx1ZT0nMScgLz5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdj5cbiAgICAgICAgaWNvbjogPGlucHV0IHJlZj17c3VibWl0SWNvbn0gdHlwZT0nY2hlY2tib3gnIGRlZmF1bHRDaGVja2VkPXtmYWxzZX0gLz5cbiAgICAgICAgPGlucHV0IHR5cGU9J3RleHQnIHJlYWRPbmx5PXt0cnVlfSB2YWx1ZT17cHJvcHMuc2VsZWN0ZWRBc3NldH0gLz5cbiAgICAgICAgPGJ1dHRvbiBpZD0ndGFnMi1hZGQnIG9uQ2xpY2s9e2FkZFRhZ30+QWRkPC9idXR0b24+XG4gICAgICA8L2Rpdj5cbiAgICA8L0ZyYWdtZW50PlxuICApO1xufVxuIiwiaW1wb3J0IHR5cGUgeyBNcFNkayB9IGZyb20gJ0BzZGsvdHlwZXMnO1xuaW1wb3J0IHsgRnJhZ21lbnQsIHVzZUNhbGxiYWNrLCB1c2VSZWYsIHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnO1xuXG5pbnRlcmZhY2UgUHJvcHMge1xuICBzZGs6IE1wU2RrO1xuICBzZWxlY3RlZFRhZzogc3RyaW5nO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gQWxsb3dBY3Rpb24ocHJvcHM6IFByb3BzKTogSlNYLkVsZW1lbnQge1xuICBjb25zdCBhbGxvd0RvY2tpbmcgPSB1c2VSZWY8SFRNTElucHV0RWxlbWVudD4obnVsbCk7XG4gIGNvbnN0IGFsbG93T3BlbmluZyA9IHVzZVJlZjxIVE1MSW5wdXRFbGVtZW50PihudWxsKTtcbiAgY29uc3QgYWxsb3dOYXZpZ2F0aW9uID0gdXNlUmVmPEhUTUxJbnB1dEVsZW1lbnQ+KG51bGwpO1xuICBjb25zdCBhbGxvd1NoYXJpbmcgPSB1c2VSZWY8SFRNTElucHV0RWxlbWVudD4obnVsbCk7XG5cbiAgY29uc3QgW2FsbG93ZWRBY3Rpb25zLCBzZXRBbGxvd2VkQWN0aW9uc10gPSB1c2VTdGF0ZShuZXcgTWFwPHN0cmluZywgeyBkb2NraW5nOiBib29sZWFuOyBvcGVuaW5nOiBib29sZWFuOyBuYXZpZ2F0aW5nOiBib29sZWFuOyBzaGFyaW5nOiBib29sZWFuOyB9PigpKTtcblxuICBjb25zdCBhbGxvd0FjdGlvbnMgPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgaWYgKGFsbG93RG9ja2luZy5jdXJyZW50ICYmIGFsbG93T3BlbmluZy5jdXJyZW50ICYmIGFsbG93TmF2aWdhdGlvbi5jdXJyZW50ICYmIGFsbG93U2hhcmluZy5jdXJyZW50KSB7XG4gICAgICBwcm9wcy5zZGsuVGFnLmFsbG93QWN0aW9uKHByb3BzLnNlbGVjdGVkVGFnLCB7XG4gICAgICAgIGRvY2tpbmc6IGFsbG93RG9ja2luZy5jdXJyZW50LmNoZWNrZWQsXG4gICAgICAgIG9wZW5pbmc6IGFsbG93T3BlbmluZy5jdXJyZW50LmNoZWNrZWQsXG4gICAgICAgIG5hdmlnYXRpbmc6IGFsbG93TmF2aWdhdGlvbi5jdXJyZW50LmNoZWNrZWQsXG4gICAgICAgIHNoYXJpbmc6IGFsbG93U2hhcmluZy5jdXJyZW50LmNoZWNrZWQsXG4gICAgICB9KTtcbiAgICB9XG4gIH0sIFtwcm9wcy5zZGsuVGFnLCBwcm9wcy5zZWxlY3RlZFRhZ10pO1xuXG4gIGNvbnN0IGNoYW5nZUFsbG93ZWRBY3Rpb25zOiBSZWFjdC5DaGFuZ2VFdmVudEhhbmRsZXI8SFRNTElucHV0RWxlbWVudD4gPSB1c2VDYWxsYmFjaygoZSkgPT4ge1xuICAgIGNvbnN0IGN1cnJlbnRBY3Rpb25zID0gYWxsb3dlZEFjdGlvbnMuZ2V0KHByb3BzLnNlbGVjdGVkVGFnKSB8fCB7IGRvY2tpbmc6IHRydWUsIG9wZW5pbmc6IHRydWUsIG5hdmlnYXRpbmc6IHRydWUsIHNoYXJpbmc6IHRydWUgfTtcbiAgICBpZiAoZS50YXJnZXQgPT09IGFsbG93RG9ja2luZy5jdXJyZW50KSB7XG4gICAgICBjdXJyZW50QWN0aW9ucy5kb2NraW5nID0gIWN1cnJlbnRBY3Rpb25zLmRvY2tpbmc7XG4gICAgfVxuICAgIGlmIChlLnRhcmdldCA9PT0gYWxsb3dOYXZpZ2F0aW9uLmN1cnJlbnQpIHtcbiAgICAgIGN1cnJlbnRBY3Rpb25zLm5hdmlnYXRpbmcgPSAhY3VycmVudEFjdGlvbnMubmF2aWdhdGluZztcbiAgICB9XG4gICAgaWYgKGUudGFyZ2V0ID09PSBhbGxvd09wZW5pbmcuY3VycmVudCkge1xuICAgICAgY3VycmVudEFjdGlvbnMub3BlbmluZyA9ICFjdXJyZW50QWN0aW9ucy5vcGVuaW5nO1xuICAgIH1cbiAgICBpZiAoZS50YXJnZXQgPT09IGFsbG93U2hhcmluZy5jdXJyZW50KSB7XG4gICAgICBjdXJyZW50QWN0aW9ucy5zaGFyaW5nID0gIWN1cnJlbnRBY3Rpb25zLnNoYXJpbmc7XG4gICAgfVxuXG4gICAgYWxsb3dlZEFjdGlvbnMuc2V0KHByb3BzLnNlbGVjdGVkVGFnLCBjdXJyZW50QWN0aW9ucyk7XG4gICAgc2V0QWxsb3dlZEFjdGlvbnMobmV3IE1hcChhbGxvd2VkQWN0aW9ucykpO1xuICAgIGFsbG93QWN0aW9ucygpO1xuICB9LCBbYWxsb3dBY3Rpb25zLCBhbGxvd2VkQWN0aW9ucywgcHJvcHMuc2VsZWN0ZWRUYWddKTtcblxuICBjb25zdCBzZWxlY3RlZFRhZ0FjdGlvbnMgPSBhbGxvd2VkQWN0aW9ucy5nZXQocHJvcHMuc2VsZWN0ZWRUYWcpIHx8IHsgZG9ja2luZzogdHJ1ZSwgb3BlbmluZzogdHJ1ZSwgbmF2aWdhdGluZzogdHJ1ZSwgc2hhcmluZzogdHJ1ZSB9O1xuXG4gIHJldHVybiAoXG4gICAgPEZyYWdtZW50PlxuICAgICAgPGRpdj5cbiAgICAgICAgKGNoZWNrZWQgPT0gYWxsb3dlZClcbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdj5cbiAgICAgICAgPGxhYmVsIGh0bWxGb3I9J3RhZzItYWxsb3ctb3Blbic+QmlsbGJvYXJkOjwvbGFiZWw+XG4gICAgICAgIDxpbnB1dCByZWY9e2FsbG93T3BlbmluZ30gdHlwZT0nY2hlY2tib3gnIGlkPSd0YWcyLWFsbG93LW9wZW4nIG9uQ2hhbmdlPXtjaGFuZ2VBbGxvd2VkQWN0aW9uc30gY2hlY2tlZD17c2VsZWN0ZWRUYWdBY3Rpb25zLm9wZW5pbmd9Lz5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdj5cbiAgICAgICAgPGxhYmVsIGh0bWxGb3I9J3RhZzItYWxsb3ctbmF2Jz5OYXZpZ2F0aW9uOjwvbGFiZWw+XG4gICAgICAgIDxpbnB1dCByZWY9e2FsbG93TmF2aWdhdGlvbn0gdHlwZT0nY2hlY2tib3gnIGlkPSd0YWcyLWFsbG93LW5hdicgb25DaGFuZ2U9e2NoYW5nZUFsbG93ZWRBY3Rpb25zfSBjaGVja2VkPXtzZWxlY3RlZFRhZ0FjdGlvbnMubmF2aWdhdGluZ30vPlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2PlxuICAgICAgICA8bGFiZWwgaHRtbEZvcj0ndGFnMi1hbGxvdy1kb2NrJz5Eb2NrOjwvbGFiZWw+XG4gICAgICAgIDxpbnB1dCByZWY9e2FsbG93RG9ja2luZ30gdHlwZT0nY2hlY2tib3gnIGlkPSd0YWcyLWFsbG93LWRvY2snIG9uQ2hhbmdlPXtjaGFuZ2VBbGxvd2VkQWN0aW9uc30gY2hlY2tlZD17c2VsZWN0ZWRUYWdBY3Rpb25zLmRvY2tpbmd9Lz5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdj5cbiAgICAgICAgPGxhYmVsIGh0bWxGb3I9J3RhZzItYWxsb3ctc2hhcmUnPlNoYXJlOjwvbGFiZWw+XG4gICAgICAgIDxpbnB1dCByZWY9e2FsbG93U2hhcmluZ30gdHlwZT0nY2hlY2tib3gnIGlkPSd0YWcyLWFsbG93LXNoYXJlJyBvbkNoYW5nZT17Y2hhbmdlQWxsb3dlZEFjdGlvbnN9IGNoZWNrZWQ9e3NlbGVjdGVkVGFnQWN0aW9ucy5zaGFyaW5nfS8+XG4gICAgICA8L2Rpdj5cbiAgICA8L0ZyYWdtZW50PlxuICApO1xufVxuIiwiaW1wb3J0IHR5cGUgeyBNcFNkayB9IGZyb20gJ0BzZGsvdHlwZXMnO1xuaW1wb3J0IHsgRnJhZ21lbnQsIHVzZUNhbGxiYWNrIH0gZnJvbSAncmVhY3QnO1xuXG5pbnRlcmZhY2UgUHJvcHMge1xuICBzZGs6IE1wU2RrO1xuICBzZWxlY3RlZFRhZzogc3RyaW5nO1xuICBzZWxlY3RlZEF0dGFjaG1lbnQ6IHN0cmluZztcbn1cblxuY29uc3QgbGFiZWxTdHlsZTogUmVhY3QuQ1NTUHJvcGVydGllcyA9IHtcbiAgZGlzcGxheTogJ2lubGluZS1ibG9jaycsXG4gIHdpZHRoOiAnODBweCcsXG59O1xuXG5leHBvcnQgZnVuY3Rpb24gQXR0YWNoKHsgc2RrLCBzZWxlY3RlZFRhZywgc2VsZWN0ZWRBdHRhY2htZW50fTogUHJvcHMpOiBKU1guRWxlbWVudCB7XG4gIGNvbnN0IGF0dGFjaCA9IHVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICBzZGsuVGFnLmF0dGFjaChzZWxlY3RlZFRhZywgc2VsZWN0ZWRBdHRhY2htZW50KTtcbiAgfSwgW3Nkay5UYWcsIHNlbGVjdGVkQXR0YWNobWVudCwgc2VsZWN0ZWRUYWddKTtcblxuICBjb25zdCBkZXRhY2ggPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgc2RrLlRhZy5kZXRhY2goc2VsZWN0ZWRUYWcsIHNlbGVjdGVkQXR0YWNobWVudCk7XG4gIH0sIFtzZGsuVGFnLCBzZWxlY3RlZEF0dGFjaG1lbnQsIHNlbGVjdGVkVGFnXSk7XG5cbiAgcmV0dXJuIChcbiAgICA8RnJhZ21lbnQ+XG4gICAgICA8ZGl2PlxuICAgICAgICA8bGFiZWwgc3R5bGU9e2xhYmVsU3R5bGV9PlRhZzo8L2xhYmVsPjxpbnB1dCB0eXBlPSd0ZXh0JyByZWFkT25seSBwbGFjZWhvbGRlcj17Jyhub25lKSd9IHZhbHVlPXtzZWxlY3RlZFRhZ30gLz5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdj5cbiAgICAgICAgPGxhYmVsIHN0eWxlPXtsYWJlbFN0eWxlfT5BdHRhY2htZW50OjwvbGFiZWw+PGlucHV0IHR5cGU9J3RleHQnIHJlYWRPbmx5IHBsYWNlaG9sZGVyPXsnKG5vbmUpJ30gdmFsdWU9e3NlbGVjdGVkQXR0YWNobWVudH0gLz5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdj5cbiAgICAgICAgPGJ1dHRvbiBvbkNsaWNrPXthdHRhY2h9PkF0dGFjaDwvYnV0dG9uPlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2PlxuICAgICAgICA8YnV0dG9uIG9uQ2xpY2s9e2RldGFjaH0+RGV0YWNoPC9idXR0b24+XG4gICAgICA8L2Rpdj5cbiAgICA8L0ZyYWdtZW50PlxuICApO1xufVxuIiwiaW1wb3J0IHR5cGUgeyBNcFNkayB9IGZyb20gJ0BzZGsvdHlwZXMnO1xuaW1wb3J0IHsgRnJhZ21lbnQsIHVzZUNhbGxiYWNrLCB1c2VSZWYgfSBmcm9tICdyZWFjdCc7XG5cbmludGVyZmFjZSBQcm9wcyB7XG4gIHNkazogTXBTZGs7XG4gIHNlbGVjdGVkVGFnOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBFZGl0QmlsbGJvYXJkKHByb3BzOiBQcm9wcyk6IEpTWC5FbGVtZW50IHtcbiAgY29uc3QgdGl0bGVJbnB1dCA9IHVzZVJlZjxIVE1MSW5wdXRFbGVtZW50PihudWxsKTtcbiAgY29uc3QgZGVzY0lucHV0ID0gdXNlUmVmPEhUTUxUZXh0QXJlYUVsZW1lbnQ+KG51bGwpO1xuXG4gIGNvbnN0IGVkaXRUYWcgPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgaWYgKHRpdGxlSW5wdXQuY3VycmVudCAmJiBkZXNjSW5wdXQuY3VycmVudCkge1xuICAgICAgcHJvcHMuc2RrLlRhZy5lZGl0QmlsbGJvYXJkKHByb3BzLnNlbGVjdGVkVGFnLCB7XG4gICAgICAgIGxhYmVsOiB0aXRsZUlucHV0LmN1cnJlbnQudmFsdWUgfHwgdW5kZWZpbmVkLFxuICAgICAgICBkZXNjcmlwdGlvbjogZGVzY0lucHV0LmN1cnJlbnQudmFsdWUgfHwgdW5kZWZpbmVkLFxuICAgICAgfSk7XG4gICAgfVxuICB9LCBbcHJvcHMuc2RrLlRhZywgcHJvcHMuc2VsZWN0ZWRUYWddKTtcblxuICByZXR1cm4gKFxuICAgIDxGcmFnbWVudD5cbiAgICAgIDxkaXY+XG4gICAgICAgIDxsYWJlbCBodG1sRm9yPSd0YWcyLWVkaXQtdGl0bGUnPlRpdGxlOjwvbGFiZWw+XG4gICAgICAgIDxpbnB1dCByZWY9e3RpdGxlSW5wdXR9IHR5cGU9J3RleHQnIGlkPSd0YWcyLWVkaXQtdGl0bGUnLz5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdj5cbiAgICAgICAgPGxhYmVsIGh0bWxGb3I9J3RhZzItZWRpdC1kZXNjJz5EZXNjOjwvbGFiZWw+XG4gICAgICAgIDx0ZXh0YXJlYSByZWY9e2Rlc2NJbnB1dH0gaWQ9J3RhZzItZWRpdC1kZXNjJy8+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXY+XG4gICAgICAgIDxidXR0b24gaWQ9J3RhZzItZWRpdCcgb25DbGljaz17ZWRpdFRhZ30+RWRpdDwvYnV0dG9uPlxuICAgICAgPC9kaXY+XG4gICAgPC9GcmFnbWVudD5cbiAgKTtcbn1cbiIsImltcG9ydCB0eXBlIHsgTXBTZGsgfSBmcm9tICdAc2RrL3R5cGVzJztcbmltcG9ydCB7IEZyYWdtZW50LCB1c2VDYWxsYmFjaywgdXNlUmVmIH0gZnJvbSAncmVhY3QnO1xuXG5pbnRlcmZhY2UgUHJvcHMge1xuICBzZGs6IE1wU2RrO1xuICBzZWxlY3RlZFRhZzogc3RyaW5nO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gRWRpdENvbG9yKHByb3BzOiBQcm9wcyk6IEpTWC5FbGVtZW50IHtcbiAgY29uc3QgcklucHV0ID0gdXNlUmVmPEhUTUxJbnB1dEVsZW1lbnQ+KG51bGwpO1xuICBjb25zdCBnSW5wdXQgPSB1c2VSZWY8SFRNTElucHV0RWxlbWVudD4obnVsbCk7XG4gIGNvbnN0IGJJbnB1dCA9IHVzZVJlZjxIVE1MSW5wdXRFbGVtZW50PihudWxsKTtcblxuICBjb25zdCBlZGl0Q29sb3IgPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgaWYgKFxuICAgICAgcklucHV0LmN1cnJlbnQgJiZcbiAgICAgIGdJbnB1dC5jdXJyZW50ICYmXG4gICAgICBiSW5wdXQuY3VycmVudFxuICAgICkge1xuICAgICAgcHJvcHMuc2RrLlRhZy5lZGl0Q29sb3IocHJvcHMuc2VsZWN0ZWRUYWcsIHtcbiAgICAgICAgcjogcGFyc2VGbG9hdChySW5wdXQuY3VycmVudC52YWx1ZSksXG4gICAgICAgIGc6IHBhcnNlRmxvYXQoZ0lucHV0LmN1cnJlbnQudmFsdWUpLFxuICAgICAgICBiOiBwYXJzZUZsb2F0KGJJbnB1dC5jdXJyZW50LnZhbHVlKSxcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwgW3Byb3BzLnNkay5UYWcsIHByb3BzLnNlbGVjdGVkVGFnXSk7XG5cbiAgcmV0dXJuIChcbiAgICA8RnJhZ21lbnQ+XG4gICAgICA8ZGl2PlxuICAgICAgICA8bGFiZWwgaHRtbEZvcj0ndGFnMi1jb2xvci1yJz5SOiA8L2xhYmVsPlxuICAgICAgICA8aW5wdXQgcmVmPXtySW5wdXR9IGNsYXNzTmFtZT0nc21hbGwtaW5wdXQnIGlkPSd0YWcyLWNvbG9yLXInIHR5cGU9J251bWJlcicgc3RlcD17MC4wMX0gZGVmYXVsdFZhbHVlPXsxfSAgbWluPXswfSBtYXg9ezAuNzV9IC8+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXY+XG4gICAgICAgIDxsYWJlbCBodG1sRm9yPSd0YWcyLWNvbG9yLWcnPkc6IDwvbGFiZWw+XG4gICAgICAgIDxpbnB1dCByZWY9e2dJbnB1dH0gY2xhc3NOYW1lPSdzbWFsbC1pbnB1dCcgaWQ9J3RhZzItY29sb3ItZycgdHlwZT0nbnVtYmVyJyBzdGVwPXswLjAxfSBkZWZhdWx0VmFsdWU9ezB9ICBtaW49ezB9IG1heD17MX0gLz5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdj5cbiAgICAgICAgPGxhYmVsIGh0bWxGb3I9J3RhZzItY29sb3ItYic+QjogPC9sYWJlbD5cbiAgICAgICAgPGlucHV0IHJlZj17YklucHV0fSBjbGFzc05hbWU9J3NtYWxsLWlucHV0JyBpZD0ndGFnMi1jb2xvci1iJyB0eXBlPSdudW1iZXInIHN0ZXA9ezAuMDF9IGRlZmF1bHRWYWx1ZT17MX0gIG1pbj17MH0gbWF4PXswLjc1fSAvPlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2PlxuICAgICAgICA8YnV0dG9uIGlkPSd0YWcyLWVkaXQtY29sb3InIG9uQ2xpY2s9e2VkaXRDb2xvcn0+RWRpdCBDb2xvcjwvYnV0dG9uPlxuICAgICAgPC9kaXY+XG4gICAgPC9GcmFnbWVudD5cbiAgKTtcbn1cbiIsImltcG9ydCB0eXBlIHsgTXBTZGsgfSBmcm9tICdAc2RrL3R5cGVzJztcbmltcG9ydCB7IEZyYWdtZW50LCB1c2VDYWxsYmFjaywgdXNlUmVmLCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcblxuaW50ZXJmYWNlIFByb3BzIHtcbiAgc2RrOiBNcFNkaztcbiAgc2VsZWN0ZWRUYWc6IHN0cmluZztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIEVkaXRTdGVtKHByb3BzOiBQcm9wcyk6IEpTWC5FbGVtZW50IHtcbiAgY29uc3QgW3N1Ym1pdEhlaWdodCwgc2V0U3VibWl0SGVpZ2h0XSA9IHVzZVN0YXRlKHRydWUpO1xuICBjb25zdCBbc3VibWl0VmlzaWJpbGl0eSwgc2V0U3VibWl0VmlzaWJpbGl0eV0gPSB1c2VTdGF0ZSh0cnVlKTtcblxuICBjb25zdCBoZWlnaHRJbnB1dCA9IHVzZVJlZjxIVE1MSW5wdXRFbGVtZW50PihudWxsKTtcbiAgY29uc3QgdmlzaWJsZUlucHV0ID0gdXNlUmVmPEhUTUxJbnB1dEVsZW1lbnQ+KG51bGwpO1xuXG4gIGNvbnN0IHN1Ym1pdEhlaWdodENoYW5nZWQgPSB1c2VDYWxsYmFjayhmdW5jdGlvbiAoKSB7XG4gICAgc2V0U3VibWl0SGVpZ2h0KCFzdWJtaXRIZWlnaHQpO1xuICB9LCBbc3VibWl0SGVpZ2h0XSk7XG5cbiAgY29uc3Qgc3VibWl0VmlzaWJpbGl0eUNoYW5nZWQgPSB1c2VDYWxsYmFjayhmdW5jdGlvbiAoKSB7XG4gICAgc2V0U3VibWl0VmlzaWJpbGl0eSghc3VibWl0VmlzaWJpbGl0eSk7XG4gIH0sIFtzdWJtaXRWaXNpYmlsaXR5XSk7XG5cbiAgY29uc3QgZWRpdFN0ZW0gPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgaWYgKFxuICAgICAgaGVpZ2h0SW5wdXQuY3VycmVudCAmJiB2aXNpYmxlSW5wdXQuY3VycmVudFxuICAgICkge1xuICAgICAgcHJvcHMuc2RrLlRhZy5lZGl0U3RlbShwcm9wcy5zZWxlY3RlZFRhZywge1xuICAgICAgICBzdGVtVmlzaWJsZTogc3VibWl0VmlzaWJpbGl0eSA/IHZpc2libGVJbnB1dC5jdXJyZW50LmNoZWNrZWQgOiB1bmRlZmluZWQsXG4gICAgICAgIHN0ZW1IZWlnaHQ6ICBzdWJtaXRIZWlnaHQgPyBwYXJzZUZsb2F0KGhlaWdodElucHV0LmN1cnJlbnQudmFsdWUpIDogdW5kZWZpbmVkLFxuICAgICAgfSk7XG4gICAgfVxuICB9LCBbcHJvcHMuc2RrLlRhZywgcHJvcHMuc2VsZWN0ZWRUYWcsIHN1Ym1pdEhlaWdodCwgc3VibWl0VmlzaWJpbGl0eV0pO1xuXG4gIHJldHVybiAoXG4gICAgPEZyYWdtZW50PlxuICAgICAgPGRpdj5cbiAgICAgICAgPGlucHV0IHR5cGU9J2NoZWNrYm94JyBjaGVja2VkPXtzdWJtaXRIZWlnaHR9IG9uQ2hhbmdlPXtzdWJtaXRIZWlnaHRDaGFuZ2VkfSAvPlxuICAgICAgICA8bGFiZWwgaHRtbEZvcj0ndGFnMi1zdGVtLWhlaWdodCc+c3RlbSBoZWlnaHQ6IDwvbGFiZWw+XG4gICAgICAgIDxpbnB1dCByZWY9e2hlaWdodElucHV0fSBjbGFzc05hbWU9J3NtYWxsLWlucHV0JyBpZD0ndGFnMi1oZWlnaHQtc3RlbScgdHlwZT0nbnVtYmVyJyBzdGVwPXswLjF9IGRlZmF1bHRWYWx1ZT17MX0gIG1pbj17MH0gZGlzYWJsZWQ9eyFzdWJtaXRIZWlnaHR9IC8+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXY+XG4gICAgICAgIDxpbnB1dCB0eXBlPSdjaGVja2JveCcgY2hlY2tlZD17c3VibWl0VmlzaWJpbGl0eX0gb25DaGFuZ2U9e3N1Ym1pdFZpc2liaWxpdHlDaGFuZ2VkfSAvPlxuICAgICAgICA8bGFiZWwgaHRtbEZvcj0ndGFnMi1zdGVtLXZpc2libGUnPnN0ZW0gdmlzaWJsZTo8L2xhYmVsPlxuICAgICAgICA8aW5wdXQgcmVmPXt2aXNpYmxlSW5wdXR9IHR5cGU9J2NoZWNrYm94JyBpZD0ndGFnMi1zdGVtLXZpc2libGUnIGRpc2FibGVkPXshc3VibWl0VmlzaWJpbGl0eX0gLz5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdj5cbiAgICAgICAgPGJ1dHRvbiBpZD0ndGFnMi1lZGl0LXN0ZW0nIG9uQ2xpY2s9e2VkaXRTdGVtfT5FZGl0IFN0ZW08L2J1dHRvbj5cbiAgICAgIDwvZGl2PlxuICAgIDwvRnJhZ21lbnQ+XG4gICk7XG59XG4iLCJpbXBvcnQgdHlwZSB7IE1wU2RrIH0gZnJvbSAnQHNkay90eXBlcyc7XG5pbXBvcnQgeyB0eXBlIENoYW5nZUV2ZW50LCBGcmFnbWVudCwgdXNlQ2FsbGJhY2ssIHVzZVJlZiwgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XG5cbmludGVyZmFjZSBQcm9wcyB7XG4gIHNkazogTXBTZGs7XG4gIHNlbGVjdGVkVGFnOiBzdHJpbmc7XG4gIHNlbGVjdGVkQXNzZXQ6IHN0cmluZztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIEVkaXRJY29uKHByb3BzOiBQcm9wcyk6IEpTWC5FbGVtZW50IHtcbiAgY29uc3QgaWRJbnB1dCA9IHVzZVJlZjxIVE1MSW5wdXRFbGVtZW50PihudWxsKTtcbiAgY29uc3QgW3VzZVNlbGVjdGVkQXNzZXQsIHNldFVzZVNlbGVjdGVkQXNzZXRdID0gdXNlU3RhdGU8Ym9vbGVhbj4odHJ1ZSk7XG5cbiAgY29uc3QgZWRpdEljb24gPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgaWYgKHVzZVNlbGVjdGVkQXNzZXQpIHtcbiAgICAgIHByb3BzLnNkay5UYWcuZWRpdEljb24ocHJvcHMuc2VsZWN0ZWRUYWcsIHByb3BzLnNlbGVjdGVkQXNzZXQpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChpZElucHV0LmN1cnJlbnQgPT09IG51bGwpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBwcm9wcy5zZGsuVGFnLmVkaXRJY29uKHByb3BzLnNlbGVjdGVkVGFnLCBpZElucHV0LmN1cnJlbnQudmFsdWUpO1xuICB9LCBbcHJvcHMuc2RrLlRhZywgcHJvcHMuc2VsZWN0ZWRBc3NldCwgcHJvcHMuc2VsZWN0ZWRUYWcsIHVzZVNlbGVjdGVkQXNzZXRdKTtcblxuICBjb25zdCByZXNldEljb24gPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgcHJvcHMuc2RrLlRhZy5yZXNldEljb24ocHJvcHMuc2VsZWN0ZWRUYWcpO1xuICB9LCBbcHJvcHMuc2RrLlRhZywgcHJvcHMuc2VsZWN0ZWRUYWddKTtcblxuICBjb25zdCBvblVzZVNlbGVjdGVkQXNzZXRDaGFuZ2VkID0gKGV2ZW50OiBDaGFuZ2VFdmVudDxIVE1MSW5wdXRFbGVtZW50PikgPT4ge1xuICAgIHNldFVzZVNlbGVjdGVkQXNzZXQoZXZlbnQudGFyZ2V0LmNoZWNrZWQpO1xuICB9O1xuXG4gIHJldHVybiAoXG4gICAgPEZyYWdtZW50PlxuICAgICAgPGRpdj5cbiAgICAgICAgVXNlIHNlbGVjdGVkIEFzc2V0P1xuICAgICAgICA8aW5wdXRcbiAgICAgICAgICB0eXBlPVwiY2hlY2tib3hcIlxuICAgICAgICAgIG9uQ2hhbmdlPXtvblVzZVNlbGVjdGVkQXNzZXRDaGFuZ2VkfVxuICAgICAgICAgIGRlZmF1bHRDaGVja2VkPXt1c2VTZWxlY3RlZEFzc2V0fVxuICAgICAgICAvPlxuICAgICAgPC9kaXY+XG4gICAgICB7IXVzZVNlbGVjdGVkQXNzZXQgP1xuICAgICAgICA8ZGl2PlxuICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICA8ZGl2IHN0eWxlPXt7IGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snLCB3aWR0aDogJzE1JScgfX0+XG4gICAgICAgICAgICAgIDxsYWJlbCBodG1sRm9yPSdtYXR0ZXJ0YWctaWNvbi1pZCc+aWQ6IDwvbGFiZWw+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxkaXYgc3R5bGU9e3sgZGlzcGxheTogJ2lubGluZS1ibG9jaycsIHdpZHRoOiAnODUlJyB9fT5cbiAgICAgICAgICAgICAgPGlucHV0IHJlZj17aWRJbnB1dH0gaWQ9J21hdHRlcnRhZy1pY29uLWlkJyB0eXBlPSdzdHJpbmcnIGRlZmF1bHRWYWx1ZT17cHJvcHMuc2VsZWN0ZWRBc3NldH0gLz5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgOlxuICAgICAgICBudWxsXG4gICAgICB9XG4gICAgICA8ZGl2PlxuICAgICAgICA8YnV0dG9uIGlkPSd0YWcyLWVkaXQtaWNvbicgb25DbGljaz17ZWRpdEljb259PkVkaXQgSWNvbjwvYnV0dG9uPlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2PlxuICAgICAgICA8YnV0dG9uIGlkPSd0YWcyLXJlc2V0LWljb24nIG9uQ2xpY2s9e3Jlc2V0SWNvbn0+UmVzZXQgSWNvbjwvYnV0dG9uPlxuICAgICAgPC9kaXY+XG4gICAgPC9GcmFnbWVudD5cbiAgKTtcbn1cbiIsImltcG9ydCB0eXBlIHsgTXBTZGsgfSBmcm9tICdAc2RrL3R5cGVzJztcbmltcG9ydCB7IEZyYWdtZW50LCB1c2VDYWxsYmFjaywgdXNlUmVmIH0gZnJvbSAncmVhY3QnO1xuXG5pbnRlcmZhY2UgUHJvcHMge1xuICBzZGs6IE1wU2RrO1xuICBzZWxlY3RlZFRhZzogc3RyaW5nO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gRWRpdE9wYWNpdHkocHJvcHM6IFByb3BzKTogSlNYLkVsZW1lbnQge1xuICBjb25zdCBvcGFjaXR5SW5wdXQgPSB1c2VSZWY8SFRNTElucHV0RWxlbWVudD4obnVsbCk7XG5cbiAgY29uc3QgZWRpdE9wYWNpdHkgPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgaWYgKG9wYWNpdHlJbnB1dC5jdXJyZW50KSB7XG4gICAgICBwcm9wcy5zZGsuVGFnLmVkaXRPcGFjaXR5KHByb3BzLnNlbGVjdGVkVGFnLCBwYXJzZUZsb2F0KG9wYWNpdHlJbnB1dC5jdXJyZW50LnZhbHVlKSk7XG4gICAgfVxuICB9LCBbcHJvcHMuc2RrLlRhZywgcHJvcHMuc2VsZWN0ZWRUYWddKTtcblxuICByZXR1cm4gKFxuICAgIDxGcmFnbWVudD5cbiAgICAgIDxkaXY+XG4gICAgICAgIDxsYWJlbCBodG1sRm9yPSd0YWcyLW9wYWNpdHknPm9wYWNpdHk6IDwvbGFiZWw+XG4gICAgICAgIDxpbnB1dCByZWY9e29wYWNpdHlJbnB1dH0gY2xhc3NOYW1lPSdzbWFsbC1pbnB1dCcgaWQ9J3RhZzItb3BhY2l0eScgdHlwZT0nbnVtYmVyJyBzdGVwPXswLjAxfSBkZWZhdWx0VmFsdWU9ezAuNX0gbWluPXswfSBtYXg9ezF9IC8+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXY+XG4gICAgICAgIDxidXR0b24gaWQ9J3RhZzItZWRpdC1vcGFjaXR5JyBvbkNsaWNrPXtlZGl0T3BhY2l0eX0+RWRpdCBPcGFjaXR5PC9idXR0b24+XG4gICAgICA8L2Rpdj5cbiAgICA8L0ZyYWdtZW50PlxuICApO1xufVxuIiwiaW1wb3J0IHR5cGUgeyBNcFNkayB9IGZyb20gJ0BzZGsvdHlwZXMnO1xuaW1wb3J0IHsgRnJhZ21lbnQsIHVzZUNhbGxiYWNrLCB1c2VSZWYsIHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnO1xuXG5pbnRlcmZhY2UgUHJvcHMge1xuICBzZGs6IE1wU2RrO1xuICBzZWxlY3RlZFRhZzogc3RyaW5nO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gTW92ZShwcm9wczogUHJvcHMpOiBKU1guRWxlbWVudCB7XG4gIGNvbnN0IFtzdWJtaXRQb3MsIHNldFN1Ym1pdFBvc10gPSB1c2VTdGF0ZSh0cnVlKTtcbiAgY29uc3QgW3N1Ym1pdE5vcm0sIHNldFN1Ym1pdE5vcm1dID0gdXNlU3RhdGUodHJ1ZSk7XG5cbiAgY29uc3QgeElucHV0ID0gdXNlUmVmPEhUTUxJbnB1dEVsZW1lbnQ+KG51bGwpO1xuICBjb25zdCB5SW5wdXQgPSB1c2VSZWY8SFRNTElucHV0RWxlbWVudD4obnVsbCk7XG4gIGNvbnN0IHpJbnB1dCA9IHVzZVJlZjxIVE1MSW5wdXRFbGVtZW50PihudWxsKTtcblxuICBjb25zdCB4Tm9ybUlucHV0ID0gdXNlUmVmPEhUTUxJbnB1dEVsZW1lbnQ+KG51bGwpO1xuICBjb25zdCB5Tm9ybUlucHV0ID0gdXNlUmVmPEhUTUxJbnB1dEVsZW1lbnQ+KG51bGwpO1xuICBjb25zdCB6Tm9ybUlucHV0ID0gdXNlUmVmPEhUTUxJbnB1dEVsZW1lbnQ+KG51bGwpO1xuXG4gIGNvbnN0IHN1Ym1pdFBvc0NoYW5nZWQgPSB1c2VDYWxsYmFjayhmdW5jdGlvbiAoKSB7XG4gICAgc2V0U3VibWl0UG9zKCFzdWJtaXRQb3MpO1xuICB9LCBbc3VibWl0UG9zXSk7XG4gIGNvbnN0IHN1Ym1pdE5vcm1DaGFuZ2VkID0gdXNlQ2FsbGJhY2soZnVuY3Rpb24gKCkge1xuICAgIHNldFN1Ym1pdE5vcm0oIXN1Ym1pdE5vcm0pO1xuICB9LCBbc3VibWl0Tm9ybV0pO1xuXG4gIGNvbnN0IG1vdmVUYWcgPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgaWYgKFxuICAgICAgeElucHV0LmN1cnJlbnQgJiZcbiAgICAgIHlJbnB1dC5jdXJyZW50ICYmXG4gICAgICB6SW5wdXQuY3VycmVudCAmJlxuICAgICAgeE5vcm1JbnB1dC5jdXJyZW50ICYmXG4gICAgICB5Tm9ybUlucHV0LmN1cnJlbnQgJiZcbiAgICAgIHpOb3JtSW5wdXQuY3VycmVudFxuICAgICkge1xuICAgICAgcHJvcHMuc2RrLlRhZy5lZGl0UG9zaXRpb24ocHJvcHMuc2VsZWN0ZWRUYWcsIHtcbiAgICAgICAgYW5jaG9yUG9zaXRpb246IHN1Ym1pdFBvcyA/IHtcbiAgICAgICAgICB4OiBwYXJzZUZsb2F0KHhJbnB1dC5jdXJyZW50LnZhbHVlKSxcbiAgICAgICAgICB5OiBwYXJzZUZsb2F0KHlJbnB1dC5jdXJyZW50LnZhbHVlKSxcbiAgICAgICAgICB6OiBwYXJzZUZsb2F0KHpJbnB1dC5jdXJyZW50LnZhbHVlKSxcbiAgICAgICAgfSA6IHVuZGVmaW5lZCxcbiAgICAgICAgc3RlbVZlY3Rvcjogc3VibWl0Tm9ybSA/IHtcbiAgICAgICAgICB4OiBwYXJzZUZsb2F0KHhOb3JtSW5wdXQuY3VycmVudC52YWx1ZSksXG4gICAgICAgICAgeTogcGFyc2VGbG9hdCh5Tm9ybUlucHV0LmN1cnJlbnQudmFsdWUpLFxuICAgICAgICAgIHo6IHBhcnNlRmxvYXQoek5vcm1JbnB1dC5jdXJyZW50LnZhbHVlKSxcbiAgICAgICAgfSA6IHVuZGVmaW5lZCxcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwgW3Byb3BzLnNkay5UYWcsIHByb3BzLnNlbGVjdGVkVGFnLCBzdWJtaXROb3JtLCBzdWJtaXRQb3NdKTtcblxuICByZXR1cm4gKFxuICAgIDxGcmFnbWVudD5cbiAgICAgIDxkaXY+XG4gICAgICAgIHBvc2l0aW9uOlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2PlxuICAgICAgICA8aW5wdXQgdHlwZT0nY2hlY2tib3gnIGNoZWNrZWQ9e3N1Ym1pdFBvc30gb25DaGFuZ2U9e3N1Ym1pdFBvc0NoYW5nZWR9IC8+XG4gICAgICAgIDxsYWJlbCBodG1sRm9yPSd0YWcyLW1vdmUtcG9zLXgnPng6IDwvbGFiZWw+XG4gICAgICAgIDxpbnB1dCByZWY9e3hJbnB1dH0gY2xhc3NOYW1lPSdzbWFsbC1pbnB1dCcgaWQ9J3RhZzItbW92ZS1wb3MteCcgdHlwZT0nbnVtYmVyJyBzdGVwPScwLjAwMScgZGVmYXVsdFZhbHVlPScwJyBkaXNhYmxlZD17IXN1Ym1pdFBvc30gLz5cbiAgICAgICAgPGxhYmVsIGh0bWxGb3I9J3RhZzItbW92ZS1wb3MteSc+eTogPC9sYWJlbD5cbiAgICAgICAgPGlucHV0IHJlZj17eUlucHV0fSBjbGFzc05hbWU9J3NtYWxsLWlucHV0JyBpZD0ndGFnMi1tb3ZlLXBvcy15JyB0eXBlPSdudW1iZXInIHN0ZXA9JzAuMDAxJyBkZWZhdWx0VmFsdWU9JzAnIGRpc2FibGVkPXshc3VibWl0UG9zfSAvPlxuICAgICAgICA8bGFiZWwgaHRtbEZvcj0ndGFnMi1tb3ZlLXBvcy16Jz56OiA8L2xhYmVsPlxuICAgICAgICA8aW5wdXQgcmVmPXt6SW5wdXR9IGNsYXNzTmFtZT0nc21hbGwtaW5wdXQnIGlkPSd0YWcyLW1vdmUtcG9zLXonIHR5cGU9J251bWJlcicgc3RlcD0nMC4wMDEnIGRlZmF1bHRWYWx1ZT0nMCcgZGlzYWJsZWQ9eyFzdWJtaXRQb3N9IC8+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXY+XG4gICAgICAgIG5vcm1hbDpcbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdj5cbiAgICAgICAgPGlucHV0IHR5cGU9J2NoZWNrYm94JyBjaGVja2VkPXtzdWJtaXROb3JtfSBvbkNoYW5nZT17c3VibWl0Tm9ybUNoYW5nZWR9IC8+XG4gICAgICAgIDxsYWJlbCBodG1sRm9yPSd0YWcyLW1vdmUtbm9ybS14Jz54OiA8L2xhYmVsPlxuICAgICAgICA8aW5wdXQgcmVmPXt4Tm9ybUlucHV0fSBjbGFzc05hbWU9J3NtYWxsLWlucHV0JyBpZD0ndGFnMi1tb3ZlLW5vcm0teCcgdHlwZT0nbnVtYmVyJyBzdGVwPScwLjAwMScgZGVmYXVsdFZhbHVlPScwJyBkaXNhYmxlZD17IXN1Ym1pdE5vcm19IC8+XG4gICAgICAgIDxsYWJlbCBodG1sRm9yPSd0YWcyLW1vdmUtbm9ybS15Jz55OiA8L2xhYmVsPlxuICAgICAgICA8aW5wdXQgcmVmPXt5Tm9ybUlucHV0fSBjbGFzc05hbWU9J3NtYWxsLWlucHV0JyBpZD0ndGFnMi1tb3ZlLW5vcm0teScgdHlwZT0nbnVtYmVyJyBzdGVwPScwLjAwMScgZGVmYXVsdFZhbHVlPScxJyBkaXNhYmxlZD17IXN1Ym1pdE5vcm19IC8+XG4gICAgICAgIDxsYWJlbCBodG1sRm9yPSd0YWcyLW1vdmUtbm9ybS16Jz56OiA8L2xhYmVsPlxuICAgICAgICA8aW5wdXQgcmVmPXt6Tm9ybUlucHV0fSBjbGFzc05hbWU9J3NtYWxsLWlucHV0JyBpZD0ndGFnMi1tb3ZlLW5vcm0teicgdHlwZT0nbnVtYmVyJyBzdGVwPScwLjAwMScgZGVmYXVsdFZhbHVlPScwJyBkaXNhYmxlZD17IXN1Ym1pdE5vcm19IC8+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXY+XG4gICAgICAgIDxidXR0b24gaWQ9J3RhZzItbW92ZScgb25DbGljaz17bW92ZVRhZ30+TW92ZTwvYnV0dG9uPlxuICAgICAgPC9kaXY+XG4gICAgPC9GcmFnbWVudD5cbiAgKTtcbn1cbiIsImltcG9ydCB7IHR5cGUgTXBTZGsgfSBmcm9tICdAc2RrL3R5cGVzJztcbmltcG9ydCB7IHVzZUNhbGxiYWNrLCB1c2VSZWYgfSBmcm9tICdyZWFjdCc7XG5cbnR5cGUgUHJvcHMgPSB7XG4gIHNkazogTXBTZGs7XG4gIHNlbGVjdGVkVGFnOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBPcGVuKHsgc2RrLCBzZWxlY3RlZFRhZyB9OiBQcm9wcyk6IEpTWC5FbGVtZW50IHtcbiAgY29uc3QgZm9yY2VPcGVuID0gdXNlUmVmPEhUTUxJbnB1dEVsZW1lbnQ+KG51bGwpO1xuICBjb25zdCBmb3JjZURvY2sgPSB1c2VSZWY8SFRNTElucHV0RWxlbWVudD4obnVsbCk7XG5cbiAgY29uc3Qgb3BlbiA9IHVzZUNhbGxiYWNrKGZ1bmN0aW9uICgpIHtcbiAgICBjb25zdCBmb3JjZSA9IGZvcmNlT3Blbi5jdXJyZW50Py5jaGVja2VkIHx8IGZhbHNlO1xuICAgIHNkay5UYWcub3BlbihzZWxlY3RlZFRhZywgeyBmb3JjZSB9KTtcbiAgfSwgW3Nkay5UYWcsIHNlbGVjdGVkVGFnXSk7XG5cbiAgY29uc3QgZG9jayA9IHVzZUNhbGxiYWNrKGZ1bmN0aW9uICgpIHtcbiAgICBjb25zdCBmb3JjZSA9IGZvcmNlRG9jay5jdXJyZW50Py5jaGVja2VkIHx8IGZhbHNlO1xuICAgIHNkay5UYWcuZG9jayhzZWxlY3RlZFRhZywgeyBmb3JjZSB9KTtcbiAgfSwgW3Nkay5UYWcsIHNlbGVjdGVkVGFnXSk7XG5cbiAgY29uc3QgY2xvc2UgPSB1c2VDYWxsYmFjayhmdW5jdGlvbiAoKSB7XG4gICAgc2RrLlRhZy5jbG9zZShzZWxlY3RlZFRhZyk7XG4gIH0sIFtzZGsuVGFnLCBzZWxlY3RlZFRhZ10pO1xuXG4gIHJldHVybiAoXG4gICAgPD5cbiAgICAgIDxkaXY+XG4gICAgICAgIDxpbnB1dCB0eXBlPSd0ZXh0JyByZWFkT25seSBwbGFjZWhvbGRlcj17Jyhub25lKSd9IHZhbHVlPXtzZWxlY3RlZFRhZ30gLz5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdj5cbiAgICAgICAgPGJ1dHRvbiBjbGFzc05hbWU9J3NtYWxsLWlucHV0JyBvbkNsaWNrPXtvcGVufT5PcGVuPC9idXR0b24+XG4gICAgICAgIDxsYWJlbCBzdHlsZT17eyBtYXJnaW5MZWZ0OiAnNXB4JyB9fT5mb3JjZTo8L2xhYmVsPjxpbnB1dCByZWY9e2ZvcmNlT3Blbn0gaWQ9J3RhZy1mb3JjZS1vcGVuJyB0eXBlPSdjaGVja2JveCcgLz5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdj5cbiAgICAgICAgPGJ1dHRvbiBjbGFzc05hbWU9J3NtYWxsLWlucHV0JyBvbkNsaWNrPXtkb2NrfT5Eb2NrPC9idXR0b24+XG4gICAgICAgIDxsYWJlbCBzdHlsZT17eyBtYXJnaW5MZWZ0OiAnNXB4JyB9fT5mb3JjZTo8L2xhYmVsPjxpbnB1dCByZWY9e2ZvcmNlRG9ja30gaWQ9J3RhZy1mb3JjZS1kb2NrJyB0eXBlPSdjaGVja2JveCcgLz5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdj5cbiAgICAgICAgPGJ1dHRvbiBjbGFzc05hbWU9J3NtYWxsLWlucHV0JyBvbkNsaWNrPXtjbG9zZX0+Q2xvc2U8L2J1dHRvbj5cbiAgICAgIDwvZGl2PlxuICAgIDwvPlxuICApO1xufVxuIiwiaW1wb3J0IHR5cGUgeyBNcFNkayB9IGZyb20gJ0BzZGsvdHlwZXMnO1xuaW1wb3J0IHsgRnJhZ21lbnQsIHVzZUNhbGxiYWNrLCB1c2VSZWYgfSBmcm9tICdyZWFjdCc7XG5cbnR5cGUgUHJvcHMgPSB7XG4gIHNkazogTXBTZGtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBSZWdpc3RlckF0dGFjaG1lbnQocHJvcHM6IFByb3BzKTogSlNYLkVsZW1lbnQge1xuICBjb25zdCBzcmNJbnB1dCA9IHVzZVJlZjxIVE1MSW5wdXRFbGVtZW50PihudWxsKTtcblxuICBjb25zdCByZWdpc3RlckF0dGFjaG1lbnQgPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgaWYgKHNyY0lucHV0LmN1cnJlbnQpIHtcbiAgICAgIHByb3BzLnNkay5UYWcucmVnaXN0ZXJBdHRhY2htZW50KHNyY0lucHV0LmN1cnJlbnQudmFsdWUpO1xuICAgIH1cbiAgfSwgW3Byb3BzLnNkay5UYWddKTtcblxuICByZXR1cm4gKFxuICAgIDxGcmFnbWVudD5cbiAgICAgIDxkaXY+XG4gICAgICAgIDxsYWJlbCBodG1sRm9yPSd0YWcyLXJlZ2lzdGVyLWF0dGFjaG1lbnQtc3JjJz5TcmM6PC9sYWJlbD5cbiAgICAgICAgPGlucHV0IHJlZj17c3JjSW5wdXR9IHR5cGU9J3RleHQnIGlkPSd0YWcyLXJlZ2lzdGVyLWF0dGFjaG1lbnQtc3JjJyAvPlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2PlxuICAgICAgICA8YnV0dG9uIG9uQ2xpY2s9e3JlZ2lzdGVyQXR0YWNobWVudH0+UmVnaXN0ZXI8L2J1dHRvbj5cbiAgICAgIDwvZGl2PlxuICAgIDwvRnJhZ21lbnQ+XG4gICk7XG59XG4iLCJpbXBvcnQgdHlwZSB7IE1wU2RrIH0gZnJvbSAnQHNkay90eXBlcyc7XG5pbXBvcnQgeyBGcmFnbWVudCwgdXNlQ2FsbGJhY2ssIHVzZVJlZiB9IGZyb20gJ3JlYWN0JztcblxuaW50ZXJmYWNlIFByb3BzIHtcbiAgc2RrOiBNcFNkaztcbiAgc2VsZWN0ZWRUYWc6IHN0cmluZztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIFJlZ2lzdGVyU2FuZGJveChwcm9wczogT21pdDxQcm9wcywgJ3NlbGVjdGVkVGFnJz4pOiBKU1guRWxlbWVudCB7XG4gIGNvbnN0IGh0bWxJbnB1dCA9IHVzZVJlZjxIVE1MVGV4dEFyZWFFbGVtZW50PihudWxsKTtcbiAgY29uc3QgbmFtZUlucHV0ID0gdXNlUmVmPEhUTUxJbnB1dEVsZW1lbnQ+KG51bGwpO1xuICBjb25zdCB3SW5wdXQgPSB1c2VSZWY8SFRNTElucHV0RWxlbWVudD4obnVsbCk7XG4gIGNvbnN0IGhJbnB1dCA9IHVzZVJlZjxIVE1MSW5wdXRFbGVtZW50PihudWxsKTtcblxuXG4gIGNvbnN0IHJlZ2lzdGVyU2FuZGJveCA9IHVzZUNhbGxiYWNrKGFzeW5jICgpID0+IHtcbiAgICBpZiAoaHRtbElucHV0LmN1cnJlbnQgJiYgbmFtZUlucHV0LmN1cnJlbnQgJiYgd0lucHV0LmN1cnJlbnQgJiYgaElucHV0LmN1cnJlbnQpIHtcbiAgICAgIGNvbnN0IFssIHBtXSA9IGF3YWl0IHByb3BzLnNkay5UYWcucmVnaXN0ZXJTYW5kYm94KGh0bWxJbnB1dC5jdXJyZW50LnZhbHVlLCB7XG4gICAgICAgIG5hbWU6IG5hbWVJbnB1dC5jdXJyZW50LnZhbHVlLFxuICAgICAgICBzaXplOiB7XG4gICAgICAgICAgaDogcGFyc2VJbnQoaElucHV0LmN1cnJlbnQudmFsdWUsIDEwKSxcbiAgICAgICAgICB3OiBwYXJzZUludCh3SW5wdXQuY3VycmVudC52YWx1ZSwgMTApLFxuICAgICAgICB9LFxuICAgICAgfSk7XG5cbiAgICAgIGZ1bmN0aW9uIGdlbkNvbG9yKCkge1xuICAgICAgICBsZXQgcmdiID0gJyc7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgNjsgKytpKSB7XG4gICAgICAgICAgcmdiICs9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDE2KS50b1N0cmluZygxNik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICcjJyArIHJnYjtcbiAgICAgIH1cbiAgICAgIC8vIGRpcmVjdGx5IGNvbW11bmljYXRlIHdpdGggdGhlIGlmcmFtZSB0aGF0IHdhcyBqdXN0IGluamVjdGVkXG4gICAgICBwbS5vbignY2xpY2snLCBmdW5jdGlvbiAoZTogYW55KSB7XG4gICAgICAgIGNvbnN0IG5ld0NvbG9yID0gZ2VuQ29sb3IoKTtcbiAgICAgICAgcG0uc2VuZCgndXBkYXRlLmJ1dHRvbicsIG5ld0NvbG9yLCBuZXdDb2xvci50b1N0cmluZygpKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwgW3Byb3BzLnNkay5UYWddKTtcblxuICByZXR1cm4gKFxuICAgIDxGcmFnbWVudD5cbiAgICAgIDxkaXY+XG4gICAgICAgIDxpbnB1dCByZWY9e25hbWVJbnB1dH0gdHlwZT0ndGV4dCcgcGxhY2Vob2xkZXI9eyduYW1lJ30gLz5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdj5cbiAgICAgICAgPHRleHRhcmVhIHN0eWxlPXt7IGhlaWdodDogJzdlbScgfX0gcmVmPXtodG1sSW5wdXR9IGRlZmF1bHRWYWx1ZT17ZGVmYXVsdEluamVjdGVkU2NyaXB0fSAvPlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2PlxuICAgICAgICB3aWR0aDo8aW5wdXQgY2xhc3NOYW1lPXsnc21hbGwtaW5wdXQnfSByZWY9e3dJbnB1dH0gdHlwZT0nbnVtYmVyJyBkZWZhdWx0VmFsdWU9ezM1MH0vPlxuICAgICAgICBoZWlnaHQ6PGlucHV0IGNsYXNzTmFtZT17J3NtYWxsLWlucHV0J30gcmVmPXtoSW5wdXR9IHR5cGU9J251bWJlcicgZGVmYXVsdFZhbHVlPXsxNTB9Lz5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdj5cbiAgICAgICAgPGJ1dHRvbiBvbkNsaWNrPXtyZWdpc3RlclNhbmRib3h9PlJlZ2lzdGVyPC9idXR0b24+XG4gICAgICA8L2Rpdj5cbiAgICA8L0ZyYWdtZW50PlxuICApO1xufVxuXG5jb25zdCBkZWZhdWx0SW5qZWN0ZWRTY3JpcHQgPSBgPHN0eWxlPlxuYm9keSB7XG4gIGJhY2tncm91bmQtY29sb3I6ICNjY2NjY2M7XG59XG4jYnRuMSB7XG4gIHdpZHRoOiAxMDBweDtcbiAgaGVpZ2h0OiAyMHB4O1xuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMjU1LCAyNTUsIDI1NSk7XG4gIGJvcmRlci1yYWRpdXM6IDEwcHg7XG4gIGJvcmRlcjogMXB4IHNvbGlkIGJsYWNrO1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG59XG48L3N0eWxlPlxuPGJyPlxuPGJyPlxuPGRpdiBpZD0nYnRuMSc+Q0xJQ0sgTUUhPC9kaXY+XG48ZGl2IGlkPSd0YWcnPjwvZGl2PlxuPGRpdiBpZD0nZG9ja2VkJz48L2Rpdj5cbjxzY3JpcHQ+XG5jb25zdCBidG4xID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2J0bjEnKTtcbmJ0bjEuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoKSB7XG4gIHdpbmRvdy5zZW5kKCdjbGljaycsIHtidXR0b25JZDogMTIzNDMyMX0pO1xufSk7XG53aW5kb3cub24oJ3VwZGF0ZS5idXR0b24nLCBmdW5jdGlvbiAoY29sb3IsIG1lc3NhZ2UpIHtcbiAgYnRuMS5pbm5lclRleHQgPSBtZXNzYWdlO1xuICBidG4xLnN0eWxlLmJhY2tncm91bmRDb2xvciA9IGNvbG9yO1xufSk7XG5jb25zdCB0YWdPdXRwdXQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndGFnJyk7XG50YWdPdXRwdXQuaW5uZXJIVE1MID0gJ0N1cnJlbnQgdGFnOiAnICsgd2luZG93LnRhZztcbmNvbnN0IGRvY2tlZE91dHB1dCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdkb2NrZWQnKTtcbmRvY2tlZE91dHB1dC5pbm5lckhUTUwgPSAnRG9ja2VkOiAnICsgd2luZG93LmRvY2tlZDtcbjwvc2NyaXB0PmA7XG4iLCJpbXBvcnQgdHlwZSB7IE1wU2RrIH0gZnJvbSAnQHNkay90eXBlcyc7XG5pbXBvcnQgeyBGcmFnbWVudCwgdXNlQ2FsbGJhY2sgfSBmcm9tICdyZWFjdCc7XG5cbmludGVyZmFjZSBQcm9wcyB7XG4gIHNkazogTXBTZGs7XG4gIHNlbGVjdGVkVGFnOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBSZW1vdmUocHJvcHM6IFByb3BzKTogSlNYLkVsZW1lbnQge1xuICBjb25zdCByZW1vdmVUYWcgPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgcHJvcHMuc2RrLlRhZy5yZW1vdmUocHJvcHMuc2VsZWN0ZWRUYWcpO1xuICB9LCBbcHJvcHMuc2RrLlRhZywgcHJvcHMuc2VsZWN0ZWRUYWddKTtcblxuICByZXR1cm4gKFxuICAgIDxGcmFnbWVudD5cbiAgICAgIDxkaXY+XG4gICAgICAgIDxidXR0b24gaWQ9J3RhZzItcmVtb3ZlJyBvbkNsaWNrPXtyZW1vdmVUYWd9PlJlbW92ZTwvYnV0dG9uPlxuICAgICAgPC9kaXY+XG4gICAgPC9GcmFnbWVudD5cbiAgKTtcbn1cbiIsImltcG9ydCB7IHVzZUNhbGxiYWNrIH0gZnJvbSAncmVhY3QnO1xuXG5leHBvcnQgZnVuY3Rpb24gVG9nZ2xlU2V0dGluZyh7dG9nZ2xlU2V0dGluZ306IHsgdG9nZ2xlU2V0dGluZzogKGVuYWJsZT86IGJvb2xlYW4pID0+IFByb21pc2U8dm9pZD4gfSk6IEpTWC5FbGVtZW50IHtcbiAgY29uc3QgdG9nZ2xlID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgIHRvZ2dsZVNldHRpbmcoKTtcbiAgfSwgW3RvZ2dsZVNldHRpbmddKTtcblxuICBjb25zdCBzaG93ID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgIHRvZ2dsZVNldHRpbmcodHJ1ZSk7XG4gIH0sIFt0b2dnbGVTZXR0aW5nXSk7XG5cbiAgY29uc3QgaGlkZSA9IHVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICB0b2dnbGVTZXR0aW5nKGZhbHNlKTtcbiAgfSwgW3RvZ2dsZVNldHRpbmddKTtcblxuICByZXR1cm4gKFxuICAgIDw+XG4gICAgICA8ZGl2PlxuICAgICAgICA8YnV0dG9uIGNsYXNzTmFtZT0nc21hbGwtaW5wdXQnIG9uQ2xpY2s9e3RvZ2dsZX0+VG9nZ2xlPC9idXR0b24+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXY+XG4gICAgICAgIDxidXR0b24gY2xhc3NOYW1lPSdzbWFsbC1pbnB1dCcgb25DbGljaz17c2hvd30+U2hvdzwvYnV0dG9uPlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2PlxuICAgICAgICA8YnV0dG9uIGNsYXNzTmFtZT0nc21hbGwtaW5wdXQnIG9uQ2xpY2s9e2hpZGV9PkhpZGU8L2J1dHRvbj5cbiAgICAgIDwvZGl2PlxuICAgIDwvPlxuICApO1xufVxuIiwiaW1wb3J0IHsgdHlwZSBNcFNkayB9IGZyb20gJ0BzZGsvdHlwZXMnO1xuXG5leHBvcnQgZnVuY3Rpb24gbGFiZWxBbHBoYVNvcnQoaXRlbTE6IE1wU2RrLlRhZy5UYWdEYXRhLCBpdGVtMjogTXBTZGsuVGFnLlRhZ0RhdGEpOiBudW1iZXIge1xuICBpZiAoaXRlbTEubGFiZWwgPCBpdGVtMi5sYWJlbCkge1xuICAgIHJldHVybiAtMTtcbiAgfVxuICBpZiAoaXRlbTEubGFiZWwgPiBpdGVtMi5sYWJlbCkge1xuICAgIHJldHVybiAxO1xuICB9XG4gIHJldHVybiAwO1xufVxuIiwiaW1wb3J0IHR5cGUgeyBNcFNkayB9IGZyb20gJ0BzZGsvdHlwZXMnO1xuaW1wb3J0IHsgRnJhZ21lbnQsIHVzZUNhbGxiYWNrLCB1c2VSZWYsIHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnO1xuXG5pbnRlcmZhY2UgUHJvcHMge1xuICBzZGs6IE1wU2RrO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gSW1wb3J0VGFncyhwcm9wczogUHJvcHMpOiBKU1guRWxlbWVudCB7XG4gIGNvbnN0IHNwYWNlSWRJbnB1dCA9IHVzZVJlZjxIVE1MSW5wdXRFbGVtZW50PihudWxsKTtcbiAgY29uc3QgW3RleHQsIHNldFRleHRdID0gdXNlU3RhdGU8c3RyaW5nPignJyk7XG5cbiAgY29uc3QgaW1wb3J0VGFncyA9IHVzZUNhbGxiYWNrKGFzeW5jICgpID0+IHtcbiAgICBpZiAoc3BhY2VJZElucHV0LmN1cnJlbnQpIHtcbiAgICAgIGNvbnN0IHRhZ3MgPSBhd2FpdCBwcm9wcy5zZGsuVGFnLmltcG9ydFRhZ3Moc3BhY2VJZElucHV0LmN1cnJlbnQudmFsdWUpO1xuXG4gICAgICBzZXRUZXh0KGBOZXcgdGFnIGlkczogJHt0YWdzfWApO1xuICAgIH1cbiAgfSwgW3Byb3BzLnNkay5UYWddKTtcblxuICByZXR1cm4gKFxuICAgIDxGcmFnbWVudD5cbiAgICAgIDxkaXY+XG4gICAgICAgIDxsYWJlbCBodG1sRm9yPSdzcGFjZS1pZCc+c3BhY2VJZDogPC9sYWJlbD5cbiAgICAgICAgPGlucHV0IHJlZj17c3BhY2VJZElucHV0fSBjbGFzc05hbWU9J3NtYWxsLWlucHV0JyBpZD0nc3BhY2UtaWQnIHR5cGU9J3N0cmluZycvPlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2PlxuICAgICAgICA8YnV0dG9uIGlkPSdjb3B5LXRhZ3MnIG9uQ2xpY2s9e2ltcG9ydFRhZ3N9PkltcG9ydDwvYnV0dG9uPlxuICAgICAgPC9kaXY+XG4gICAgICA8dGV4dGFyZWFcbiAgICAgICAgc3R5bGU9e3sgd2lkdGg6ICcxMDAlJywgaGVpZ2h0OiAnODAlJyB9fVxuICAgICAgICByZWFkT25seVxuICAgICAgICB2YWx1ZT17dGV4dH1cbiAgICAgICAgLz5cbiAgICA8L0ZyYWdtZW50PlxuICApO1xufVxuIiwiaW1wb3J0IHR5cGUgeyBNcFNkayB9IGZyb20gJ0BzZGsvdHlwZXMnO1xuaW1wb3J0IHsgRnJhZ21lbnQsIHVzZUNhbGxiYWNrLCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcblxuaW50ZXJmYWNlIFByb3BzIHtcbiAgc2RrOiBNcFNkaztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIFNhdmVUb0xheWVyKHByb3BzOiBQcm9wcyk6IEpTWC5FbGVtZW50IHtcbiAgY29uc3QgW3RleHQsIHNldFRleHRdID0gdXNlU3RhdGU8c3RyaW5nPignJyk7XG5cbiAgY29uc3Qgc2F2ZVRvTGF5ZXIgPSB1c2VDYWxsYmFjayhhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgcHJvcHMuc2RrLlRhZy5zYXZlVG9MYXllcigpO1xuXG4gICAgc2V0VGV4dChgWyR7cmVzdWx0LmpvaW4oJywnKX1dYCk7XG4gIH0sIFtwcm9wcy5zZGsuVGFnXSk7XG5cbiAgcmV0dXJuIChcbiAgICA8RnJhZ21lbnQ+XG4gICAgICA8ZGl2PlxuICAgICAgICA8YnV0dG9uIGlkPSdzYXZlVG9MYXllcicgb25DbGljaz17c2F2ZVRvTGF5ZXJ9PlNhdmU8L2J1dHRvbj5cbiAgICAgIDwvZGl2PlxuICAgICAgPHRleHRhcmVhXG4gICAgICAgIHN0eWxlPXt7IHdpZHRoOiAnMTAwJScsIGhlaWdodDogJzgwJScgfX1cbiAgICAgICAgcmVhZE9ubHlcbiAgICAgICAgdmFsdWU9e3RleHR9XG4gICAgICAvPlxuICAgIDwvRnJhZ21lbnQ+XG4gICk7XG59XG4iLCJpbXBvcnQgeyBGcmFnbWVudCwgdXNlQ2FsbGJhY2ssIHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHR5cGUgeyBNcFNkayB9IGZyb20gJ0BzZGsvdHlwZXMnO1xuaW1wb3J0IHsgQ29sbGVjdGlvbkluc3BlY3RvciB9IGZyb20gJy4uL0NvbGxlY3Rpb25JbnNwZWN0b3InO1xuaW1wb3J0IHsgTGF5ZXJTdXBwb3J0IH0gZnJvbSAnLi9MYXllclN1cHBvcnQnO1xuaW1wb3J0IHsgQWRkIH0gZnJvbSAnLi9BZGQnO1xuaW1wb3J0IHsgQWxsb3dBY3Rpb24gfSBmcm9tICcuL0FsbG93QWN0aW9uJztcbmltcG9ydCB7IEF0dGFjaCB9IGZyb20gJy4vQXR0YWNoJztcbmltcG9ydCB7IEVkaXRCaWxsYm9hcmQgfSBmcm9tICcuL0VkaXRCaWxsYm9hcmQnO1xuaW1wb3J0IHsgRWRpdENvbG9yIH0gZnJvbSAnLi9FZGl0Q29sb3InO1xuaW1wb3J0IHsgRWRpdFN0ZW0gfSBmcm9tICcuL0VkaXRTdGVtJztcbmltcG9ydCB7IEVkaXRJY29uIH0gZnJvbSAnLi9FZGl0SWNvbic7XG5pbXBvcnQgeyBFZGl0T3BhY2l0eSB9IGZyb20gJy4vRWRpdE9wYWNpdHknO1xuaW1wb3J0IHsgTW92ZSB9IGZyb20gJy4vTW92ZSc7XG5pbXBvcnQgeyBPcGVuIH0gZnJvbSAnLi9PcGVuJztcbmltcG9ydCB7IFJlZ2lzdGVyQXR0YWNobWVudCB9IGZyb20gJy4vUmVnaXN0ZXJBdHRhY2htZW50JztcbmltcG9ydCB7IFJlZ2lzdGVyU2FuZGJveCB9IGZyb20gJy4vUmVnaXN0ZXJTYW5kYm94JztcbmltcG9ydCB7IFJlbW92ZSB9IGZyb20gJy4vUmVtb3ZlJztcbmltcG9ydCB7IFRvZ2dsZVNldHRpbmcgfSBmcm9tICcuL1RvZ2dsZVNldHRpbmcnO1xuaW1wb3J0IHsgQ29udHJvbFBhbmVsIH0gZnJvbSAnLi4vQ29udHJvbFBhbmVsJztcbmltcG9ydCB7IE9ic2VydmFibGVDb2xsZWN0aW9uIH0gZnJvbSAnLi4vT2JzZXJ2YWJsZUNvbGxlY3Rpb24nO1xuaW1wb3J0IHsgbGFiZWxBbHBoYVNvcnQgfSBmcm9tICcuL3RhZ1NvcnQnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJy4uL09ic2VydmFibGUnO1xuaW1wb3J0IHsgSW1wb3J0VGFncyB9IGZyb20gJy4vSW1wb3J0VGFncyc7XG5pbXBvcnQgeyBTYXZlVG9MYXllciB9IGZyb20gJy4vU2F2ZVRvTGF5ZXInO1xuXG5pbnRlcmZhY2UgUHJvcHMge1xuICBzZGs6IE1wU2RrO1xuICBzZWxlY3RlZEFzc2V0OiBzdHJpbmc7XG4gIHNlbGVjdGVkTGF5ZXI6IE1wU2RrLlZpZXcuTGF5ZXIgfCB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBUYWcoeyBzZGssIHNlbGVjdGVkQXNzZXQsIHNlbGVjdGVkTGF5ZXIgfTogUHJvcHMpOiBKU1guRWxlbWVudCB7XG4gIGNvbnN0IFtzZWxlY3RlZFRhZywgc2VsZWN0VGFnXSA9IHVzZVN0YXRlKCcnKTtcbiAgY29uc3QgW3NlbGVjdGVkQXR0YWNobWVudCwgc2VsZWN0QXR0YWNobWVudF0gPSB1c2VTdGF0ZSgnJyk7XG5cbiAgY29uc3QgdGFnT3B0aW9uTGFiZWwgPSB1c2VDYWxsYmFjayhmdW5jdGlvbiAoaXRlbTogTXBTZGsuVGFnLlRhZ0RhdGEpOiBzdHJpbmcge1xuICAgIHJldHVybiBpdGVtLmxhYmVsIHx8ICcobm8gbGFiZWwpJztcbiAgfSwgW10pO1xuXG4gIGNvbnN0IGF0dGFjaG1lbnRIb3ZlckxhYmVsID0gdXNlQ2FsbGJhY2soZnVuY3Rpb24gKGl0ZW06IE1wU2RrLlRhZy5BdHRhY2htZW50KTogc3RyaW5nIHtcbiAgICByZXR1cm4gaXRlbS5zcmM7XG4gIH0sIFtdKTtcbiAgY29uc3QgYXR0YWNobWVudE9wdGlvbkxhYmVsID0gdXNlQ2FsbGJhY2soZnVuY3Rpb24gKGl0ZW06IE1wU2RrLlRhZy5BdHRhY2htZW50KTogc3RyaW5nIHtcbiAgICByZXR1cm4gaXRlbS5zcmMuc2xpY2UoMCwgMzApO1xuICB9LCBbXSk7XG5cbiAgcmV0dXJuIChcbiAgICA8RnJhZ21lbnQ+XG4gICAgICA8Q29udHJvbFBhbmVsIGhlYWRlcj17J1RhZyAtIFNhdmVUb0xheWVyJ30+XG4gICAgICAgIDxTYXZlVG9MYXllciBzZGs9e3Nka30vPlxuICAgICAgPC9Db250cm9sUGFuZWw+XG5cbiAgICAgIDxDb250cm9sUGFuZWwgaGVhZGVyPXsnVGFnIC0gQ29sbGVjdGlvbid9PlxuICAgICAgICA8T2JzZXJ2YWJsZUNvbGxlY3Rpb25cbiAgICAgICAgICBjb2xsZWN0aW9uPXtzZGsuVGFnLmRhdGF9XG4gICAgICAgICAgbmFtZT17J1RhZ3MnfVxuICAgICAgICAvPlxuICAgICAgPC9Db250cm9sUGFuZWw+XG5cbiAgICAgIDxDb250cm9sUGFuZWwgaGVhZGVyPXsnVGFnLmF0dGFjaG1lbnRzIC0gQ29sbGVjdGlvbid9PlxuICAgICAgICA8T2JzZXJ2YWJsZUNvbGxlY3Rpb25cbiAgICAgICAgICBjb2xsZWN0aW9uPXtzZGsuVGFnLmF0dGFjaG1lbnRzfVxuICAgICAgICAgIG5hbWU9eydBdHRhY2htZW50cyd9XG4gICAgICAgIC8+XG4gICAgICA8L0NvbnRyb2xQYW5lbD5cblxuICAgICAgPENvbGxlY3Rpb25JbnNwZWN0b3JcbiAgICAgICAgbGFiZWw9eydUYWcnfVxuICAgICAgICBjb2xsZWN0aW9uPXtzZGsuVGFnLmRhdGF9XG4gICAgICAgIG9uQ2hhbmdlZD17c2VsZWN0VGFnfVxuICAgICAgICBvcHRpb25MYWJlbD17dGFnT3B0aW9uTGFiZWx9XG4gICAgICAgIHNvcnQ9e2xhYmVsQWxwaGFTb3J0fVxuICAgICAgICBhZGRpdGlvbmFsUHJvcGVydGllcz17WydzdGVtSGVpZ2h0JywgJ2Rpc2NQb3NpdGlvbiddfVxuICAgICAgLz5cblxuICAgICAgPENvbGxlY3Rpb25JbnNwZWN0b3JcbiAgICAgICAgbGFiZWw9eydBdHRhY2htZW50J31cbiAgICAgICAgY29sbGVjdGlvbj17c2RrLlRhZy5hdHRhY2htZW50c31cbiAgICAgICAgb25DaGFuZ2VkPXtzZWxlY3RBdHRhY2htZW50fVxuICAgICAgICBvcHRpb25MYWJlbD17YXR0YWNobWVudE9wdGlvbkxhYmVsfVxuICAgICAgICBob3ZlckxhYmVsPXthdHRhY2htZW50SG92ZXJMYWJlbH1cbiAgICAgIC8+XG5cbiAgICAgIDxDb250cm9sUGFuZWwgaGVhZGVyPXsnVGFnIC0gQWRkJ30+XG4gICAgICAgIDxMYXllclN1cHBvcnQgc2RrPXtzZGt9IHNlbGVjdGVkTGF5ZXI9e3NlbGVjdGVkTGF5ZXJ9PlxuICAgICAgICAgIDxBZGQgc2RrPXtzZGt9IHNlbGVjdGVkQXNzZXQ9e3NlbGVjdGVkQXNzZXR9IC8+XG4gICAgICAgIDwvTGF5ZXJTdXBwb3J0PlxuICAgICAgPC9Db250cm9sUGFuZWw+XG5cbiAgICAgIDxDb250cm9sUGFuZWwgaGVhZGVyPXsnVGFnIC0gUmVtb3ZlJ30+XG4gICAgICAgIDxMYXllclN1cHBvcnQgc2RrPXtzZGt9IHNlbGVjdGVkTGF5ZXI9e3NlbGVjdGVkTGF5ZXJ9PlxuICAgICAgICAgIDxSZW1vdmUgc2RrPXtzZGt9IHNlbGVjdGVkVGFnPXtzZWxlY3RlZFRhZ30gLz5cbiAgICAgICAgPC9MYXllclN1cHBvcnQ+XG4gICAgICA8L0NvbnRyb2xQYW5lbD5cblxuICAgICAgPENvbnRyb2xQYW5lbCBoZWFkZXI9eydUYWcgLSBPcGVuJ30+XG4gICAgICAgIDxPcGVuIHNkaz17c2RrfSBzZWxlY3RlZFRhZz17c2VsZWN0ZWRUYWd9IC8+XG4gICAgICA8L0NvbnRyb2xQYW5lbD5cblxuICAgICAgPENvbnRyb2xQYW5lbCBoZWFkZXI9eydUYWcgLSBcIk9wZW4gVGFnc1wiJ30+XG4gICAgICAgIDxPYnNlcnZhYmxlXG4gICAgICAgICAgb2JzZXJ2YWJsZT17c2RrLlRhZy5vcGVuVGFnc31cbiAgICAgICAgICBuYW1lPXsnT3BlbiBUYWdzJ31cbiAgICAgICAgLz5cbiAgICAgIDwvQ29udHJvbFBhbmVsPlxuXG4gICAgICA8Q29udHJvbFBhbmVsIGhlYWRlcj17J1RhZyAtIEVkaXQnfT5cbiAgICAgICAgPExheWVyU3VwcG9ydCBzZGs9e3Nka30gc2VsZWN0ZWRMYXllcj17c2VsZWN0ZWRMYXllcn0+XG4gICAgICAgICAgPEVkaXRCaWxsYm9hcmQgc2RrPXtzZGt9IHNlbGVjdGVkVGFnPXtzZWxlY3RlZFRhZ30gLz5cbiAgICAgICAgPC9MYXllclN1cHBvcnQ+XG4gICAgICA8L0NvbnRyb2xQYW5lbD5cblxuICAgICAgPENvbnRyb2xQYW5lbCBoZWFkZXI9eydUYWcgLSBDb2xvcid9PlxuICAgICAgICA8TGF5ZXJTdXBwb3J0IHNkaz17c2RrfSBzZWxlY3RlZExheWVyPXtzZWxlY3RlZExheWVyfT5cbiAgICAgICAgICA8RWRpdENvbG9yIHNkaz17c2RrfSBzZWxlY3RlZFRhZz17c2VsZWN0ZWRUYWd9IC8+XG4gICAgICAgIDwvTGF5ZXJTdXBwb3J0PlxuICAgICAgPC9Db250cm9sUGFuZWw+XG5cbiAgICAgIDxDb250cm9sUGFuZWwgaGVhZGVyPXsnVGFnIC0gRWRpdCBJY29uJ30+XG4gICAgICAgIDxMYXllclN1cHBvcnQgc2RrPXtzZGt9IHNlbGVjdGVkTGF5ZXI9e3NlbGVjdGVkTGF5ZXJ9PlxuICAgICAgICAgIDxFZGl0SWNvbiBzZGs9e3Nka30gc2VsZWN0ZWRUYWc9e3NlbGVjdGVkVGFnfSBzZWxlY3RlZEFzc2V0PXtzZWxlY3RlZEFzc2V0fSAvPlxuICAgICAgICA8L0xheWVyU3VwcG9ydD5cbiAgICAgIDwvQ29udHJvbFBhbmVsPlxuXG4gICAgICA8Q29udHJvbFBhbmVsIGhlYWRlcj17J1RhZyAtIE9wYWNpdHknfT5cbiAgICAgICAgPExheWVyU3VwcG9ydCBzZGs9e3Nka30gc2VsZWN0ZWRMYXllcj17c2VsZWN0ZWRMYXllcn0+XG4gICAgICAgICAgPEVkaXRPcGFjaXR5IHNkaz17c2RrfSBzZWxlY3RlZFRhZz17c2VsZWN0ZWRUYWd9IC8+XG4gICAgICAgIDwvTGF5ZXJTdXBwb3J0PlxuICAgICAgPC9Db250cm9sUGFuZWw+XG5cbiAgICAgIDxDb250cm9sUGFuZWwgaGVhZGVyPXsnVGFnIC0gU3RlbSd9PlxuICAgICAgICA8TGF5ZXJTdXBwb3J0IHNkaz17c2RrfSBzZWxlY3RlZExheWVyPXtzZWxlY3RlZExheWVyfT5cbiAgICAgICAgICA8RWRpdFN0ZW0gc2RrPXtzZGt9IHNlbGVjdGVkVGFnPXtzZWxlY3RlZFRhZ30gLz5cbiAgICAgICAgPC9MYXllclN1cHBvcnQ+XG4gICAgICA8L0NvbnRyb2xQYW5lbD5cblxuICAgICAgPENvbnRyb2xQYW5lbCBoZWFkZXI9eydUYWcgLSBNb3ZlJ30+XG4gICAgICAgIDxMYXllclN1cHBvcnQgc2RrPXtzZGt9IHNlbGVjdGVkTGF5ZXI9e3NlbGVjdGVkTGF5ZXJ9PlxuICAgICAgICAgIDxNb3ZlIHNkaz17c2RrfSBzZWxlY3RlZFRhZz17c2VsZWN0ZWRUYWd9IC8+XG4gICAgICAgIDwvTGF5ZXJTdXBwb3J0PlxuICAgICAgPC9Db250cm9sUGFuZWw+XG5cbiAgICAgIDxDb250cm9sUGFuZWwgaGVhZGVyPXsnVGFnIC0gQWxsb3cgQWN0aW9ucyd9PlxuICAgICAgICA8TGF5ZXJTdXBwb3J0IHNkaz17c2RrfSBzZWxlY3RlZExheWVyPXtzZWxlY3RlZExheWVyfT5cbiAgICAgICAgICA8QWxsb3dBY3Rpb24gc2RrPXtzZGt9IHNlbGVjdGVkVGFnPXtzZWxlY3RlZFRhZ30gLz5cbiAgICAgICAgPC9MYXllclN1cHBvcnQ+XG4gICAgICA8L0NvbnRyb2xQYW5lbD5cblxuICAgICAgPENvbnRyb2xQYW5lbCBoZWFkZXI9eydUYWcgLSBBdHRhY2gnfT5cbiAgICAgICAgPExheWVyU3VwcG9ydCBzZGs9e3Nka30gc2VsZWN0ZWRMYXllcj17c2VsZWN0ZWRMYXllcn0+XG4gICAgICAgICAgPEF0dGFjaCBzZGs9e3Nka30gc2VsZWN0ZWRUYWc9e3NlbGVjdGVkVGFnfSBzZWxlY3RlZEF0dGFjaG1lbnQ9e3NlbGVjdGVkQXR0YWNobWVudH0gLz5cbiAgICAgICAgPC9MYXllclN1cHBvcnQ+XG4gICAgICA8L0NvbnRyb2xQYW5lbD5cblxuICAgICAgPENvbnRyb2xQYW5lbCBoZWFkZXI9eydUYWcgLSBSZWdpc3RlciBBdHRhY2htZW50J30+XG4gICAgICAgIDxSZWdpc3RlckF0dGFjaG1lbnQgc2RrPXtzZGt9IC8+XG4gICAgICA8L0NvbnRyb2xQYW5lbD5cblxuICAgICAgPENvbnRyb2xQYW5lbCBoZWFkZXI9eydUYWcgLSBSZWdpc3RlciBTYW5kYm94J30+XG4gICAgICAgIDxSZWdpc3RlclNhbmRib3ggc2RrPXtzZGt9IC8+XG4gICAgICA8L0NvbnRyb2xQYW5lbD5cblxuICAgICAgPENvbnRyb2xQYW5lbCBoZWFkZXI9eydUYWcgLSBEb2NraW5nIENvbnRyb2xzJ30+XG4gICAgICAgIDxUb2dnbGVTZXR0aW5nIHRvZ2dsZVNldHRpbmc9e3Nkay5UYWcudG9nZ2xlRG9ja2luZ30gLz5cbiAgICAgIDwvQ29udHJvbFBhbmVsPlxuXG4gICAgICA8Q29udHJvbFBhbmVsIGhlYWRlcj17J1RhZyAtIE5hdmlnYXRpb24gQ29udHJvbHMnfT5cbiAgICAgICAgPFRvZ2dsZVNldHRpbmcgdG9nZ2xlU2V0dGluZz17c2RrLlRhZy50b2dnbGVOYXZDb250cm9sc30gLz5cbiAgICAgIDwvQ29udHJvbFBhbmVsPlxuXG4gICAgICA8Q29udHJvbFBhbmVsIGhlYWRlcj17J1RhZyAtIFNoYXJpbmcgQ29udHJvbHMnfT5cbiAgICAgICAgPFRvZ2dsZVNldHRpbmcgdG9nZ2xlU2V0dGluZz17c2RrLlRhZy50b2dnbGVTaGFyaW5nfSAvPlxuICAgICAgPC9Db250cm9sUGFuZWw+XG5cbiAgICAgIDxDb250cm9sUGFuZWwgaGVhZGVyPXsnVGFnIC0gSW1wb3J0IFRhZ3MnfT5cbiAgICAgICAgPEltcG9ydFRhZ3Mgc2RrPXtzZGt9Lz5cbiAgICAgIDwvQ29udHJvbFBhbmVsPlxuICAgIDwvRnJhZ21lbnQ+XG4gICk7XG59XG4iLCJpbXBvcnQgeyB1c2VDYWxsYmFjaywgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgdHlwZSB7IENTU1Byb3BlcnRpZXMgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgdHlwZSB7IE1wU2RrLCBUb3VyIH0gZnJvbSAnQHNkay90eXBlcyc7XG5cbmludGVyZmFjZSBQcm9wcyB7XG4gIHNkazogTXBTZGs7XG59XG5cbmNvbnN0IHRleHRBcmVhU3R5bGU6IENTU1Byb3BlcnRpZXMgPSB7XG4gIGhlaWdodDogNTAsXG59O1xuXG5leHBvcnQgZnVuY3Rpb24gVG91ckdldERhdGEocHJvcHM6IFByb3BzKTogSlNYLkVsZW1lbnQge1xuICBjb25zdCBbdG91clNuYXBzaG90cywgc2V0VG91clNuYXBzaG90c10gPSB1c2VTdGF0ZTxUb3VyLlNuYXBzaG90W10+KFtdKTtcblxuICBjb25zdCBnZXREYXRhID0gdXNlQ2FsbGJhY2soYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IHNka1RvdXJTbmFwc2hvdHMgPSBhd2FpdCBwcm9wcy5zZGsuVG91ci5nZXREYXRhKCkgYXMgVG91ci5TbmFwc2hvdFtdO1xuICAgIHNldFRvdXJTbmFwc2hvdHMoc2RrVG91clNuYXBzaG90cyk7XG4gIH0sIFtdKTtcblxuICBsZXQgc2VyaWFsaXplZCA9ICcnO1xuXG4gIGlmICh0b3VyU25hcHNob3RzLmxlbmd0aCA+IDApIHtcbiAgICBzZXJpYWxpemVkID0gSlNPTi5zdHJpbmdpZnkodG91clNuYXBzaG90cywgbnVsbCwgMik7XG4gIH1cblxuICByZXR1cm4gKFxuICAgIDx0cj5cbiAgICAgIDx0ZD5cbiAgICAgICAgPGJ1dHRvbiBvbkNsaWNrPXtnZXREYXRhfT5nZXREYXRhPC9idXR0b24+XG4gICAgICA8L3RkPlxuICAgICAgPHRkPlxuICAgICAgICA8dGV4dGFyZWEgcm93cz17M30gc3R5bGU9e3RleHRBcmVhU3R5bGV9IGRlZmF1bHRWYWx1ZT17c2VyaWFsaXplZH0vPlxuICAgICAgPC90ZD5cbiAgICA8L3RyPlxuICApO1xufVxuIiwiaW1wb3J0IHR5cGUgeyBDU1NQcm9wZXJ0aWVzIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgRnJhZ21lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgdHlwZSB7IE1wU2RrIH0gZnJvbSAnQHNkay90eXBlcyc7XG5pbXBvcnQgeyBUb3VyR2V0RGF0YSB9IGZyb20gJy4vVG91ckdldERhdGEnO1xuaW1wb3J0IHsgRXZlbnQgfSBmcm9tICcuL0V2ZW50JztcbmltcG9ydCB7IENvbnRyb2xQYW5lbCB9IGZyb20gJy4vQ29udHJvbFBhbmVsJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICcuL09ic2VydmFibGUnO1xuXG5pbnRlcmZhY2UgUHJvcHMge1xuICBzZGs6IE1wU2RrO1xufVxuXG5jb25zdCBjb250cm9sUGFuZWxTdHlsZTogQ1NTUHJvcGVydGllcyA9IHtcbiAgb3ZlcmZsb3dZOiAnYXV0bycsXG59O1xuXG5leHBvcnQgZnVuY3Rpb24gVG91cihwcm9wczogUHJvcHMpOiBKU1guRWxlbWVudCB7XG4gIHJldHVybiAoXG4gICAgPEZyYWdtZW50PlxuICAgICAgPGRpdiBzdHlsZT17Y29udHJvbFBhbmVsU3R5bGV9IGNsYXNzTmFtZT17YGNvbnRyb2xQYW5lbGB9PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT17YGNvbnRyb2xQYW5lbEhlYWRlcmB9PntgVG91cmB9PC9kaXY+XG4gICAgICAgIDx0YWJsZT5cbiAgICAgICAgICA8dGJvZHk+XG4gICAgICAgICAgICA8VG91ckdldERhdGEgc2RrPXtwcm9wcy5zZGt9Lz5cbiAgICAgICAgICAgIDxFdmVudCBzZGs9e3Byb3BzLnNka30gZW51bT17cHJvcHMuc2RrLlRvdXIuRXZlbnR9Lz5cbiAgICAgICAgICA8L3Rib2R5PlxuICAgICAgICA8L3RhYmxlPlxuICAgICAgPC9kaXY+XG4gICAgICA8Q29udHJvbFBhbmVsIGhlYWRlcj17J1RvdXIgLSBTdGF0ZSd9PlxuICAgICAgICA8T2JzZXJ2YWJsZSBuYW1lPSdjdXJyZW50IHN0ZXAnIG9ic2VydmFibGU9e3Byb3BzLnNkay5Ub3VyLmN1cnJlbnRTdGVwfSAvPlxuICAgICAgICA8T2JzZXJ2YWJsZSBuYW1lPSdwbGF5IHN0YXRlJyBvYnNlcnZhYmxlPXtwcm9wcy5zZGsuVG91ci5zdGF0ZX0gLz5cbiAgICAgICAgPE9ic2VydmFibGUgbmFtZT0ndHJhbnNpdGlvbicgb2JzZXJ2YWJsZT17cHJvcHMuc2RrLlRvdXIudHJhbnNpdGlvbn0gLz5cbiAgICAgIDwvQ29udHJvbFBhbmVsPlxuICAgIDwvRnJhZ21lbnQ+XG4gICk7XG59XG4iLCJpbXBvcnQgeyB0eXBlIE1wU2RrIH0gZnJvbSAnQHNkay90eXBlcyc7XG5pbXBvcnQgeyB1c2VDYWxsYmFjaywgdXNlUmVmLCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcblxuZXhwb3J0IGZ1bmN0aW9uIENyZWF0ZUxheWVyKHtzZGt9OiB7c2RrOiBNcFNka30pOiBKU1guRWxlbWVudCB7XG4gIGNvbnN0IG5hbWVJbnB1dFJlZiA9IHVzZVJlZjxIVE1MSW5wdXRFbGVtZW50PihudWxsKTtcbiAgY29uc3QgW2NyZWF0ZURpc2FibGVkLCBzZXRDcmVhdGVEaXNhYmxlZF0gPSB1c2VTdGF0ZSh0cnVlKTtcbiAgY29uc3QgW21lc3NhZ2UsIHNldE1lc3NhZ2VdID0gdXNlU3RhdGUoJycpO1xuXG4gIGNvbnN0IGlucHV0Q2hhbmdlZCA9IHVzZUNhbGxiYWNrKChldmVudDogUmVhY3QuRm9ybUV2ZW50PEhUTUxJbnB1dEVsZW1lbnQ+KSA9PiB7XG4gICAgc2V0Q3JlYXRlRGlzYWJsZWQoIWV2ZW50LmN1cnJlbnRUYXJnZXQudmFsdWUpO1xuICB9LCBbXSk7XG5cbiAgY29uc3QgY3JlYXRlTGF5ZXIgPSB1c2VDYWxsYmFjayhhc3luYyAoKSA9PiB7XG4gICAgaWYgKG5hbWVJbnB1dFJlZi5jdXJyZW50KSB7XG4gICAgICBjb25zdCBsYXllciA9IGF3YWl0IHNkay5WaWV3LmNyZWF0ZUxheWVyKG5hbWVJbnB1dFJlZi5jdXJyZW50LnZhbHVlKTtcbiAgICAgIHNldE1lc3NhZ2UoJ2NyZWF0ZWQ6ICcgKyBsYXllci5pZCk7XG4gICAgfVxuICB9LCBbc2RrLlZpZXddKTtcblxuICByZXR1cm4gKFxuICAgIDw+XG4gICAgICA8ZGl2PlxuICAgICAgICA8aW5wdXQgcmVmPXtuYW1lSW5wdXRSZWZ9IHR5cGU9J3RleHQnIG9uSW5wdXQ9e2lucHV0Q2hhbmdlZH0vPlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2PlxuICAgICAgICA8YnV0dG9uIG9uQ2xpY2s9e2NyZWF0ZUxheWVyfSBkaXNhYmxlZD17Y3JlYXRlRGlzYWJsZWR9PkNyZWF0ZTwvYnV0dG9uPlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2PlxuICAgICAgICA8dGV4dGFyZWEgc3R5bGU9e3sgaGVpZ2h0OiAnNmVtJ319IHJlYWRPbmx5IHZhbHVlPXttZXNzYWdlfS8+XG4gICAgICA8L2Rpdj5cbiAgICA8Lz5cbiAgKTtcbn1cbiIsImltcG9ydCB7IHR5cGUgVmlldyB9IGZyb20gJ0BzZGsvdHlwZXMnO1xuaW1wb3J0IHsgRnJhZ21lbnQsIHVzZUNhbGxiYWNrLCB1c2VSZWYgfSBmcm9tICdyZWFjdCc7XG5cbnR5cGUgUHJvcHMgPSB7XG4gIHNlbGVjdGVkVmlldzogVmlldy5WaWV3IHwgdW5kZWZpbmVkO1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIEFjdGl2YXRlVmlldyh7c2VsZWN0ZWRWaWV3fTogUHJvcHMpOiBKU1guRWxlbWVudCB7XG4gIGNvbnN0IHJldHVyblRvU3RhcnQgPSB1c2VSZWY8SFRNTElucHV0RWxlbWVudD4obnVsbCk7XG4gIGNvbnN0IGFjdGl2YXRlVmlldyA9IHVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICBpZiAoc2VsZWN0ZWRWaWV3KSB7XG4gICAgICBzZWxlY3RlZFZpZXcuc2V0QWN0aXZlKHJldHVyblRvU3RhcnQuY3VycmVudD8uY2hlY2tlZCA/PyBmYWxzZSk7XG4gICAgfVxuICB9LCBbc2VsZWN0ZWRWaWV3XSk7XG5cbiAgcmV0dXJuIChcbiAgICA8RnJhZ21lbnQ+XG4gICAgICA8ZGl2PlxuICAgICAgICBzZWxlY3RlZDogPGlucHV0IHR5cGU9J3RleHQnIHZhbHVlPXtzZWxlY3RlZFZpZXc/LmlkID8/ICdOb25lJ30gZGlzYWJsZWQvPlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2PlxuICAgICAgICA8bGFiZWwgaHRtbEZvcj0ndmlldy1zdGFydC1yZXR1cm4nPlJldHVybiB0byBTdGFydD88L2xhYmVsPlxuICAgICAgICA8aW5wdXQgcmVmPXtyZXR1cm5Ub1N0YXJ0fSBpZD0ndmlldy1zdGFydC1yZXR1cm4nIHR5cGU9J2NoZWNrYm94JyAvPlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2PlxuICAgICAgICA8YnV0dG9uIG9uQ2xpY2s9e2FjdGl2YXRlVmlld30+QWN0aXZhdGU8L2J1dHRvbj5cbiAgICAgIDwvZGl2PlxuICAgIDwvRnJhZ21lbnQ+XG4gICk7XG59XG4iLCJpbXBvcnQgeyB0eXBlIFZpZXcgfSBmcm9tICdAc2RrL3R5cGVzJztcbmltcG9ydCB7IHVzZUNhbGxiYWNrIH0gZnJvbSAncmVhY3QnO1xuXG50eXBlIFByb3BzID0ge1xuICBzZWxlY3RlZExheWVyOiBWaWV3LkxheWVyIHwgdW5kZWZpbmVkO1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIFRvZ2dsZUxheWVyKHtzZWxlY3RlZExheWVyfTogUHJvcHMpOiBKU1guRWxlbWVudCB7XG4gIGNvbnN0IHRvZ2dsZUxheWVyID0gdXNlQ2FsbGJhY2soKGFjdGl2YXRlOiBib29sZWFuKSA9PiB7XG4gICAgaWYgKHNlbGVjdGVkTGF5ZXIpIHtcbiAgICAgIHNlbGVjdGVkTGF5ZXIudG9nZ2xlKGFjdGl2YXRlKTtcbiAgICB9XG4gIH0sIFtzZWxlY3RlZExheWVyXSk7XG4gIHJldHVybiAoXG4gICAgPD5cbiAgICAgIDxkaXY+XG4gICAgICAgIHNlbGVjdGVkOiA8aW5wdXQgdHlwZT0ndGV4dCcgdmFsdWU9e3NlbGVjdGVkTGF5ZXI/LmlkID8/ICdOb25lJ30gZGlzYWJsZWQgLz5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdj5cbiAgICAgICAgPGJ1dHRvbiBvbkNsaWNrPXsoKSA9PiB0b2dnbGVMYXllcih0cnVlKX0+VG9nZ2xlIE9uPC9idXR0b24+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXY+XG4gICAgICAgIDxidXR0b24gb25DbGljaz17KCkgPT4gdG9nZ2xlTGF5ZXIoZmFsc2UpfT5Ub2dnbGUgT2ZmPC9idXR0b24+XG4gICAgICA8L2Rpdj5cbiAgICA8Lz5cbiAgKTtcbn1cbiIsImltcG9ydCB7IHR5cGUgTXBTZGsgfSBmcm9tICdAc2RrL3R5cGVzJztcbmltcG9ydCB7IHVzZUNhbGxiYWNrLCB1c2VTdGF0ZSwgdHlwZSBDU1NQcm9wZXJ0aWVzIH0gZnJvbSAncmVhY3QnO1xuXG5jb25zdCBzcGFuU3R5bGU6IENTU1Byb3BlcnRpZXMgPSB7XG4gIGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snLFxuICB3aWR0aDogJzUwcHgnLFxufTtcblxuZXhwb3J0IGZ1bmN0aW9uIExheWVyQ29udHJvbHMoe1xuICBzZWxlY3RlZFZpZXcsXG4gIHNlbGVjdGVkTGF5ZXIsXG59OiB7c2VsZWN0ZWRWaWV3PzogTXBTZGsuVmlldy5WaWV3OyBzZWxlY3RlZExheWVyPzogTXBTZGsuVmlldy5MYXllcn0pOiBKU1guRWxlbWVudCB7XG4gIGNvbnN0IFttZXNzYWdlLCBzZXRNZXNzYWdlXSA9IHVzZVN0YXRlKCcnKTtcblxuICBjb25zdCBhZGRMYXllciA9IHVzZUNhbGxiYWNrKGFzeW5jKCkgPT4ge1xuICAgIHNldE1lc3NhZ2UoJycpO1xuICAgIGlmICghc2VsZWN0ZWRWaWV3IHx8ICFzZWxlY3RlZExheWVyKSB7XG4gICAgICBzZXRNZXNzYWdlKCdub3QgcmVhZHknKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IHNlbGVjdGVkVmlldy5hZGRMYXllcihzZWxlY3RlZExheWVyKTtcbiAgICAgIHNldE1lc3NhZ2UoJ09LJyk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgc2V0TWVzc2FnZSgnW2FkZExheWVyXSBFcnJvcjonICsgZSk7XG4gICAgfVxuICB9LCBbc2VsZWN0ZWRMYXllciwgc2VsZWN0ZWRWaWV3XSk7XG4gIGNvbnN0IHJlbW92ZUxheWVyID0gdXNlQ2FsbGJhY2soYXN5bmMgKCkgPT4ge1xuICAgIHNldE1lc3NhZ2UoJycpO1xuICAgIGlmICghc2VsZWN0ZWRWaWV3IHx8ICFzZWxlY3RlZExheWVyKSB7XG4gICAgICBzZXRNZXNzYWdlKCdub3QgcmVhZHknKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IHNlbGVjdGVkVmlldy5yZW1vdmVMYXllcihzZWxlY3RlZExheWVyKTtcbiAgICAgIHNldE1lc3NhZ2UoJ09LJyk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgc2V0TWVzc2FnZSgnW3JlbW92ZUxheWVyXSBFcnJvcjonICsgZSk7XG4gICAgfVxuICB9LCBbc2VsZWN0ZWRMYXllciwgc2VsZWN0ZWRWaWV3XSk7XG4gIGNvbnN0IGhhc0xheWVyID0gdXNlQ2FsbGJhY2soYXN5bmMgKCkgPT4ge1xuICAgIGlmICghc2VsZWN0ZWRWaWV3IHx8ICFzZWxlY3RlZExheWVyKSB7XG4gICAgICBzZXRNZXNzYWdlKCdub3QgcmVhZHknKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgc2V0TWVzc2FnZShzZWxlY3RlZFZpZXcuaGFzTGF5ZXIoc2VsZWN0ZWRMYXllcikudG9TdHJpbmcoKSk7XG4gIH0sIFtzZWxlY3RlZExheWVyLCBzZWxlY3RlZFZpZXddKTtcblxuICByZXR1cm4gKFxuICAgIDw+XG4gICAgICA8ZGl2PlxuICAgICAgICA8c3BhbiBzdHlsZT17c3BhblN0eWxlfT5WaWV3Ojwvc3Bhbj48aW5wdXQgdHlwZT0ndGV4dCcgdmFsdWU9e3NlbGVjdGVkVmlldz8uaWQgPz8gJ05vbmUnfSBkaXNhYmxlZC8+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXY+XG4gICAgICAgIDxzcGFuIHN0eWxlPXtzcGFuU3R5bGV9PkxheWVyOjwvc3Bhbj48aW5wdXQgdHlwZT0ndGV4dCcgdmFsdWU9e3NlbGVjdGVkTGF5ZXI/LmlkID8/ICdOb25lJ30gZGlzYWJsZWQvPlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2PlxuICAgICAgICA8YnV0dG9uIHN0eWxlPXt7d2lkdGg6ICc3MHB4J319IG9uQ2xpY2s9e2FkZExheWVyfT5BZGQ8L2J1dHRvbj5cbiAgICAgICAgPGJ1dHRvbiBzdHlsZT17e3dpZHRoOiAnNzBweCd9fSBvbkNsaWNrPXtyZW1vdmVMYXllcn0+UmVtb3ZlPC9idXR0b24+XG4gICAgICAgIDxidXR0b24gc3R5bGU9e3t3aWR0aDogJzcwcHgnfX0gb25DbGljaz17aGFzTGF5ZXJ9PkhhczwvYnV0dG9uPlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2PlxuICAgICAgICA8dGV4dGFyZWEgc3R5bGU9e3t3aWR0aDogJzEwMCUnLCBoZWlnaHQ6ICc2ZW0nfX0gdmFsdWU9e21lc3NhZ2V9IGRpc2FibGVkLz5cbiAgICAgIDwvZGl2PlxuICAgIDwvPlxuICApO1xufVxuIiwiaW1wb3J0IHR5cGUgeyBNcFNkaywgVmlldyB9IGZyb20gJ0BzZGsvdHlwZXMnO1xuaW1wb3J0IHsgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBDb2xsZWN0aW9uSW5zcGVjdG9yIH0gZnJvbSAnLi4vQ29sbGVjdGlvbkluc3BlY3Rvcic7XG5pbXBvcnQgeyBDb250cm9sUGFuZWwgfSBmcm9tICcuLi9Db250cm9sUGFuZWwnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJy4uL09ic2VydmFibGUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZUNvbGxlY3Rpb24gfSBmcm9tICcuLi9PYnNlcnZhYmxlQ29sbGVjdGlvbic7XG5pbXBvcnQgeyBDcmVhdGVMYXllciB9IGZyb20gJy4vQ3JlYXRlTGF5ZXInO1xuaW1wb3J0IHsgQWN0aXZhdGVWaWV3IH0gZnJvbSAnLi9BY3RpdmF0ZVZpZXcnO1xuaW1wb3J0IHsgVG9nZ2xlTGF5ZXIgfSBmcm9tICcuL1RvZ2dsZUxheWVyJztcbmltcG9ydCB7IExheWVyQ29udHJvbHMgfSBmcm9tICcuL0xheWVyQ29udHJvbHMnO1xuXG50eXBlIFByb3BzID0ge1xuICBzZGs6IE1wU2RrO1xuICBzZWxlY3RlZExheWVyOiBWaWV3LkxheWVyIHwgdW5kZWZpbmVkO1xuICBzZWxlY3RMYXllcihsYXllcjogVmlldy5MYXllciB8IHVuZGVmaW5lZCk6IHZvaWQ7XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gVmlldyh7c2RrLCBzZWxlY3RlZExheWVyLCBzZWxlY3RMYXllcn06IFByb3BzKTogSlNYLkVsZW1lbnQge1xuICBjb25zdCBbc2VsZWN0ZWRWaWV3LCBzZWxlY3RWaWV3XSA9IHVzZVN0YXRlPFZpZXcuVmlldz4oKTtcblxuICByZXR1cm4gKFxuICAgIDw+XG4gICAgICA8Q29udHJvbFBhbmVsIGhlYWRlcj17J1ZpZXcudmlld3MgLSBDb2xsZWN0aW9uJ30+XG4gICAgICAgIDxPYnNlcnZhYmxlQ29sbGVjdGlvblxuICAgICAgICAgIG5hbWU9eyd2aWV3cyd9XG4gICAgICAgICAgY29sbGVjdGlvbj17c2RrLlZpZXcudmlld3N9XG4gICAgICAgIC8+XG4gICAgICA8L0NvbnRyb2xQYW5lbD5cbiAgICAgIDxDb2xsZWN0aW9uSW5zcGVjdG9yXG4gICAgICAgIGxhYmVsPXsnVmlld3MnfVxuICAgICAgICBjb2xsZWN0aW9uPXtzZGsuVmlldy52aWV3c31cbiAgICAgICAgYWRkaXRpb25hbFByb3BlcnRpZXM9e1snaWQnLCAnbmFtZScsICdsYXllcnMnXX1cbiAgICAgICAgcHJvcGVydHlUcmFuc2Zvcm1zPXt7XG4gICAgICAgICAgbGF5ZXJzOiAobGF5ZXJzKSA9PiBbLi4ubGF5ZXJzXS5tYXAobGF5ZXIgPT4gbGF5ZXIuaWQpLFxuICAgICAgICB9fVxuICAgICAgICBvbkNoYW5nZWQ9eyhfLCB2aWV3KSA9PiBzZWxlY3RWaWV3KHZpZXcpfVxuICAgICAgLz5cbiAgICAgIDxDb250cm9sUGFuZWwgaGVhZGVyPXsnVmlldy5sYXllcnMgLSBDb2xsZWN0aW9uJ30+XG4gICAgICAgIDxPYnNlcnZhYmxlQ29sbGVjdGlvblxuICAgICAgICAgIG5hbWU9eydsYXllcnMnfVxuICAgICAgICAgIGNvbGxlY3Rpb249e3Nkay5WaWV3LmxheWVyc31cbiAgICAgICAgLz5cbiAgICAgIDwvQ29udHJvbFBhbmVsPlxuICAgICAgPENvbGxlY3Rpb25JbnNwZWN0b3JcbiAgICAgICAgbGFiZWw9eydMYXllcnMnfVxuICAgICAgICBjb2xsZWN0aW9uPXtzZGsuVmlldy5sYXllcnN9XG4gICAgICAgIGFkZGl0aW9uYWxQcm9wZXJ0aWVzPXtbJ2lkJywgJ25hbWUnXX1cbiAgICAgICAgb25DaGFuZ2VkPXsoXywgbGF5ZXIpID0+IHNlbGVjdExheWVyKGxheWVyKX1cbiAgICAgIC8+XG4gICAgICA8Q29udHJvbFBhbmVsIGhlYWRlcj17J1ZpZXcgLSBDdXJyZW50J30+XG4gICAgICAgIDxPYnNlcnZhYmxlXG4gICAgICAgICAgbmFtZT17J2N1cnJlbnQnfVxuICAgICAgICAgIG9ic2VydmFibGU9e3Nkay5WaWV3LmN1cnJlbnR9XG4gICAgICAgIC8+XG4gICAgICA8L0NvbnRyb2xQYW5lbD5cbiAgICAgIDxDb250cm9sUGFuZWwgaGVhZGVyPXsnVmlldyAtIENyZWF0ZSBMYXllcid9PlxuICAgICAgICA8Q3JlYXRlTGF5ZXIgc2RrPXtzZGt9IC8+XG4gICAgICA8L0NvbnRyb2xQYW5lbD5cbiAgICAgIDxDb250cm9sUGFuZWwgaGVhZGVyPXsnVmlldyAtIEFjdGl2YXRlJ30+XG4gICAgICAgIDxBY3RpdmF0ZVZpZXcgc2VsZWN0ZWRWaWV3PXtzZWxlY3RlZFZpZXd9IC8+XG4gICAgICA8L0NvbnRyb2xQYW5lbD5cbiAgICAgIDxDb250cm9sUGFuZWwgaGVhZGVyPXsnTGF5ZXIgLSBUb2dnbGUnfT5cbiAgICAgICAgPFRvZ2dsZUxheWVyIHNlbGVjdGVkTGF5ZXI9e3NlbGVjdGVkTGF5ZXJ9IC8+XG4gICAgICA8L0NvbnRyb2xQYW5lbD5cbiAgICAgIDxDb250cm9sUGFuZWwgaGVhZGVyPXsnVmlldy5sYXllcnMgY29udHJvbHMnfT5cbiAgICAgICAgPExheWVyQ29udHJvbHNcbiAgICAgICAgICBzZWxlY3RlZFZpZXc9e3NlbGVjdGVkVmlld31cbiAgICAgICAgICBzZWxlY3RlZExheWVyPXtzZWxlY3RlZExheWVyfVxuICAgICAgICAvPlxuICAgICAgPC9Db250cm9sUGFuZWw+XG4gICAgPC8+XG4gICk7XG59XG4iLCJpbXBvcnQgdHlwZSB7IE1wU2RrIH0gZnJvbSAnQHNkay90eXBlcyc7XG5pbXBvcnQgeyBDb250cm9sUGFuZWwgfSBmcm9tICcuL0NvbnRyb2xQYW5lbCc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAnLi9PYnNlcnZhYmxlJztcblxuaW50ZXJmYWNlIFByb3BzIHtcbiAgc2RrOiBNcFNkaztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIFZpZXdtb2RlKHByb3BzOiBQcm9wcyk6IEpTWC5FbGVtZW50IHtcbiAgcmV0dXJuIChcbiAgICA8PlxuICAgICAgPENvbnRyb2xQYW5lbCBoZWFkZXI9eydWaWV3bW9kZSAtIFRyYW5zaXRpb24nfT5cbiAgICAgICAgPE9ic2VydmFibGUgbmFtZT1cInZpZXdtb2RlIGN1cnJlbnRcIiBvYnNlcnZhYmxlPXtwcm9wcy5zZGsuTW9kZS5jdXJyZW50fSAvPlxuICAgICAgICA8T2JzZXJ2YWJsZSBuYW1lPVwidmlld21vZGUgdHJhbnNpdGlvblwiIG9ic2VydmFibGU9e3Byb3BzLnNkay5Nb2RlLnRyYW5zaXRpb259IC8+XG4gICAgICA8L0NvbnRyb2xQYW5lbD5cbiAgICA8Lz5cbiAgKTtcbn1cbiIsImltcG9ydCB7IGNyZWF0ZVJvb3QgfSBmcm9tICdyZWFjdC1kb20vY2xpZW50JztcbmltcG9ydCB7IEFzc2V0IH0gZnJvbSAnLi9Bc3NldCc7XG5pbXBvcnQgeyBDb252ZXJzaW9uIH0gZnJvbSAnLi9Db252ZXJzaW9uJztcbmltcG9ydCB7IEZsb29yIH0gZnJvbSAnLi9GbG9vcic7XG5pbXBvcnQgeyBMYWJlbCB9IGZyb20gJy4vTGFiZWwnO1xuaW1wb3J0IHsgTGluayB9IGZyb20gJy4vTGluayc7XG5pbXBvcnQgeyBNYXR0ZXJ0YWcgfSBmcm9tICcuL01hdHRlcnRhZyc7XG5pbXBvcnQgeyBNZWFzdXJlbWVudHMgfSBmcm9tICcuL01lYXN1cmVtZW50cyc7XG5pbXBvcnQgeyBNb2RlbCB9IGZyb20gJy4vTW9kZWwnO1xuaW1wb3J0IHsgUGx1Z2luIH0gZnJvbSAnLi9QbHVnaW4nO1xuaW1wb3J0IHsgUG9pbnRlciB9IGZyb20gJy4vUG9pbnRlcic7XG5pbXBvcnQgeyBSZW5kZXJlciB9IGZyb20gJy4vUmVuZGVyZXInO1xuaW1wb3J0IHsgUm9vbSB9IGZyb20gJy4vUm9vbSc7XG5pbXBvcnQgeyBTY2VuZSB9IGZyb20gJy4vU2NlbmUnO1xuaW1wb3J0IHsgU2Vuc29yIH0gZnJvbSAnLi9TZW5zb3InO1xuaW1wb3J0IHsgU2V0dGluZ3MgfSBmcm9tICcuL1NldHRpbmdzJztcbmltcG9ydCB7IFN3ZWVwIH0gZnJvbSAnLi9Td2VlcCc7XG5pbXBvcnQgeyBTd2VlcEdyYXBoIH0gZnJvbSAnLi9Td2VlcEdyYXBoJztcbmltcG9ydCB7IFRhZyB9IGZyb20gJy4vVGFnJztcbmltcG9ydCB7IFRvdXIgfSBmcm9tICcuL1RvdXInO1xuaW1wb3J0IHsgVmlldyB9IGZyb20gJy4vVmlldyc7XG5pbXBvcnQgeyBWaWV3bW9kZSB9IGZyb20gJy4vVmlld21vZGUnO1xuaW1wb3J0IHR5cGUgeyBCdW5kbGUsIEludGVybmFsTXBTZGsgfSBmcm9tICdAc2RrL3R5cGVzJztcbmltcG9ydCB7IEZyYWdtZW50LCB1c2VDYWxsYmFjaywgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XG5cbmV4cG9ydCBjb25zdCBzdGFydFJlYWN0ID0gZnVuY3Rpb24oc2RrOiBCdW5kbGUuTXBTZGspOiB2b2lkIHtcbiAgY29uc3QgY29udGFpbmVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3JlYWN0LXJvb3QnKTtcbiAgaWYgKCFjb250YWluZXIpIHJldHVybjtcblxuICBjcmVhdGVSb290KGNvbnRhaW5lcikucmVuZGVyKFxuICAgIDxkaXY+XG4gICAgICA8Q29udHJvbHMgc2RrPXtzZGt9IC8+XG4gICAgPC9kaXY+XG4gICk7XG59O1xuXG5mdW5jdGlvbiBDb250cm9scyh7IHNkayB9OiB7IHNkazogQnVuZGxlLk1wU2RrOyB9KSB7XG4gIGNvbnN0IFtzZWxlY3RlZEFzc2V0LCBzZWxlY3RBc3NldF0gPSB1c2VTdGF0ZSgnJyk7XG4gIGNvbnN0IFtzZWxlY3RlZExheWVyLCBzZWxlY3RMYXllcl0gPSB1c2VTdGF0ZTxCdW5kbGUuTXBTZGsuVmlldy5MYXllcj4oKTtcbiAgLy8gYSBtYXAgYmV0d2VlbiBhbiBhc3NldCBpZCBhbmQgdGhlIGFzc2V0IHNyY1xuICBjb25zdCBbYXNzZXRzLCBzZXRBc3NldHNdID0gdXNlU3RhdGU8UmVjb3JkPHN0cmluZywgc3RyaW5nPj4oe30pO1xuXG4gIGNvbnN0IGFkZEFzc2V0ID0gdXNlQ2FsbGJhY2soKGlkOiBzdHJpbmcsIHNyYzogc3RyaW5nKSA9PiB7XG4gICAgc2V0QXNzZXRzKChjdXJyZW50QXNzZXRzKSA9PiAoe1xuICAgICAgLi4uY3VycmVudEFzc2V0cyxcbiAgICAgIFtpZF06IHNyYyxcbiAgICB9KSk7XG4gIH0sIFtdKTtcblxuICByZXR1cm4gKFxuICAgIDxGcmFnbWVudD5cbiAgICAgIDxBc3NldCBzZGs9e3Nka30gYXNzZXRzPXthc3NldHN9IHNldEFzc2V0cz17c2V0QXNzZXRzfSBzZXRTZWxlY3RlZEFzc2V0PXtzZWxlY3RBc3NldH0gLz5cbiAgICAgIDxDb252ZXJzaW9uIHNkaz17c2RrfS8+XG4gICAgICA8Rmxvb3Igc2RrPXtzZGt9Lz5cbiAgICAgIDxMYWJlbCBzZGs9e3Nka30vPlxuICAgICAgPExpbmsgc2RrPXtzZGt9Lz5cbiAgICAgIDxNYXR0ZXJ0YWcgc2RrPXtzZGt9IHNlbGVjdGVkQXNzZXQ9e3NlbGVjdGVkQXNzZXR9IGFkZEFzc2V0PXthZGRBc3NldH0gLz5cbiAgICAgIDxNZWFzdXJlbWVudHMgc2RrPXtzZGt9Lz5cbiAgICAgIDxNb2RlbCBzZGs9e3Nka30vPlxuICAgICAgeyAnUGx1Z2luJyBpbiBzZGsgJiYgPFBsdWdpbiBzZGs9e3NkayBhcyBhbnkgYXMgSW50ZXJuYWxNcFNkay5NcFNka30vPiB9XG4gICAgICA8UG9pbnRlciBzZGs9e3Nka30gc2VsZWN0ZWRBc3NldD17c2VsZWN0ZWRBc3NldH0gYWRkQXNzZXQ9e2FkZEFzc2V0fSAvPlxuICAgICAgPFJlbmRlcmVyIHNkaz17c2RrfS8+XG4gICAgICA8Um9vbSBzZGs9e3Nka30vPlxuICAgICAgPFNjZW5lIHNkaz17c2RrfS8+XG4gICAgICA8U2Vuc29yIHNkaz17c2RrfS8+XG4gICAgICA8U2V0dGluZ3Mgc2RrPXtzZGt9Lz5cbiAgICAgIDxTd2VlcCBzZGs9e3Nka30vPlxuICAgICAgPFN3ZWVwR3JhcGggc2RrPXtzZGt9Lz5cbiAgICAgIHsgJ1RhZycgaW4gc2RrICYmIDxUYWcgc2RrPXtzZGt9IHNlbGVjdGVkQXNzZXQ9e3NlbGVjdGVkQXNzZXR9IHNlbGVjdGVkTGF5ZXI9e3NlbGVjdGVkTGF5ZXJ9IC8+IH1cbiAgICAgIDxUb3VyIHNkaz17c2RrfS8+XG4gICAgICB7ICdWaWV3JyBpbiBzZGsgJiYgPFZpZXcgc2RrPXtzZGt9IHNlbGVjdGVkTGF5ZXI9e3NlbGVjdGVkTGF5ZXJ9IHNlbGVjdExheWVyPXtzZWxlY3RMYXllcn0gLz4gfVxuICAgICAgPFZpZXdtb2RlIHNkaz17c2RrfS8+XG4gICAgPC9GcmFnbWVudD5cbiAgKTtcbn1cbiIsImV4cG9ydCB0eXBlIHsgRGltZW5zaW9ucyB9IGZyb20gJy4vRGltZW5zaW9ucyc7XG5pbXBvcnQgT3V0T2ZSYW5nZUV4Y2VwdGlvbiBmcm9tICdjd2YvZXhjZXB0aW9uL091dE9mUmFuZ2VFeGNlcHRpb24nO1xuXG5leHBvcnQgY29uc3QgZGVsYXkgPSBmdW5jdGlvbih0aW1lOiBudW1iZXIpOiBQcm9taXNlPHZvaWQ+IHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBzZXRUaW1lb3V0KHJlc29sdmUsIHRpbWUpO1xuICB9KTtcbn07XG5cbmV4cG9ydCBjb25zdCBjYW5jZWxsYWJsZURlbGF5ID0gKHRpbWU6IG51bWJlcik6IHsgY2FuY2VsOiAoKSA9PiB2b2lkLCBwcm9taXNlOiBQcm9taXNlPGFueT4gfSA9PiB7XG4gIGxldCB0aW1lb3V0SW5kZXggPSAtMTtcbiAgbGV0IHJlc29sdmVQcm9taXNlOiAoKSA9PiB2b2lkO1xuICBjb25zdCBwcm9taXNlID0gIG5ldyBQcm9taXNlPHZvaWQ+KChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICByZXNvbHZlUHJvbWlzZSA9IHJlc29sdmU7XG4gICAgdGltZW91dEluZGV4ID0gd2luZG93LnNldFRpbWVvdXQocmVzb2x2ZSwgdGltZSk7XG4gIH0pLnRoZW4oKCkgPT4ge1xuICAgIHRpbWVvdXRJbmRleCA9IC0xO1xuICB9KTtcbiAgcmV0dXJuIHtcbiAgICBwcm9taXNlLFxuICAgIGNhbmNlbDogKCkgPT4ge1xuICAgICAgaWYgKHRpbWVvdXRJbmRleCAhPT0gLTEpIHtcbiAgICAgICAgd2luZG93LmNsZWFyVGltZW91dCh0aW1lb3V0SW5kZXgpO1xuICAgICAgICByZXNvbHZlUHJvbWlzZSgpO1xuICAgICAgfVxuICAgIH0sXG4gIH07XG59O1xuXG5leHBvcnQgY29uc3Qgbm9ybWFsaXplVXJsID0gZnVuY3Rpb24gKHVybDogc3RyaW5nKTogc3RyaW5nIHtcbiAgcmV0dXJuIHVybC5yZXBsYWNlKCdodHRwczovLycsICdodHRwOi8vJyk7XG59O1xuXG5leHBvcnQgY29uc3QgZG9tYWluRnJvbVVybCA9IGZ1bmN0aW9uICh1cmw6IHN0cmluZyk6IHN0cmluZyB7XG4gIGNvbnN0IG1hdGNoID0gL14oW146XSo6XFwvXFwvKT8od3d3XFwuKT8oW14vXSspLy5leGVjKHVybCk7XG4gIGlmIChtYXRjaCkge1xuICAgIHJldHVybiBtYXRjaFszXTtcbiAgfVxuICByZXR1cm4gdXJsO1xufTtcblxuZXhwb3J0IGNvbnN0IGF2ZXJhZ2UgPSBmdW5jdGlvbihpdGVyYWJsZTogYW55W10sIGF0dHJpYnV0ZT86IHN0cmluZyk6IG51bWJlciB8IG51bGwge1xuXG4gIGlmIChpdGVyYWJsZS5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGxldCBzdW0gPSAwO1xuICBsZXQgY291bnQgPSAwO1xuXG4gIGZvciAobGV0IGl0ZW0gb2YgaXRlcmFibGUpIHtcbiAgICBpdGVtID0gYXR0cmlidXRlID8gaXRlbVthdHRyaWJ1dGVdIDogaXRlbTtcbiAgICBzdW0gKz0gaXRlbTtcbiAgICBjb3VudCsrO1xuICB9XG5cbiAgcmV0dXJuIHN1bSAvIGNvdW50O1xuXG59O1xuXG5leHBvcnQgY29uc3QgdW5pcXVlS2V5cyA9IGZ1bmN0aW9uIChhcnI6IGFueVtdKTogYW55W10ge1xuICBjb25zdCB1bmlxdWU6IGFueSA9IHt9O1xuICBmb3IgKGNvbnN0IGl0ZW0gb2YgYXJyKSB7XG4gICAgdW5pcXVlW2l0ZW1dID0gaXRlbTtcbiAgfVxuICByZXR1cm4gdW5pcXVlO1xufTtcblxuZXhwb3J0IGNvbnN0IGNvdW50VW5pcXVlID0gZnVuY3Rpb24gKGFycjogYW55W10pOiBudW1iZXIge1xuICByZXR1cm4gT2JqZWN0LmtleXModW5pcXVlS2V5cyhhcnIpKS5sZW5ndGg7XG59O1xuXG4vLyBDb25zaWRlcnMgYSBzdHJpbmcgd2l0aCBvbmx5IHNwYWNlcyBhbmQvb3IgbmV3bGluZXMgYXMgZW1wdHlcbmV4cG9ydCBjb25zdCBlbXB0eVN0cmluZ1ZhbHVlID0gZnVuY3Rpb24oc3RyOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgcmV0dXJuICEoc3RyLnJlcGxhY2UoL1xcbi9nLCAnJykudHJpbSgpLmxlbmd0aCk7XG59O1xuXG5leHBvcnQgY29uc3QgZXF1YWxMaXN0cyA9IGZ1bmN0aW9uKGE6IGFueVtdLCBiOiBhbnlbXSk6IGJvb2xlYW4ge1xuICBpZiAoYS5sZW5ndGggIT09IGIubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBhLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKGFbaV0gIT09IGJbaV0pIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59O1xuXG5leHBvcnQgY29uc3QgZXF1YWxTZXRzID0gZnVuY3Rpb248VCA9IGFueT4oYTogU2V0PFQ+LCBiOiBTZXQ8VD4pOiBib29sZWFuIHtcbiAgaWYgKGEuc2l6ZSAhPT0gYi5zaXplKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgZm9yIChjb25zdCB2YWwgb2YgYSkge1xuICAgIGlmICghYi5oYXModmFsKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufTtcblxuLyoqXG4gKiBQaWNrIHRoZSBpdGVtIGF0IHRoZSBudGggcGVyY2VudGlsZVxuICpcbiAqIEBwYXJhbSBsaXN0XG4gKiBAcGFyYW0gbiAwLTk5LCA1MCBiZWluZyBtZWRpYW5cbiAqIEBwYXJhbSBzb3J0ICh0cnVlKSBTZXQgdG8gZmFsc2UgdG8gc2tpcCB0aGUgc29ydGluZyxcbiAqICAgICAgICAgICAgICBpZiB5b3Uga25vdyB0aGUgbGlzdCBpcyBzb3J0ZWRcbiAqL1xuZXhwb3J0IGNvbnN0IHBlcmNlbnRpbGUgPSBmdW5jdGlvbiAoXG4gIGxpc3Q6IG51bWJlcltdLCBuOiBudW1iZXIsIHNvcnQ6IGJvb2xlYW4gPSB0cnVlKTogbnVtYmVyIHwgbnVsbCB7XG4gIGlmIChsaXN0Lmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIGlmIChzb3J0KSB7XG4gICAgbGlzdC5zb3J0KGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgIHJldHVybiBhIC0gYjsgLy8gT3RoZXJ3aXNlIGl0IGRvZXMgYW4gYXNjaWkgY29tcGFyaXNvbi4gWWVzLCByZWFsbHkhXG4gICAgfSk7XG4gIH1cbiAgY29uc3QgZmFjdG9yID0gbiAvIDEwMC4wO1xuICBjb25zdCBpID0gTWF0aC5mbG9vcihsaXN0Lmxlbmd0aCAqIGZhY3Rvcik7XG4gIHJldHVybiBsaXN0W2ldO1xufTtcblxuLy8gQXJyYXkuc29ydCBpcyBub3Qgc3RhYmxlLCB0aGlzIG9uZSBpc1xuZXhwb3J0IGNvbnN0IHN0YWJsZVNvcnQgPSBmdW5jdGlvbihsaXN0OiBhbnlbXSwgY21wOiAodmFsdWVBOiBhbnksIHZhbHVlQjogYW55KSA9PiBhbnkpOiBhbnlbXSB7XG4gIHJldHVybiBsaXN0Lm1hcChmdW5jdGlvbih2YWx1ZSwgaW5kZXgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdmFsdWUsXG4gICAgICBpbmRleCxcbiAgICB9O1xuICB9KS5zb3J0KGZ1bmN0aW9uKGEsIGIpIHtcbiAgICBjb25zdCByZXMgPSBjbXAoYS52YWx1ZSwgYi52YWx1ZSk7XG4gICAgaWYgKHJlcyAhPT0gMCkge1xuICAgICAgcmV0dXJuIHJlcztcbiAgICB9XG4gICAgLy8gVGhpcyBpcyB0aGUgc3RhYmxlIHBhcnQgLSBpZiB0aGUgY21wIGlzIDAsIHdlIHNvcnRcbiAgICAvLyBvbiB0aGUgaW5kZXgsIHdoaWNoIHdpbGwga2VlcCBpdCBpbiB0aGUgbm9ybWFsIG9yZGVyXG4gICAgcmV0dXJuIGEuaW5kZXggLSBiLmluZGV4O1xuICB9KS5tYXAoZnVuY3Rpb24oaXRlbSkge1xuICAgIHJldHVybiBpdGVtLnZhbHVlO1xuICB9KTtcbn07XG5cbmV4cG9ydCBjb25zdCBmb3JtYXREYXRlID0gZnVuY3Rpb24gKGRhdGU6IERhdGUpOiBzdHJpbmcge1xuICByZXR1cm4gW1xuICAgIGRhdGUuZ2V0RnVsbFllYXIoKSxcbiAgICBkYXRlLmdldE1vbnRoKCkgKyAxLCAvLyBaZXJvIGluZGV4ZWQgbW9udGhzXG4gICAgZGF0ZS5nZXREYXRlKCksXG4gIF0uam9pbignLScpO1xufTtcblxuLyoqIFJldHVybnMgdGhlIHNwZWNpZmljIGZvcm1hdCB1c2VkIGFzIHRoZSBkZWZhdWx0IG5hbWUgZm9yIHNuYXBzaG90cyAqL1xuZXhwb3J0IGNvbnN0IGZvcm1hdERhdGV0aW1lID0gZnVuY3Rpb24gKGRhdGV0aW1lOiBEYXRlKTogc3RyaW5nIHtcbiAgcmV0dXJuIFtcbiAgICBwYWRMZWZ0KGRhdGV0aW1lLmdldE1vbnRoKCkgKyAxKSwgJy4nLCAvLyBaZXJvIGluZGV4ZWQgbW9udGhzXG4gICAgcGFkTGVmdChkYXRldGltZS5nZXREYXRlKCkpLCAnLicsXG4gICAgZGF0ZXRpbWUuZ2V0RnVsbFllYXIoKSwgJ18nLFxuICAgIHBhZExlZnQoZGF0ZXRpbWUuZ2V0SG91cnMoKSksICcuJyxcbiAgICBwYWRMZWZ0KGRhdGV0aW1lLmdldE1pbnV0ZXMoKSksICcuJyxcbiAgICBwYWRMZWZ0KGRhdGV0aW1lLmdldFNlY29uZHMoKSksXG4gIF0uam9pbignJyk7XG59O1xuXG5leHBvcnQgY29uc3QgcGFkTGVmdCA9IGZ1bmN0aW9uKG51bWJlclRvUGFkOiBudW1iZXIsIGRpZ2l0czogbnVtYmVyID0gMiwgY2hyOiBzdHJpbmcgPSAnMCcsIHJhZGl4OiBudW1iZXIgPSAxMCk6IHN0cmluZyB7XG4gIGNvbnN0IHBhcnNlZE51bWJlciA9IG51bWJlclRvUGFkLnRvU3RyaW5nKHJhZGl4KTtcbiAgY29uc3QgbGVuID0gKGRpZ2l0cyAtIHBhcnNlZE51bWJlci5sZW5ndGgpICsgMTtcbiAgcmV0dXJuIGxlbiA+IDAgPyBuZXcgQXJyYXkobGVuKS5qb2luKGNocikgKyBwYXJzZWROdW1iZXIgOiBwYXJzZWROdW1iZXI7XG59O1xuXG5leHBvcnQgY29uc3QgcmFuZG9tU3RyaW5nID0gZnVuY3Rpb24gKGxlbmd0aDogbnVtYmVyKTogc3RyaW5nIHtcbiAgbGV0IHRleHQgPSAnJztcbiAgY29uc3QgYWxwaGFiZXQgPSAnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODknO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgdGV4dCArPSBhbHBoYWJldC5jaGFyQXQoIE1hdGguZmxvb3IoIE1hdGgucmFuZG9tKCkgKiBhbHBoYWJldC5sZW5ndGggKSk7XG4gIH1cbiAgcmV0dXJuIHRleHQ7XG59O1xuXG5leHBvcnQgY29uc3QgbnRoID0gZnVuY3Rpb24gKG46IG51bWJlcik6IHN0cmluZyB7XG4gIG4gPSBuICUgMTA7XG4gIHN3aXRjaCAobikge1xuICAgIGNhc2UgMTogcmV0dXJuIG4gKyAnc3QnO1xuICAgIGNhc2UgMjogcmV0dXJuIG4gKyAnbmQnO1xuICAgIGNhc2UgMzogcmV0dXJuIG4gKyAncmQnO1xuICB9XG4gIHJldHVybiBuICsgJ3RoJztcbn07XG5cbmV4cG9ydCBjb25zdCB3YWl0ID0gKHRpbWU6IG51bWJlcik6IFByb21pc2U8dm9pZD4gPT4ge1xuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIF9yZWplY3QpID0+IHtcbiAgICBzZXRUaW1lb3V0KHJlc29sdmUsIHRpbWUpO1xuICB9KTtcbn07XG5cbmV4cG9ydCBjb25zdCB1aW50OFRvQmFzZTY0ID0gKHVpbnQ4OiBVaW50OEFycmF5KTogc3RyaW5nID0+IHtcbiAgLy8gdGhpcyB2YWx1ZSBzZWVtcyB0byBoYXZlIGRlY2VudCBwZXJmb3JtYW5jZSB3aXRob3V0IGNhdXNpbmcgYW55IG92ZXJmbG93cyBpbiB0aGUgYFN0cmlnbi5mcm9tQ2hhckNvZGUuYXBwbHlgXG4gIGNvbnN0IGNodW5rU2l6ZSA9IDgxOTI7XG4gIGNvbnN0IGJhc2U2NGNodW5rczogc3RyaW5nW10gPSBbXTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCB1aW50OC5sZW5ndGg7IGkgKz0gY2h1bmtTaXplKSB7XG4gICAgYmFzZTY0Y2h1bmtzLnB1c2goU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShudWxsLCB1aW50OC5zdWJhcnJheShpLCBpICsgY2h1bmtTaXplKSkpO1xuICB9XG5cbiAgcmV0dXJuIGJ0b2EoYmFzZTY0Y2h1bmtzLmpvaW4oJycpKTtcbn07XG5cbmV4cG9ydCBjb25zdCBib29sZWFuTWFwRnJvbUxpc3QgPSAoZXhjbHVkZTogc3RyaW5nW10gPSBbXSk6IHsgW2tleTogc3RyaW5nXTogYm9vbGVhbiB9ID0+IHtcbiAgY29uc3QgZXhjbHVkZU1hcDogeyBba2V5OiBzdHJpbmddOiBib29sZWFuIH0gPSB7fTtcbiAgZm9yIChjb25zdCBzd2VlcElkIG9mIGV4Y2x1ZGUpIHtcbiAgICBleGNsdWRlTWFwW3N3ZWVwSWRdID0gdHJ1ZTtcbiAgfVxuICByZXR1cm4gZXhjbHVkZU1hcDtcbn07XG5cbi8qKlxuICogV3JhcHMgT2JqZWN0Lmhhc093blByb3BlcnR5IHRvIHJlcXVpcmUgdGhlIHByb3BlcnR5IHRvIGJlIG9uIFQgaW4gdGhlIGZpcnN0IHBsYWNlXG4gKiBAcGFyYW0ge1R9IG9ialxuICogQHBhcmFtIHtrZXlvZiBUfSBrZXlcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5leHBvcnQgZnVuY3Rpb24gaGFzT3duUHJvcGVydHk8VCBleHRlbmRzIFJlY29yZDxzdHJpbmcsIGFueT4+KG9iajogVCwga2V5OiBrZXlvZiBUKTogYm9vbGVhbiB7XG4gIHJldHVybiBvYmouaGFzT3duUHJvcGVydHkoa2V5KTtcbn1cblxuZXhwb3J0IGNvbnN0IHRydW5jYXRlU3RyaW5nID0gKHN0cjogc3RyaW5nLCBtYXhMZW50aDogbnVtYmVyLCBwb3N0Zml4OiBzdHJpbmcgPSAnLi4uJyk6IHN0cmluZyA9PiB7XG4gIGlmIChzdHIubGVuZ3RoIDw9IG1heExlbnRoKSB7XG4gICAgcmV0dXJuIHN0cjtcbiAgfVxuICByZXR1cm4gYCR7c3RyLnN1YnN0cigwLCBtYXhMZW50aCl9JHtwb3N0Zml4fWA7XG59O1xuXG4vKipcbiAqIFN3YXAgdHdvIGJpdHMgd2l0aGluIGEgMzItYml0IG51bWJlciAoZHVlIHRvIEpTIGxpbWl0YXRpb25zKVxuICogVGhlIGlucHV0IGFuZCBvdXRwdXQgc2hvdWxkIGJlIHRyZWF0ZWQgYXMgdW5zaWduZWQgdmFsdWVzXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsdWVcbiAqIEBwYXJhbSB7bnVtYmVyfSBiaXQxXG4gKiBAcGFyYW0ge251bWJlcn0gYml0MlxuICogQHJldHVybnMge251bWJlcn0gVGhlIHVuc2lnbmVkIHJlc3VsdCBhZnRlciBzd2FwcGluZyBgYml0MWAgYW5kIGBiaXQyYCBpbiBgdmFsdWVgXG4gKi9cbmV4cG9ydCBjb25zdCBzd2FwQml0cyA9ICh2YWx1ZTogbnVtYmVyLCBiaXQxOiBudW1iZXIsIGJpdDI6IG51bWJlcik6IG51bWJlciA9PiB7XG4gIGNvbnN0IHZhbHVlSW5SYW5nZSA9IE1hdGguYWJzKHZhbHVlKSA8ICgweGZmZmZmZmZmID4+PiAwKTtcbiAgY29uc3QgYml0MUluUmFuZ2UgPSBiaXQxIDwgMzI7XG4gIGNvbnN0IGJpdDJJblJhbmdlID0gYml0MiA8IDMyO1xuICBpZiAoIXZhbHVlSW5SYW5nZSB8fCAhYml0MUluUmFuZ2UgfHwgIWJpdDJJblJhbmdlKSB7XG4gICAgdGhyb3cgbmV3IE91dE9mUmFuZ2VFeGNlcHRpb24oJ2FyZ3VtZW50IG91dCBvZiByYW5nZScpO1xuICB9XG4gIGNvbnN0IHN3YXBwZWRCaXRzID0gKHZhbHVlID4+PiBiaXQxIF4gdmFsdWUgPj4+IGJpdDIpICYgMTtcbiAgdmFsdWUgPSB2YWx1ZSBeIChzd2FwcGVkQml0cyA8PCBiaXQxIHwgc3dhcHBlZEJpdHMgPDwgYml0Mik7XG5cbiAgcmV0dXJuIHZhbHVlID4+PiAwO1xufTtcblxuZXhwb3J0IGNvbnN0IGhhc2ggPSAoKCkgPT4ge1xuICBjb25zdCBtYXA6IERpY3Q8bnVtYmVyPiA9IHt9O1xuICByZXR1cm4gKGZyb206IHN0cmluZyk6IG51bWJlciA9PiB7XG4gICAgaWYgKG1hcFtmcm9tXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBjb25zdCBoID0gZnJvbS5zcGxpdCgnJykucmVkdWNlKChhLCBiKSA9PiB7IGEgPSAoKGEgPDwgNSkgLSBhKSArIGIuY2hhckNvZGVBdCgwKTsgcmV0dXJuIGEgJiBhOyB9LCAwKTtcbiAgICAgIG1hcFtmcm9tXSA9IGg7XG4gICAgfVxuICAgIHJldHVybiBtYXBbZnJvbV07XG4gIH07XG59KSgpO1xuIiwiaW1wb3J0IHsgb25Db25uZWN0IH0gZnJvbSAnLi9jb250cm9scyc7XG5pbXBvcnQgeyBzdGFydFJlYWN0IH0gZnJvbSAnLi9jb21wb25lbnRzL1JlYWN0Um9vdCc7XG5pbXBvcnQgJy4vc3R5bGUuY3NzJztcblxuaW1wb3J0IHsgbG9hZFNka0Jvb3RzdHJhcCwgbG9hZFNob3djYXNlLCBsb2FkQnVuZGxlU2hvd2Nhc2UgfSBmcm9tICcuL3V0aWxzJztcbmltcG9ydCBjb250cm9scyBmcm9tICcuL2NvbnRyb2xzLmh0bWwnO1xuXG5pbXBvcnQgdHlwZSB7IEJ1bmRsZSB9IGZyb20gJ0BzZGsvdHlwZXMnO1xuaW1wb3J0IHsgZGVsYXkgfSBmcm9tICdjd2YvdXRpbCc7XG5cbnR5cGUgU2hvd2Nhc2VFbWJlZDNXaW5kb3cgPSBXaW5kb3cgJiB0eXBlb2YgZ2xvYmFsVGhpcyAmIHtcbiAgTVBfU0RLOiBNUF9TREs7XG59XG5pbnRlcmZhY2UgTVBfU0RLIHtcbiAgY29ubmVjdCh0YXJnZXQ6IEhUTUxJRnJhbWVFbGVtZW50LCBvcHRpb25zPzogUGFydGlhbDxCdW5kbGUuQ29ubmVjdE9wdGlvbnM+KTogUHJvbWlzZTxCdW5kbGUuTXBTZGs+O1xufVxuXG4vLyBhZGQgdGhlIGNvbnRyb2xzIHRvIHRoZSBwYWdlXG5jb25zdCBjb250cm9sUm9vdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjb250cm9sLXJvb3QnKSBhcyBIVE1MRWxlbWVudDtcbmNvbnRyb2xSb290LmlubmVySFRNTCA9IGNvbnRyb2xzO1xuXG5jb25zdCBzaG93Y2FzZUVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc2hvd2Nhc2UnKSBhcyBIVE1MSUZyYW1lRWxlbWVudDtcblxuY29uc3QgcGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcyh3aW5kb3cubG9jYXRpb24uc2VhcmNoKTtcbmNvbnN0IGNvbmZpZyA9IHtcbiAgaG9zdDogcGFyYW1zLmdldCgnaG9zdCcpIHx8IHBhcmFtcy5nZXQoJ2FwaUhvc3QnKSB8fCB3aW5kb3cubG9jYXRpb24ub3JpZ2luLFxuICBzZGtLZXk6IHBhcmFtcy5nZXQoJ3Nka0tleScpIHx8IHBhcmFtcy5nZXQoJ2FwcGxpY2F0aW9uS2V5JykgfHwgJ3UybXc5dzFxZTFzYXNyMHNiaXVjcmdjZWInLFxuICBidW5kbGVWZXJzaW9uOiBwYXJhbXMuZ2V0KCdidW5kbGVWZXJzaW9uJykgfHwgJycsXG4gIHVzZURpcmVjdE1lc3NhZ2VzOiAoISFwYXJhbXMuZ2V0KCdidW5kbGVWZXJzaW9uJykgfHwgISFwYXJhbXMuZ2V0KCdkbScpKSAmJiBwYXJhbXMuZ2V0KCdkbScpICE9PSAnMCcsXG4gIHNka1ZlcnNpb246IHBhcmFtcy5nZXQoJ3Nka1ZlcnNpb24nKSB8fCAnMi4wLjEtMC1nNjRlN2U4OCcsXG4gIHdvcmtzaG9wOiBwYXJhbXMuZ2V0KCd3b3Jrc2hvcCcpIHx8ICcnLFxuICBjb25uZWN0aW9uRGVsYXk6IHBhcnNlSW50KHBhcmFtcy5nZXQoJ2RlbGF5JykgfHwgJzAnLCAxMCksXG4gIHByb3ZpZGVyOiBwYXJhbXMuZ2V0KCdwcm92aWRlcicpIHx8IHVuZGVmaW5lZCxcbn07XG5cbi8qKlxuICogY29ubmVjdCB0aGUgc2RrIHVzaW5nIHRoZSBjb3JyZWN0IHdheSBkZXBlbmRpbmcgb24gaWYgd2UncmUgY29ubmVjdGluZyBvdmVyIHBvc3RtZXNzYWdlIG9yIGRpcmVjdGx5XG4gKlxuICogaWYgd2UgZmFpbCBjb25uZWN0aW5nIHdpdGhvdXQgYSBrZXksIHdlIHRyeSBjb25uZWN0aW5nIHdpdGggaXRcbiAqIGlmICZzZGtWZXJzaW9uPWxvY2FsIGlzIHByb3ZpZGVkLCBhIGxvY2FsIHZlcnNpb24gb2Ygc2RrLmpzIHdpbGwgYmUgdXNlZCAocmVhbGx5IG9ubHkgdXNlZnVsIGZvciBsb2NhbCBkZWJ1ZylcbiAqL1xuYXN5bmMgZnVuY3Rpb24gY29ubmVjdFNkaygpOiBQcm9taXNlPEJ1bmRsZS5NcFNkaz4ge1xuICBpZiAoY29uZmlnLmNvbm5lY3Rpb25EZWxheSA+IDApIHtcbiAgICBhd2FpdCBkZWxheShjb25maWcuY29ubmVjdGlvbkRlbGF5KTtcbiAgfVxuICBpZiAoY29uZmlnLnVzZURpcmVjdE1lc3NhZ2VzKSB7XG4gICAgY29uc3Qgc2hvd2Nhc2VXaW5kb3cgPSBzaG93Y2FzZUVsZW1lbnQuY29udGVudFdpbmRvdyBhcyBCdW5kbGUuU2hvd2Nhc2VCdW5kbGVXaW5kb3c7XG4gICAgY29uc3QgYnVuZGxlQ29ubmVjdG9yID0gc2hvd2Nhc2VXaW5kb3cuTVBfU0RLO1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gYXdhaXQgYnVuZGxlQ29ubmVjdG9yLmNvbm5lY3Qoc2hvd2Nhc2VXaW5kb3csIHtcbiAgICAgICAgcHJvdmlkZXI6IGNvbmZpZy5wcm92aWRlcixcbiAgICAgIH0pO1xuICAgIH0gY2F0Y2gge1xuICAgICAgcmV0dXJuIGF3YWl0IChidW5kbGVDb25uZWN0b3IgYXMgYW55KS5jb25uZWN0KHNob3djYXNlV2luZG93LCBjb25maWcuc2RrS2V5KTtcbiAgICB9XG4gIH1cblxuICBpZiAoY29uZmlnLnNka1ZlcnNpb24gPT09ICdsb2NhbCcpIHtcbiAgICBjb25zdCB7IGNvbm5lY3Q6IGVtYmVkQ29ubmVjdCB9ID0gYXdhaXQgaW1wb3J0KCdAc2RrL2Jvb3RzdHJhcCcpO1xuICAgIHJldHVybiBhd2FpdCBlbWJlZENvbm5lY3Qoc2hvd2Nhc2VFbGVtZW50LCB7XG4gICAgICBwcm92aWRlcjogY29uZmlnLnByb3ZpZGVyLFxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gYXdhaXQgKHdpbmRvdyBhcyBTaG93Y2FzZUVtYmVkM1dpbmRvdykuTVBfU0RLLmNvbm5lY3Qoc2hvd2Nhc2VFbGVtZW50LCB7XG4gICAgICAgIHByb3ZpZGVyOiBjb25maWcucHJvdmlkZXIsXG4gICAgICB9KTtcbiAgICB9IGNhdGNoIHtcbiAgICAgIHJldHVybiBhd2FpdCAod2luZG93IGFzIGFueSkuTVBfU0RLLmNvbm5lY3Qoc2hvd2Nhc2VFbGVtZW50LCBjb25maWcuc2RrS2V5LCAnJyk7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogY29ubmVjdCB0aGUgc2RrXG4gKiBpZiAmZG09MSwgZGlyZWN0IG1lc3NhZ2luZyB3aWxsIGJlIHVzZWQuIERpcmVjdCBtZXNzYWdpbmcgaXMgc3ViamVjdCB0byBYLWlmcmFtZSBsaW1pdGF0aW9ucy5cbiAqL1xuYXN5bmMgZnVuY3Rpb24gY29ubmVjdCgpIHtcbiAgdHJ5IHtcbiAgICAvLyBpZiBub3QgdXNpbmcgZGlyZWN0IG1lc3NhZ2VzLCB3ZSBsb2FkIHRoZSBib290c3RyYXAgc2NyaXB0IG9uIHRoZSBwYWdlXG4gICAgaWYgKCFjb25maWcudXNlRGlyZWN0TWVzc2FnZXMgJiYgY29uZmlnLnNka1ZlcnNpb24gIT09ICdsb2NhbCcpIHtcbiAgICAgIGF3YWl0IGxvYWRTZGtCb290c3RyYXAoY29uZmlnLnNka1ZlcnNpb24pO1xuICAgIH1cbiAgICAvLyBjYXN0IGFzIGJ1bmRsZSdzIE1wU2RrIHR5cGUsIHNpbmNlIHdlJ3JlIHN1cHBvcnRpbmcgdGhlIGVtYmVkIGFuZCB0aGUgYnVuZGxlXG4gICAgY29uc3Qgc2hvd2Nhc2VTZGsgPSBhd2FpdCBjb25uZWN0U2RrKCk7XG4gICAgKHdpbmRvdyBhcyBhbnkpLlNES19JTlNUQU5DRSA9IHNob3djYXNlU2RrO1xuICAgIG9uQ29ubmVjdChzaG93Y2FzZVNkaywgc2hvd2Nhc2VFbGVtZW50KTtcbiAgICBzdGFydFJlYWN0KHNob3djYXNlU2RrKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcbiAgfVxuICAod2luZG93IGFzIGFueSkuVEhSRUUgPSAoc2hvd2Nhc2VFbGVtZW50LmNvbnRlbnRXaW5kb3cgYXMgYW55KT8uVEhSRUU7XG59XG5cbi8qKlxuICogcG9wdWxhdGUgdGhlIGlmcmFtZSB3aXRoIG5vcm1hbCBTaG93Y2FzZSAoYGJ1bmRsZVZlcnNpb25gIHVuc3BlY2lmaWVkKVxuICogb3IgdGhlIGJ1bmRsZSBTREsgdmVyc2lvbiBvZiBTaG93Y2FzZSAoYGJ1bmRsZVZlcnNpb25gIHdhcyBwcm92aWRlZClcbiAqL1xuKGFzeW5jIGZ1bmN0aW9uIGxvYWQoKSB7XG4gIGlmICghcGFyYW1zLmdldCgnbScpICYmICFwYXJhbXMuZ2V0KCdtb2RlbCcpKSB7XG4gICAgY29uc3QgZXJyb3JNZXNzYWdlID0gJ05vIG1vZGVsIHNwZWNpZmllZC4gU3BlY2lmeSBhIG1vZGVsIHVzaW5nID9tPVttb2RlbFNpZF0nO1xuICAgIGNvbnN0IHN0YXR1c0JhciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzdGF0dXMnKSBhcyBIVE1MRWxlbWVudDtcbiAgICBzdGF0dXNCYXIuY2xhc3NMaXN0LmFkZCgnZXJyb3InKTtcbiAgICBzdGF0dXNCYXIuaW5uZXJUZXh0ID0gZXJyb3JNZXNzYWdlO1xuXG4gICAgdGhyb3cgRXJyb3IoZXJyb3JNZXNzYWdlKTtcbiAgfVxuICBjb25maWcuYnVuZGxlVmVyc2lvbiA/XG4gICAgbG9hZEJ1bmRsZVNob3djYXNlKHNob3djYXNlRWxlbWVudCwgY29uZmlnLCBjb25uZWN0KSA6XG4gICAgbG9hZFNob3djYXNlKHNob3djYXNlRWxlbWVudCwgY29uZmlnLCBjb25uZWN0KTtcbn0pKCk7XG4iLCJleHBvcnQgZnVuY3Rpb24gbG9hZFNob3djYXNlKHNob3djYXNlRWxlbWVudCwgY29uZmlnLCBvbkxvYWQpIHtcbiAgc2hvd2Nhc2VFbGVtZW50Lm9ubG9hZCA9IG9uTG9hZDtcbiAgY29uc3QgcGxheWVyUGF0aCA9IGNvbmZpZy53b3Jrc2hvcCA/ICcvd29yay8nIDogJy9zaG93Lyc7XG4gIGNvbnN0IHBhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMod2luZG93LmxvY2F0aW9uLnNlYXJjaCk7XG4gIHBhcmFtcy5zZXQoJ2FwcGxpY2F0aW9uS2V5JywgY29uZmlnLnNka0tleSk7XG4gIHNob3djYXNlRWxlbWVudC5zcmMgPSBjb25maWcuaG9zdCArIHBsYXllclBhdGggKyAnPycgKyBkZWNvZGVVUklDb21wb25lbnQocGFyYW1zLnRvU3RyaW5nKCkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbG9hZEJ1bmRsZVNob3djYXNlKHNob3djYXNlRWxlbWVudCwgY29uZmlnLCBvbkxvYWQpIHtcbiAgY29uc3QgYnVuZGxlVmVyc2lvbk9yUGF0aCA9IGNvbmZpZy5idW5kbGVWZXJzaW9uO1xuICBjb25zdCBpc0Z1bGxQYXRoID0gYnVuZGxlVmVyc2lvbk9yUGF0aC5zdGFydHNXaXRoKCdodHRwJyk7XG4gIHNob3djYXNlRWxlbWVudC5vbmxvYWQgPSBvbkxvYWQ7XG4gIGxldCBzcmMgPSAnJztcbiAgLy8gc2V0IHRoZSBpZnJhbWUgc3JjIHRvIHRoZSBwYXRoIHByb3ZpZGVkIG9yIGRlZmF1bHQgdG8gc3RhdGljLm1hdHRlcnBvcnQuY29tXG4gIGlmIChpc0Z1bGxQYXRoKSB7XG4gICAgc3JjICs9IGJ1bmRsZVZlcnNpb25PclBhdGggKycvc2hvd2Nhc2UuaHRtbCc7XG4gIH0gZWxzZSB7XG4gICAgc3JjICs9ICdodHRwczovL3N0YXRpYy5tYXR0ZXJwb3J0LmNvbS9zaG93Y2FzZS1zZGsvYnVuZGxlLycgKyBidW5kbGVWZXJzaW9uT3JQYXRoICsgJy9zaG93Y2FzZS5odG1sJztcbiAgfVxuICAvLyBhcHBlbmQgdGhlIG90aGVyIHVybCBwYXJhbXMgYW5kIG1ha2Ugc3VyZSBgYXBpSG9zdGAgaXMgZGVmaW5lZCBzbyB0aGF0IHRoZSBidW5kbGUgcHJvcGVybHkgY29ubmVjdHNcbiAgY29uc3QgcGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcyh3aW5kb3cubG9jYXRpb24uc2VhcmNoKTtcbiAgcGFyYW1zLnNldCgnYXBwbGljYXRpb25LZXknLCBjb25maWcuc2RrS2V5KTtcbiAgcGFyYW1zLnNldCgnYXBpSG9zdCcsIGNvbmZpZy5ob3N0KTtcbiAgc2hvd2Nhc2VFbGVtZW50LnNyYyA9IHNyYyArICc/JyArIGRlY29kZVVSSUNvbXBvbmVudChwYXJhbXMpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbG9hZFNka0Jvb3RzdHJhcChib290c3RyYXBWZXJzaW9uKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzKSA9PiB7XG4gICAgY29uc29sZS5sb2coJ0xvYWRpbmcgU0RLIGJvb3RzdHJhcCB2ZXJzaW9uOicsIGJvb3RzdHJhcFZlcnNpb24pO1xuICAgIHZhciBzY3JpcHRMb2NhdGlvbiA9ICdodHRwczovL3N0YXRpYy5tYXR0ZXJwb3J0LmNvbS9zaG93Y2FzZS1zZGsvJyArIGJvb3RzdHJhcFZlcnNpb24gKyAnL3Nkay5qcyc7XG4gICAgdmFyIHNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xuICAgIHNjcmlwdC50eXBlID0gJ3RleHQvamF2YXNjcmlwdCc7XG4gICAgc2NyaXB0LnNyYyA9IHNjcmlwdExvY2F0aW9uO1xuICAgIHNjcmlwdC5vbmxvYWQgPSByZXM7XG4gICAgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChzY3JpcHQpO1xuICB9KTtcbn1cbiJdLCJuYW1lcyI6WyJpblByb2dyZXNzIiwiZGF0YVdlYnBhY2tQcmVmaXgiLCJhYSIsImJhIiwicCIsImEiLCJiIiwiYyIsImFyZ3VtZW50cyIsImxlbmd0aCIsImVuY29kZVVSSUNvbXBvbmVudCIsImNhIiwiU2V0IiwiZGEiLCJlYSIsImZhIiwiYWRkIiwiaGEiLCJ3aW5kb3ciLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJpYSIsIk9iamVjdCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiamEiLCJrYSIsImxhIiwicSIsImQiLCJlIiwiZiIsImciLCJ0aGlzIiwiYWNjZXB0c0Jvb2xlYW5zIiwiYXR0cmlidXRlTmFtZSIsImF0dHJpYnV0ZU5hbWVzcGFjZSIsIm11c3RVc2VQcm9wZXJ0eSIsInByb3BlcnR5TmFtZSIsInR5cGUiLCJzYW5pdGl6ZVVSTCIsInJlbW92ZUVtcHR5U3RyaW5nIiwieiIsInNwbGl0IiwiZm9yRWFjaCIsInRvTG93ZXJDYXNlIiwicGEiLCJxYSIsInRvVXBwZXJDYXNlIiwicmEiLCJzbGljZSIsIm5hIiwiaXNOYU4iLCJvYSIsImNhbGwiLCJ0ZXN0IiwibWEiLCJyZW1vdmVBdHRyaWJ1dGUiLCJzZXRBdHRyaWJ1dGUiLCJzZXRBdHRyaWJ1dGVOUyIsInJlcGxhY2UiLCJ4bGlua0hyZWYiLCJzYSIsIl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEIiwidGEiLCJTeW1ib2wiLCJmb3IiLCJ1YSIsInZhIiwid2EiLCJ4YSIsInlhIiwiQWEiLCJCYSIsIkNhIiwiRGEiLCJFYSIsIkZhIiwiR2EiLCJIYSIsIml0ZXJhdG9yIiwiSWEiLCJKYSIsIkEiLCJhc3NpZ24iLCJLYSIsIkVycm9yIiwic3RhY2siLCJ0cmltIiwibWF0Y2giLCJMYSIsIk1hIiwicHJlcGFyZVN0YWNrVHJhY2UiLCJkZWZpbmVQcm9wZXJ0eSIsInNldCIsIlJlZmxlY3QiLCJjb25zdHJ1Y3QiLCJsIiwiaCIsImsiLCJkaXNwbGF5TmFtZSIsImluY2x1ZGVzIiwibmFtZSIsIk5hIiwidGFnIiwicmVuZGVyIiwiT2EiLCIkJHR5cGVvZiIsIl9jb250ZXh0IiwiX3BheWxvYWQiLCJfaW5pdCIsIlBhIiwiUWEiLCJSYSIsIm5vZGVOYW1lIiwiVGEiLCJfdmFsdWVUcmFja2VyIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiY29uc3RydWN0b3IiLCJnZXQiLCJjb25maWd1cmFibGUiLCJlbnVtZXJhYmxlIiwiZ2V0VmFsdWUiLCJzZXRWYWx1ZSIsInN0b3BUcmFja2luZyIsIlNhIiwiVWEiLCJjaGVja2VkIiwidmFsdWUiLCJWYSIsImFjdGl2ZUVsZW1lbnQiLCJib2R5IiwiV2EiLCJkZWZhdWx0Q2hlY2tlZCIsImRlZmF1bHRWYWx1ZSIsIl93cmFwcGVyU3RhdGUiLCJpbml0aWFsQ2hlY2tlZCIsIlhhIiwiaW5pdGlhbFZhbHVlIiwiY29udHJvbGxlZCIsIllhIiwiWmEiLCIkYSIsImFiIiwib3duZXJEb2N1bWVudCIsImJiIiwiQXJyYXkiLCJpc0FycmF5IiwiY2IiLCJvcHRpb25zIiwic2VsZWN0ZWQiLCJkZWZhdWx0U2VsZWN0ZWQiLCJkaXNhYmxlZCIsImRiIiwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwiLCJjaGlsZHJlbiIsImViIiwiZmIiLCJnYiIsInRleHRDb250ZW50IiwiaGIiLCJpYiIsImpiIiwia2IiLCJuYW1lc3BhY2VVUkkiLCJpbm5lckhUTUwiLCJ2YWx1ZU9mIiwidG9TdHJpbmciLCJmaXJzdENoaWxkIiwicmVtb3ZlQ2hpbGQiLCJhcHBlbmRDaGlsZCIsIk1TQXBwIiwiZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24iLCJsYiIsImxhc3RDaGlsZCIsIm5vZGVUeXBlIiwibm9kZVZhbHVlIiwibWIiLCJhbmltYXRpb25JdGVyYXRpb25Db3VudCIsImFzcGVjdFJhdGlvIiwiYm9yZGVySW1hZ2VPdXRzZXQiLCJib3JkZXJJbWFnZVNsaWNlIiwiYm9yZGVySW1hZ2VXaWR0aCIsImJveEZsZXgiLCJib3hGbGV4R3JvdXAiLCJib3hPcmRpbmFsR3JvdXAiLCJjb2x1bW5Db3VudCIsImNvbHVtbnMiLCJmbGV4IiwiZmxleEdyb3ciLCJmbGV4UG9zaXRpdmUiLCJmbGV4U2hyaW5rIiwiZmxleE5lZ2F0aXZlIiwiZmxleE9yZGVyIiwiZ3JpZEFyZWEiLCJncmlkUm93IiwiZ3JpZFJvd0VuZCIsImdyaWRSb3dTcGFuIiwiZ3JpZFJvd1N0YXJ0IiwiZ3JpZENvbHVtbiIsImdyaWRDb2x1bW5FbmQiLCJncmlkQ29sdW1uU3BhbiIsImdyaWRDb2x1bW5TdGFydCIsImZvbnRXZWlnaHQiLCJsaW5lQ2xhbXAiLCJsaW5lSGVpZ2h0Iiwib3BhY2l0eSIsIm9yZGVyIiwib3JwaGFucyIsInRhYlNpemUiLCJ3aWRvd3MiLCJ6SW5kZXgiLCJ6b29tIiwiZmlsbE9wYWNpdHkiLCJmbG9vZE9wYWNpdHkiLCJzdG9wT3BhY2l0eSIsInN0cm9rZURhc2hhcnJheSIsInN0cm9rZURhc2hvZmZzZXQiLCJzdHJva2VNaXRlcmxpbWl0Iiwic3Ryb2tlT3BhY2l0eSIsInN0cm9rZVdpZHRoIiwibmIiLCJvYiIsInBiIiwic3R5bGUiLCJpbmRleE9mIiwic2V0UHJvcGVydHkiLCJrZXlzIiwiY2hhckF0Iiwic3Vic3RyaW5nIiwicWIiLCJtZW51aXRlbSIsImFyZWEiLCJiYXNlIiwiYnIiLCJjb2wiLCJlbWJlZCIsImhyIiwiaW1nIiwiaW5wdXQiLCJrZXlnZW4iLCJsaW5rIiwibWV0YSIsInBhcmFtIiwic291cmNlIiwidHJhY2siLCJ3YnIiLCJyYiIsInNiIiwiaXMiLCJ0YiIsInViIiwidGFyZ2V0Iiwic3JjRWxlbWVudCIsImNvcnJlc3BvbmRpbmdVc2VFbGVtZW50IiwicGFyZW50Tm9kZSIsInZiIiwid2IiLCJ4YiIsInliIiwiemIiLCJzdGF0ZU5vZGUiLCJBYiIsIkJiIiwicHVzaCIsIkNiIiwiRGIiLCJFYiIsIkZiIiwiR2IiLCJIYiIsIkliIiwiSmIiLCJhZGRFdmVudExpc3RlbmVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsIktiIiwiYXBwbHkiLCJtIiwib25FcnJvciIsIkxiIiwiTWIiLCJOYiIsIk9iIiwiUGIiLCJRYiIsIlNiIiwiYWx0ZXJuYXRlIiwicmV0dXJuIiwiZmxhZ3MiLCJUYiIsIm1lbW9pemVkU3RhdGUiLCJkZWh5ZHJhdGVkIiwiVWIiLCJXYiIsImNoaWxkIiwic2libGluZyIsImN1cnJlbnQiLCJWYiIsIlhiIiwiWWIiLCJ1bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrIiwiWmIiLCJ1bnN0YWJsZV9jYW5jZWxDYWxsYmFjayIsIiRiIiwidW5zdGFibGVfc2hvdWxkWWllbGQiLCJhYyIsInVuc3RhYmxlX3JlcXVlc3RQYWludCIsIkQiLCJ1bnN0YWJsZV9ub3ciLCJiYyIsInVuc3RhYmxlX2dldEN1cnJlbnRQcmlvcml0eUxldmVsIiwiY2MiLCJ1bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eSIsImRjIiwidW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHkiLCJlYyIsInVuc3RhYmxlX05vcm1hbFByaW9yaXR5IiwiZmMiLCJ1bnN0YWJsZV9Mb3dQcmlvcml0eSIsImdjIiwidW5zdGFibGVfSWRsZVByaW9yaXR5IiwiaGMiLCJpYyIsImxjIiwiTWF0aCIsImNsejMyIiwibWMiLCJuYyIsImxvZyIsIkxOMiIsIm9jIiwicGMiLCJxYyIsInJjIiwicGVuZGluZ0xhbmVzIiwic3VzcGVuZGVkTGFuZXMiLCJwaW5nZWRMYW5lcyIsImVudGFuZ2xlZExhbmVzIiwiZW50YW5nbGVtZW50cyIsInNjIiwidWMiLCJ2YyIsIndjIiwiZXZlbnRUaW1lcyIsInljIiwiRSIsInpjIiwiQWMiLCJCYyIsIkNjIiwiRGMiLCJFYyIsIkZjIiwiR2MiLCJIYyIsIkljIiwiSmMiLCJLYyIsIk1hcCIsIkxjIiwiTWMiLCJOYyIsIk9jIiwiZGVsZXRlIiwicG9pbnRlcklkIiwiUGMiLCJuYXRpdmVFdmVudCIsImJsb2NrZWRPbiIsImRvbUV2ZW50TmFtZSIsImV2ZW50U3lzdGVtRmxhZ3MiLCJ0YXJnZXRDb250YWluZXJzIiwiUmMiLCJTYyIsInByaW9yaXR5IiwiaXNEZWh5ZHJhdGVkIiwiY29udGFpbmVySW5mbyIsIlRjIiwiVWMiLCJkaXNwYXRjaEV2ZW50Iiwic2hpZnQiLCJWYyIsIldjIiwiWGMiLCJZYyIsIlpjIiwiUmVhY3RDdXJyZW50QmF0Y2hDb25maWciLCIkYyIsInRyYW5zaXRpb24iLCJhZCIsImJkIiwiY2QiLCJkZCIsIlFjIiwic3RvcFByb3BhZ2F0aW9uIiwiZWQiLCJmZCIsImdkIiwiaGQiLCJpZCIsImpkIiwia2V5Q29kZSIsImNoYXJDb2RlIiwia2QiLCJsZCIsIm1kIiwiX3JlYWN0TmFtZSIsIl90YXJnZXRJbnN0IiwiY3VycmVudFRhcmdldCIsImlzRGVmYXVsdFByZXZlbnRlZCIsImRlZmF1bHRQcmV2ZW50ZWQiLCJyZXR1cm5WYWx1ZSIsImlzUHJvcGFnYXRpb25TdG9wcGVkIiwicHJldmVudERlZmF1bHQiLCJjYW5jZWxCdWJibGUiLCJwZXJzaXN0IiwiaXNQZXJzaXN0ZW50IiwicmQiLCJzZCIsInRkIiwibmQiLCJldmVudFBoYXNlIiwiYnViYmxlcyIsImNhbmNlbGFibGUiLCJ0aW1lU3RhbXAiLCJEYXRlIiwibm93IiwiaXNUcnVzdGVkIiwib2QiLCJwZCIsInZpZXciLCJkZXRhaWwiLCJxZCIsInZkIiwic2NyZWVuWCIsInNjcmVlblkiLCJjbGllbnRYIiwiY2xpZW50WSIsInBhZ2VYIiwicGFnZVkiLCJjdHJsS2V5Iiwic2hpZnRLZXkiLCJhbHRLZXkiLCJtZXRhS2V5IiwiZ2V0TW9kaWZpZXJTdGF0ZSIsInVkIiwiYnV0dG9uIiwiYnV0dG9ucyIsInJlbGF0ZWRUYXJnZXQiLCJmcm9tRWxlbWVudCIsInRvRWxlbWVudCIsIm1vdmVtZW50WCIsIm1vdmVtZW50WSIsIndkIiwieWQiLCJkYXRhVHJhbnNmZXIiLCJBZCIsIkNkIiwiYW5pbWF0aW9uTmFtZSIsImVsYXBzZWRUaW1lIiwicHNldWRvRWxlbWVudCIsIkVkIiwiY2xpcGJvYXJkRGF0YSIsIkdkIiwiZGF0YSIsIkhkIiwiRXNjIiwiU3BhY2ViYXIiLCJMZWZ0IiwiVXAiLCJSaWdodCIsIkRvd24iLCJEZWwiLCJXaW4iLCJNZW51IiwiQXBwcyIsIlNjcm9sbCIsIk1velByaW50YWJsZUtleSIsIklkIiwiOCIsIjkiLCIxMiIsIjEzIiwiMTYiLCIxNyIsIjE4IiwiMTkiLCIyMCIsIjI3IiwiMzIiLCIzMyIsIjM0IiwiMzUiLCIzNiIsIjM3IiwiMzgiLCIzOSIsIjQwIiwiNDUiLCI0NiIsIjExMiIsIjExMyIsIjExNCIsIjExNSIsIjExNiIsIjExNyIsIjExOCIsIjExOSIsIjEyMCIsIjEyMSIsIjEyMiIsIjEyMyIsIjE0NCIsIjE0NSIsIjIyNCIsIkpkIiwiQWx0IiwiQ29udHJvbCIsIk1ldGEiLCJTaGlmdCIsIktkIiwiTWQiLCJrZXkiLCJTdHJpbmciLCJmcm9tQ2hhckNvZGUiLCJjb2RlIiwibG9jYXRpb24iLCJyZXBlYXQiLCJsb2NhbGUiLCJ3aGljaCIsIk9kIiwid2lkdGgiLCJoZWlnaHQiLCJwcmVzc3VyZSIsInRhbmdlbnRpYWxQcmVzc3VyZSIsInRpbHRYIiwidGlsdFkiLCJ0d2lzdCIsInBvaW50ZXJUeXBlIiwiaXNQcmltYXJ5IiwiUWQiLCJ0b3VjaGVzIiwidGFyZ2V0VG91Y2hlcyIsImNoYW5nZWRUb3VjaGVzIiwiU2QiLCJVZCIsImRlbHRhWCIsIndoZWVsRGVsdGFYIiwiZGVsdGFZIiwid2hlZWxEZWx0YVkiLCJ3aGVlbERlbHRhIiwiZGVsdGFaIiwiZGVsdGFNb2RlIiwiVmQiLCJXZCIsIlhkIiwiZG9jdW1lbnRNb2RlIiwiWWQiLCJaZCIsIiRkIiwiYWUiLCJiZSIsImNlIiwiZGUiLCJnZSIsImNvbG9yIiwiZGF0ZSIsImRhdGV0aW1lIiwiZW1haWwiLCJtb250aCIsIm51bWJlciIsInBhc3N3b3JkIiwicmFuZ2UiLCJzZWFyY2giLCJ0ZWwiLCJ0ZXh0IiwidGltZSIsInVybCIsIndlZWsiLCJoZSIsImllIiwiamUiLCJldmVudCIsImxpc3RlbmVycyIsImtlIiwibGUiLCJtZSIsIm5lIiwib2UiLCJwZSIsInFlIiwicmUiLCJzZSIsInRlIiwidWUiLCJvbmlucHV0IiwidmUiLCJkZXRhY2hFdmVudCIsIndlIiwieGUiLCJhdHRhY2hFdmVudCIsInllIiwiemUiLCJBZSIsIkNlIiwiRGUiLCJFZSIsIkZlIiwibm9kZSIsIm9mZnNldCIsIm5leHRTaWJsaW5nIiwiR2UiLCJjb250YWlucyIsImNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIiwiSGUiLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnRXaW5kb3ciLCJocmVmIiwiSWUiLCJjb250ZW50RWRpdGFibGUiLCJKZSIsImZvY3VzZWRFbGVtIiwic2VsZWN0aW9uUmFuZ2UiLCJkb2N1bWVudEVsZW1lbnQiLCJzdGFydCIsImVuZCIsInNlbGVjdGlvblN0YXJ0Iiwic2VsZWN0aW9uRW5kIiwibWluIiwiZGVmYXVsdFZpZXciLCJnZXRTZWxlY3Rpb24iLCJleHRlbmQiLCJyYW5nZUNvdW50IiwiYW5jaG9yTm9kZSIsImFuY2hvck9mZnNldCIsImZvY3VzTm9kZSIsImZvY3VzT2Zmc2V0IiwiY3JlYXRlUmFuZ2UiLCJzZXRTdGFydCIsInJlbW92ZUFsbFJhbmdlcyIsImFkZFJhbmdlIiwic2V0RW5kIiwiZWxlbWVudCIsImxlZnQiLCJzY3JvbGxMZWZ0IiwidG9wIiwic2Nyb2xsVG9wIiwiZm9jdXMiLCJLZSIsIkxlIiwiTWUiLCJOZSIsIk9lIiwiUGUiLCJRZSIsIlJlIiwiYW5pbWF0aW9uZW5kIiwiYW5pbWF0aW9uaXRlcmF0aW9uIiwiYW5pbWF0aW9uc3RhcnQiLCJ0cmFuc2l0aW9uZW5kIiwiU2UiLCJUZSIsIlVlIiwiYW5pbWF0aW9uIiwiVmUiLCJXZSIsIlhlIiwiWWUiLCJaZSIsIiRlIiwiYWYiLCJiZiIsImNmIiwiZmYiLCJnZiIsImNvbmNhdCIsImhmIiwiUmIiLCJpbnN0YW5jZSIsImxpc3RlbmVyIiwiRiIsImpmIiwiaGFzIiwia2YiLCJsZiIsIm1mIiwicmFuZG9tIiwibmYiLCJiaW5kIiwiY2FwdHVyZSIsInBhc3NpdmUiLCJuIiwidiIsIkMiLCJ0IiwieCIsInIiLCJCIiwib2YiLCJwZiIsInBhcmVudFdpbmRvdyIsInFmIiwicmYiLCJPIiwiVCIsInphIiwiTCIsImVlIiwiY2hhciIsImZlIiwidW5zaGlmdCIsInNmIiwidGYiLCJ1ZiIsInZmIiwid2YiLCJ4ZiIsInlmIiwiX19odG1sIiwiemYiLCJzZXRUaW1lb3V0IiwiQWYiLCJjbGVhclRpbWVvdXQiLCJCZiIsIlByb21pc2UiLCJEZiIsInF1ZXVlTWljcm90YXNrIiwicmVzb2x2ZSIsInRoZW4iLCJjYXRjaCIsIkNmIiwiRWYiLCJGZiIsIkdmIiwicHJldmlvdXNTaWJsaW5nIiwiSGYiLCJJZiIsIkpmIiwiS2YiLCJMZiIsIk1mIiwiTmYiLCJPZiIsIkciLCJIIiwiUGYiLCJJIiwiUWYiLCJSZiIsIlNmIiwiY29udGV4dFR5cGVzIiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dCIsIl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0IiwiVGYiLCJjaGlsZENvbnRleHRUeXBlcyIsIlVmIiwiVmYiLCJXZiIsImdldENoaWxkQ29udGV4dCIsIlhmIiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQiLCJZZiIsIlpmIiwiJGYiLCJhZyIsImJnIiwiZGciLCJlZyIsImZnIiwiZGVmYXVsdFByb3BzIiwiZ2ciLCJoZyIsImlnIiwiamciLCJrZyIsImxnIiwiX2N1cnJlbnRWYWx1ZSIsIm1nIiwiY2hpbGRMYW5lcyIsIm5nIiwiZGVwZW5kZW5jaWVzIiwiZmlyc3RDb250ZXh0IiwibGFuZXMiLCJvZyIsInBnIiwiY29udGV4dCIsIm1lbW9pemVkVmFsdWUiLCJuZXh0IiwicWciLCJyZyIsInNnIiwidXBkYXRlUXVldWUiLCJiYXNlU3RhdGUiLCJmaXJzdEJhc2VVcGRhdGUiLCJsYXN0QmFzZVVwZGF0ZSIsInNoYXJlZCIsInBlbmRpbmciLCJpbnRlcmxlYXZlZCIsImVmZmVjdHMiLCJ0ZyIsInVnIiwiZXZlbnRUaW1lIiwibGFuZSIsInBheWxvYWQiLCJjYWxsYmFjayIsInZnIiwiSiIsIm1vZGUiLCJLIiwid2ciLCJ4ZyIsInlnIiwidyIsInUiLCJ5IiwiemciLCJBZyIsIkJnIiwiQ29tcG9uZW50IiwicmVmcyIsIkNnIiwiRmciLCJpc01vdW50ZWQiLCJfcmVhY3RJbnRlcm5hbHMiLCJlbnF1ZXVlU2V0U3RhdGUiLCJNIiwiRGciLCJFZyIsImVucXVldWVSZXBsYWNlU3RhdGUiLCJlbnF1ZXVlRm9yY2VVcGRhdGUiLCJHZyIsInNob3VsZENvbXBvbmVudFVwZGF0ZSIsImlzUHVyZVJlYWN0Q29tcG9uZW50IiwiSGciLCJjb250ZXh0VHlwZSIsInN0YXRlIiwidXBkYXRlciIsIklnIiwiY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyIsIlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwiSmciLCJwcm9wcyIsImdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyIsImdldFNuYXBzaG90QmVmb3JlVXBkYXRlIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCIsImNvbXBvbmVudFdpbGxNb3VudCIsImNvbXBvbmVudERpZE1vdW50IiwiS2ciLCJMZyIsIk1nIiwiTmciLCJPZyIsIlBnIiwiUWciLCJSZyIsIlNnIiwiVGciLCJVZyIsIlZnIiwiV2ciLCJYZyIsIllnIiwiTiIsIlpnIiwiJGciLCJhaCIsImVsZW1lbnRUeXBlIiwiZGVsZXRpb25zIiwiYmgiLCJwZW5kaW5nUHJvcHMiLCJvdmVyZmxvdyIsInRyZWVDb250ZXh0IiwicmV0cnlMYW5lIiwiY2giLCJkaCIsImVoIiwiZmgiLCJtZW1vaXplZFByb3BzIiwiZ2giLCJoaCIsImloIiwicmVmIiwiX293bmVyIiwiX3N0cmluZ1JlZiIsImpoIiwiam9pbiIsImtoIiwibGgiLCJpbmRleCIsIm1oIiwibmgiLCJvaCIsImltcGxlbWVudGF0aW9uIiwicGgiLCJxaCIsImRvbmUiLCJyaCIsInNoIiwidGgiLCJ1aCIsInZoIiwid2giLCJ4aCIsInloIiwidGFnTmFtZSIsInpoIiwiQWgiLCJCaCIsIlAiLCJDaCIsInJldmVhbE9yZGVyIiwiRGgiLCJFaCIsIl93b3JrSW5Qcm9ncmVzc1ZlcnNpb25QcmltYXJ5IiwiRmgiLCJSZWFjdEN1cnJlbnREaXNwYXRjaGVyIiwiR2giLCJIaCIsIlEiLCJSIiwiUyIsIkloIiwiSmgiLCJLaCIsIkxoIiwiVSIsIk1oIiwiTmgiLCJPaCIsIlBoIiwiUWgiLCJSaCIsIlNoIiwiVGgiLCJiYXNlUXVldWUiLCJxdWV1ZSIsIlVoIiwiVmgiLCJXaCIsImxhc3RSZW5kZXJlZFJlZHVjZXIiLCJhY3Rpb24iLCJoYXNFYWdlclN0YXRlIiwiZWFnZXJTdGF0ZSIsImxhc3RSZW5kZXJlZFN0YXRlIiwiZGlzcGF0Y2giLCJYaCIsIlloIiwiWmgiLCIkaCIsImFpIiwiZ2V0U25hcHNob3QiLCJiaSIsImNpIiwiZGkiLCJsYXN0RWZmZWN0Iiwic3RvcmVzIiwiZWkiLCJmaSIsImdpIiwiY3JlYXRlIiwiZGVzdHJveSIsImRlcHMiLCJoaSIsImlpIiwiamkiLCJraSIsImxpIiwibWkiLCJuaSIsIm9pIiwicGkiLCJxaSIsInJpIiwic2kiLCJ0aSIsInVpIiwidmkiLCJ3aSIsInhpIiwieWkiLCJyZWFkQ29udGV4dCIsInVzZUNhbGxiYWNrIiwidXNlQ29udGV4dCIsInVzZUVmZmVjdCIsInVzZUltcGVyYXRpdmVIYW5kbGUiLCJ1c2VJbnNlcnRpb25FZmZlY3QiLCJ1c2VMYXlvdXRFZmZlY3QiLCJ1c2VNZW1vIiwidXNlUmVkdWNlciIsInVzZVJlZiIsInVzZVN0YXRlIiwidXNlRGVidWdWYWx1ZSIsInVzZURlZmVycmVkVmFsdWUiLCJ1c2VUcmFuc2l0aW9uIiwidXNlTXV0YWJsZVNvdXJjZSIsInVzZVN5bmNFeHRlcm5hbFN0b3JlIiwidXNlSWQiLCJ1bnN0YWJsZV9pc05ld1JlY29uY2lsZXIiLCJpZGVudGlmaWVyUHJlZml4IiwiemkiLCJtZXNzYWdlIiwiQWkiLCJjb25zb2xlIiwiZXJyb3IiLCJMaSIsIk5pIiwiT2kiLCJCaSIsIldlYWtNYXAiLCJDaSIsIkRpIiwiRWkiLCJGaSIsImdldERlcml2ZWRTdGF0ZUZyb21FcnJvciIsImNvbXBvbmVudERpZENhdGNoIiwiR2kiLCJjb21wb25lbnRTdGFjayIsIkhpIiwicGluZ0NhY2hlIiwiSWkiLCJKaSIsIktpIiwiUGkiLCJ0YWlsTW9kZSIsInRhaWwiLCJWIiwic3VidHJlZUZsYWdzIiwiUWkiLCJwZW5kaW5nQ29udGV4dCIsIlJpIiwid2FzTXVsdGlwbGUiLCJtdWx0aXBsZSIsIm9uQ2xpY2siLCJvbmNsaWNrIiwic2l6ZSIsImNyZWF0ZUVsZW1lbnROUyIsImF1dG9Gb2N1cyIsImNyZWF0ZVRleHROb2RlIiwiVyIsIlNpIiwicmVuZGVyaW5nIiwiVGkiLCJyZW5kZXJpbmdTdGFydFRpbWUiLCJpc0JhY2t3YXJkcyIsImxhc3QiLCJVaSIsIlZpIiwiV2kiLCJSZWFjdEN1cnJlbnRPd25lciIsIlhpIiwiWWkiLCJaaSIsIiRpIiwiYWoiLCJjb21wYXJlIiwiYmoiLCJjaiIsImRqIiwiYmFzZUxhbmVzIiwiY2FjaGVQb29sIiwiZWoiLCJmaiIsImdqIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUiLCJjb21wb25lbnRXaWxsVXBkYXRlIiwiY29tcG9uZW50RGlkVXBkYXRlIiwiaGoiLCJpaiIsImpqIiwia2oiLCJsaiIsIm1qIiwiZmFsbGJhY2siLCJuaiIsIm9qIiwicGoiLCJxaiIsIl9yZWFjdFJldHJ5IiwicmoiLCJzaiIsInRqIiwidWoiLCJ2aiIsInhqIiwieWoiLCJ6aiIsIkFqIiwiV2Vha1NldCIsIlgiLCJCaiIsIkNqIiwiRGoiLCJFaiIsIkdqIiwiSGoiLCJJaiIsIkpqIiwib25Db21taXRGaWJlclVubW91bnQiLCJjb21wb25lbnRXaWxsVW5tb3VudCIsIktqIiwiTGoiLCJNaiIsIk5qIiwiT2oiLCJQaiIsIlFqIiwiaW5zZXJ0QmVmb3JlIiwiX3JlYWN0Um9vdENvbnRhaW5lciIsIlJqIiwiU2oiLCJUaiIsIlhqIiwiWWoiLCJaaiIsImFrIiwiX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGUiLCJzcmMiLCJXaiIsIkxrIiwiYmsiLCJjZWlsIiwiY2siLCJkayIsImVrIiwiWSIsIloiLCJmayIsImdrIiwiaGsiLCJpayIsImprIiwiVmoiLCJJbmZpbml0eSIsImtrIiwibGsiLCJtayIsIm5rIiwib2siLCJwayIsInFrIiwicmsiLCJzayIsInRrIiwiY2FsbGJhY2tOb2RlIiwiZXhwaXJhdGlvblRpbWVzIiwiZXhwaXJlZExhbmVzIiwidGMiLCJjYWxsYmFja1ByaW9yaXR5IiwiY2ciLCJ1ayIsInZrIiwid2siLCJ4ayIsInlrIiwiemsiLCJBayIsIkJrIiwiQ2siLCJEayIsIkVrIiwiZmluaXNoZWRXb3JrIiwiZmluaXNoZWRMYW5lcyIsIkZrIiwidGltZW91dEhhbmRsZSIsIkdrIiwiSGsiLCJJayIsIkprIiwiS2siLCJtdXRhYmxlUmVhZExhbmVzIiwieGMiLCJGaiIsImRpc3BsYXkiLCJVaiIsIm9uQ29tbWl0RmliZXJSb290IiwiamMiLCJvblJlY292ZXJhYmxlRXJyb3IiLCJNayIsIm9uUG9zdENvbW1pdEZpYmVyUm9vdCIsIk5rIiwiT2siLCJRayIsImlzUmVhY3RDb21wb25lbnQiLCJwZW5kaW5nQ2hpbGRyZW4iLCJSayIsIm11dGFibGVTb3VyY2VFYWdlckh5ZHJhdGlvbkRhdGEiLCJTayIsImNhY2hlIiwidHJhbnNpdGlvbnMiLCJUayIsIlVrIiwiVmsiLCJXayIsIlhrIiwiWWsiLCJaayIsIndqIiwiUGsiLCJhbCIsInJlcG9ydEVycm9yIiwiYmwiLCJfaW50ZXJuYWxSb290IiwiY2wiLCJkbCIsImVsIiwiZmwiLCJobCIsImdsIiwidW5tb3VudCIsInVuc3RhYmxlX3NjaGVkdWxlSHlkcmF0aW9uIiwic3BsaWNlIiwicXVlcnlTZWxlY3RvckFsbCIsIkpTT04iLCJzdHJpbmdpZnkiLCJmb3JtIiwiaWwiLCJ1c2luZ0NsaWVudEVudHJ5UG9pbnQiLCJFdmVudHMiLCJqbCIsImZpbmRGaWJlckJ5SG9zdEluc3RhbmNlIiwiYnVuZGxlVHlwZSIsInZlcnNpb24iLCJyZW5kZXJlclBhY2thZ2VOYW1lIiwia2wiLCJyZW5kZXJlckNvbmZpZyIsIm92ZXJyaWRlSG9va1N0YXRlIiwib3ZlcnJpZGVIb29rU3RhdGVEZWxldGVQYXRoIiwib3ZlcnJpZGVIb29rU3RhdGVSZW5hbWVQYXRoIiwib3ZlcnJpZGVQcm9wcyIsIm92ZXJyaWRlUHJvcHNEZWxldGVQYXRoIiwib3ZlcnJpZGVQcm9wc1JlbmFtZVBhdGgiLCJzZXRFcnJvckhhbmRsZXIiLCJzZXRTdXNwZW5zZUhhbmRsZXIiLCJzY2hlZHVsZVVwZGF0ZSIsImN1cnJlbnREaXNwYXRjaGVyUmVmIiwiZmluZEhvc3RJbnN0YW5jZUJ5RmliZXIiLCJmaW5kSG9zdEluc3RhbmNlc0ZvclJlZnJlc2giLCJzY2hlZHVsZVJlZnJlc2giLCJzY2hlZHVsZVJvb3QiLCJzZXRSZWZyZXNoSGFuZGxlciIsImdldEN1cnJlbnRGaWJlciIsInJlY29uY2lsZXJWZXJzaW9uIiwiX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fIiwibGwiLCJpc0Rpc2FibGVkIiwic3VwcG9ydHNGaWJlciIsImluamVjdCIsImV4cG9ydHMiLCJjcmVhdGVQb3J0YWwiLCJjcmVhdGVSb290IiwidW5zdGFibGVfc3RyaWN0TW9kZSIsImZpbmRET01Ob2RlIiwiZmx1c2hTeW5jIiwiaHlkcmF0ZSIsImh5ZHJhdGVSb290IiwiaHlkcmF0ZWRTb3VyY2VzIiwiX2dldFZlcnNpb24iLCJfc291cmNlIiwidW5tb3VudENvbXBvbmVudEF0Tm9kZSIsInVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzIiwidW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXIiLCJjaGVja0RDRSIsImVyciIsIm1vZHVsZSIsIl9fc2VsZiIsIl9fc291cmNlIiwiRnJhZ21lbnQiLCJqc3giLCJqc3hzIiwic2V0U3RhdGUiLCJmb3JjZVVwZGF0ZSIsImVzY2FwZSIsIl9zdGF0dXMiLCJfcmVzdWx0IiwiZGVmYXVsdCIsIkNoaWxkcmVuIiwibWFwIiwiY291bnQiLCJ0b0FycmF5Iiwib25seSIsIlByb2ZpbGVyIiwiUHVyZUNvbXBvbmVudCIsIlN0cmljdE1vZGUiLCJTdXNwZW5zZSIsImNsb25lRWxlbWVudCIsImNyZWF0ZUNvbnRleHQiLCJfY3VycmVudFZhbHVlMiIsIl90aHJlYWRDb3VudCIsIlByb3ZpZGVyIiwiQ29uc3VtZXIiLCJfZGVmYXVsdFZhbHVlIiwiX2dsb2JhbE5hbWUiLCJjcmVhdGVGYWN0b3J5IiwiY3JlYXRlUmVmIiwiZm9yd2FyZFJlZiIsImlzVmFsaWRFbGVtZW50IiwibGF6eSIsIm1lbW8iLCJzdGFydFRyYW5zaXRpb24iLCJ1bnN0YWJsZV9hY3QiLCJwb3AiLCJzb3J0SW5kZXgiLCJwZXJmb3JtYW5jZSIsInNldEltbWVkaWF0ZSIsInN0YXJ0VGltZSIsImV4cGlyYXRpb25UaW1lIiwicHJpb3JpdHlMZXZlbCIsIm5hdmlnYXRvciIsInNjaGVkdWxpbmciLCJpc0lucHV0UGVuZGluZyIsIk1lc3NhZ2VDaGFubmVsIiwicG9ydDIiLCJwb3J0MSIsIm9ubWVzc2FnZSIsInBvc3RNZXNzYWdlIiwidW5zdGFibGVfUHJvZmlsaW5nIiwidW5zdGFibGVfY29udGludWVFeGVjdXRpb24iLCJ1bnN0YWJsZV9mb3JjZUZyYW1lUmF0ZSIsImZsb29yIiwidW5zdGFibGVfZ2V0Rmlyc3RDYWxsYmFja05vZGUiLCJ1bnN0YWJsZV9uZXh0IiwidW5zdGFibGVfcGF1c2VFeGVjdXRpb24iLCJ1bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHkiLCJkZWxheSIsInVuc3RhYmxlX3dyYXBDYWxsYmFjayIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsInVuZGVmaW5lZCIsIl9fd2VicGFja19tb2R1bGVzX18iLCJkZWZpbml0aW9uIiwibyIsImNodW5rSWQiLCJhbGwiLCJyZWR1Y2UiLCJwcm9taXNlcyIsIm1pbmlDc3NGIiwiZ2xvYmFsVGhpcyIsIkZ1bmN0aW9uIiwib2JqIiwicHJvcCIsInNjcmlwdCIsIm5lZWRBdHRhY2giLCJzY3JpcHRzIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJpIiwicyIsImdldEF0dHJpYnV0ZSIsImNoYXJzZXQiLCJ0aW1lb3V0Iiwib25TY3JpcHRDb21wbGV0ZSIsInByZXYiLCJvbmVycm9yIiwib25sb2FkIiwiZG9uZUZucyIsImZuIiwiaGVhZCIsInRvU3RyaW5nVGFnIiwic2NyaXB0VXJsIiwiaW1wb3J0U2NyaXB0cyIsImN1cnJlbnRTY3JpcHQiLCJpbnN0YWxsZWRDaHVua3MiLCI5MDEiLCJqIiwiaW5zdGFsbGVkQ2h1bmtEYXRhIiwicHJvbWlzZSIsInJlamVjdCIsImVycm9yVHlwZSIsInJlYWxTcmMiLCJyZXF1ZXN0Iiwid2VicGFja0pzb25wQ2FsbGJhY2siLCJwYXJlbnRDaHVua0xvYWRpbmdGdW5jdGlvbiIsImNodW5rSWRzIiwibW9yZU1vZHVsZXMiLCJydW50aW1lIiwic29tZSIsImNodW5rTG9hZGluZ0dsb2JhbCIsInNlbGYiLCJzdGF0dXNFbGVtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJyZXBvcnQiLCJwcmVmaXgiLCJtc2ciLCJjbGFzc05hbWUiLCJxdWVyeVNlbGVjdG9yIiwid2FybiIsInJlcG9ydENvbXBsZXRpb24iLCJyZXBvcnRCdXN5IiwiY2xlYXJTZWxlY3RvciIsInNlbGVjdG9yIiwib25Db25uZWN0Iiwic2hvd2Nhc2UiLCJzaG93Y2FzZUVsZW1lbnQiLCJzZWxlY3RlZFRhZyIsImN1cnJlbnRMb2NrcyIsImxvY2tCaWxsYm9hcmQiLCJsb2NrTmF2aWdhdGlvbiIsImdldExvY2tzIiwiY3VycmVudExvY2siLCJiaWxsYm9hcmQiLCJuYXZpZ2F0aW9uIiwib25Mb2Nrc0NoYW5nZSIsIk1hdHRlcnRhZyIsInByZXZlbnRBY3Rpb24iLCJvcGVuaW5nIiwibmF2aWdhdGluZyIsInNldHVwTWF0dGVydGFnUHJldmVudCIsInRpdGxlIiwiZGVzYyIsInBvc1giLCJwb3NZIiwicG9zWiIsIm5vcm1YIiwibm9ybVkiLCJub3JtWiIsIm1lZGlhVHlwZSIsIm1lZGlhU3JjIiwibGFiZWwiLCJkZXNjcmlwdGlvbiIsImFuY2hvclBvc2l0aW9uIiwicGFyc2VGbG9hdCIsInN0ZW1WZWN0b3IiLCJtZWRpYSIsImVkaXRQb3NpdGlvbiIsInJlbW92ZSIsInRhZ01lZGlhdHlwZVNlbGVjdG9ycyIsImdldEVsZW1lbnRzQnlDbGFzc05hbWUiLCJkZWZhdWx0T3B0aW9uIiwiTWVkaWFUeXBlIiwib3B0aW9uIiwidGFnRWRpdFRpdGxlIiwidGFnRWRpdE1lZGlhIiwidGFnRWRpdERlc2MiLCJ0YWdNZWRpYXR5cGVTZWxlY3RvciIsImVkaXRCaWxsYm9hcmQiLCJ0YWdMYWJlbCIsInNlbGVjdGVkSW5kZXgiLCJpbm5lclRleHQiLCJlZGl0Q29sb3IiLCJzdGVtSGVpZ2h0RWx0Iiwic3RlbVZpc2libGVFbHQiLCJzdGVtSGVpZ2h0Iiwic3RlbVZpc2libGUiLCJlZGl0U3RlbSIsInRhZ0VkaXRPcGFjaXR5IiwiZWRpdE9wYWNpdHkiLCJ3aWRnZXRXIiwid2lkZ2V0SCIsIndpZGdldFNvdXJjZSIsImluamVjdEhUTUwiLCJnbG9iYWxWYXJpYWJsZU1hcCIsIm9uIiwib2ZmIiwic2VuZCIsInBtIiwiZ2VuQ29sb3IiLCJyZ2IiLCJuZXdDb2xvciIsIm5hdmlnYXRpb25UeXBlU2VsZWN0b3IiLCJmb3JjZU5hdmlnYXRpb24iLCJuYXZpZ2F0ZVRvVGFnIiwiVHJhbnNpdGlvbiIsImluZm8iLCJzZXR1cE1hdHRlcnRhZ0NvbnRyb2xzIiwic3dlZXBDb2xsZWN0aW9uIiwic3dlZXBTZWxlY3RvcnMiLCJjYW1lcmFQb3NlIiwiU3dlZXAiLCJzdWJzY3JpYmUiLCJvbkFkZGVkIiwiaXRlbSIsIm9uUmVtb3ZlZCIsIm9uQ29sbGVjdGlvblVwZGF0ZWQiLCJjb2xsZWN0aW9uIiwiaGFzQ2hpbGROb2RlcyIsInN3ZWVwSWQiLCJwb3NpdGlvblgiLCJwb3NpdGlvbloiLCJyb3RhdGlvblgiLCJyb3RhdGlvblkiLCJyb3RhdGlvblNwZWVkIiwiZmx5U3R5bGUiLCJzd2VlcFJvdGF0aW9uWCIsInN3ZWVwUm90YXRpb25ZIiwic3dlZXBUcmFuc2l0aW9uVGltZSIsInBvc2VTdWJzY3JpcHRpb24iLCJwb3NlT3V0cHV0IiwicHJldmlldyIsInRhZ3MiLCJNb2RlbCIsIkV2ZW50IiwiTU9ERUxfTE9BREVEIiwibW9kZWxEYXRhIiwiTW9kZSIsIkNIQU5HRV9TVEFSVCIsIm9sZE1vZGUiLCJuZXdNb2RlIiwiQ2FtZXJhIiwiTU9WRSIsInBvc2UiLCJDTElDSyIsInRhZ0lkIiwiY2xpY2tlZFRhZyIsImRpc2NXb3JsZFBvc2l0aW9uIiwic2NyZWVuUG9zaXRpb24iLCJnZXREaXNjUG9zaXRpb24iLCJDb252ZXJzaW9uIiwid29ybGRUb1NjcmVlbiIsImNsaWVudFdpZHRoIiwiY2xpZW50SGVpZ2h0IiwibW92ZUluRGlyZWN0aW9uIiwiRGlyZWN0aW9uIiwicGFuIiwiYW5nbGUiLCJkaXJlY3Rpb24iLCJyb3RhdGVJbkRpcmVjdGlvbiIsInJvdGF0ZSIsInNwZWVkIiwic2V0Um90YXRpb24iLCJUcmFuc2l0aW9uVHlwZSIsIm1vdmVUbyIsInN3ZWVwIiwicm90YXRpb24iLCJ0cmFuc2l0aW9uVGltZSIsImNhbmNlbCIsIm9uQ2hhbmdlZCIsIlJlbmRlcmVyIiwidGFrZVNjcmVlblNob3QiLCJtYXR0ZXJ0YWdzIiwic3NVcmwiLCJ0YWtlRXF1aXJlY3Rhbmd1bGFyIiwiY3VycmVudFN3ZWVwIiwic2lkIiwidGFnU2VsZWN0b3JzIiwidGFnU2VsZWN0b3JPcHRpb25zTWFwIiwiY3JlYXRlT3B0aW9uIiwibmV4dENoaWxkIiwibG9jYWxlQ29tcGFyZSIsInBhcmVudEVsZW1lbnQiLCJvblVwZGF0ZWQiLCJwb3B1bGF0ZU1hdHRlcnRhZ1NlbGVjdG9ycyIsIlRvdXIiLCJzdG9wIiwic3RlcCIsInBhcnNlSW50IiwibGV2ZWwiLCJkZWx0YSIsInBvaW50ZXJTdWJzY3JpcHRpb24iLCJwb2ludGVyT3V0cHV0IiwiUG9pbnRlciIsImludGVyc2VjdGlvbiIsIm1vdXNlIiwidG9GaXhlZCIsInpvb21CeSIsIm5ld1pvb20iLCJ6b29tVG8iLCJ6b29tUmVzZXQiLCJzd2VlcFNlbGVjdG9yIiwiY3VycmVudEVuYWJsZW1lbnRNYXAiLCJlbmFibGVTd2VlcCIsIm9uRW5hYmxlZENoYW5nZSIsImVuYWJsZSIsImRpc2FibGUiLCJjdXJyZW50RW5hYmxlbWVudCIsImVuYWJsZWQiLCJhZGRTd2VlcFRvZ2dsZSIsIkNvbGxlY3Rpb25TZWxlY3QiLCJzdXBlciIsIm9wdGlvbk1hcCIsIm9uVmFsdWVDaGFuZ2VkIiwiYXZhaWxhYmxlT3B0aW9ucyIsInNlbGVjdFJlZiIsInN1YnNjcmlwdGlvbiIsImlkeCIsImZpbHRlciIsInNvcnRlZEVudHJpZXMiLCJlbnRyaWVzIiwic29ydCIsIml0ZW0xIiwiaXRlbTIiLCJvbkNoYW5nZSIsInJlbmRlck9wdGlvbnMiLCJob3ZlckxhYmVsIiwib3B0aW9uTGFiZWwiLCJjb250cm9sUGFuZWxTdHlsZSIsIm92ZXJmbG93WSIsIkNvbnRyb2xQYW5lbCIsImhlYWRlciIsIkNvbGxlY3Rpb25JbnNwZWN0b3IiLCJzZWxlY3RlZEl0ZW0iLCJzZWxlY3RJdGVtIiwib3V0cHV0IiwiYWRkaXRpb25hbFByb3BlcnRpZXMiLCJyZWFkT25seSIsInByb3BlcnR5VHJhbnNmb3JtcyIsInRyYW5zZm9ybVJlY29yZCIsInRyYW5zZm9ybSIsInNlcmlhbGl6ZU91dHB1dCIsIlJlZ2lzdGVyIiwiaWRJbnB1dCIsInNyY0lucHV0IiwicmVnaXN0ZXIiLCJzZGsiLCJBc3NldCIsInJlZ2lzdGVyVGV4dHVyZSIsIm9uUmVnaXN0ZXIiLCJpbml0aWFsSWNvbnMiLCJDaHJvbWUiLCJGaXJlZm94IiwiRWRnZSIsImh0bWxGb3IiLCJhc3NldENvbGxlY3Rpb24iLCJvYnNlcnZlcnMiLCJhc3NldHMiLCJvYnNlcnZlciIsImFzc2V0Iiwic2V0QXNzZXRzIiwiY3VycmVudEFzc2V0cyIsInNldFNlbGVjdGVkQXNzZXQiLCJDb252ZXJzaW9uV29ybGRUb1NjcmVlbiIsInNldE1lc3NhZ2UiLCJ4SW5wdXRFbGVtZW50IiwieUlucHV0RWxlbWVudCIsInpJbnB1dEVsZW1lbnQiLCJleGVjdXRlIiwid2FpdFVudGlsIiwicG9zZUNhbGxiYWNrIiwic2hvd2Nhc2VTaXplIiwicmVzdWx0IiwidHJ1bmMiLCJjb21wdXRlVmFsdWUiLCJwbGFjZWhvbGRlciIsImNvbFNwYW4iLCJ0ZXh0QXJlYVN0eWxlIiwiRmxvb3JHZXREYXRhIiwiZmxvb3JzIiwic2V0Rmxvb3JzIiwic2RrRmxvb3JzIiwiRmxvb3IiLCJnZXREYXRhIiwic2VyaWFsaXplZCIsInJvd3MiLCJGbG9vck1vdmVUbyIsIm1vdmVDYW1lcmFPcHRpb25DaGFuZ2VkIiwic2V0TW92ZUNhbWVyYU9wdGlvbkNoYW5nZWQiLCJpbnB1dEVsZW1lbnQiLCJjaGVja2JveEVsZW1lbnQiLCJmbG9vckluZGV4IiwibmV3Rmxvb3IiLCJzdXBwcmVzc0NhbWVyYSIsInRvZ2dsZU1vdmVDYW1lcmFPcHRpb24iLCJtb3ZlQ2FtZXJhRGVzYyIsIkZsb29yU2hvd0FsbCIsInNob3dBbGwiLCJjc3MiLCJSb3dTcGFjZXIiLCJldmVudExpc3RTdHlsZSIsImJvcmRlcldpZHRoIiwiYm9yZGVyU3R5bGUiLCJib3JkZXJDb2xvciIsImlucHV0U3R5bGUiLCJtYXhXaWR0aCIsIm9sU3R5bGUiLCJwYWRkaW5nIiwidW5zdWJiZWRTdHlsZSIsImJhY2tncm91bmRDb2xvciIsIk9ic2VydmFibGVDb2xsZWN0aW9uIiwiZXZlbnRMaXN0Iiwic2V0RXZlbnRMaXN0IiwiaXNTdWJzY3JpYmVkIiwic3ViIiwic3ViVG9Db2xsZWN0aW9uIiwiaGFuZGxlciIsIm5ld0V2ZW50IiwiY3VycmVudEV2ZW50cyIsImRvU3Vic2NyaXB0aW9uIiwiY2hlY2tib3giLCJvbkNoZWNrYm94Q2hhbmdlZCIsIm5ld0FycmF5Iiwic2hvdyIsIk9ic2VydmFibGUiLCJvYnNlcnZhYmxlIiwibmV3VmFsdWUiLCJwcm9wVmFsdWUiLCJ2YWx1ZXMiLCJoYW5kbGVFdmVudCIsImV2ZW50VHlwZSIsImFyZ3MiLCJhcmciLCJlbnVtIiwianVzdGlmeUNvbnRlbnQiLCJmbG9hdCIsIkxhYmVsR2V0RGF0YSIsImxhYmVscyIsInNldExhYmVscyIsImN1cnJlbnRMYWJlbFNpZCIsInNldEN1cnJlbnRMYWJlbFNpZCIsInNka0xhYmVscyIsIkxhYmVsIiwibGFiZWxPcHRpb25zIiwiZmluZEluZGV4IiwibGFiZWxJdGVtIiwib25TZWxlY3RlZCIsInZhbCIsIkFwcCIsIkdyYXBoIiwiTGluayIsIlJvb20iLCJTZW5zb3IiLCJUYWciLCJTY2VuZSIsIktleXMiLCJLZXlTdGF0ZSIsIlBvaW50ZXJCdXR0b24iLCJQb2ludGVyQnV0dG9uTWFzayIsIkxpbmtDcmVhdGUiLCJzZXRMaW5rIiwibmV3TGluayIsImNyZWF0ZUxpbmsiLCJDcmVhdGlvblBvbGljeSIsInNldFBvbGljeSIsInBvbGljeSIsIk1BVFRFUlBPUlQiLCJpbmNsdWRlUGFyYW1zIiwiUkVGRVJSRVIiLCJPcGVuaW5nUG9saWN5IiwiT3BlblBvbGljeSIsInRlbXBsYXRlSHJlZiIsIm9yaWdpbiIsInBhdGhuYW1lIiwiRXh0ZXJuYWxMaW5raW5nUG9saWN5IiwibmV3V2luZG93UG9saWN5Iiwic2V0U2hhcmVMaW5rUG9saWN5IiwiY3JlYXRlRGVlcExpbmsiLCJzZXRNb2RlbExpbmtQb2xpY3kiLCJzZXROYXZpZ2F0aW9uTGlua1BvbGljeSIsInNldFNhbWVPcmlnaW5MaW5rUG9saWN5Iiwic2V0RXh0ZXJuYWxMaW5rUG9saWN5IiwiRWRpdEljb24iLCJlZGl0SWNvbiIsInNlbGVjdGVkTWF0dGVydGFnIiwic2VsZWN0ZWRBc3NldCIsInJlc2V0SWNvbiIsIlBoYXNlIiwiQXBwbGljYXRpb24iLCJBdHRhY2htZW50Q2F0ZWdvcnkiLCJQYXJlbnRUeXBlIiwiQVN0YXJTdGF0dXMiLCJEZXN0aW5hdGlvblBvbGljeSIsIkxpbmtUeXBlIiwiRGVzY3JpcHRpb25DaHVua1R5cGUiLCJDb2xsaWRlcnMiLCJTZW5zb3JUeXBlIiwiU291cmNlVHlwZSIsIkFsaWdubWVudCIsIlBsYWNlbWVudCIsIkF0dGFjaG1lbnRUeXBlIiwiUGxheVN0YXRlIiwiSW50ZXJhY3Rpb25UeXBlIiwiUGF0aFR5cGUiLCJSZWdpc3Rlckljb24iLCJyZWdpc3Rlckljb24iLCJhZGRBc3NldCIsInNlbGVjdE1hdHRlcnRhZyIsIm1hdHRlcnRhZ09wdGlvbkxhYmVsIiwibWF0dGVydGFnT3B0aW9uU29ydCIsIk1lYXN1cmVtZW50c0dldERhdGEiLCJtZWFzdXJlbWVudHNEYXRhIiwiTWVhc3VyZW1lbnRzIiwiTWVhc3VyZW1lbnRNb2RlVG9nZ2xlIiwiYWN0aXZlIiwic2V0QWN0aXZlIiwidG9nZ2xlTW9kZSIsIk1vZGVsR2V0RGF0YSIsIk1vZGVsR2V0RGV0YWlscyIsIm1vZGVsRGV0YWlscyIsImdldERldGFpbHMiLCJQbHVnaW5Mb2FkIiwidXJsSW5wdXRFbGVtZW50IiwiYXBwS2V5SW5wdXRFbGVtZW50IiwicGx1Z2luSWRJbnB1dEVsZW1lbnQiLCJsb2FkUGx1Z2luIiwiYXBwbGljYXRpb25LZXkiLCJwbHVnaW5JZCIsInBsdWdpbiIsIlBsdWdpbiIsImxvYWQiLCJVUkwiLCJ1bmxvYWRQbHVnaW4iLCJ1bmxvYWQiLCJFZGl0VGV4dHVyZSIsImVkaXRUZXh0dXJlIiwicmVzZXRUZXh0dXJlIiwiUmVnaXN0ZXJUZXh0dXJlIiwiUmVuZGVyZXJHZXRTY3JlZW5Qb3NpdGlvbiIsImdldFNjcmVlblBvc2l0aW9uIiwiUmVuZGVyZXJHZXRXb3JsZFBvc2l0aW9uRGF0YSIsImdldFdvcmxkUG9zaXRpb25EYXRhIiwiU2NlbmVQYXRoIiwiaW5wdXRSZWYiLCJwYXRoIiwibW9kZWxKc29uIiwiU2NlbmVEZXNlcmlhbGl6ZSIsInNjZW5lT2JqZWN0SW5mbyIsInNldFNjZW5lT2JqZWN0SW5mbyIsImNsZWFyU2NlbmUiLCJvYmplY3QiLCJvYmplY3RzIiwicHJvY2Vzc1RleHRGcm9tRmlsZUxvYWRlZCIsInRleHRGcm9tRmlsZUxvYWRlZCIsImRlc2VyaWFsaXplZCIsImRlc2VyaWFsaXplIiwicGF0aHMiLCJqc29uIiwicGFyc2UiLCJuZXdQYXRocyIsImZpbGVzIiwiZmlsZVJlYWRlciIsIkZpbGVSZWFkZXIiLCJmaWxlTG9hZGVkRXZlbnQiLCJyZWFkQXNUZXh0IiwiY2xlYXJDYWxsYmFjayIsImFjY2VwdCIsImlucHV0UGF0aHMiLCJwYXRoSXRlcmF0b3IiLCJJTlBVVCIsInJlbmRlclBhdGhzIiwiU2Vuc29yQWRkU291cmNlIiwiU2V0dGluZ3NHZXQiLCJnZXRTZXR0aW5nIiwibmV3S2V5IiwiU2V0dGluZ3MiLCJTZXR0aW5nc1VwZGF0ZSIsImtleUlucHV0RWxlbWVudCIsInZhbHVlSW5wdXRFbGVtZW50IiwidXBkYXRlU2V0dGluZyIsInVwZGF0ZSIsIlN3ZWVwRGlzYWJsZSIsInN3ZWVwSW5wdXRFbGVtZW50IiwidXBkYXRlU3dlZXAiLCJTd2VlcEVuYWJsZSIsIlN3ZWVwTW9kaWZ5TmVpZ2hib3JzIiwibGFiZWxNYXAiLCJzZXRMYWJlbE1hcCIsImFsbFN3ZWVwcyIsInNldEFsbFN3ZWVwcyIsImFsbFN3ZWVwSWRzIiwic2V0QWxsU3dlZXBJZHMiLCJhY3RpdmVTd2VlcE5laWdoYm9ycyIsInNldEFjdGl2ZVN3ZWVwTmVpZ2hib3JzIiwiY3VycmVudFN3ZWVwSWQiLCJzZXRDdXJyZW50U3dlZXBJZCIsImFjdGl2ZVN3ZWVwSWQiLCJzZXRBY3RpdmVTd2VlcElkIiwiaW5pdGlhbGl6ZWQiLCJhY3RpdmVTd2VlcElkUmVmIiwiYWN0aXZhdGVTd2VlcCIsIm5laWdoYm9ycyIsInN1YnMiLCJwaGFzZSIsIlBMQVlJTkciLCJjcmVhdGVJZE1hcCIsInN3ZWVwRGF0YSIsImlkRGljdCIsImFsbFN3ZWVwRGljdCIsIm5ld0FsbFN3ZWVwSWRzIiwiYWN0aXZlSWQiLCJ1cGRhdGVBbGxTd2VlcHNEaWN0IiwibmV3TGFiZWxNYXAiLCJnZXRMYWJlbEZyb21JZCIsIm1hcElkc1RvTGFiZWxzIiwicnVuVXNlRWZmZWN0IiwiYWxsU3dlZXBPcHRpb25zIiwicmVtb3ZlSWQiLCJyZW1vdmVOZWlnaGJvcnMiLCJhZGRJZCIsImFkZE5laWdoYm9ycyIsIlN3ZWVwR3JhcGgiLCJwYXRoRGlydHkiLCJzZXRQYXRoRGlydHkiLCJncmFwaCIsInBhdGhFbmRQb2ludHMiLCJhU3RhclN1YiIsInJ1bm5lciIsIm9uU3RhcnRDaGFuZ2VkIiwidXBkYXRlUGF0aCIsIm9uRW5kQ2hhbmdlZCIsInZlcnRleCIsImNyZWF0ZUFTdGFyUnVubmVyIiwiY3JlYXRlR3JhcGgiLCJzd2VlcEdyYXBoIiwicmVzdWx0UmVmIiwicmVjYWxjUGF0aCIsImV4ZWMiLCJzdGF0dXMiLCJTVUNDRVNTIiwiZW5hYmxlZFN3ZWVwRmlsdGVyIiwid2hpdGVTcGFjZSIsIkxheWVyU3VwcG9ydCIsInNlbGVjdGVkTGF5ZXIiLCJ1c2VMYXllciIsInNldFVzZUxheWVyIiwib25DaGVja0NoYW5nZWQiLCJBZGQiLCJsYWJlbElucHV0IiwiZGVzY0lucHV0IiwieElucHV0IiwieUlucHV0IiwieklucHV0IiwieE5vcm1JbnB1dCIsInlOb3JtSW5wdXQiLCJ6Tm9ybUlucHV0Iiwib3BhY2l0eUlucHV0Iiwic3VibWl0SWNvbiIsImFkZFRhZyIsImljb25JZCIsIkFsbG93QWN0aW9uIiwiYWxsb3dEb2NraW5nIiwiYWxsb3dPcGVuaW5nIiwiYWxsb3dOYXZpZ2F0aW9uIiwiYWxsb3dTaGFyaW5nIiwiYWxsb3dlZEFjdGlvbnMiLCJzZXRBbGxvd2VkQWN0aW9ucyIsImFsbG93QWN0aW9ucyIsImFsbG93QWN0aW9uIiwiZG9ja2luZyIsInNoYXJpbmciLCJjaGFuZ2VBbGxvd2VkQWN0aW9ucyIsImN1cnJlbnRBY3Rpb25zIiwic2VsZWN0ZWRUYWdBY3Rpb25zIiwibGFiZWxTdHlsZSIsIkF0dGFjaCIsInNlbGVjdGVkQXR0YWNobWVudCIsImF0dGFjaCIsImRldGFjaCIsIkVkaXRCaWxsYm9hcmQiLCJ0aXRsZUlucHV0IiwiZWRpdFRhZyIsIkVkaXRDb2xvciIsInJJbnB1dCIsImdJbnB1dCIsImJJbnB1dCIsIm1heCIsIkVkaXRTdGVtIiwic3VibWl0SGVpZ2h0Iiwic2V0U3VibWl0SGVpZ2h0Iiwic3VibWl0VmlzaWJpbGl0eSIsInNldFN1Ym1pdFZpc2liaWxpdHkiLCJoZWlnaHRJbnB1dCIsInZpc2libGVJbnB1dCIsInN1Ym1pdEhlaWdodENoYW5nZWQiLCJzdWJtaXRWaXNpYmlsaXR5Q2hhbmdlZCIsInVzZVNlbGVjdGVkQXNzZXQiLCJzZXRVc2VTZWxlY3RlZEFzc2V0IiwiRWRpdE9wYWNpdHkiLCJNb3ZlIiwic3VibWl0UG9zIiwic2V0U3VibWl0UG9zIiwic3VibWl0Tm9ybSIsInNldFN1Ym1pdE5vcm0iLCJzdWJtaXRQb3NDaGFuZ2VkIiwic3VibWl0Tm9ybUNoYW5nZWQiLCJtb3ZlVGFnIiwiT3BlbiIsImZvcmNlT3BlbiIsImZvcmNlRG9jayIsIm9wZW4iLCJmb3JjZSIsImRvY2siLCJjbG9zZSIsIm1hcmdpbkxlZnQiLCJSZWdpc3RlckF0dGFjaG1lbnQiLCJyZWdpc3RlckF0dGFjaG1lbnQiLCJSZWdpc3RlclNhbmRib3giLCJodG1sSW5wdXQiLCJuYW1lSW5wdXQiLCJ3SW5wdXQiLCJoSW5wdXQiLCJyZWdpc3RlclNhbmRib3giLCJkZWZhdWx0SW5qZWN0ZWRTY3JpcHQiLCJSZW1vdmUiLCJyZW1vdmVUYWciLCJUb2dnbGVTZXR0aW5nIiwidG9nZ2xlU2V0dGluZyIsInRvZ2dsZSIsImhpZGUiLCJsYWJlbEFscGhhU29ydCIsIkltcG9ydFRhZ3MiLCJzcGFjZUlkSW5wdXQiLCJzZXRUZXh0IiwiaW1wb3J0VGFncyIsIlNhdmVUb0xheWVyIiwic2F2ZVRvTGF5ZXIiLCJzZWxlY3RUYWciLCJzZWxlY3RBdHRhY2htZW50IiwidGFnT3B0aW9uTGFiZWwiLCJhdHRhY2htZW50SG92ZXJMYWJlbCIsImF0dGFjaG1lbnRPcHRpb25MYWJlbCIsImF0dGFjaG1lbnRzIiwib3BlblRhZ3MiLCJ0b2dnbGVEb2NraW5nIiwidG9nZ2xlTmF2Q29udHJvbHMiLCJ0b2dnbGVTaGFyaW5nIiwiVG91ckdldERhdGEiLCJ0b3VyU25hcHNob3RzIiwic2V0VG91clNuYXBzaG90cyIsInNka1RvdXJTbmFwc2hvdHMiLCJjdXJyZW50U3RlcCIsIkNyZWF0ZUxheWVyIiwibmFtZUlucHV0UmVmIiwiY3JlYXRlRGlzYWJsZWQiLCJzZXRDcmVhdGVEaXNhYmxlZCIsImlucHV0Q2hhbmdlZCIsImNyZWF0ZUxheWVyIiwibGF5ZXIiLCJWaWV3Iiwib25JbnB1dCIsIkFjdGl2YXRlVmlldyIsInNlbGVjdGVkVmlldyIsInJldHVyblRvU3RhcnQiLCJhY3RpdmF0ZVZpZXciLCJUb2dnbGVMYXllciIsInRvZ2dsZUxheWVyIiwiYWN0aXZhdGUiLCJzcGFuU3R5bGUiLCJMYXllckNvbnRyb2xzIiwiYWRkTGF5ZXIiLCJyZW1vdmVMYXllciIsImhhc0xheWVyIiwic2VsZWN0TGF5ZXIiLCJzZWxlY3RWaWV3Iiwidmlld3MiLCJsYXllcnMiLCJfIiwiVmlld21vZGUiLCJDb250cm9scyIsInNlbGVjdEFzc2V0IiwicGFyYW1zIiwiVVJMU2VhcmNoUGFyYW1zIiwiY29uZmlnIiwiaG9zdCIsInNka0tleSIsImJ1bmRsZVZlcnNpb24iLCJ1c2VEaXJlY3RNZXNzYWdlcyIsInNka1ZlcnNpb24iLCJ3b3Jrc2hvcCIsImNvbm5lY3Rpb25EZWxheSIsInByb3ZpZGVyIiwiY29ubmVjdFNkayIsInNob3djYXNlV2luZG93IiwiYnVuZGxlQ29ubmVjdG9yIiwiTVBfU0RLIiwiY29ubmVjdCIsImVtYmVkQ29ubmVjdCIsImJvb3RzdHJhcFZlcnNpb24iLCJyZXMiLCJzY3JpcHRMb2NhdGlvbiIsInNob3djYXNlU2RrIiwiU0RLX0lOU1RBTkNFIiwiY29udGFpbmVyIiwic3RhcnRSZWFjdCIsIlRIUkVFIiwiZXJyb3JNZXNzYWdlIiwic3RhdHVzQmFyIiwiY2xhc3NMaXN0Iiwib25Mb2FkIiwiYnVuZGxlVmVyc2lvbk9yUGF0aCIsImlzRnVsbFBhdGgiLCJzdGFydHNXaXRoIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwibG9hZEJ1bmRsZVNob3djYXNlIiwicGxheWVyUGF0aCIsImxvYWRTaG93Y2FzZSJdLCJzb3VyY2VSb290IjoiIn0=